!SESSION 2016-07-25 13:54:54.502 -----------------------------------------------
eclipse.buildId=unknown
java.version=1.5.0_11
java.vendor=Sun Microsystems Inc.
BootLoader constants: OS=win32, ARCH=x86, WS=win32, NL=zh_CN
Command-line arguments:  -os win32 -ws win32 -arch x86

!ENTRY org.eclipse.equinox.p2.repository 4 0 2016-07-25 13:54:55.844
!MESSAGE ProvisioningEventBus could not be obtained. Metadata caches may not be cleaned up properly.

!ENTRY com.windriver.ide.common.ui 1 0 2016-07-25 13:55:05.843
!MESSAGE The capability VxWorks 5.5.x Development was disabled due to errors in the underlying platform. Once the platform is registered properly to install.properties Workbench support will be reenabled automatically. 

!ENTRY org.eclipse.ui.navigator 4 0 2016-07-25 13:55:12.707
!MESSAGE No message.
!STACK 0
java.lang.NullPointerException
	at com.windriver.ide.ui.actions.WRBuildActionGroup.fillContextMenu(WRBuildActionGroup.java:480)
	at com.windriver.ide.ui.actions.WRActionProvider.fillContextMenu(WRActionProvider.java:48)
	at org.eclipse.ui.navigator.NavigatorActionService.addCommonActionProviderMenu(NavigatorActionService.java:220)
	at org.eclipse.ui.navigator.NavigatorActionService.fillContextMenu(NavigatorActionService.java:174)
	at org.eclipse.ui.navigator.CommonNavigatorManager.fillContextMenu(CommonNavigatorManager.java:277)
	at org.eclipse.ui.navigator.CommonNavigatorManager$4.menuAboutToShow(CommonNavigatorManager.java:292)
	at org.eclipse.jface.action.MenuManager.fireAboutToShow(MenuManager.java:338)
	at org.eclipse.jface.action.MenuManager.handleAboutToShow(MenuManager.java:469)
	at org.eclipse.jface.action.MenuManager.access$1(MenuManager.java:465)
	at org.eclipse.jface.action.MenuManager$2.menuShown(MenuManager.java:491)
	at org.eclipse.swt.widgets.TypedListener.handleEvent(TypedListener.java:235)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:84)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1003)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1027)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1008)
	at org.eclipse.swt.widgets.Control.WM_INITMENUPOPUP(Control.java:4270)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:3974)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:342)
	at org.eclipse.swt.widgets.Decorations.windowProc(Decorations.java:1578)
	at org.eclipse.swt.widgets.Shell.windowProc(Shell.java:2010)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:4589)
	at org.eclipse.swt.internal.win32.OS.TrackPopupMenu(Native Method)
	at org.eclipse.swt.widgets.Menu._setVisible(Menu.java:254)
	at org.eclipse.swt.widgets.Display.runPopups(Display.java:3906)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3467)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2405)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2369)
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2221)
	at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:500)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:493)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at com.windriver.ide.application.CopyOfIDEApplication.start(CopyOfIDEApplication.java:158)
	at com.windriver.ide.application.UnifiedSWTSwingApplication.access$101(UnifiedSWTSwingApplication.java:50)
	at com.windriver.ide.application.UnifiedSWTSwingApplication.start(UnifiedSWTSwingApplication.java:70)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:194)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:368)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:585)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:559)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:514)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1311)
	at org.eclipse.equinox.launcher.Main.main(Main.java:1287)
	at org.eclipse.equinox.launcher.WRWBMain.main(WRWBMain.java:51)

!ENTRY com.windriver.ide.target 1 0 2016-07-25 13:55:17.153
!MESSAGE D:\WindRiver6.8\workbench-3.2\dfw\\x86-win32\bin\dfwserver.exe  -protocol mi -io sockets -useregistry -session dfw-wb32-lihong -registryhost localhost

!ENTRY com.windriver.ide.target 1 0 2016-07-25 13:55:17.575
!MESSAGE Connected to dfwserver at 127.0.0.1, 127.0.0.1:65291, PID=2092, Session="dfw-wb32-lihong"

!ENTRY com.windriver.ide.target 1 0 2016-07-25 13:55:18.074
!MESSAGE Wind River Debug Server API Version '02.000.000' (build name 'DFW_FREEZE_0262 - 11/19/2009 09:36:10')

!ENTRY org.eclipse.cdt.core 1 0 2016-07-25 13:56:04.016
!MESSAGE Indexed 'SB8548M-s9_boot' (8 sources, 41 headers) in 3.56 sec: 1,033 declarations; 3,949 references; 3 unresolved inclusions; 10 syntax errors; 35 unresolved names (0.70%)

!ENTRY org.eclipse.help 4 0 2016-07-25 14:22:23.261
!MESSAGE Error reading context-sensitive help file /"com.windriver.ide.doc.wr_vx_simulator/contexts_wrs.xml" (skipping file)
!STACK 0
java.io.FileNotFoundException
	at org.eclipse.help.internal.context.ContextFileProvider.loadContexts(ContextFileProvider.java:235)
	at org.eclipse.help.internal.context.ContextFileProvider.getContexts(ContextFileProvider.java:181)
	at org.eclipse.help.internal.context.ContextFileProvider.getPluginContexts(ContextFileProvider.java:158)
	at org.eclipse.help.internal.context.ContextFileProvider.getContext(ContextFileProvider.java:83)
	at org.eclipse.help.internal.context.ContextManager.getContext(ContextManager.java:85)
	at org.eclipse.help.HelpSystem.getContext(HelpSystem.java:49)
	at com.windriver.ide.internal.apidoc.WRAPIHelpProvider.getFunctionInfo(WRAPIHelpProvider.java:110)
	at org.eclipse.cdt.internal.ui.text.CHelpSettings.getFunctionInfo(CHelpSettings.java:121)
	at org.eclipse.cdt.internal.ui.CHelpProviderManager.getFunctionInfo(CHelpProviderManager.java:163)
	at org.eclipse.cdt.internal.ui.text.c.hover.CDocHover.getHoverInfo(CDocHover.java:84)
	at org.eclipse.cdt.internal.ui.text.c.hover.AbstractCEditorTextHover.getHoverInfo2(AbstractCEditorTextHover.java:83)
	at org.eclipse.cdt.internal.ui.text.c.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:131)
	at org.eclipse.cdt.internal.ui.text.c.hover.CEditorTextHoverProxy.getHoverInfo2(CEditorTextHoverProxy.java:86)
	at org.eclipse.jface.text.TextViewerHoverManager$4.run(TextViewerHoverManager.java:166)

!ENTRY org.eclipse.help 4 0 2016-07-25 14:22:23.324
!MESSAGE Error reading context-sensitive help file /"com.windriver.ide.doc.wr_tipc/contexts_wrs.xml" (skipping file)
!STACK 0
java.io.FileNotFoundException
	at org.eclipse.help.internal.context.ContextFileProvider.loadContexts(ContextFileProvider.java:235)
	at org.eclipse.help.internal.context.ContextFileProvider.getContexts(ContextFileProvider.java:181)
	at org.eclipse.help.internal.context.ContextFileProvider.getPluginContexts(ContextFileProvider.java:158)
	at org.eclipse.help.internal.context.ContextFileProvider.getContext(ContextFileProvider.java:83)
	at org.eclipse.help.internal.context.ContextManager.getContext(ContextManager.java:85)
	at org.eclipse.help.HelpSystem.getContext(HelpSystem.java:49)
	at com.windriver.ide.internal.apidoc.WRAPIHelpProvider.getFunctionInfo(WRAPIHelpProvider.java:110)
	at org.eclipse.cdt.internal.ui.text.CHelpSettings.getFunctionInfo(CHelpSettings.java:121)
	at org.eclipse.cdt.internal.ui.CHelpProviderManager.getFunctionInfo(CHelpProviderManager.java:163)
	at org.eclipse.cdt.internal.ui.text.c.hover.CDocHover.getHoverInfo(CDocHover.java:84)
	at org.eclipse.cdt.internal.ui.text.c.hover.AbstractCEditorTextHover.getHoverInfo2(AbstractCEditorTextHover.java:83)
	at org.eclipse.cdt.internal.ui.text.c.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:131)
	at org.eclipse.cdt.internal.ui.text.c.hover.CEditorTextHoverProxy.getHoverInfo2(CEditorTextHoverProxy.java:86)
	at org.eclipse.jface.text.TextViewerHoverManager$4.run(TextViewerHoverManager.java:166)

!ENTRY org.eclipse.help 4 0 2016-07-25 14:22:23.324
!MESSAGE Error reading context-sensitive help file /"com.windriver.ide.doc.wr_snmp/contexts_wrs.xml" (skipping file)
!STACK 0
org.xml.sax.SAXParseException: Invalid byte 1 of 1-byte UTF-8 sequence.
	at com.sun.org.apache.xerces.internal.parsers.DOMParser.parse(DOMParser.java:264)
	at com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderImpl.parse(DocumentBuilderImpl.java:292)
	at org.eclipse.help.internal.dynamic.DocumentReader.read(DocumentReader.java:56)
	at org.eclipse.help.internal.dynamic.DocumentReader.read(DocumentReader.java:44)
	at org.eclipse.help.internal.context.ContextFileProvider.loadContexts(ContextFileProvider.java:202)
	at org.eclipse.help.internal.context.ContextFileProvider.getContexts(ContextFileProvider.java:181)
	at org.eclipse.help.internal.context.ContextFileProvider.getPluginContexts(ContextFileProvider.java:158)
	at org.eclipse.help.internal.context.ContextFileProvider.getContext(ContextFileProvider.java:83)
	at org.eclipse.help.internal.context.ContextManager.getContext(ContextManager.java:85)
	at org.eclipse.help.HelpSystem.getContext(HelpSystem.java:49)
	at com.windriver.ide.internal.apidoc.WRAPIHelpProvider.getFunctionInfo(WRAPIHelpProvider.java:110)
	at org.eclipse.cdt.internal.ui.text.CHelpSettings.getFunctionInfo(CHelpSettings.java:121)
	at org.eclipse.cdt.internal.ui.CHelpProviderManager.getFunctionInfo(CHelpProviderManager.java:163)
	at org.eclipse.cdt.internal.ui.text.c.hover.CDocHover.getHoverInfo(CDocHover.java:84)
	at org.eclipse.cdt.internal.ui.text.c.hover.AbstractCEditorTextHover.getHoverInfo2(AbstractCEditorTextHover.java:83)
	at org.eclipse.cdt.internal.ui.text.c.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:131)
	at org.eclipse.cdt.internal.ui.text.c.hover.CEditorTextHoverProxy.getHoverInfo2(CEditorTextHoverProxy.java:86)
	at org.eclipse.jface.text.TextViewerHoverManager$4.run(TextViewerHoverManager.java:166)

!ENTRY org.eclipse.help 4 0 2016-07-25 14:22:23.339
!MESSAGE Error reading context-sensitive help file /"com.windriver.ide.doc.wr_ppp/contexts_wrs.xml" (skipping file)
!STACK 0
java.io.FileNotFoundException
	at org.eclipse.help.internal.context.ContextFileProvider.loadContexts(ContextFileProvider.java:235)
	at org.eclipse.help.internal.context.ContextFileProvider.getContexts(ContextFileProvider.java:181)
	at org.eclipse.help.internal.context.ContextFileProvider.getPluginContexts(ContextFileProvider.java:158)
	at org.eclipse.help.internal.context.ContextFileProvider.getContext(ContextFileProvider.java:83)
	at org.eclipse.help.internal.context.ContextManager.getContext(ContextManager.java:85)
	at org.eclipse.help.HelpSystem.getContext(HelpSystem.java:49)
	at com.windriver.ide.internal.apidoc.WRAPIHelpProvider.getFunctionInfo(WRAPIHelpProvider.java:110)
	at org.eclipse.cdt.internal.ui.text.CHelpSettings.getFunctionInfo(CHelpSettings.java:121)
	at org.eclipse.cdt.internal.ui.CHelpProviderManager.getFunctionInfo(CHelpProviderManager.java:163)
	at org.eclipse.cdt.internal.ui.text.c.hover.CDocHover.getHoverInfo(CDocHover.java:84)
	at org.eclipse.cdt.internal.ui.text.c.hover.AbstractCEditorTextHover.getHoverInfo2(AbstractCEditorTextHover.java:83)
	at org.eclipse.cdt.internal.ui.text.c.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:131)
	at org.eclipse.cdt.internal.ui.text.c.hover.CEditorTextHoverProxy.getHoverInfo2(CEditorTextHoverProxy.java:86)
	at org.eclipse.jface.text.TextViewerHoverManager$4.run(TextViewerHoverManager.java:166)

!ENTRY org.eclipse.help 4 0 2016-07-25 14:22:23.402
!MESSAGE Error reading context-sensitive help file /"com.windriver.ide.doc.wr_mipc/contexts_wrs.xml" (skipping file)
!STACK 0
java.io.FileNotFoundException
	at org.eclipse.help.internal.context.ContextFileProvider.loadContexts(ContextFileProvider.java:235)
	at org.eclipse.help.internal.context.ContextFileProvider.getContexts(ContextFileProvider.java:181)
	at org.eclipse.help.internal.context.ContextFileProvider.getPluginContexts(ContextFileProvider.java:158)
	at org.eclipse.help.internal.context.ContextFileProvider.getContext(ContextFileProvider.java:83)
	at org.eclipse.help.internal.context.ContextManager.getContext(ContextManager.java:85)
	at org.eclipse.help.HelpSystem.getContext(HelpSystem.java:49)
	at com.windriver.ide.internal.apidoc.WRAPIHelpProvider.getFunctionInfo(WRAPIHelpProvider.java:110)
	at org.eclipse.cdt.internal.ui.text.CHelpSettings.getFunctionInfo(CHelpSettings.java:121)
	at org.eclipse.cdt.internal.ui.CHelpProviderManager.getFunctionInfo(CHelpProviderManager.java:163)
	at org.eclipse.cdt.internal.ui.text.c.hover.CDocHover.getHoverInfo(CDocHover.java:84)
	at org.eclipse.cdt.internal.ui.text.c.hover.AbstractCEditorTextHover.getHoverInfo2(AbstractCEditorTextHover.java:83)
	at org.eclipse.cdt.internal.ui.text.c.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:131)
	at org.eclipse.cdt.internal.ui.text.c.hover.CEditorTextHoverProxy.getHoverInfo2(CEditorTextHoverProxy.java:86)
	at org.eclipse.jface.text.TextViewerHoverManager$4.run(TextViewerHoverManager.java:166)

!ENTRY org.eclipse.cdt.core 1 0 2016-07-25 14:38:03.878
!MESSAGE Indexed 'sbc8548m-s9_vx' (0 sources, 13 headers) in 0.17 sec: 125 declarations; 290 references; 0 unresolved inclusions; 0 syntax errors; 0 unresolved names (0.00%)

!ENTRY org.eclipse.core.runtime 8 1 2016-07-25 14:45:46.617
!MESSAGE 

!ENTRY org.eclipse.core.runtime 8 1 2016-07-25 14:45:46.632
!MESSAGE 

!ENTRY org.eclipse.core.runtime 8 1 2016-07-25 14:45:46.648
!MESSAGE 

!ENTRY org.eclipse.core.runtime 8 1 2016-07-25 14:45:46.663
!MESSAGE 

!ENTRY org.eclipse.core.runtime 8 1 2016-07-25 14:45:46.679
!MESSAGE 

!ENTRY org.eclipse.core.runtime 8 1 2016-07-25 14:45:46.695
!MESSAGE 

!ENTRY org.eclipse.core.runtime 8 1 2016-07-25 14:45:46.726
!MESSAGE 

!ENTRY org.eclipse.core.runtime 8 1 2016-07-25 14:45:46.726
!MESSAGE 

!ENTRY org.eclipse.core.runtime 8 1 2016-07-25 14:45:46.741
!MESSAGE 

!ENTRY org.eclipse.core.runtime 8 1 2016-07-25 14:45:46.773
!MESSAGE 

!ENTRY org.eclipse.core.runtime 8 1 2016-07-25 14:45:46.773
!MESSAGE 

!ENTRY org.eclipse.core.runtime 8 1 2016-07-25 14:45:46.788
!MESSAGE 

!ENTRY org.eclipse.core.runtime 8 1 2016-07-25 14:45:46.788
!MESSAGE 

!ENTRY org.eclipse.core.runtime 8 1 2016-07-25 14:45:46.804
!MESSAGE 

!ENTRY org.eclipse.core.runtime 8 1 2016-07-25 14:45:46.819
!MESSAGE 

!ENTRY org.eclipse.core.runtime 8 1 2016-07-25 14:45:46.835
!MESSAGE 

!ENTRY org.eclipse.core.runtime 8 1 2016-07-25 14:45:46.835
!MESSAGE 

!ENTRY org.eclipse.core.runtime 8 1 2016-07-25 14:45:46.866
!MESSAGE 

!ENTRY org.eclipse.core.runtime 8 1 2016-07-25 14:45:46.866
!MESSAGE 

!ENTRY org.eclipse.core.runtime 8 1 2016-07-25 14:45:46.882
!MESSAGE 

!ENTRY org.eclipse.core.runtime 8 1 2016-07-25 14:45:46.882
!MESSAGE 

!ENTRY org.eclipse.core.runtime 8 1 2016-07-25 14:45:46.897
!MESSAGE 

!ENTRY org.eclipse.core.runtime 8 1 2016-07-25 14:45:46.897
!MESSAGE 
!SESSION 2016-07-25 16:50:58.165 -----------------------------------------------
eclipse.buildId=unknown
java.version=1.5.0_11
java.vendor=Sun Microsystems Inc.
BootLoader constants: OS=win32, ARCH=x86, WS=win32, NL=zh_CN
Command-line arguments:  -os win32 -ws win32 -arch x86

!ENTRY org.eclipse.equinox.p2.repository 4 0 2016-07-25 16:50:58.758
!MESSAGE ProvisioningEventBus could not be obtained. Metadata caches may not be cleaned up properly.

!ENTRY com.windriver.ide.common.ui 1 0 2016-07-25 16:51:06.121
!MESSAGE The capability VxWorks 5.5.x Development was disabled due to errors in the underlying platform. Once the platform is registered properly to install.properties Workbench support will be reenabled automatically. 

!ENTRY com.windriver.ide.target 1 0 2016-07-25 16:51:15.481
!MESSAGE D:\WindRiver6.8\workbench-3.2\dfw\\x86-win32\bin\dfwserver.exe  -protocol mi -io sockets -useregistry -session dfw-wb32-lihong -registryhost localhost

!ENTRY com.windriver.ide.target 1 0 2016-07-25 16:51:15.824
!MESSAGE Connected to dfwserver at 127.0.0.1, 127.0.0.1:55266, PID=5328, Session="dfw-wb32-lihong"

!ENTRY com.windriver.ide.target 1 0 2016-07-25 16:51:16.105
!MESSAGE Wind River Debug Server API Version '02.000.000' (build name 'DFW_FREEZE_0262 - 11/19/2009 09:36:10')

!ENTRY org.eclipse.help 4 0 2016-07-25 17:04:00.611
!MESSAGE Error reading context-sensitive help file /"com.windriver.ide.doc.wr_vx_simulator/contexts_wrs.xml" (skipping file)
!STACK 0
java.io.FileNotFoundException
	at org.eclipse.help.internal.context.ContextFileProvider.loadContexts(ContextFileProvider.java:235)
	at org.eclipse.help.internal.context.ContextFileProvider.getContexts(ContextFileProvider.java:181)
	at org.eclipse.help.internal.context.ContextFileProvider.getPluginContexts(ContextFileProvider.java:158)
	at org.eclipse.help.internal.context.ContextFileProvider.getContext(ContextFileProvider.java:83)
	at org.eclipse.help.internal.context.ContextManager.getContext(ContextManager.java:85)
	at org.eclipse.help.HelpSystem.getContext(HelpSystem.java:49)
	at com.windriver.ide.internal.apidoc.WRAPIHelpProvider.getFunctionInfo(WRAPIHelpProvider.java:110)
	at org.eclipse.cdt.internal.ui.text.CHelpSettings.getFunctionInfo(CHelpSettings.java:121)
	at org.eclipse.cdt.internal.ui.CHelpProviderManager.getFunctionInfo(CHelpProviderManager.java:163)
	at org.eclipse.cdt.internal.ui.text.c.hover.CDocHover.getHoverInfo(CDocHover.java:84)
	at org.eclipse.cdt.internal.ui.text.c.hover.AbstractCEditorTextHover.getHoverInfo2(AbstractCEditorTextHover.java:83)
	at org.eclipse.cdt.internal.ui.text.c.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:131)
	at org.eclipse.cdt.internal.ui.text.c.hover.CEditorTextHoverProxy.getHoverInfo2(CEditorTextHoverProxy.java:86)
	at org.eclipse.jface.text.TextViewerHoverManager$4.run(TextViewerHoverManager.java:166)

!ENTRY org.eclipse.help 4 0 2016-07-25 17:04:00.658
!MESSAGE Error reading context-sensitive help file /"com.windriver.ide.doc.wr_tipc/contexts_wrs.xml" (skipping file)
!STACK 0
java.io.FileNotFoundException
	at org.eclipse.help.internal.context.ContextFileProvider.loadContexts(ContextFileProvider.java:235)
	at org.eclipse.help.internal.context.ContextFileProvider.getContexts(ContextFileProvider.java:181)
	at org.eclipse.help.internal.context.ContextFileProvider.getPluginContexts(ContextFileProvider.java:158)
	at org.eclipse.help.internal.context.ContextFileProvider.getContext(ContextFileProvider.java:83)
	at org.eclipse.help.internal.context.ContextManager.getContext(ContextManager.java:85)
	at org.eclipse.help.HelpSystem.getContext(HelpSystem.java:49)
	at com.windriver.ide.internal.apidoc.WRAPIHelpProvider.getFunctionInfo(WRAPIHelpProvider.java:110)
	at org.eclipse.cdt.internal.ui.text.CHelpSettings.getFunctionInfo(CHelpSettings.java:121)
	at org.eclipse.cdt.internal.ui.CHelpProviderManager.getFunctionInfo(CHelpProviderManager.java:163)
	at org.eclipse.cdt.internal.ui.text.c.hover.CDocHover.getHoverInfo(CDocHover.java:84)
	at org.eclipse.cdt.internal.ui.text.c.hover.AbstractCEditorTextHover.getHoverInfo2(AbstractCEditorTextHover.java:83)
	at org.eclipse.cdt.internal.ui.text.c.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:131)
	at org.eclipse.cdt.internal.ui.text.c.hover.CEditorTextHoverProxy.getHoverInfo2(CEditorTextHoverProxy.java:86)
	at org.eclipse.jface.text.TextViewerHoverManager$4.run(TextViewerHoverManager.java:166)

!ENTRY org.eclipse.help 4 0 2016-07-25 17:04:00.673
!MESSAGE Error reading context-sensitive help file /"com.windriver.ide.doc.wr_snmp/contexts_wrs.xml" (skipping file)
!STACK 0
org.xml.sax.SAXParseException: Invalid byte 1 of 1-byte UTF-8 sequence.
	at com.sun.org.apache.xerces.internal.parsers.DOMParser.parse(DOMParser.java:264)
	at com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderImpl.parse(DocumentBuilderImpl.java:292)
	at org.eclipse.help.internal.dynamic.DocumentReader.read(DocumentReader.java:56)
	at org.eclipse.help.internal.dynamic.DocumentReader.read(DocumentReader.java:44)
	at org.eclipse.help.internal.context.ContextFileProvider.loadContexts(ContextFileProvider.java:202)
	at org.eclipse.help.internal.context.ContextFileProvider.getContexts(ContextFileProvider.java:181)
	at org.eclipse.help.internal.context.ContextFileProvider.getPluginContexts(ContextFileProvider.java:158)
	at org.eclipse.help.internal.context.ContextFileProvider.getContext(ContextFileProvider.java:83)
	at org.eclipse.help.internal.context.ContextManager.getContext(ContextManager.java:85)
	at org.eclipse.help.HelpSystem.getContext(HelpSystem.java:49)
	at com.windriver.ide.internal.apidoc.WRAPIHelpProvider.getFunctionInfo(WRAPIHelpProvider.java:110)
	at org.eclipse.cdt.internal.ui.text.CHelpSettings.getFunctionInfo(CHelpSettings.java:121)
	at org.eclipse.cdt.internal.ui.CHelpProviderManager.getFunctionInfo(CHelpProviderManager.java:163)
	at org.eclipse.cdt.internal.ui.text.c.hover.CDocHover.getHoverInfo(CDocHover.java:84)
	at org.eclipse.cdt.internal.ui.text.c.hover.AbstractCEditorTextHover.getHoverInfo2(AbstractCEditorTextHover.java:83)
	at org.eclipse.cdt.internal.ui.text.c.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:131)
	at org.eclipse.cdt.internal.ui.text.c.hover.CEditorTextHoverProxy.getHoverInfo2(CEditorTextHoverProxy.java:86)
	at org.eclipse.jface.text.TextViewerHoverManager$4.run(TextViewerHoverManager.java:166)

!ENTRY org.eclipse.help 4 0 2016-07-25 17:04:00.689
!MESSAGE Error reading context-sensitive help file /"com.windriver.ide.doc.wr_ppp/contexts_wrs.xml" (skipping file)
!STACK 0
java.io.FileNotFoundException
	at org.eclipse.help.internal.context.ContextFileProvider.loadContexts(ContextFileProvider.java:235)
	at org.eclipse.help.internal.context.ContextFileProvider.getContexts(ContextFileProvider.java:181)
	at org.eclipse.help.internal.context.ContextFileProvider.getPluginContexts(ContextFileProvider.java:158)
	at org.eclipse.help.internal.context.ContextFileProvider.getContext(ContextFileProvider.java:83)
	at org.eclipse.help.internal.context.ContextManager.getContext(ContextManager.java:85)
	at org.eclipse.help.HelpSystem.getContext(HelpSystem.java:49)
	at com.windriver.ide.internal.apidoc.WRAPIHelpProvider.getFunctionInfo(WRAPIHelpProvider.java:110)
	at org.eclipse.cdt.internal.ui.text.CHelpSettings.getFunctionInfo(CHelpSettings.java:121)
	at org.eclipse.cdt.internal.ui.CHelpProviderManager.getFunctionInfo(CHelpProviderManager.java:163)
	at org.eclipse.cdt.internal.ui.text.c.hover.CDocHover.getHoverInfo(CDocHover.java:84)
	at org.eclipse.cdt.internal.ui.text.c.hover.AbstractCEditorTextHover.getHoverInfo2(AbstractCEditorTextHover.java:83)
	at org.eclipse.cdt.internal.ui.text.c.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:131)
	at org.eclipse.cdt.internal.ui.text.c.hover.CEditorTextHoverProxy.getHoverInfo2(CEditorTextHoverProxy.java:86)
	at org.eclipse.jface.text.TextViewerHoverManager$4.run(TextViewerHoverManager.java:166)

!ENTRY org.eclipse.help 4 0 2016-07-25 17:04:00.751
!MESSAGE Error reading context-sensitive help file /"com.windriver.ide.doc.wr_mipc/contexts_wrs.xml" (skipping file)
!STACK 0
java.io.FileNotFoundException
	at org.eclipse.help.internal.context.ContextFileProvider.loadContexts(ContextFileProvider.java:235)
	at org.eclipse.help.internal.context.ContextFileProvider.getContexts(ContextFileProvider.java:181)
	at org.eclipse.help.internal.context.ContextFileProvider.getPluginContexts(ContextFileProvider.java:158)
	at org.eclipse.help.internal.context.ContextFileProvider.getContext(ContextFileProvider.java:83)
	at org.eclipse.help.internal.context.ContextManager.getContext(ContextManager.java:85)
	at org.eclipse.help.HelpSystem.getContext(HelpSystem.java:49)
	at com.windriver.ide.internal.apidoc.WRAPIHelpProvider.getFunctionInfo(WRAPIHelpProvider.java:110)
	at org.eclipse.cdt.internal.ui.text.CHelpSettings.getFunctionInfo(CHelpSettings.java:121)
	at org.eclipse.cdt.internal.ui.CHelpProviderManager.getFunctionInfo(CHelpProviderManager.java:163)
	at org.eclipse.cdt.internal.ui.text.c.hover.CDocHover.getHoverInfo(CDocHover.java:84)
	at org.eclipse.cdt.internal.ui.text.c.hover.AbstractCEditorTextHover.getHoverInfo2(AbstractCEditorTextHover.java:83)
	at org.eclipse.cdt.internal.ui.text.c.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:131)
	at org.eclipse.cdt.internal.ui.text.c.hover.CEditorTextHoverProxy.getHoverInfo2(CEditorTextHoverProxy.java:86)
	at org.eclipse.jface.text.TextViewerHoverManager$4.run(TextViewerHoverManager.java:166)

!ENTRY com.windriver.ide.osconfig.core 4 0 2016-07-25 17:10:29.777
!MESSAGE Your project has configuration errors.
In the Kernel Configuration Editor, Components tab, right-click on nodes marked with an error icon and choose 'Show Error'.
!SESSION 2016-07-26 08:47:49.316 -----------------------------------------------
eclipse.buildId=unknown
java.version=1.5.0_11
java.vendor=Sun Microsystems Inc.
BootLoader constants: OS=win32, ARCH=x86, WS=win32, NL=zh_CN
Command-line arguments:  -os win32 -ws win32 -arch x86

!ENTRY org.eclipse.equinox.p2.repository 4 0 2016-07-26 08:47:49.914
!MESSAGE ProvisioningEventBus could not be obtained. Metadata caches may not be cleaned up properly.

!ENTRY com.windriver.ide.common.ui 1 0 2016-07-26 08:47:56.166
!MESSAGE The capability VxWorks 5.5.x Development was disabled due to errors in the underlying platform. Once the platform is registered properly to install.properties Workbench support will be reenabled automatically. 

!ENTRY com.windriver.ide.target 1 0 2016-07-26 08:48:03.925
!MESSAGE D:\WindRiver6.8\workbench-3.2\dfw\\x86-win32\bin\dfwserver.exe  -protocol mi -io sockets -useregistry -session dfw-wb32-lihong -registryhost localhost

!ENTRY com.windriver.ide.target 1 0 2016-07-26 08:48:04.185
!MESSAGE Connected to dfwserver at 127.0.0.1, 127.0.0.1:58342, PID=7480, Session="dfw-wb32-lihong"

!ENTRY com.windriver.ide.target 1 0 2016-07-26 08:48:04.462
!MESSAGE Wind River Debug Server API Version '02.000.000' (build name 'DFW_FREEZE_0262 - 11/19/2009 09:36:10')

!ENTRY org.eclipse.cdt.core 1 0 2016-07-26 08:48:56.880
!MESSAGE Indexed 'SBC8548M-s9_prj' (16 sources, 48 headers) in 1.87 sec: 1,888 declarations; 7,598 references; 4 unresolved inclusions; 4 syntax errors; 43 unresolved names (0.45%)

!ENTRY com.windriver.ide.osconfig.core 4 0 2016-07-26 08:49:53.499
!MESSAGE Can not create project file D:\WindRiver6.8\sbc8548-t9\SBC8548M-S9_Prj\SBC8548M-S9_Prj.wpj
!STACK 0
com.windriver.osconfig.tcl.JTclException: Can not create project file D:\WindRiver6.8\sbc8548-t9\SBC8548M-S9_Prj\SBC8548M-S9_Prj.wpj
	at com.windriver.ide.osconfig.core.model.tcl.TclProjectManagement.createNewProject(TclProjectManagement.java:236)
	at com.windriver.ide.osconfig.ui.screen.BIPWizard$1CreateProjectRunnable.run(BIPWizard.java:446)
	at org.eclipse.jface.operation.ModalContext$ModalContextThread.run(ModalContext.java:121)

!ENTRY com.windriver.ide.osconfig.core 4 0 2016-07-26 08:49:53.500
!MESSAGE Output of D:\WindRiver6.8\vxworks-6.8\host\x86-win32\bin\vxprj.bat create D:/WindRiver6.8/sbc8548-t9/SB8548M-s9_boot/wrSbc8548 e500v2diab D:/WindRiver6.8/sbc8548-t9/SBC8548M-S9_Prj/SBC8548M-S9_Prj.wpj:

Creating Project ...
{parsing the BSP Makefile...}
{extract user defined rules from BSP Makefile...}
{creating the project file...}
{creating a default build spec for PPC32 e500v2diab ...}
{creating a component configuration...}
"hwconf.c", line 142: error (dcc:1573): our tsec network driver must use TSEC_MDIO
D:\WindRiver6.8\utilities-1.0\x86-win32\bin\make.exe: *** [headerMacros] Error 2
Project creation failed : rm D:/WindRiver6.8/sbc8548-t9/SBC8548M-S9_Prj/ipcom_ipdomain
"hwconf.c", line 142: error (dcc:1573): our tsec network driver must use TSEC_MDIO
D:\WindRiver6.8\utilities-1.0\x86-win32\bin\make.exe: *** [headerMacros] Error 2
"make headerMacros BSP2PRJ=TRUE TOOL_OPTIONS_FILES_DIR=D:/WindRiver6.8/sbc8548-t9/SBC8548M-S9_Prj TOOL=e500v2diab VSB_DIR=D:/WindRiver6.8/vxworks-6.8/target/lib" failed

!STACK 0
com.windriver.osconfig.tcl.JTclException: Can not create project file D:\WindRiver6.8\sbc8548-t9\SBC8548M-S9_Prj\SBC8548M-S9_Prj.wpj
	at com.windriver.ide.osconfig.core.model.tcl.TclProjectManagement.createNewProject(TclProjectManagement.java:236)
	at com.windriver.ide.osconfig.ui.screen.BIPWizard$1CreateProjectRunnable.run(BIPWizard.java:446)
	at org.eclipse.jface.operation.ModalContext$ModalContextThread.run(ModalContext.java:121)

!ENTRY org.eclipse.cdt.core 1 0 2016-07-26 08:49:53.547
!MESSAGE Indexed 'SBC8548M-S9_Prj' (0 sources, 13 headers) in 0.09 sec: 125 declarations; 290 references; 0 unresolved inclusions; 0 syntax errors; 0 unresolved names (0.00%)

!ENTRY com.windriver.ide.osconfig.core 4 0 2016-07-26 08:50:05.171
!MESSAGE Can not create project file D:\WindRiver6.8\sbc8548-t9\SBC8548M-S9_Prj\SBC8548M-S9_Prj.wpj
!STACK 0
com.windriver.osconfig.tcl.JTclException: Can not create project file D:\WindRiver6.8\sbc8548-t9\SBC8548M-S9_Prj\SBC8548M-S9_Prj.wpj
	at com.windriver.ide.osconfig.core.model.tcl.TclProjectManagement.createNewProject(TclProjectManagement.java:236)
	at com.windriver.ide.osconfig.ui.screen.BIPWizard$1CreateProjectRunnable.run(BIPWizard.java:446)
	at org.eclipse.jface.operation.ModalContext$ModalContextThread.run(ModalContext.java:121)

!ENTRY com.windriver.ide.osconfig.core 4 0 2016-07-26 08:50:05.171
!MESSAGE Output of D:\WindRiver6.8\vxworks-6.8\host\x86-win32\bin\vxprj.bat create D:/WindRiver6.8/sbc8548-t9/SB8548M-s9_boot/wrSbc8548 e500v2diab D:/WindRiver6.8/sbc8548-t9/SBC8548M-S9_Prj/SBC8548M-S9_Prj.wpj:

Creating Project ...
{parsing the BSP Makefile...}
{extract user defined rules from BSP Makefile...}
{creating the project file...}
{creating a default build spec for PPC32 e500v2diab ...}
{creating a component configuration...}
"hwconf.c", line 142: error (dcc:1573): our tsec network driver must use TSEC_MDIO
D:\WindRiver6.8\utilities-1.0\x86-win32\bin\make.exe: *** [headerMacros] Error 2
Project creation failed : rm D:/WindRiver6.8/sbc8548-t9/SBC8548M-S9_Prj/ipcom_ipdomain
"hwconf.c", line 142: error (dcc:1573): our tsec network driver must use TSEC_MDIO
D:\WindRiver6.8\utilities-1.0\x86-win32\bin\make.exe: *** [headerMacros] Error 2
"make headerMacros BSP2PRJ=TRUE TOOL_OPTIONS_FILES_DIR=D:/WindRiver6.8/sbc8548-t9/SBC8548M-S9_Prj TOOL=e500v2diab VSB_DIR=D:/WindRiver6.8/vxworks-6.8/target/lib" failed

!STACK 0
com.windriver.osconfig.tcl.JTclException: Can not create project file D:\WindRiver6.8\sbc8548-t9\SBC8548M-S9_Prj\SBC8548M-S9_Prj.wpj
	at com.windriver.ide.osconfig.core.model.tcl.TclProjectManagement.createNewProject(TclProjectManagement.java:236)
	at com.windriver.ide.osconfig.ui.screen.BIPWizard$1CreateProjectRunnable.run(BIPWizard.java:446)
	at org.eclipse.jface.operation.ModalContext$ModalContextThread.run(ModalContext.java:121)

!ENTRY org.eclipse.cdt.core 1 0 2016-07-26 08:50:05.374
!MESSAGE Indexed 'SBC8548M-S9_Prj' (0 sources, 13 headers) in 0.07 sec: 125 declarations; 290 references; 0 unresolved inclusions; 0 syntax errors; 0 unresolved names (0.00%)

!ENTRY org.eclipse.cdt.core 1 0 2016-07-26 08:50:17.050
!MESSAGE Indexed 'SBC8548M-S9_Prj' (0 sources, 13 headers) in 0.10 sec: 125 declarations; 290 references; 0 unresolved inclusions; 0 syntax errors; 0 unresolved names (0.00%)

!ENTRY com.windriver.ide.osconfig.core 4 0 2016-07-26 08:50:17.508
!MESSAGE Can not create project file D:\WindRiver6.8\sbc8548-t9\SBC8548M-S9_Prj\SBC8548M-S9_Prj.wpj
!STACK 0
com.windriver.osconfig.tcl.JTclException: Can not create project file D:\WindRiver6.8\sbc8548-t9\SBC8548M-S9_Prj\SBC8548M-S9_Prj.wpj
	at com.windriver.ide.osconfig.core.model.tcl.TclProjectManagement.createNewProject(TclProjectManagement.java:236)
	at com.windriver.ide.osconfig.ui.screen.BIPWizard$1CreateProjectRunnable.run(BIPWizard.java:446)
	at org.eclipse.jface.operation.ModalContext$ModalContextThread.run(ModalContext.java:121)

!ENTRY com.windriver.ide.osconfig.core 4 0 2016-07-26 08:50:17.509
!MESSAGE Output of D:\WindRiver6.8\vxworks-6.8\host\x86-win32\bin\vxprj.bat create D:/WindRiver6.8/sbc8548-t9/SB8548M-s9_boot/wrSbc8548 e500v2gnu D:/WindRiver6.8/sbc8548-t9/SBC8548M-S9_Prj/SBC8548M-S9_Prj.wpj:

Creating Project ...
{parsing the BSP Makefile...}
{extract user defined rules from BSP Makefile...}
{creating the project file...}
{creating a default build spec for PPC32 e500v2gnu ...}
{creating a component configuration...}
In file included from sysLib.c:477:
hwconf.c:142:2: error: #error our tsec network driver must use TSEC_MDIO
D:\WindRiver6.8\utilities-1.0\x86-win32\bin\make.exe: *** [headerMacros] Error 1
Project creation failed : #define EPIC_INT_ACK0_REG (EPIC_CCSROFF + 0x200a0)
#define M_objLib (61 << 16)
#define RIO_FEATURES_SWITCH 0x0008
#define S_objLib_OBJ_UNAVAILABLE (M_objLib _WRS_BIT_OR 2)
#define EPIC_IN_INT47_VEC_REG (EPIC_CCSROFF + 0x107e0)
#define __DBL_MIN_EXP__ (-1021)
#define M85XXRIO_ODRETCR(base) (CAST(VUINT32 *)(((char*)base) + 0x1342C))
#define EMULTIHOP 86
#define EVENT_INT_EXIT (MIN_INT_ID - 1)
#define S_memLib_INVALID_NBYTES (M_memLib | 2)
#define INCLUDE_HOOKS 
#define WIND_TCB_CTR (WIND_TCB_REGS + REG_SET_CTR)
#define MEM_BLOCK_ERROR_EDR_FATAL_FLAG 0x1000
#define EVENT_IOCLOSE CLASS3_EVENT(52)
#define TASK_KERNEL_EXEC_STACK_UNDERFLOW_SIZE 4096
#define EPIC_EX_INT2_DES_REG (EPIC_CCSROFF + 0x10050)
#define _ARCH_SUPPORTS_PROTECT_INTERRUPT_STACK 
#define CLASS_LIST_ADD(list,node) dllAdd (list, node)
#define VX_SMP_INTLOCKED 0x0001
#define M85XX_RAPIDIO_ROWS1R18n(base,n) (CAST(VUINT32 *)(((char*)base) + 0x10C14 + ((n)*0x20)))
#define INST_STWU_SP 0x94210000
#define VME_AM_CSR 0x2f
#define VXB_LOCK_DECL(x) struct vxbLock x = { FALSE, NULL, 0 }
#define MSB(x) (((x) >> 8) & 0xff)
#define VXB_INTR_TRIG_RISING_EDGE (VXB_INTR_TRIG_POS | VXB_INTR_TRIG_EDGE)
#define VXEV_RESERVED 0xff000000
#define _DBCR0_ICMP_U 0x0800
#define EVENT_SEMDELETE CLASS3_EVENT(10)
#define M_hashLib (58 << 16)
#define MSW(x) (((x) >> 16) & 0xffff)
#define vxAtomicClear_inline vxAtomicClear
#define TRG_CLASS_2_ON 0x10000010
#define I2C_CYCLE_STOP(x) i2cCycleMpc85xxStop(x)
#define TLB1CFG 689
#define _WRS_CONFIG_TASK_CREATE_HOOKS 1
#define _WRS_CONFIG_USRSOURCE 1
#define M_netBufLib (115 << 16)
#define WR_ENET1 0xA0
#define M85XXRIO_ODPR(base) (CAST(VUINT32 *)(((char*)base) + 0x11018))
#define EPIC_IN_INT47_DES_REG (EPIC_CCSROFF + 0x107f0)
#define _VX_ARMARCH6_T 1124
#define WR_ENET2 0x1E
#define SIO_ERROR_UFLOW 3
#define _EXC_OFF_DATA 0x00300
#define INCLUDE_ANSI_MATH 
#define PHY_100BASE_TX_FDX 0x03
#define VXB_BUSID_LOCAL 1
#define INCLUDE_WDB_EVENTS 
#define EVENT_MSGSREPLY CLASS3_EVENT(40)
#define _T_WCHAR_ 
#define IPCOM_FILE_IPCOM 2
#define EPIC_MIDR_P1_INT EPIC_BIT(1)
#define INCLUDE_FS_MONITOR 
#define INCLUDE_ANSI_ASSERT 
#define _PPC_ESF_DSISR (_PPC_ESF_DAR + _PPC_REG_SIZE)
#define S_taskLib_ILLEGAL_STACK_INFO (M_taskLib | 113)
#define EPIC_IN_VEC_REG_INTERVAL 0x20
#define FIOUPDATE 65
#define F_CNVT 12
#define VX_COPROC6_TASK 0x20000000
#define WIND_TCB_P2 WIND_TCB_R5
#define EPIC_IN_INT28_VEC_REG (EPIC_CCSROFF + 0x10580)
#define _ARCH_FLT_MANT_DIG 24
#define M_qPriMaskLib (130 << 16)
#define COLDFIRE _VX_COLDFIRE
#define EPIC_TM_B2_VEC_REG (EPIC_CCSROFF + 0x021a0)
#define _WRS_CONFIG_COMPONENT_VXTESTV2 1
#define CORE_DUMP_MAX_HOOKS 10
#define _IFORM_SC_1 2
#define CSRR0 58
#define CSRR1 59
#define ALIGN_STACK _VX_ALIGN_STACK
#define _BSD_SIZE_T_DEFINED_ 
#define _DATA_CACHE 1
#define MMU_ATTR_SUP_DATA (MMU_ATTR_SUP_RW)
#define INCLUDE_IPAIP 
#define PCI_ERROR_ADRS_CAPTURE_REG 0x8e10
#define S_iosLib_INVALID_FILE_DESCRIPTOR EBADF
#define EPIC_RES35_INT_NUM 35
#define __INCb_ino_th 
#define PVR_VALUE 0x80210030
#define __CHAR_BIT__ 8
#define _VOP(opcd,xo) ((opcd << 26) + xo)
#define SYM_MASK_ALL 0xff
#define Q_PRI_LIST qPriListClassId
#define INST_STW_SP 0x90010000
#define MMU_STATE_MASK_VALID 0x80000000
#define M85XXRIO_IDQEPAR(base) (CAST(VUINT32 *)(((char*)base) + 0x13474 ))
#define _POSIX_TIMER_MAX 32
#define _VX_ALIGN_MEMORY _ARCH_ALIGN_MEMORY
#define METHOD_DECL(NAME) IMPORT char NAME ##_desc[];
#define SHRT_MAX 32767
#define MIN_INT_ID 102
#define VXB_REG_IO 0x00000001
#define _VX_ARM810 123
#define VM_STATE_WBACK MMU_ATTR_CACHE_COPYBACK
#define ROOT_STACK_SIZE (24000)
#define EPIC_IN_INT28_DES_REG (EPIC_CCSROFF + 0x10590)
#define TOOL_HEADER(file) TOOL_HDR(_VX_TOOL_FAMILY,file)
#define _FOPEN (-1)
#define VXB_ACCESS_REG_READ8 0x00000002
#define _WRS_ALIGNOF(x) __alignof__(x)
#define EACCES 13
#define VME_AM_EXT_SUP_PGM 0x0e
#define EVENT_RTPSIGWRAPPER CLASS3_EVENT(92)
#define MII_MF_OP_LEN 0x2
#define MII_SR_EXT_STS 0x0100
#define NONE (-1)
#define EPIC_L2CACHE_INT_VEC (EPIC_L2CACHE_INT_NUM + EPIC_VEC_IN_IRQ0)
#define VM_CTX_MASK_DELETE 0x2
#define EVT_CTX_NODISP(TASKID,PRI,PRI_NORMAL) do { if (ACTION_IS_SET) { EVENT_WIND_EXIT_NODISPATCH_T evt_ctx_nodisp; evt_ctx_nodisp.taskId = TASKID; eventPointSwHandle((PRI_NORMAL > PRI ? EVENT_WIND_EXIT_NODISPATCH_PI : EVENT_WIND_EXIT_NODISPATCH), &evt_ctx_nodisp, sizeof evt_ctx_nodisp); } } while ((0))
#define S_objLib_OBJ_INVALID_ARGUMENT (M_objLib _WRS_BIT_OR 17)
#define _PPC_MMUCSR0_IL1MMU_FI 0x00000010
#define _PPC_MSR_WE 0x00040000
#define _STACK_ALIGN_SIZE _CPU_STACK_ALIGN_SIZE
#define EDESTADDRREQ 40
#define _PPC_MAS0_TLBSEL_MASK 0x30000000
#define M85XXRIO_OMR(base) (CAST(VUINT32 *)(((char*)base) + 0x11000))
#define INCLUDE_IO_POSIX 
#define EVENT_SIGNAL CLASS3_EVENT(24)
#define __sputc(c,p) ((HANDLE_VERIFY(p, handleTypeFile) != OK) ? (EOF) : (--(p)->_w < 0 ? (p)->_w >= (p)->_lbfsize ? (*(p)->_p = (c)), *(p)->_p != '\n' ? (int)*(p)->_p++ : __swbuf('\n', p) : __swbuf((int)(c), p) : (*(p)->_p = (c), (int)*(p)->_p++)))
#define MMU_PAGE_MAP (*(mmuLibFuncs.mmuPageMap))
#define PARENB 0x40
#define FIOCOMMITPERIODSETFS 69
#define EVT_OBJ_SM_MSGQ(EVTID,ARG1,ARG2,ARG3,ARG4,ARG5,NPARAMS) do { if ( ACTION_IS_SET ) { EVT_SM_MSGQ_T evt_sm_msgq; evt_sm_msgq.args [0] = (int)ARG1; evt_sm_msgq.args [1] = (int)ARG2; evt_sm_msgq.args [2] = (int)ARG3; evt_sm_msgq.args [3] = (int)ARG4; evt_sm_msgq.args [4] = (int)ARG5; evt_sm_msgq.nParams = NPARAMS; eventPointSwHandle(EVTID, &evt_sm_msgq, sizeof evt_sm_msgq); } } while ((0))
#define KERNEL_LOCK_OBJ_UNLOCK(classId,lockLevel) do { KERNEL_LOCK(); OBJ_UNLOCK(classId,lockLevel); } while ((0))
#define INCLUDE_GENERICPHY 
#define KERNEL_LOCK_OWNED_BY_ME() (kernelLockOwnedByMe())
#define L2SRAM_ADDR 0x7FF80000
#define S_objLib_OBJ_NOT_FOUND (M_objLib _WRS_BIT_OR 16)
#define MMU_ATTR_MSK_INDEX_SHIFT 5
#define MIPS _VX_MIPS
#define stderr (*__stderr())
#define _PPC_ESF_T10 _PPC_ESF_R24
#define _PPC_ESF_T11 _PPC_ESF_R25
#define _PPC_ESF_T12 _PPC_ESF_R26
#define _PPC_ESF_T13 _PPC_ESF_R27
#define _PPC_ESF_T14 _PPC_ESF_R28
#define _PPC_ESF_T15 _PPC_ESF_R29
#define _PPC_ESF_T16 _PPC_ESF_R30
#define _PPC_ESF_T17 _PPC_ESF_R31
#define STD_IN 0
#define _VX_ARM710A 121
#define SM_OBJ_TASK_PRIORITY 40
#define PCISTAT_ADRS (PCI_CFG_BASE + 0x06)
#define EPIC_MAX_GT_A_IRQS 4
#define M85XX_L2CTL_L2INTDIS_MSK 0x00080000
#define va_start(v,l) __builtin_va_start(v,l)
#define S_vxdbgLib_INVALID_PARAMS VXDBG_ERROR_TO_ERRNO(VXDBG_ERR_INVALID_PARAMS)
#define FIOPATHCONF 61
#define EPIC_IIDR_EX_PIN EPIC_BIT(31)
#define MMU_PAGE_SIZE_GET (*(mmuLibFuncs.mmuPageSizeGet))
#define EVENT_EDR_ERROR_INJECT CLASS3_EVENT(82)
#define EVT_TIMER_ROLLOVER(evtId) EVT_CTX_0(evtId)
#define ppcIntCtlr0Num NELEMENTS(ppcIntCtlr0Resources)
#define INST_MTSPR_MASK 0xfc1fffff
#define STACK_NAME STACK_NAME_V4_V6
#define EMLINK 31
#define VM_CONTEXT_BUFFER_WRITE(context,fromAddr,toAddr,nbBytes) ((vmLibInfo.pVmBufferWriteRtn == NULL) ? (memcpy((void *)toAddr, (void *)fromAddr, nbBytes), OK) : ((*vmLibInfo.pVmBufferWriteRtn) (context, (VIRT_ADDR) fromAddr, (VIRT_ADDR) toAddr, nbBytes)))
#define TRG_ANY_EVENT_INDEX 5
#define FIOWHERE 8
#define LAWAR_SIZE_8KB 0x0000000C
#define EVENT_IOOPEN CLASS3_EVENT(48)
#define FIOUNSELECT 29
#define EPIC_MSG_INT1_VEC_REG (EPIC_CCSROFF + 0x11620)
#define _WRS_SUP_STACK_RELOC(p) p
#define INCsysMotI2ch 
#define EVENT_SEMMGIVEFORCE CLASS3_EVENT(14)
#define Q_CALIBRATE(pQHead,keyDelta) (*(((Q_HEAD *)(pQHead))->pQClass->calibrateRtn)) (((Q_HEAD *)(pQHead)), ((int)(keyDelta)))
#define TLB_LOCK_BIT 26
#define MCORE300 _VX_MCORE300
#define M85XX_OR2(base) (CAST(VUINT32 *)((base) + 0x5014))
#define _FCREAT 0x0200
#define M85XX_OR3(base) (CAST(VUINT32 *)((base) + 0x501c))
#define __DBL_DENORM_MIN__ 4.9406564584124654e-324
#define MMU_STATE_SUP_RWX (_MMU_SR|_MMU_SW|_MMU_SX)
#define ALIGNED(x,align) (((int)(x) & (align - 1)) == 0)
#define M85XX_OR5(base) (CAST(VUINT32 *)((base) + 0x502C))
#define _WRS_CHECK_MACHINE_TYPE if (pHdr->e_machine != EM_ARCH_MACHINE && pHdr->e_machine != EM_ARCH_MACH_ALT) return (ERROR)
#define _PPC_TCR_FIE_U 0x0080
#define _PARM_EXIT_SUCCESS 0
#define EPIC_SMSG_INT2_VEC_REG (EPIC_CCSROFF + 0x11c40)
#define M_pgPoolVirtLib (183 << 16)
#define M85XX_OR6(base) (CAST(VUINT32 *)((base) + 0x5034))
#define REG_SET_GRBASE 0x00
#define LAWAR_SIZE_8MB 0x00000016
#define F_RDLCK 1
#define S_vmLib_ADDR_IN_GLOBAL_SPACE (M_vmLib | 4)
#define _ARCH_FLT_EPSILON 1.19209290e-07F
#define M_qPriHeapLib (62 << 16)
#define EPIC_IPI_1_VEC_REG (EPIC_CCSROFF + 0x010b0)
#define INCLUDE_IO_BASIC 
#define _PPC_ESF_RES_OFF_H (_PPC_ESF_VEC_OFF + 0)
#define SHRT_MIN (-32767-1)
#define ALIGN_MEMORY _VX_ALIGN_MEMORY
#define M85XXRIO_ROWAR_WRTYPE_SWRITE 0x3
#define __sfeof(p) ((HANDLE_VERIFY(p, handleTypeFile) != OK) ? (FALSE) : (((p)->_flags & __SEOF) != 0))
#define MII_SR_TX_HALF_DPX 0x2000
#define EPIC_VENDOR_ID_REG (EPIC_CCSROFF + 0x01080)
#define EPIC_MSG_INT1_DES_REG (EPIC_CCSROFF + 0x11630)
#define _VSB_CONFIG_FILE "D:/WindRiver6.8/vxworks-6.8/target/lib/h/config/vsbConfig.h"
#define SIO_HW_OPTS_SET 0x1005
#define MMU_ATTR_SUP_TEXT_W (MMU_ATTR_SUP_RWX)
#define INTERRUPT_STACK_OVERFLOW_SIZE 4096
#define EPIC_IN_INT20_VEC_REG (EPIC_CCSROFF + 0x10480)
#define EXC_MSG_OFFSET 0x4300
#define SYM_COMM 0x20
#define INCLUDE_NETMASK_GET 
#define S_objLib_OBJ_DESTROY_ERROR (M_objLib _WRS_BIT_OR 14)
#define _VOIDFUNCPTR_DEFINED 
#define INCLUDE_ANSI_LOCALE 
#define SEM_NO_ID_VALIDATE 0x40
#define M85XXRIO_ROWAR_WRTYPE_NWRITE 0x4
#define OPT_CRMOD 0x02
#define EPIC_SMSG_INT2_DES_REG (EPIC_CCSROFF + 0x11c50)
#define MII_MF_OP_WR 0x1
#define OPT_7_BIT 0x08
#define SYSFLG_NO_SYS_CONTROLLER 0x01
#define VXB_INST_CONNECT_DONE 0x00000004
#define _FREAD 0x0001
#define CACHE_CMD_UNLOCK_ALL 0x0a000000
#define __signed signed
#define _FEXLOCK 0x0100
#define OPT_REG_WRITE16 0x06
#define INCLUDE_DEVICE_MANAGER 
#define _PPC_ESF_CR _PPC_ESF_R(GREG_NUM + 4)
#define AM29200 _VX_AM29200
#define EPIC_IN_INT20_DES_REG (EPIC_CCSROFF + 0x10490)
#define _MMU_TLB_PERM_UR 0x00010000
#define _FNDELAY 0x0004
#define VME_BUS BUS_TYPE_VME
#define VXB_ACCESS_CFG_WRITE 0x00000013
#define FD_ISSET(n,p) _VX_FD_ISSET (n, p)
#define IPCOM_USE_FILE IPCOM_FILE_NATIVE
#define S_objLib_OBJ_ID_ERROR (M_objLib _WRS_BIT_OR 1)
#define EPIC_PRIORITY_MIN 0
#define EVENT_WINDDELETE CLASS2_EVENT(1)
#define S_objLib_OBJ_RENAME_NOT_ALLOWED (M_objLib _WRS_BIT_OR 13)
#define OPT_REG_WRITE32 0x07
#define _EXC_INFO_XER 0x010
#define _PPC_TSR_ENW_U 0x8000
#define LAWAR_TGTIF_PCIEX 0x00200000
#define EPIPE 32
#define FRV _VX_FRV
#define _PPC_SPEFSCR_FDBZE 0x00000010
#define S_iosLib_DRIVER_GLUT ENOMEM
#define __DBL_MIN_10_EXP__ (-307)
#define RIO_DIRECTION_INBOUND 1
#define SM_OBJ_TASK_OPTIONS 0
#define M85XXRIO_PRTOCCSR(base) (CAST(VUINT32 *)(((char*)base) + 0x00124 ))
#define ENOTTY 25
#define EPIC_IIVPR_POLARITY(p) ((p) << 23)
#define _VX_MCF5400 162
#define _IFORM_400_2 58
#define PCI2_INBOUND_ATTR_REG1(base) CVPUINT32(base, 0x9DF0)
#define EPIC_MIDR_P0_INT EPIC_BIT(0)
#define L2SRAM_WINDOW_SIZE 0x80000
#define S_taskLib_TASK_VAR_NOT_FOUND (M_taskLib | 107)
#define _FASYNC 0x0040
#define OFFSET(structure,member) ((int) &(((structure *) 0) -> member))
#define L_cuserid _PARM_L_cuserid
#define DOSFS_DEFAULT_MAX_FILES 20
#define Q_RESORT(pQHead,pQNode,newKey) (*(((Q_HEAD *)(pQHead))->pQClass->resortRtn)) (((Q_HEAD *)(pQHead)), ((Q_NODE *)(pQNode)), ((ULONG)(newKey)))
#define _PPC_ESR_PTR_U 0x0200
#define EVENT_IOREAD CLASS3_EVENT(49)
#define VXB_INTR_TRIG_EDGE 0x10
#define atomic32Set_inline atomic32Set
#define VXBAF_CPU_PIPE_FLUSH 0x00000010
#define _IFLAG_603_SPEC 0x0020
#define _VX_FD_CLR(n,p) ((p)->fds_bits[(n)/_VX_NFDBITS] &= ~(1 << ((n) % _VX_NFDBITS)))
#define MCF5200 _VX_MCF5200
#define __GNUC_PATCHLEVEL__ 2
#define OPT_REG_WRITE64 0x08
#define S_spinLockLib_INVALID_OPERATION (M_spinLockLib | 2)
#define M_netDrv (41 << 16)
#define _VX_SH7600 132
#define M_devCfgLib (129 << 16)
#define M_loadFileLib (193 << 16)
#define _VX_AM29XXX 50
#define _ARCH_DBL_MAX_10_EXP 308
#define MII_100MBS 100000000
#define M_dhcpcLib (106 << 16)
#define __INCb_struct_timespech 
#define FLASH_SECTOR_MASK 0xfffe0000
#define M85XXRIO_ROWTAR_OFFSET(n) (0x10C00 + ((n)*0x20))
#define EVENT_MEMPARTCREATE CLASS3_EVENT(32)
#define _LIMITS_H___ 
#define DS_1D_5 7
#define DS_1D_8 3
#define MMU_STATE_EXECUTE 0x00003000
#define _WRS_CONFIG_COMPONENT_USR_APPS 1
#define _EXC_OFF_RES0 0x00000
#define _EXC_OFF_RES1 0x00a00
#define MEM_ALLOC_ERROR_EDR_FATAL_FLAG 0x400
#define _EXC_OFF_RES3 0x00e00
#define PENTIUM2 _VX_PENTIUM2
#define PENTIUM3 _VX_PENTIUM3
#define PENTIUM4 _VX_PENTIUM4
#define _DEFINED_nlink_t 
#define _WRS_SDA_DATA __attribute__ ((__section__ (".sdata")))
#define _WCHAR_T_DEFINED 
#define EPIC_MIVPR_VECTOR_MSK (0xffff)
#define O_ACCMODE (O_RDONLY|O_WRONLY|O_RDWR)
#define MMU_STATE_WRITABLE 0x00000c00
#define SPIN_LOCK_ISR_INIT(x,y) (spinLockIsrInit(x, y))
#define PCI_ERROR_GASKET_TIMER_REG 0x8e20
#define INCLUDE_DOSFS 
#define TASK_UNSAFE() ( taskUnsafe () )
#define M_rpmLib (159 << 16)
#define PCI_ATTR_WS_128K 0x00000010
#define M_intLib (67 << 16)
#define FS_NAMES_ATA_SECONDARY_SLAVE ""
#define EPIC_DMA2_INT_VEC (EPIC_DMA2_INT_NUM + EPIC_VEC_IN_IRQ0)
#define _PPC_SPEFSCR_FDBZH 0x04000000
#define VXB_PARAM_FUNCPTR 0x0005
#define BUS 0
#define VX_USR_TASK_OPTIONS (VX_USR_TASK_OPTIONS_BASE | VX_COPROC1_TASK | VX_COPROC2_TASK | VX_COPROC3_TASK | VX_COPROC4_TASK | VX_COPROC5_TASK | VX_COPROC6_TASK | VX_COPROC7_TASK | VX_COPROC8_TASK)
#define _PPC_SPEFSCR_FDBZS 0x00080000
#define FREE_RAM_ADRS (end)
#define S_semLib_INVALID_INITIAL_COUNT (M_semLib | 105)
#define M85XX_L2ERRINJHI(x) (CAST(VUINT32 *)((x + 0x20E00)))
#define M_rtpLib (178 << 16)
#define CONTROL_EVENT(id) (MIN_CONTROL_ID + id)
#define OPT_TERMINAL (OPT_ECHO | OPT_CRMOD | OPT_TANDEM | OPT_MON_TRAP | OPT_7_BIT | OPT_ABORT | OPT_LINE)
#define MMU_STATE_GET (*(mmuLibFuncs.mmuStateGet))
#define _PPC_ESF_LR _PPC_ESF_R(GREG_NUM + 1)
#define M_coreDumpLib (197 << 16)
#define VM_CTX_MASK_L2_FREE 0x4
#define M_errno (0 << 16)
#define __vxworks 1
#define M85XXRIO_IFQEPAR(base) (CAST(VUINT32 *)(((char*)base) + 0x11074))
#define M_xcomLib (164 << 16)
#define VM_PAGE_UNMAP(context,virtAddr,len) ((vmLibInfo.pVmPageUnMapRtn == NULL) ? (ERROR) : ((*vmLibInfo.pVmPageUnMapRtn) (context, virtAddr, len)))
#define VXB_HANDLE_OP_READ 0x00
#define LAWAR_SIZE_1GB 0x0000001D
#define NUM_PCI1_SLOTS 0x1
#define M_hsmsLib (157 << 16)
#define MSG_PRI_DONT_CARE MSG_PRI_URGENT
#define DDR_SDRAM_MODE_CFG_2 0x11c
#define _DEFINED_blksize_t 
#define PCIEX_INBOUND_BASE_ADRS_REG3(base) CVPUINT32(base, 0xaDA8)
#define EVENT_WIND_EXIT_NODISPATCH_PI CLASS1_EVENT(5)
#define _IFLAG_SPEC (_IFLAG_4XX_SPEC | _IFLAG_6XX_SPEC | _IFLAG_AV_SPEC | _IFLAG_E500_SPEC | _IFLAG_FP_SPEC)
#define VM_CONTEXT_UNION(context1,context2) ((vmLibInfo.pVmCtxUnionRtn == NULL) ? (ERROR) : ((*vmLibInfo.pVmCtxUnionRtn) (context1, context2)))
#define MMU_ATTR_CACHE_WRITETHRU 0x00000180
#define I960 _VX_I960
#define REG_SET_PG_TBL_PTR (REG_SET_XER + 4)
#define _VX_FD_MASK_DEFINED 
#define IPCOM_USE_RAM_DISK 
#define EPIC_RES35_INT_VEC (EPIC_RES35_INT_NUM + EPIC_VEC_IN_IRQ0)
#define _WRS_CONFIG_FORMATTED_OUT 1
#define _VX_FD_ISSET(n,p) ((p)->fds_bits[(n)/_VX_NFDBITS] & (1 << ((n) % _VX_NFDBITS)))
#define PGCCSR_MASTER 0x40000000
#define _WRS_CONFIG_COMPONENT_VXCOREIP 1
#define WIND_CLASS_RENAME_NOT_ALLOWED 0x02
#define AIM_MMU_INIT_RT_INCR 0x10
#define EPIC_DDR_INT_NUM 2
#define MII_CR_LOOPBACK 0x4000
#define DDR_ECC_ERR_INJECT 0xe08
#define MAX_RESERVE_ID 39999
#define INCLUDE_VX_TRADITIONAL_SCHEDULER 
#define STAT_TBL_HASH_SIZE_LOG2 6
#define OBJ_INSTRUMENTATION_DISABLE(objId) ( ((OBJ_CORE *)(objId))->handle.attributes &= ~WIND_OBJ_INSTRUMENTED )
#define EPIC_IN_INT3_VEC_REG (EPIC_CCSROFF + 0x10260)
#define S_vxdbgLib_INVALID_ALIGNMENT VXDBG_ERROR_TO_ERRNO(VXDBG_ERR_INVALID_ALIGNMENT)
#define WV_CLASS_3_ON 0x10000007
#define ARMARCH6_T _VX_ARMARCH6_T
#define INUM_TO_IVEC(intNum) ((VOIDFUNCPTR *) (intNum))
#define MII_MF_ST_LEN 0x2
#define _WRS_BLIB_ALIGNMENT 3
#define _PPC_ESF_P0 _PPC_ESF_R3
#define _PPC_ESF_P1 _PPC_ESF_R4
#define _PPC_ESF_P2 _PPC_ESF_R5
#define _PPC_ESF_P3 _PPC_ESF_R6
#define _PPC_ESF_P4 _PPC_ESF_R7
#define _PPC_ESF_P5 _PPC_ESF_R8
#define _PPC_ESF_P6 _PPC_ESF_R9
#define I80486 _VX_I80486
#define M85XX_L2ERRINJLO(x) (CAST(VUINT32 *)((x + 0x20E04)))
#define EVENT_OBJ_SEMFLUSH CLASS2_EVENT(22)
#define BOOT_FLASH ON_BOARD_FLASH
#define howmany(x,y) _VX_howmany (x,y)
#define _ARCH_LDBL_DIG 15
#define _PPC_ESF_PC _PPC_ESF_R(GREG_NUM + 3)
#define NAME_MAX _PARM_NAME_MAX
#define __INClimitsh 
#define SIO_MODE_POLL 1
#define SCHAR_MAX 127
#define PCI_ATTR_WS_256M 0x0000001b
#define VXB_BUSID_NEXUS 1
#define _ARCH_PPC 1
#define SPRG6_R 262
#define LBC_SDRAM_LOCAL_SIZE_MASK 0xfc000000
#define VXBAF_BIT_REVERSE_IN_BYTE 0x00000040
#define SPRG6_W 278
#define M_routeLib (44 << 16)
#define MEM_BLOCK_ERROR_LOG_FLAG 0x80
#define __UINTMAX_TYPE__ long long unsigned int
#define EPIC_PRIORITY_MAX 15
#define WDB_PROXY_TASK_STACK_SIZE 10000
#define EPIC_LBC_INT_VEC (EPIC_LBC_INT_NUM + EPIC_VEC_IN_IRQ0)
#define EPIC_TM_A3_DES_REG (EPIC_CCSROFF + 0x011f0)
#define SEM_M_SEND_EVENTS 0x8
#define EPIC_TSEC3ERR_INT_NUM 17
#define __INCdllLibh 
#define SIO_HUP 0x100B
#define M85XXRIO_RIWAR_LOCAL_W_NO_SNOOP 4
#define EPIC_TSEC3RX_INT_NUM 16
#define RIO_OP_SUPPORTED_ATSWAP 0x00800000
#define _PPC_ESF_R1 _PPC_ESF_R(1)
#define _PPC_ESF_R2 _PPC_ESF_R(2)
#define _PPC_ESF_R5 _PPC_ESF_R(5)
#define _PPC_ESF_R6 _PPC_ESF_R(6)
#define _PPC_ESF_R9 _PPC_ESF_R(9)
#define EPIC_TSEC2TX_INT_NUM 19
#define __INCexcLibh 
#define M_remLib (37 << 16)
#define INCLUDE_FTP 
#define EPIC_IN_INT3_DES_REG (EPIC_CCSROFF + 0x10270)
#define _PPC_L1CFG_BSIZE_V(x) (x >> 19)
#define S_classLib_NO_CLASS_DESTROY (M_classLib | 2)
#define sioPollOutput(pSioChan,thisChar) ((pSioChan)->pDrvFuncs->pollOutput (pSioChan, thisChar))
#define LAWAR_SIZE_1MB 0x00000013
#define __INCb_pid_th 
#define CORE_DUMP_REGION_SIZE pmFreeSpace(pmDefaultArena)
#define __CHAR_UNSIGNED__ 1
#define _PPC_ESF_SP _PPC_ESF_R1
#define AIM_MMU_INIT_RT_NUM 0x10
#define PCI_DEV_ID_82XX 0x00031057
#define _VX_FD_SET_DEFINED 
#define _PPC_ESF_T0 _PPC_ESF_R14
#define _PPC_ESF_T1 _PPC_ESF_R15
#define _PPC_ESF_T2 _PPC_ESF_R16
#define _PPC_ESF_T3 _PPC_ESF_R17
#define _PPC_ESF_T4 _PPC_ESF_R18
#define _PPC_ESF_T5 _PPC_ESF_R19
#define _PPC_ESF_T6 _PPC_ESF_R20
#define _PPC_ESF_T7 _PPC_ESF_R21
#define _PPC_ESF_T8 _PPC_ESF_R22
#define _PPC_ESF_T9 _PPC_ESF_R23
#define VXBAF_RETRIEVE_UPSTREAM_BUS_PTR(pDevInfo,pUpstreamDevInfo) { if (pDevInfo->pParentBus != NULL) { pUpstreamDevInfo = pDevInfo->pParentBus->pCtlr; } else pUpstreamDevInfo = NULL; }
#define MMUCSR0 1012
#define EPIC_MSR_ST_MSK 0xf
#define _WRS_CONFIG_COMPONENT_IPSNTP 1
#define MII_PHY_TBL 0x0020
#define OPT_RAW 0
#define MII_EXT_STAT_1000T_FD 0x2000
#define __SIZE_T 
#define EVENT_OBJ_MSGRECEIVE CLASS2_EVENT(24)
#define _POSIX_PIPE_BUF 512
#define IPCOM_GETLINE_HISTORY_FILENAME ".ipcom_getline_history"
#define CS3_CONFIG 0x08C
#define CLASS_LIST_INFO(list,max,element) { DL_NODE * pNode ; pNode = DLL_FIRST (&list); while ((pNode != NULL) && (--max >= 0)) { *(element++) = (OBJ_ID)((int)pNode - OFFSET (OBJ_CORE, classNode)); pNode = DLL_NEXT (pNode); } }
#define SW_MMU_ENABLE FALSE
#define PCI_ATTR_WS_8M 0x00000016
#define __INCvxWorksh 
#define _DEFINED_off_t 
#define M_tftpLib (75 << 16)
#define _WRS_ABSOLUTE_END return OK; }
#define S_cacheLib_UNSUPPORTED (M_cacheLib | 2)
#define PHY_100BASE_TX 0x02
#define INCLUDE_SEM_COUNTING_CREATE 
#define _WRS_CONFIG_MMU_BASIC 1
#define _WRS_CONFIG_COMPONENT_IPMCRYPTO 1
#define _VX_G100 31
#define INCLUDE_ANSI_ALL 
#define WDB_TTY_DEV_NAME "/tyCo/1"
#define MMU_ATTR_PROT_USR_WRITE 0x00000010
#define MII_EXT_STAT_1000T_HD 0x1000
#define _WRS_ABSOLUTE_(name,value) __asm__ (".globl\t"#name "\n\t.equ\t"#name",%0" "\n\t.type\t"#name",@object" :: "n"(value))
#define MAX_RTI_RESERVE_ID 39999
#define _IFORM_405_SX 61
#define RIO_IMPLEMENTATION_SPACE_TOP 0xfffffc
#define MEM_ROUND_DOWN(x) ROUND_DOWN(x, _ALLOC_ALIGN_SIZE)
#define MII_PHY_ID2_REG 0x3
#define EPIC_IN_INT33_VEC_REG (EPIC_CCSROFF + 0x10620)
#define PPC405F _VX_PPC405F
#define _PPC_SPEFSCR_SOV 0x00008000
#define M85XX_MAR(base) (CAST(VUINT32 *)((base) + 0x5068))
#define MMU_STATE_EXECUTE_NOT 0x00000000
#define Q_INFO(pQHead,nodeArray,maxNodes) (*(((Q_HEAD *)(pQHead))->pQClass->infoRtn)) (((Q_HEAD *)(pQHead)),((int *)(nodeArray)),((int)(maxNodes)))
#define PCI_ATTR_WS_64K 0x0000000F
#define PCI_ATTR_WS_64M 0x00000019
#define SCHAR_MIN (-128)
#define ENOMSG 80
#define _PC_PRIO_IO 13
#define EXIT_FAILURE _PARM_EXIT_FAILURE
#define epic0Num NELEMENTS(epic0Resources)
#define WDB_SPAWN_PRI 100
#define _DEFINED_timer_t 
#define M85XXRIO_RIWAR_LOCAL_W_SNOOP_CORE 5
#define _SIZE_T_DEFINED_ 
#define __eventPointStubLibPh 
#define __INCvxbSysEpich 
#define VXDBG_MEM_FUNCS_ARE_INSTALLED() (_func_vxdbgFuncs[VXDBG_READ] != NULL)
#define __SCHAR_MAX__ 127
#define SYM_IS_UNDF(symType) (!(symType))
#define MII_NP_ACK1 0x4000
#define MII_NP_ACK2 0x1000
#define MAX_REBOOT_HOOKS 8
#define MII_ANAR_PAUSE 0x0400
#define _DBSR_TRAP 0x01000000
#define _PPC_ESR_PIL 0x08000000
#define M85XXRIO_ROWS1R18_OFFSET(n) (0x10C14 + ((n)*0x20))
#define _STACK_GROWS_DOWN (-1)
#define NFDBITS _VX_NFDBITS
#define EPIC_SMSG_INT4_DES_REG (EPIC_CCSROFF + 0x11c90)
#define SYM_UNDF 0x0
#define _DEFINED_off_t64 
#define GREG_NUM 32
#define M85XX_MRTPR(base) (CAST(VUINT32 *)((base) + 0x5084))
#define CACHE_SNOOP_ENABLE 0x10
#define M85XXRIO_HBDIDLCSR_OFFSET 0x68
#define M85XX_MDR(base) (CAST(VUINT32 *)((base) + 0x5088))
#define EPIC_IN_INT33_DES_REG (EPIC_CCSROFF + 0x10630)
#define STD_ERR 2
#define _ARCH_MULTIPLE_CACHELIB FALSE
#define M_rngLib (19 << 16)
#define _VX_I960 20
#define IPCOM_PROC_STACK_LARGE IPCOM_STACK_ADJUST(8192)
#define M85XXRIO_IDMR(base) (CAST(VUINT32 *)(((char*)base) + 0x13460 ))
#define VM_STATE_WRITABLE MMU_ATTR_SUP_RWX
#define SEM_BIN_OPTIONS_MASK (SEM_Q_FIFO | SEM_Q_PRIORITY | SEM_EVENTSEND_ERR_NOTIFY | SEM_INTERRUPTIBLE)
#define JOB_TASK_STACK_SIZE 8000
#define EPIC_OPT_POLAR_MSK EPIC_EIVPR_INTR_POLARITY
#define _DBSR_BRT_U 0x0400
#define IVPR 63
#define _DEFINED_blkcnt_t 
#define EPIC_GTVPR_VECTOR_MSK (0xffff)
#define FIOCHKDSK 48
#define EPIC_GCR_MODE_MIXED EPIC_BIT(29)
#define WDB_PROXY_PORT 0x4444
#define S29GL_FLASH_BIT 1
#define EVENT_DPRINTF_LOG CLASS3_EVENT(239)
#define IPCOM_FILE_NONE 1
#define _WRS_ENABLE_IDLE_INTS {intUnlock (taskMsrDefault);}
#define _DBSR_ICMP 0x08000000
#define WIND_OBJ_NAMED 0x80
#define _DBSR_DAC2R 0x00020000
#define PCI_OUTBOUND_BASE_ADRS_REG0(base) CVPUINT32(base, 0x8c08)
#define PCI_OUTBOUND_BASE_ADRS_REG1(base) CVPUINT32(base, 0x8c28)
#define SEM_DELETE_SAFE 0x04
#define PCI_OUTBOUND_BASE_ADRS_REG3(base) CVPUINT32(base, 0x8c68)
#define PCI_OUTBOUND_BASE_ADRS_REG4(base) CVPUINT32(base, 0x8c88)
#define SYM_BSS 0x10
#define MPC85XX_I2C_CONTROL_REG_MSTA 0x20
#define EVENT_TASKPRIORITYSET CLASS3_EVENT(3)
#define TOOL e500v2gnu
#define SEM_CNT_OPTIONS_MASK SEM_BIN_OPTIONS_MASK
#define EVT_OBJ_1(OBJ,CLASS,evtId,ARG1) do { if ( ACTION_IS_SET ) { EVT_OBJ_1_T evt_obj_1; evt_obj_1.objId = OBJ; evt_obj_1.classId = CLASS; evt_obj_1.args [0] = (int)ARG1; eventPointSwHandle(evtId, &evt_obj_1, sizeof evt_obj_1); } } while ((0))
#define EVT_OBJ_2(OBJ,CLASS,evtId,ARG1,ARG2) do { if ( ACTION_IS_SET ) { EVT_OBJ_2_T evt_obj_2; evt_obj_2.objId = OBJ; evt_obj_2.classId = CLASS; evt_obj_2.args [0] = (int)ARG1; evt_obj_2.args [1] = (int)ARG2; eventPointSwHandle(evtId, &evt_obj_2, sizeof evt_obj_2); } } while ((0))
#define EVT_OBJ_3(OBJ,CLASS,evtId,ARG1,ARG2,ARG3) do { if ( ACTION_IS_SET ) { EVT_OBJ_3_T evt_obj_3; evt_obj_3.objId = OBJ; evt_obj_3.classId = CLASS; evt_obj_3.args [0] = (int)ARG1; evt_obj_3.args [1] = (int)ARG2; evt_obj_3.args [2] = (int)ARG3; eventPointSwHandle(evtId, &evt_obj_3, sizeof evt_obj_3); } } while ((0))
#define EVT_OBJ_4(OBJ,CLASS,evtId,ARG1,ARG2,ARG3,ARG4) do { if ( ACTION_IS_SET ) { EVT_OBJ_4_T evt_obj_4; evt_obj_4.objId = OBJ; evt_obj_4.classId = CLASS; evt_obj_4.args [0] = (int)ARG1; evt_obj_4.args [1] = (int)ARG2; evt_obj_4.args [2] = (int)ARG3; evt_obj_4.args [3] = (int)ARG4; eventPointSwHandle(evtId, &evt_obj_4, sizeof evt_obj_4); } } while ((0))
#define EVT_OBJ_5(OBJ,CLASS,evtId,ARG1,ARG2,ARG3,ARG4,ARG5) do { if ( ACTION_IS_SET ) { EVT_OBJ_5_T evt_obj_5; evt_obj_5.objId = OBJ; evt_obj_5.classId = CLASS; evt_obj_5.args [0] = (int)ARG1; evt_obj_5.args [1] = (int)ARG2; evt_obj_5.args [2] = (int)ARG3; evt_obj_5.args [3] = (int)ARG4; evt_obj_5.args [4] = (int)ARG5; eventPointSwHandle(evtId, &evt_obj_5, sizeof evt_obj_5); } } while ((0))
#define _FD_MASK_DEFINED 
#define WIND_TCB_T12 WIND_TCB_R26
#define EPIC_MSG_INTERRUPT 24
#define MEDR_FILL_FREE_ENABLE FALSE
#define EVENT_OS_REVISION CONTROL_EVENT(18)
#define EPIC_CCSROFF 0x40000
#define MII_ADS_TECH_MASK 0x1fe0
#define _DBSR_DAC2W 0x00010000
#define EPIC_TM_B_FREQ_REG (EPIC_CCSROFF + 0x020f0)
#define M_csLib (138 << 16)
#define RIO_OP_SUPPORTED_ADEC 0x02000000
#define NUM_DRIVERS 20
#define EVENT_SEMTAKE CLASS3_EVENT(15)
#define INCLUDE_FLOATING_POINT 
#define PCIEX_OUTBOUND_TRANS_ADRS_REG0(base) CVPUINT32(base, 0xac00)
#define PCIEX_OUTBOUND_TRANS_ADRS_REG2(base) CVPUINT32(base, 0xac40)
#define clearerr(p) __sclearerr(p)
#define VX_COPROC8_TASK 0x80000000
#define TFFS_REMOVABLE FALSE
#define VXEV_USER_MASK 0x00ffffff
#define M_usrLib (35 << 16)
#define M85XX_PORPLLSR_PLAT_RATIO_MASK 0x0000003e
#define MII_PHY_DEF_DELAY 300
#define M85XX_LAWBAR0(base) (CAST(VUINT32 *)((base) + 0xc08))
#define M85XX_LAWBAR1(base) (CAST(VUINT32 *)((base) + 0xc28))
#define M85XX_LAWBAR2(base) (CAST(VUINT32 *)((base) + 0xc48))
#define M85XX_LAWBAR3(base) (CAST(VUINT32 *)((base) + 0xc68))
#define M85XX_LAWBAR5(base) (CAST(VUINT32 *)((base) + 0xcA8))
#define M85XX_LAWBAR6(base) (CAST(VUINT32 *)((base) + 0xcc8))
#define _VX_XSCALE 1120
#define SM_CPUS_MAX DEFAULT_CPUS_MAX
#define EVENT_OBJ_SEMGIVE CLASS2_EVENT(20)
#define M_loginLib (54 << 16)
#define _TIMER_T 
#define PCI2_INBOUND_TRANS_EXT_ADRS_REG3(base) CVPUINT32(base, 0x9DA4)
#define __INCb_key_th 
#define _TYPE_timer_t typedef struct __timer *timer_t
#define CACHE_DRV_IS_READ_COHERENT(pFuncs) ((pFuncs)->invalidateRtn == NULL)
#define PCI2_INBOUND_BASE_ADRS_REG1(base) CVPUINT32(base, 0x9DE8)
#define _IFORM_M_2 55
#define M_vxdbgLib (5 << 16)
#define RIO_CHANNEL_MAINT 1
#define __USER_LABEL_PREFIX__ 
#define IPCOM_PROC_PRIO_BACKGROUND 255
#define __INCspeLibh 
#define _WRS_CONFIG_OBJECT_CLASS_LIST_D 1
#define PRIO_STATUS_CHECK 0xa
#define EPIC_OPT_POLAR_ACT_LOW 0x00000000
#define IPCOM_RAM_DISK_NO_BLOCK 64
#define _PPC_ESR_PPR 0x04000000
#define _IFORM_EFX_2 88
#define _IFORM_EFX_3 89
#define _IFORM_EFX_4 90
#define S_memLib_FUNC_NOT_AVAILABLE (M_memLib | 9)
#define __INChwConfigh 
#define I2C_ERROR_KNOWN_STATE 7
#define __INCeventLibCommonh 
#define INCLUDE_XBD 
#define PCI_OUT_ATTR_WTT_IO 0x00008000
#define WDB_COMM_VTMD 8
#define PPC970 _VX_PPC970
#define _PC_REC_MAX_XFER_SIZE 15
#define VXB_PARAM_STRING 0x0003
#define EPIC_MSIR_INTX_OFFSET 0x10
#define _VX_CPU32 8
#define EVENT_SAFE_PEND CLASS3_EVENT(28)
#define _VX_TOOL_FAMILY TOOL_FAMILY
#define VX_DEALLOC_EXC_STACK 0x1000
#define WV_OBJ_CLASS_INSTRUMENTATION_DISABLE(classId) (classId->handle.attributes &= ~WIND_CLASS_INSTRUMENTED)
#define WDB_SPAWN_OPTS VX_FP_TASK
#define DRV_INTCTLR_EPIC 
#define HID1 1009
#define EVENT_OBJ_MSGSEND CLASS2_EVENT(23)
#define M85XXRIO_RIWAR_LOCAL_R_UNLOCK_L2 7
#define VXB_INTR_TRIG_ACTIVE_HIGH (VXB_INTR_TRIG_POS | VXB_INTR_TRIG_LEVEL)
#define __clock_t_defined 
#define __dataCollectorLibh 
#define SYS_CLK_RATE_MAX 8000
#define EVENTS_SYSFLAGS_DEL_RSRC 0x02
#define __LDBL_HAS_INFINITY__ 1
#define atomic32Xor_inline atomic32Xor
#define FIOSCSICOMMAND 40
#define MII_SR_LINK_STATUS 0x0004
#define MMU_DATA 0x02
#define M85XX_L2CTL_L2LFR_BIT 10
#define SIO_DEV_UNLOCK 0x1016
#define EVENT_EVENTRECEIVE CLASS3_EVENT(58)
#define INCLUDE_ANSI_STDLIB 
#define __INCsymbolh 
#define _ARCH_USHRT_MAX 65535
#define EPIC_MSG_REG3 (EPIC_CCSROFF + 0x01430)
#define FIOGETFL 43
#define RES_INT 2
#define EPIC_MSIVPR_PRIORITY_MSK (EPIC_BIT(19) | EPIC_BIT(18) | EPIC_BIT(17) | EPIC_BIT(16))
#define EVENT_WIND_EXIT_NODISPATCH CLASS1_EVENT(3)
#define TOOL_HDR(tc,file) TOOL_HDR_STRINGIFY(tool/tc/file)
#define _PPC_MAS0_ESEL_V(x) (x >> _PPC_MAS0_ESEL_BIT)
#define _ARCH_va_end(list) 
#define SYM_DATA 0x8
#define SYSFLG_NO_STARTUP_SCRIPT 0x10
#define EVT_OBJ_SAL_1(evtId,ARG1) do { if (ACTION_IS_SET) { EVT_OBJ_SAL_1_T evt_obj_sal_1; evt_obj_sal_1.args [0] = (int)ARG1; eventPointSwHandle (evtId, &evt_obj_sal_1, sizeof evt_obj_sal_1); } } while ((0))
#define EVT_OBJ_SAL_2(evtId,ARG1,ARG2) do { if (ACTION_IS_SET) { EVT_OBJ_SAL_2_T evt_obj_sal_2; evt_obj_sal_2.args [0] = (int)ARG1; evt_obj_sal_2.args [1] = (int)ARG2; eventPointSwHandle (evtId, &evt_obj_sal_2, sizeof evt_obj_sal_2); } } while ((0))
#define EVT_OBJ_SAL_3(evtId,ARG1,ARG2,ARG3) do { if (ACTION_IS_SET) { EVT_OBJ_SAL_3_T evt_obj_sal_3; evt_obj_sal_3.args [0] = (int)ARG1; evt_obj_sal_3.args [1] = (int)ARG2; evt_obj_sal_3.args [2] = (int)ARG3; eventPointSwHandle (evtId, &evt_obj_sal_3, sizeof evt_obj_sal_3); } } while ((0))
#define EPIC_RES41_INT_VEC (EPIC_RES41_INT_NUM + EPIC_VEC_IN_IRQ0)
#define S_qLib_Q_CLASS_ID_ERROR (M_qLib | 1)
#define MMU_ATTR_CACHE_COHERENCY 0x00000200
#define VXBAF_CONVERT_LONG_ORDER 0x00000004
#define EPIC_MSIDR_CRIT_INT EPIC_BIT(30)
#define FIOTRUNC64 55
#define MII_TECH_100BASE_T4 0x0200
#define EPIC_PCI1_INT_NUM 8
#define Q_GET(pQHead) ((Q_NODE *)((*(((Q_HEAD *)(pQHead))->pQClass->getRtn)) ((Q_HEAD *)(pQHead))))
#define RUNTIME_VERSION "6.8"
#define CACHE_USER_FLUSH(adrs,bytes) CACHE_DRV_FLUSH (&cacheUserFuncs, (adrs), (bytes))
#define NV_RAM_SIZE 0X100000
#define _ARCH_LDBL_MANT_DIG 53
#define MSG_Q_RESTRICT_UNPEND 0x80000000
#define VX_MEM_BARRIER_RW() _WRS_BARRIER("sync");
#define IPCOM_USE_ENV IPCOM_ENV_NATIVE
#define MII_TECH_100BASE_TX 0x0080
#define __FLT_EPSILON__ 1.19209290e-7F
#define _PPC_ESF_PAD0 (_PPC_ESF_REG_BASE + _PPC_REG_SET_SIZE)
#define _PPC_ESF_PAD1 (_PPC_ESF_PAD0 + SIZ_UINT32)
#define _PPC_ESF_PAD2 (_PPC_ESF_PAD1 + SIZ_UINT32)
#define EPIC_VEC_IN_IRQ0 (EPIC_VEC_EXT_IRQ0 + EPIC_MAX_EXT_IRQS)
#define ENOLINK 87
#define DEFAULT_DIR_PERM 0000750
#define _WRS_TASK_MSR_DEFAULT 
#define _ARCH_DBL_MAX 1.7976931348623157e+308
#define EPIC_OPT_PRI_MSK EPIC_EIVPR_PRIORITY_MSK
#define _VX_CPU CPU
#define FIOGETOPTIONS 19
#define EVENT_WINDCONT CLASS2_EVENT(30)
#define _WRS_CONFIG_TASK_SWAP_HOOKS 1
#define INCLUDE_VXB_CMDLINE 
#define S_objLib_OBJ_NOT_NAMED (M_objLib _WRS_BIT_OR 9)
#define VXB_CLK_FREQ "clkFreq"
#define M85XX_I2C2_BASE 0x3100
#define FIOLINK 58
#define _PPC_L1CFG_BSIZE_MASK 0x01800000
#define _PPC_ESF_R20 _PPC_ESF_R(20)
#define EVENT_OBJ_SEMWTAKE CLASS2_EVENT(48)
#define __INCsysLibh 
#define SM_TAS_HARD 1
#define SIO_KYBD_MODE_RAW 1
#define M85XXRIO_RxWAR_SIZE_MSK 0x3f
#define M85XXRIO_ODATR(base) (CAST(VUINT32 *)(((char*)base) + 0x1101C))
#define INCLUDE_WDB_CTXT 
#define EVENT_WDDELETE CLASS3_EVENT(17)
#define _IFLAG_FP_SPEC 0x1000
#define MMU_ATTR_SPL_0 0x00001000
#define _VX_PPC505 96
#define PCIEX_INBOUND_BASE_ADRS_REG1(base) CVPUINT32(base, 0xaDE8)
#define _VX_PPC509 2000
#define INCLUDE_WDB_VIO 
#define M85XX_L2CTL_L2E_MSK 0x80000000
#define S_objLib_OBJ_NO_ACCESS_RIGHTS (M_objLib _WRS_BIT_OR 6)
#define MII_ETH_MAX_PCK_SZ (ETHERMTU + SIZEOF_ETHERHEADER + MII_CRC_LEN)
#define __INCobjLibPh 
#define FIOFSTATGET_OLD 38
#define INCLUDE_HWMEM_ALLOC 
#define le32toh(x) bswap32((x))
#define _DBSR_DAC2W_U 0x0001
#define M_ftnLib (52 << 16)
#define SIO_ERROR_OFLOW 2
#define _DEFINED_uid_t 
#define LSDMR_OP_SHIFT(x) ((x << 27) & LSDMR_OP_MASK)
#define TYLIB_XON_PCNT 50
#define S_dsmLib_UNKNOWN_INSTRUCTION (M_dsmLib | 1)
#define _DBCR2_DAC2US 0x0c000000
#define EVENT_SD_UNMAP CLASS3_EVENT(203)
#define PCIEX_INBOUND_ATTR_REG1(base) CVPUINT32(base, 0xaDF0)
#define VXDBG_BP_BY_CTX_REMOVE(pClient,retVal,pContext) VXDBG_BP_BY_ADDR_AND_CTX_REMOVE(pClient, retVal, NULL, pContext)
#define _POSIX_NAME_MAX 14
#define SIMHPPA _VX_SIMHPPA
#define EPIC_DMA1_INT_NUM 5
#define INST_BL_MASK 0xfc000001
#define SYS_CLK_RATE_MIN 1
#define OPT_LINE 0x40
#define _ANSI_STDDEF_H 
#define EPIC_IIVPR_PRIORITY(p) (((p) << 16) & EPIC_IIVPR_PRIORITY_MSK)
#define SPE_CONTEXT_SET(pTcb,X) (pTcb->pCoprocCtx=(int)(X))
#define I2C_CYCLE_WRITE(x,wd) i2cCycleMpc85xxWrite(x,wd)
#define M_m2Lib (91 << 16)
#define _IFIELD_BD(x) ((0x00008000 & x) ? (0xffff0000 | (x & ~3)) : (0x0000fffc & x))
#define MMU_ATTR_PROT_SUP_EXE 0x00000004
#define _IFIELD_BI(x) ((0x001f0000 & x) >> 16)
#define _VX_SH 130
#define TASK_CPU_LOCK_TASK(_pTcb__) do { if (ACTION_IS_SET) { VX_CODE_BARRIER(); _pTcb__->lockCnt++; VX_CODE_BARRIER(); EVT_CTX_0_BH (EVENT_TASKLOCK); } else { VX_CODE_BARRIER(); _pTcb__->lockCnt++; VX_CODE_BARRIER(); } } while ((0))
#define _CPU_STACK_ALIGN_SHIFT 4
#define VX_USR_TASK_OPTIONS_BASE (VX_PRIVATE_ENV | VX_NO_STACK_FILL | VX_TASK_NOACTIVATE | VX_NO_STACK_PROTECT)
#define _DBCR2_DAC2ER_U 0x0300
#define S_eventLib_ZERO_EVENTS (M_eventLib | 0x0005)
#define WDB_PROXY_TASK_PRIORITY 55
#define EPIC_EX_INT1_VEC_REG (EPIC_CCSROFF + 0x10020)
#define ARM7TDMI_T _VX_ARM7TDMI_T
#define MIN_USER_ID 40000
#define EPIC_TM_B2_DES_REG (EPIC_CCSROFF + 0x021b0)
#define TFFS_MOUNT_POINT "/tffs0"
#define S_iosLib_DEVICE_NOT_FOUND ENODEV
#define SEMB_PENDED_TASK SEM_PENDED_TASK
#define MAX_INT_ID 599
#define MMU_ATTR_CACHE_GET(attr) ((attr) & MMU_ATTR_CACHE_MSK)
#define EPIC_CTASK_PRI1_REG (EPIC_CCSROFF + 0x21080)
#define MMU_TRANSLATE (*(mmuLibFuncs.mmuTranslate))
#define _ARCH_INT_MAX 2147483647
#define _PPC_ESR_AP_U 0x0008
#define sioTxStartup(pSioChan) ((pSioChan)->pDrvFuncs->txStartup (pSioChan))
#define EPIC_DDR_INT_VEC (EPIC_DDR_INT_NUM + EPIC_VEC_IN_IRQ0)
#define EPIC_CISR0_EX_INT_MSK 0xfff
#define EVENT_TICKANNOUNCE CLASS1_EVENT(9)
#define _WRS_SYS_IO 
#define SPIN_LOCK_INTERESTED 2
#define _VX_PPC555 99
#define EPIC_IN_INT46_VEC_REG (EPIC_CCSROFF + 0x107c0)
#define MMU_STATE_MASK_LOCK 0x00800000
#define I2C_DRV_TYPE MPC85XX_I2C_CONTROLLER
#define EVENT_SIGWRAPPER CLASS3_EVENT(29)
#define VX_MAX_TASK_SWAP_RTNS 16
#define RES_STRING 1
#define _ARCH_DBL_MIN 2.2250738585072014e-308
#define EMFILE 24
#define _PPC_SPEFSCR_FGH 0x20000000
#define EPIC_IN_INT27_DES_REG (EPIC_CCSROFF + 0x10570)
#define IS_USER_EVENT(event) ((event >= MIN_USER_ID) && (event <= MAX_USER_ID))
#define SS_2D_8 2
#define EPIC_IPI_DPATCH1_REG1 (EPIC_CCSROFF + 0x21050)
#define TIP_ESCAPE_CHARACTER "~"
#define EPIC_EX_INT1_DES_REG (EPIC_CCSROFF + 0x10030)
#define S_ioLib_NO_DEVICE_NAME_IN_PATH ENODEV
#define __DECIMAL_DIG__ 17
#define EPIC_LBC_INT_NUM 3
#define INCLUDE_IPNET_USE_ROUTESOCK 
#define EPIC_TSEC3ERR_INT_VEC (EPIC_TSEC3ERR_INT_NUM + EPIC_VEC_IN_IRQ0)
#define REG_SET_GR(n) (REG_SET_GRBASE + _PPC_REG_SIZE*(n))
#define FIOMOVE 47
#define EPIC_TSEC3RX_INT_VEC (EPIC_TSEC3RX_INT_NUM + EPIC_VEC_IN_IRQ0)
#define M85XX_LURT(base) (CAST(VUINT32 *)((base) + 0x50A0))
#define _PPC_ESR_ILK 0x00100000
#define EVT_EDR_ERR_INJECT(EVTID,KIND,FILENAME,LINE,ADDRESS,MSG) do { if ( ACTION_IS_SET ) { EVENT_EDR_ERR_INJECT_T evt_edr_err_inject; evt_edr_err_inject.kind = KIND; evt_edr_err_inject.filename = FILENAME; evt_edr_err_inject.linenumber = LINE; evt_edr_err_inject.address = ADDRESS; evt_edr_err_inject.message = MSG; eventPointSwHandle (EVTID, &evt_edr_err_inject, sizeof (evt_edr_err_inject)); } } while ((0))
#define EPIC_ECM_INT_NUM 1
#define _DBSR_ICMP_U 0x0800
#define EVENT_SALOPEN CLASS3_EVENT(96)
#define S_vxdbgLib_INVALID_BP_DELETE_CLASS VXDBG_ERROR_TO_ERRNO(VXDBG_ERR_INVALID_BP_DELETE_CLASS)
#define _INC_VXBUSLIB_H 
#define PID_MASK 0x0FF
#define IPCOM_SOCK_IPCOM 3
#define MAX_INPUT _POSIX_MAX_INPUT
#define MAP1000A _VX_MAP1000A
#define ENETDOWN 62
#define EPIC_IN_INT46_DES_REG (EPIC_CCSROFF + 0x107d0)
#define ESTALE 88
#define EPIC_GLOBAL_REG (EPIC_CCSROFF + 0x01020)
#define CLASS_LIST_REMOVE(list,node) dllRemove (list, node)
#define __INCtypesh 
#define IPCOM_FORWARDER_TRUE_CACHE_WAYS (1 << IPCOM_FORWARDER_TRUE_CACHE_WAYS_SHIFT)
#define M85XXRIO_RIWAR_PCI2 0x01
#define _IFIELD_CRBD(x) ((0x03e00000 & x) >> 21)
#define M85XXRIO_PCR(base) (CAST(VUINT32 *)(((char*)base) + 0x10010 ))
#define _IFLAG_6XX_SPEC (_IFLAG_601_SPEC | _IFLAG_603_SPEC | _IFLAG_604_SPEC)
#define __INCb_gid_th 
#define M85XX_L2ERRDIS(x) (CAST(VUINT32 *)((x + 0x20E44)))
#define I2C_DEVICE_TYPE_IOPORT_PCA9555 2
#define MII_SYS_DELAY(delay) if (pPhyInfo->phyDelayRtn != NULL) ((* (pPhyInfo->phyDelayRtn)) (delay))
#define CS1_BNDS 0x008
#define _VX_SPARCV9 110
#define __INCspinLockLibh 
#define _IFORM_XL_1 38
#define _IFORM_XL_2 39
#define _IFORM_XL_3 40
#define _IFORM_XL_4 41
#define DDR_CAPTURE_ECC 0xe28
#define __LDBL_HAS_QUIET_NAN__ 1
#define M85XX_L2CTL_L2SIZ_BIT 28
#define M85XXRIO_ODCR(base) (CAST(VUINT32 *)(((char*)base) + 0x11020))
#define M_dirLib (68 << 16)
#define CACHE_DMA_VIRT_TO_PHYS(adrs) CACHE_DRV_VIRT_TO_PHYS (&cacheDmaFuncs, (adrs))
#define MPC85XX_I2C_FREQ_DIV_REG (0x00004)
#define _IFIELD_UIMM(x) ((0x0000ffff & x) >> 0)
#define WV_OBJ_CLASS_INSTRUMENTATION_ENABLE(classId) (classId->handle.attributes |= WIND_CLASS_INSTRUMENTED)
#define M85XX_PORDEVSR(base) (CAST(VUINT32 *)((base) + 0xE000C))
#define EPIC_INT_ACT_LOW 0
#define RIO_SWITCH_PORT_MASK 0x00ff0000
#define INCLUDE_MUXTK 
#define atomic32Dec_inline atomic32Dec
#define MII_STAT_REG 0x1
#define CORE_DUMP_COMPRESSION_LEVEL 9
#define __INCvxInlineArchh 
#define CACHE_FLUSH_LOAD_ADRS 0x10000
#define _WRS_CONFIG_SUPPORTS_WRLOAD 1
#define _PPC_BUCSR_FI 0x200
#define _ARCH_INT_MIN (-2147483647-1)
#define MAX_VALUE_E500_RATIO 10
#define _EXC_INFO_CIA 0x002
#define REG_SET_LR (REG_SET_MSR + _PPC_REG_SIZE)
#define IPCOM_USE_SYSVAR 
#define EPIC_SENSE_LVL 1
#define _WRS_CONFIG_WIND_IPNET 1
#define fpReg gpr[31]
#define VX_MSG_Q(name,max_msgs,max_msg_len) _WRS_DATA_ALIGN_BYTES(VX_OBJ_ALIGN_SIZE) char name [VX_MSG_Q_SIZE + ((max_msgs)*(MSG_NODE_SIZE(max_msg_len)))];
#define _IFIELD_LK(x) ((0x00000001 & x) >> 0)
#define EPIC_EX_INT8_VEC_REG (EPIC_CCSROFF + 0x10100)
#define EVENTS_ALLOW_OVERWRITE 0x02
#define L_tmpnam _PARM_L_tmpnam
#define VM_BASE_INSTALLED (vmLibInfo.vmBaseLibInstalled)
#define ___int_wchar_t_h 
#define VX_DEALLOC_STACK 0x0004
#define PCI_IN_ATTR_RTT_LM_WRITE_SNOOP 0x00005000
#define INT_MIN (-INT_MAX-1)
#define _IFIELD_CRFD(x) ((0x03800000 & x) >> 23)
#define _IFIELD_CRFE(x) ((0x00000007 & x))
#define __GNUC__ 4
#define _IFIELD_MB(x) ((0x000007c0 & x) >> 6)
#define FIONMSGS 17
#define VX_FORTRAN 0x0040
#define S_vxCpuLib_NO_CPU_AVAILABLE (M_vxCpuLib | 2)
#define _IFIELD_MO(x) ((0x03e00000 & x) >> 21)
#define EVENTS_KEEP_UNWANTED 0x04
#define MIN_RTI_RESERVE_ID 39000
#define SHELL_TASK_OPTIONS (VX_FP_TASK | VX_UNBREAKABLE | COPROCS_ALL | VX_PRIVATE_ENV)
#define offsetof(TYPE,MEMBER) __builtin_offsetof (TYPE, MEMBER)
#define VX_INSTR_BARRIER() _WRS_BARRIER("isync")
#define _DBCR0_TRAP_U 0x0100
#define EVENTS_SYSFLAGS_WAITING 0x01
#define __INC_vxbRapidIOH 
#define _ARCH_DBL_MIN_EXP (-1021)
#define STACK_VERSION_MINOR 1
#define _IFIELD_NB(x) ((0x0000f800 & x) >> 11)
#define SIO_BAUD_GET 0x1004
#define CAST(x) (x)
#define _FLTFUNCPTR_DEFINED 
#define OBJ_HANDLE_TABLE_MASK (OBJ_HANDLE_INDEX_MASK - OBJ_HANDLE_ENTRY_MASK)
#define CACHE_CMD_UNLOCK_LINE 0x08000000
#define EVENT_WINDRESUME CLASS2_EVENT(3)
#define __INCvmLibCommonh 
#define EBADMSG 77
#define _IFIELD_OE(x) ((0x00000400 & x) >> 10)
#define EVENT_SALRUN_ACCEPT CLASS3_EVENT(105)
#define __INCfcntlh 
#define RIO_OP_SUPPORTED_ASET 0x04000000
#define INCLUDE_IPNET_PACKET_POOL_3 
#define VM_PAGE_MAP(context,virtAddr,physAddr,len) ((vmLibInfo.pVmPageMapRtn == NULL) ? (ERROR) : ((*vmLibInfo.pVmPageMapRtn) (context, virtAddr, physAddr, len)))
#define atomic32Nand_inline atomic32Nand
#define INCLUDE_IPNET_PACKET_POOL_6 
#define FIODISKCHANGE 13
#define OBJ_LIBRARY_OPTIONS 0
#define __INChandleLibPh 
#define __NO_LWSYNC__ 1
#define PCI2_OUTBOUND_ATTR_REG0(base) CVPUINT32(base, 0x9c10)
#define _VX_WRITE 1
#define EPIC_PERFMON_2_MSK_REG0 (EPIC_CCSROFF + 0x01390)
#define EPIC_PERFMON_2_MSK_REG1 (EPIC_CCSROFF + 0x013a0)
#define SEMRW_READER_ENTRY_PTR(semId,index) ( ((SEM_RW_LIST_ENTRY *)((UINT) semId + sizeof (SEMAPHORE) + sizeof (SEM_RW_EXT) + (index * sizeof (SEM_RW_LIST_ENTRY)))) )
#define DDR_SDRAM_CLK_CTRL 0x130
#define _DBSR_IRPT 0x02000000
#define S_intLib_NOT_ISR_CALLABLE (M_intLib | 1)
#define EVENT_OBJ_MSGSREPLY CLASS2_EVENT(44)
#define MII_MF_PREAMBLE_LEN 0x20
#define EPIC_SR_ERR_INT_VEC (EPIC_SR_ERR_INT_NUM + EPIC_VEC_IN_IRQ0)
#define F_RGETLK 10
#define HCF_RES_INT 2
#define OBJ_INDEX_GET(objHdl) ((objHdl) & OBJ_HANDLE_INDEX_MASK)
#define LONG_MAX __LONG_MAX__
#define __INCregh 
#define _VX_I960CA 21
#define __sfileno(p) ((HANDLE_VERIFY(p, handleTypeFile) != OK) ? (-1) : ((p)->_file))
#define NUM_PCIEX_SLOTS 0x1
#define M85XX_DEVDISR_DDR 0x00010000
#define SM_TAS_SOFT 0
#define SIO_ERROR_NO_CLK 6
#define EPIC_MSG_VEC_REG(irq) (EPIC_MSG_INT0_VEC_REG + ((irq) * EPIC_MSG_VEC_REG_INTERVAL))
#define _IFIELD_RA(x) ((0x001f0000 & x) >> 16)
#define _IFIELD_RC(x) ((0x00000001 & x) >> 0)
#define _IFIELD_RD(x) ((0x03e00000 & x) >> 21)
#define EPIC_MSG_INT0_VEC_REG (EPIC_CCSROFF + 0x11600)
#define SYSFLG_AUTOFILE 0x800
#define INCLUDE_BRANCH_PREDICTION 
#define _EXC_OFF_SYSTIMER _EXC_OFF_DECR
#define _WRS_CHANGE_INSN_SET(p) {}
#define MMU_ATTR_SUP_RWX (MMU_ATTR_SUP_RW | MMU_ATTR_PROT_SUP_EXE)
#define MMU_ATTR_CACHE_GUARDED 0x00000400
#define RAPIDIO_BA 0xC0000
#define REG_SET_SP (REG_SET_GR(1))
#define _IFIELD_SH(x) ((0x0000f800 & x) >> 11)
#define RNG_ELEM_GET(ringId,pCh,fromP) ( fromP = (ringId)->pFromBuf, ((ringId)->pToBuf == fromP) ? 0 : ( *pCh = (ringId)->buf[fromP], (ringId)->pFromBuf = ((++fromP == (ringId)->bufSize) ? 0 : fromP), 1 ) )
#define MMU_ATTR_SPL_MSK 0x000FF000
#define IPCOM_SHELL_NATIVE 4
#define _CPU_STACK_ALIGN_SIZE 16
#define FUNCREF(func) func
#define VXB_EPICINTCTLR_ENABLE_INTS _VXB_EPICINTCTLR_ENABLE_INTS
#define S_ioLib_DISK_NOT_PRESENT ENXIO
#define CACHE_CMD_INVALIDATE 0x0c000000
#define EPIC_SMSG_INT1_VEC_REG (EPIC_CCSROFF + 0x11c20)
#define EXIT_SUCCESS _PARM_EXIT_SUCCESS
#define _INC_vxbParamSysH 
#define WV_EVT_PROTO_REV_CURRENT WV_EVT_PROTO_REV_6_7
#define EPIC_IN_INT35_DES_REG (EPIC_CCSROFF + 0x10670)
#define OBJ_INSTRUMENTED(objId) ((((OBJ_CORE *)(objId))->handle.attributes) & WIND_OBJ_INSTRUMENTED)
#define SM_MAX_WAIT 3000
#define EPIC_EX_DEST_REG(irq) (EPIC_EX_VEC_REG(irq) + EPIC_EX_DEST_REG_VECREGOFF)
#define __INCppc85xxh 
#define _IFIELD_TO(x) ((0x03e00000 & x) >> 21)
#define _PPC_ESR_PIL_U 0x0800
#define VX_TRAD_SCHED_CONSTANT_RDY_Q TRUE
#define AIO_TASK_STACK_SIZE 0
#define EVENT_OBJ_MSGDELETE CLASS2_EVENT(25)
#define INCLUDE_EXC_HANDLING 
#define M_ioLib (12 << 16)
#define _VX_PPC32 90
#define EPIC_EIDR_P0_INT EPIC_BIT(0)
#define __INCeventph 
#define INCLUDE_TASK_RESTART 
#define EPIC_MSG_INT0_DES_REG (EPIC_CCSROFF + 0x11610)
#define RIO_CAR_ASSEMBLY_INFO 0x0c
#define _STD_USING_INT_TYPES 
#define EVENT_MSGCSEND CLASS3_EVENT(36)
#define CACHE_COPYBACK 0x02
#define PCI_ID_I82559 0x12298086
#define semOwner state.owner
#define _IFIELD_VC(x) ((0x000007c0 & x) >> 6)
#define _IFIELD_VD(x) ((0x03e00000 & x) >> 21)
#define _IFIELD_VS(x) ((0x03e00000 & x) >> 21)
#define M85XX_PORDEVSR_PCI_MODE(base) ((*M85XX_PORDEVSR(base) & M85XX_PORDEVSR_PCI_MODE_MASK)>>23)
#define VXB_BAUD_RATE "baudRate"
#define OPT_TANDEM 0x04
#define _VX_I960HX 25
#define _IFIELD_WS(x) ((0x0000f800 & x) >> 11)
#define _VX_MIPS32 41
#define M_shellInterpCmdLib (174 << 16)
#define VXB_INTR_ENTSZ 32
#define EPIC_SR_ERR_INT_NUM 32
#define EXTENDED_REF_REC 0x100
#define IPCOM_USE_SOCK IPCOM_SOCK_NATIVE
#define FD_1_TYPE -1
#define RUNTIME_SMP_NAME "SMP"
#define CS2_CONFIG 0x088
#define M85XX_SVR(base) (CAST(VUINT32 *)((base) + 0xE00A4))
#define _PPC_ESR_BO_U 0x0002
#define PCIEX_INBOUND_TRANS_ADRS_REG2(base) CVPUINT32(base, 0xaDC0)
#define PCIEX_INBOUND_TRANS_ADRS_REG3(base) CVPUINT32(base, 0xaDA0)
#define _MACH_MACHLIMITS_H_ 
#define EPIC_EIVPR_SENS(s) ((s) << 22)
#define VX_SPE_TASK VX_COPROC3_TASK
#define _VX_I960JX 24
#define LOW24_INSERT(buf,value) INSERT ((buf), (value), 0x03fffffc)
#define EPIC_FRR_NCPU_SHIFT 8
#define IPCOM_USE_BITARRAY 
#define REG_TYPE_SHIFT 24
#define _DBCR1_IAC12AT_U 0x0001
#define VXB_SPIN_LOCK_TAKE(x) (*pVxbSpinLockTake)(x)
#define LONG_MIN (-LONG_MAX-1)
#define S_symLib_SYMBOL_NOT_FOUND (M_symLib | 1)
#define EVT_SYSCALL_ENTRY(RTPID,NPARAMS,PSTATE) do { if (ACTION_IS_SET) { EVENT_SYSCALL_ENTER_T evt_syscall_entry; evt_syscall_entry.rtpId = RTPID; evt_syscall_entry.nParams = NPARAMS; evt_syscall_entry.pState = PSTATE; eventPointSwHandle(EVENT_SYSCALL_ENTER, &evt_syscall_entry, sizeof evt_syscall_entry); } } while ((0))
#define MCAR 573
#define EVENT_TIMESTAMP_CONFIG CONTROL_EVENT(8)
#define getc(p) __sgetc(p)
#define _VX_I960KA 22
#define _VX_I960KB 23
#define M85XXRIO_SOCAR(base) (CAST(VUINT32 *)(((char*)base) + 0x0018))
#define MMU_PAGE_LOCK (*(mmuLibFuncs.mmuPageLock))
#define INCLUDE_IO_SYSTEM 
#define M_bootLoadLib (82 << 16)
#define INCLUDE_SEM_COUNTING 
#define RIO_SWITCH_PORT_ACCESS(x) ((x) & RIO_SWITCH_PORT_SRC_MASK) >> 24)
#define __INCppc32h 
#define M_dmsLib (126 << 16)
#define PHY_100BASE_T4 0x04
#define OBJ_LOCK(classId,lockLevel) do { lockLevel = INT_CPU_MICRO_LOCK(); } while ((0))
#define INCconfigAllNetworkh 
#define VX_READ 0
#define DDR_CAPTURE_ADDRESS 0xe50
#define M85XXRIO_ODSR(base) (CAST(VUINT32 *)(((char*)base) + 0x13404))
#define MII_MASSLA_CTRL_CONFIG_EN 0x1000
#define __STRICT_ANSI__ 1
#define M85XXRIO_BDIDCSR(base) (CAST(VUINT32 *)(((char*)base) + 0x00060 ))
#define VXB_BUSID_USB_HOST_EHCI 11
#define SYM_THUMB 0x80
#define _VX_MIPS64 42
#define RIO_MAX_OUTBOUND_CHANNELS 9
#define VXB_INST_INIT2_DONE 0x00000002
#define NUM_FILES 50
#define WV_EVT_PROTO_REV_2_0_FCS 2
#define __INCqLibh 
#define S_mmuLib_NO_DESCRIPTOR (M_mmuLib | 2)
#define S29GL_FLASH_SIZE 0x04000000
#define DDR_ERR_DETECT 0xe40
#define M85XXRIO_ATMU_CHANNELS 15
#define M85XXRIO_PCCSR(base) (CAST(VUINT32 *)(((char*)base) + 0x0015C ))
#define _DBSR_IAC1_U 0x0080
#define EPIC_RES47_INT_NUM 47
#define VXB_ITERATE_VERBOSE 8
#define __LDBL_HAS_DENORM__ 1
#define MII_EXP_LOC_NP 0x0004
#define IPCOM_RAM_DISK_BLOCK_SIZE 512
#define LBC_CS3_SIZE 0x0100000
#define DBG_SYSCALL_SIZE (sizeof (INSTR) / sizeof (INSTR))
#define BOOT_LINE_SIZE 255
#define I2C_BYTE_NUM_MASK 0x700
#define PCIEX_INBOUND_BASE_ADRS_REG2(base) CVPUINT32(base, 0xaDC8)
#define MMU_STATE_UNLOCK 0x00000000
#define PCI2_OUTBOUND_BASE_ADRS_REG0(base) CVPUINT32(base, 0x9c08)
#define PCI2_OUTBOUND_BASE_ADRS_REG1(base) CVPUINT32(base, 0x9c28)
#define PCI2_OUTBOUND_BASE_ADRS_REG3(base) CVPUINT32(base, 0x9c68)
#define PCI_INT_ACK (CCSBAR + 0x8008)
#define __INCarchPpcCommonh 
#define M_if_sl (53 << 16)
#define _WRS_INLINE_QorIQdcbf 
#define __DELETE_FUNC FALSE
#define EDR_RECORD_SIZE 4096
#define MII_ANAR_100TX_FD 0x0100
#define UPDATE _VX_UPDATE
#define M_rdsLib (166 << 16)
#define _ALLOC_ALIGN_SIZE _ppcAllocationQuantumSize
#define __ISO_C_VISIBLE 1999
#define S_iosLib_CONTROLLER_NOT_PRESENT ENXIO
#define _VX_VOIDFUNCPTR_DEFINED 
#define ARMSA110 _VX_ARMSA110
#define _PPC_L1CFG_NWAY_V(x) (x >> 12)
#define EVENT_MSGSRECEIVE CLASS3_EVENT(41)
#define _DBCR0_DAC1R 0x00080000
#define _VX_VOID_FROM_CONST(x) (void *)(x)
#define _DBCR0_DAC1W 0x00040000
#define _PPC_ESR_BO 0x00020000
#define _PPC_TCR_WPEXT_U 0x0040
#define M_if_ul (122 << 16)
#define LOCAL_MEM_LOCAL_ADRS 0x00000000
#define FIONFREE64 51
#define __DBL_MAX_EXP__ 1024
#define IPCOM_DRV_ETH_MAX_MULTIADDR 32
#define PCI_IN_ATTR_RTT_LM_READ_NO_SNOOP 0x00040000
#define VX_NATIVE_SCHED_CONSTANT_RDY_Q VX_TRAD_SCHED_CONSTANT_RDY_Q
#define MMUCFG 1015
#define VX_GLOBAL_NO_STACK_FILL FALSE
#define _WRS_CONFIG_KSOURCE 1
#define _WRS_HAS_GCC_ASM_SYNTAX 
#define VXB_REG_WIDTH "regWidth"
#define _DBCR0_DAC2R 0x00020000
#define _DBCR0_DAC2W 0x00010000
#define MII_ANAR_100TX_HD 0x0080
#define EPIC_TM_B1_VEC_REG (EPIC_CCSROFF + 0x02160)
#define MII_PHY_ID1_REG 0x2
#define MMU_PAGE_TBL_ENTRIES_MAX (0x1 << MMU_PAGE_INDEX_BITS_MAX)
#define __INCiosLibh 
#define VXB_BYTE_ORDER_CONVERT_16(flags,data,mask) { if ((flags & VXBAF_ENDIAN_MASK) != mask) { VXBAF_BYTE_SWAP_16(data); flags &= ~(VXBAF_ENDIAN_MASK); flags |= mask; flags ^= (VXBAF_CONVERT_BYTE_ORDER); } }
#define __BSD_VISIBLE 1
#define M_loadRtpLib (186 << 16)
#define SEM_Q_PRIORITY 0x01
#define EPIC_DMA1_INT_VEC (EPIC_DMA1_INT_NUM + EPIC_VEC_IN_IRQ0)
#define CLASS_LIST_SEM_INIT_OPTIONS (SEM_Q_PRIORITY | SEM_DELETE_SAFE | SEM_INVERSION_SAFE)
#define MAX_DRV_NAME_LEN 31
#define _PPC_TCR_DIE_U 0x0400
#define IAC1 312
#define IAC2 313
#define EPIC_EX_INT11_DES_REG (EPIC_CCSROFF + 0x10170)
#define INT_CPU_UNLOCK(key) intCpuUnlock(key)
#define _VA_LIST_ 
#define _PPC_MMUCSR0_IL1MMU_FI_V(x) (x >> 4)
#define MIN_CLASS1_ID 50
#define __eventdefsPh 
#define AIO_LISTIO_MAX 10
#define EPIC_OPT_EXPIN_MSK (EPIC_EIDR_EX_PIN >> 16)
#define _WRS_CONFIG_DEFAULT_GPP 1
#define SM_BASE_ADRS LOCAL_MEM_LOCAL_ADRS
#define STACK_ROUND_DOWN(x) ROUND_DOWN(x, _STACK_ALIGN_SIZE)
#define IPCOM_USE_MD5 
#define _POSIX_TZNAME_MAX 3
#define _POSIX_SSIZE_MAX 32767
#define __INCmemLibh 
#define _VX_SH7700 134
#define VXB_BYTE_ORDER_CONVERT_32(flags,data,mask) { if ((flags & VXBAF_ENDIAN_MASK) != mask) { VXBAF_BYTE_SWAP_32(data); flags &= ~(VXBAF_ENDIAN_MASK); flags |= mask; flags ^= (VXBAF_CONVERT_BYTE_ORDER | VXBAF_CONVERT_SHORT_ORDER); } }
#define _IFLAG_403_SPEC 0x0080
#define TRG_ACTION_UNSET { vxAtomicAnd ((atomic_t*)&evtAction, ~(0x0001)); }
#define S_taskLib_TASK_HOOK_NOT_FOUND (M_taskLib | 103)
#define EPIC_BITS_M2N(x,y) (( 1 << ((y)-(x)+1) ) - 1) << (x)
#define _EXC_OFF_ALIGN 0x00600
#define MC68010 _VX_MC68010
#define _PPC_SPEFSCR_FOVF 0x00000100
#define EPIC_TM_B1_DES_REG (EPIC_CCSROFF + 0x02170)
#define CPU_PWR_TASK_P_STATE (cpuPwrP0State)
#define WV_REV_ID_BASE6 0xb1b10000
#define _STD_USING_CLOCK_T 
#define M85XXRIO_OSAR(base) (CAST(VUINT32 *)(((char*)base) + 0x11014))
#define SEM_INTERRUPTIBLE 0x20
#define __INCvxWorksCommonh 
#define WIND_OBJ_CORE_HANDLE_ATTRIBUTES 0x8
#define M85XXRIO_ROWTAR0(base) (CAST(VUINT32 *)(((char*)base) + 0x10C00 ))
#define MEM_ALLOC_ERROR_EDR_WARN_FLAG 0x200
#define BSP_REV "/6"
#define FIT_DIVIDER_TAP_14 14
#define IPCOM_FILE_NATIVE 3
#define STOPB 0x20
#define _IFORM_EVX_10 100
#define _IFORM_EVX_11 101
#define _IFORM_EVX_12 102
#define _IFORM_EVX_13 103
#define STACK_NAME_V4 1
#define VX_DEALLOC_TCB 0x8000
#define FIT_DIVIDER_TAP_16 16
#define EVENT_IDLE_TASK_ID CONTROL_EVENT(19)
#define _STDARG_H 
#define M85XXRIO_ROWTARn(base,n) (CAST(VUINT32 *)(((char*)base) + 0x10C00 + ((n)*0x20)))
#define TRG_ON 0x10000000
#define M85XX_DCR0(base) (CAST(VUINT32 *)((base) + 0xe0f1c))
#define M85XX_DCR1(base) (CAST(VUINT32 *)((base) + 0xe0f20))
#define PCI_ID_I82559ER 0x12098086
#define _PC_PIPE_BUF 12
#define S_memLib_WRONG_PART_ID (M_memLib | 6)
#define __INCb_mode_th 
#define LAWAR_TGTIF_PCI2 0x00100000
#define _PC_VDISABLE 20
#define FIT_DIVIDER_TAP_18 18
#define __LONG_LONG_MAX__ 9223372036854775807LL
#define __INCselectLibh 
#define M85XX_L2SRBAR_ADDR_EA_MSK 0x0000000F
#define CACHE_DRV_PHYS_TO_VIRT(pFuncs,adrs) (((pFuncs)->physToVirtRtn == NULL) ? (void *) (adrs) : ((void *) ((pFuncs)->physToVirtRtn) (adrs)))
#define INCLUDE_SELECT 
#define KERNEL_LOCK_OWNER_GET() (kernelLockOwnerGet())
#define _MMU_TLB_PERM_UX 0x00040000
#define EPIC_SR_OUT_MU2_INT_NUM 39
#define FEXCL _FEXCL
#define EVENT_CONFIG CONTROL_EVENT(4)
#define EPIC_ECM_INT_VEC (EPIC_ECM_INT_NUM + EPIC_VEC_IN_IRQ0)
#define O_CNTRL _FCNTRL
#define INCLUDE_WDB_DIRECT_CALL 
#define __INCstdlibh 
#define LAWAR_SIZE_2GB 0x0000001E
#define BOOT_HOST_LEN 20
#define EXT_MAX_IRQS 200
#define ENOTEMPTY 15
#define _VX_SH7750 137
#define FLASH_WINDOW_SIZE 0x00800000
#define M_smObjLib (88 << 16)
#define PASSFS_CACHE TRUE
#define EVENT_TASKUNSAFE CLASS3_EVENT(7)
#define INCLUDE_MEM_MGR_FULL 
#define MPC85XX_I2C_STATUS_REG_MBB 0x20
#define INCLUDE_WDB_BP 
#define EPIC_IN_INT2_DES_REG (EPIC_CCSROFF + 0x10250)
#define BOOT_ADDR_LEN 30
#define WDB_COMM_TYCODRV_5_2 2
#define EVENT_RTP_LOAD CLASS3_EVENT(81)
#define MMU_STATE_SUP_RWX_USR_R (MMU_STATE_SUP_RWX | _MMU_UR)
#define __INCb_time_th 
#define MMU_STATE_SUP_RWX_USR_W (MMU_STATE_SUP_RWX | _MMU_UW)
#define MMU_STATE_SUP_RWX_USR_X (MMU_STATE_SUP_RWX | _MMU_UX)
#define SH7410 _VX_SH7410
#define INCLUDE_MSG_Q_CREATE_DELETE 
#define PCI2_INBOUND_TRANS_ADRS_REG1(base) CVPUINT32(base, 0x9DE0)
#define S_smLib_INVALID_CPU_NUMBER (M_smLib | 2)
#define __INCvxPpcLibh 
#define MII_ADS_SEL_MASK 0x001f
#define MAX_VALUE_PLAT_RATIO 32
#define VX_TASK_NAME_LENGTH 31
#define EVENT_CPC_INVOKE CLASS3_EVENT(231)
#define FD_DEV_NAME "/fd"
#define ENV_VAR_USE_HOOKS TRUE
#define MMU_ATTR_PROT_INDEX_SHIFT 1
#define M85XXRIO_RIWAR_PCIEX 0x02
#define S_symLib_INVALID_SYMBOL_NAME (M_symLib | 5)
#define EPIC_OPT_POLAR_ACT_HIGH 0x00800000
#define ARMARCH7_T _VX_ARMARCH7_T
#define ENOSPC 28
#define _MMU_TLB_SZ_MASK 0x00000f00
#define M_smPktLib (78 << 16)
#define MMU_STATE_MASK_WRITETHROUGH 0x00000010
#define SIO_DEV_LOCK 0x1015
#define RLIMIT_OFILE RLIMIT_NOFILE
#define sioIoctl(pSioChan,cmd,arg) ((pSioChan)->pDrvFuncs->ioctl (pSioChan, cmd, arg))
#define SYM_MASK_EXACT 0x1ff
#define _VX_SIMHPPA 70
#define __INCmsgQLibh 
#define PCI2_OUTBOUND_BASE_ADRS_REG2(base) CVPUINT32(base, 0x9c48)
#define CLASSID_RESTORE(classId) ((CLASS_ID) ((int)classId & ~1))
#define _VX_PPC8560 2013
#define _PTRDIFF_T 
#define M_omsLib (158 << 16)
#define _DBCR0_IAC2_U 0x0040
#define EVENT_OBJ_SIGKILL CLASS2_EVENT(28)
#define _ARCH_jmp_buf_len 8
#define SPRG7_W 279
#define M_bootpLib (73 << 16)
#define INCLUDE_TIMEX 
#define __IDSTRING(name,string) __asm__(".ident\t\"" string "\"")
#define INCLUDE_ANSI_STRING 
#define EVENT_TASKSPAWN CLASS3_EVENT(0)
#define VXBAF_PREVENT_OPTIMIZATION 0x00000100
#define INCLUDE_NETBUFPOOL 
#define M85XXRIO_PELLCCSR(base) (CAST(VUINT32 *)(((char*)base) + 0x0004C ))
#define STATE_TO_VALID_INDEX(state) ((MMU_ATTR_VALID_GET(state)) >> MMU_ATTR_VALID_INDEX_SHIFT)
#define EPIC_IPI_DPATCH_REG0 (EPIC_CCSROFF + 0x00040)
#define _WRS_EVTLOGT1_NOTS 
#define EPIC_IPI_DPATCH_REG2 (EPIC_CCSROFF + 0x00060)
#define EPIC_IPI_DPATCH_REG3 (EPIC_CCSROFF + 0x00070)
#define EVENT_OBJ_MSGCREPLYGET CLASS2_EVENT(39)
#define KERNEL_LOCK_TRY() (kernelLockTry())
#define S_vxdbgLib_CPU_NOT_SUSPENDED VXDBG_ERROR_TO_ERRNO(VXDBG_ERR_CPU_NOT_SUSPENDED)
#define _VX_ALIGN_STACK _ARCH_ALIGN_STACK
#define _WRS_INITDATA __attribute__ ((__section__ (".data.init")))
#define __FLT_MIN_EXP__ (-125)
#define INCLUDE_LBC_CS3 
#define INCLUDE_PRIMARY_TSEC_END 
#define _BRANCH_CACHE 2
#define BLOB_PADDING(dataLength,alignment) (BLOB_PADDED_LENGTH(dataLength,alignment) - dataLength)
#define MMU_ATTR_PROT_SUP_MSK 0x00000007
#define FS_NAMES_ATA_SECONDARY_MASTER ""
#define EPIC_WHO_AM_I1_REG (EPIC_CCSROFF + 0x21090)
#define INT_LOCK_LEVEL 0x0
#define _WRS_REV_INSN_SET_CHANGE(p) (p)
#define EPIC_TSEC2RX_INT_NUM 20
#define F_GETOWN 5
#define EPIC_IN_INT32_VEC_REG (EPIC_CCSROFF + 0x10600)
#define LAWAR_SIZE_2MB 0x00000014
#define SIO_MODE_GET 0x1008
#define _VX_MIPSI32 45
#define EPIC_TSEC1TX_INT_NUM 13
#define EPIC_PERFMON_INT_NUM 28
#define M85XXRIO_ISR(base) (CAST(VUINT32 *)(((char*)base) + 0x11064))
#define _PPC_L1CSR_CPE 0x00010000
#define TRG_CLASS1_INDEX 0
#define KERNEL_APPL_CORE_DUMP_ENABLE FALSE
#define __printf0like(fmtarg,firstvararg) 
#define OM_EXCL 0x20000000
#define SIO_CALLBACK_GET_TX_CHAR 1
#define MMU_STATE_LOCK 0x00800000
#define _WRS_CONFIG_BUILD_MODE_speed 1
#define _VX_MIPSI2 43
#define _VX_MIPSI3 44
#define AIO_TASK_PRIORITY 0
#define __INCvxSmpPh 
#define DEFAULT_VM_MAP_ATTR (MMU_ATTR_VALID | MMU_ATTR_SUP_RWX | MMU_ATTR_CACHE_DEFAULT)
#define VXBAF_BYTE_SWAP_32(data) ((data) = ((((data) & 0xFF) << 24) | (((data) & 0xFF00) << 8) | (((data) & 0xFF0000) >>8) | (((data) >> 24) & 0xFF)))
#define INCLUDE_DOSFS_MAIN 
#define INCLUDE_NET_REM_IO 
#define I2C_ERROR_CYCLE_TIMEOUT (1<<16)
#define NBBY _VX_NBBY
#define FLASH_BASE_ADRS 0xfff00000
#define M85XXRIO_RxWAR_TYPE_WRITE(val) (val << 12)
#define _BSD_SIZE_T_ 
#define LOGIN_PASSWORD "RcQbRbzRyc"
#define FLASH_SPACE_SIZE TOTAL_FLASH_SIZE
#define S_ioLib_MEDIA_CHANGED (M_ioLib | 1)
#define MMU_ATTR_PROT_STATE_NUM 32
#define EVENT_RTPSIGQUEUE CLASS3_EVENT(88)
#define EPIC_VEC_SMSG_IRQ0 (EPIC_VEC_MSG_IRQ0 + EPIC_MAX_MSG_IRQS)
#define EPIC_CISR0_EX_INT(n) (EPIC_BIT(11-(n)) & EPIC_CISR0_EX_INT_MSK)
#define MMU_STATE_MASK_WRITABLE 0x00000c00
#define PCI_OUTBOUND_TRANS_ADRS_REG4(base) CVPUINT32(base, 0x8c80)
#define MII_EXP_PR 0x0002
#define IS_Q_ATTRIBUTE_OK(value) ((value) == QUEUE_INTERRUPTIBLE || (value) == QUEUE_NONINTERRUPTIBLE)
#define INCconfigAllh 
#define _WRS_CONFIG_PPC32_APP_TOOL "diab"
#define __INCvxTypesBaseh 
#define _VX_G200 32
#define M_erfLib (196 << 16)
#define _VX_MIPSI64 47
#define SEMRW_READ_CNT(semId) ( ((SEM_RW_EXT *) ((UINT) semId + sizeof (SEMAPHORE)))->readCount )
#define MAX_NUMBER_RIO_TARGETS 10
#define EPIC_MSISR_REG (EPIC_CCSROFF + 0x01720)
#define M85XXRIO_PGCCSR_OFFSET 0x13c
#define O_RSYNC _FRSYNC
#define VM_STATE_CACHEABLE_WRITETHROUGH MMU_ATTR_CACHE_WRITETHRU
#define DLL_INSERT(list,previousNode,node) { DL_NODE *temp; if ((previousNode) == NULL) { temp = ((DL_LIST *)(list))->head; ((DL_LIST *)(list))->head = (DL_NODE *)(node); } else { temp = ((DL_NODE *)(previousNode))->next; ((DL_NODE *)(previousNode))->next = (DL_NODE *)(node); } if (temp == NULL) ((DL_LIST *)(list))->tail = (DL_NODE *)(node); else temp->previous = (DL_NODE *)(node); ((DL_NODE *)(node))->next = temp; ((DL_NODE *)(node))->previous = (DL_NODE *)(previousNode); }
#define VX_TASK_INITIALIZE(name,prio,options,stackSz,entryPt,arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10) ((taskInitExcStk (&name ##Tcb, #name, (prio), (options), &name ##Stk[STACK_ROUND_UP((stackSz))], STACK_ROUND_UP((stackSz)), &name ##ExcStk [STACK_ROUND_UP((KERNEL_TASK_EXC_STACK_SIZE))], STACK_ROUND_UP((KERNEL_TASK_EXC_STACK_SIZE)), ((FUNCPTR) (entryPt)), (arg1), (arg2), (arg3), (arg4), (arg5), (arg6), (arg7), (arg8), (arg9), (arg10)) == OK) ? ((int) &name ##Tcb) : ((int) NULL))
#define EVENT_SYSCALL_0 CLASS3_EVENT(65)
#define EVENT_SYSCALL_1 CLASS3_EVENT(66)
#define EVENT_SYSCALL_2 CLASS3_EVENT(67)
#define EVENT_SYSCALL_3 CLASS3_EVENT(68)
#define EVENT_SYSCALL_4 CLASS3_EVENT(69)
#define EVENT_SYSCALL_5 CLASS3_EVENT(70)
#define EVENT_SYSCALL_6 CLASS3_EVENT(71)
#define EVENT_SYSCALL_7 CLASS3_EVENT(72)
#define EVENT_SYSCALL_8 CLASS3_EVENT(73)
#define VM_STATE_VALID_NOT MMU_ATTR_VALID_NOT
#define IPCOM_SOCK_NATIVE 4
#define SLL_NEXT(pNode) ( (((SL_NODE *)pNode)->next) )
#define __SMBF 0x0080
#define FIONWRITE 12
#define __INCcoprocPpch 
#define VXBAF_BYTE_SWAP_64(data) 
#define VXB_BUSID_PCIEXPRESS 5
#define EPIC_IN_INT13_VEC_REG (EPIC_CCSROFF + 0x103a0)
#define MMUE500_NUM_STATIC_TLB_ENTIRES 0x10
#define _VX_ARM7TDMI_T 125
#define SPEREG_SET SPE_CONTEXT
#define M_endLib (108 << 16)
#define VXB_ACCESS_REG_WRITE16 0x00000007
#define PCIEX_OUTBOUND_ATTR_REG2(base) CVPUINT32(base, 0xac50)
#define SPRG7_R 263
#define OBJ_VERIFY(objId,classId) objVerify (objId, classId)
#define N_TLB_ENTRIES_BITS 8
#define PC_OFFSET REG_SET_PC
#define M_symLib (28 << 16)
#define atomic32Or_inline atomic32Or
#define HOST_NAME_DEFAULT "bootHost"
#define MMU_ATTR_CACHE_OFF 0x00000080
#define PCI_IN_ATTR_TGI_LM 0x00f00000
#define MMU_ATTR_CACHE_STATE_NUM 16
#define tsecVxbEnd0Num NELEMENTS(tsecVxbEnd0Resources)
#define _PPC_ESF_VEC_OFF (_PPC_ESF_SP_OFF + _PPC_REG_SIZE)
#define FREQ_133_MHZ 133333333
#define _WRS_ARCH_HAS_VXDBG_CPU_CTRL_SUPPORT 
#define ENETRESET 52
#define FDEFER _FDEFER
#define DOSFS_DEFAULT_DATA_DIR_CACHE_SIZE 0x800000
#define VXB_ACCESS_REG_WRITE32 0x00000008
#define _VX_MCORE10 151
#define _VX_MCORE15 152
#define RIO_OP_SUPPORTED_RWRITE 0x00080000
#define MEM_ALIGNED(x) ALIGNED(x, _ALLOC_ALIGN_SIZE)
#define PCI_ATTR_WS_512M 0x0000001c
#define LAWAR_TGTIF_PCI 0x00000000
#define EPIC_IN_INT13_DES_REG (EPIC_CCSROFF + 0x103b0)
#define _VX_FD_SET(n,p) ((p)->fds_bits[(n)/_VX_NFDBITS] |= (1 << ((n) % _VX_NFDBITS)))
#define MSG_Q_INTERRUPTIBLE 0x04
#define SS_1D_5 5
#define INCLUDE_BOOT_LINE_INIT 
#define SS_1D_8 1
#define DDR_SDRAM_CFG 0x110
#define _VX_SIMNT 100
#define EPIC_GCR_RESET EPIC_BIT(31)
#define MII_AN_ADS_REG 0x4
#define _VX_SH7000 131
#define _PARM_BIG_ENDIAN 1234
#define VXB_REMOVAL_INSTANCE 0x00001000
#define G200 _VX_G200
#define VM_STATE_GUARDED MMU_ATTR_CACHE_GUARDED
#define RIO_CHANNEL_GENERIC 0x00000001
#define CHAR_MAX 255
#define _IFIELD_FRA(x) ((0x001f0000 & x) >> 16)
#define PCI_IN_ATTR_RTT_LM_READ_SNOOP 0x00050000
#define _WRS_VA_ADDR(x) ((va_list *)x)
#define _PPC_WORD_SIZE 32
#define INCLUDE_MOT_TSEC_END 
#define VXB_ACCESS_REG_WRITE64 0x00000009
#define CONSOLE_BAUD_RATE 115200
#define DS_2D_5 8
#define DS_2D_8 4
#define _PPC_ESR_PPR_U 0x0400
#define _IFIELD_BO(x) ((0x03e00000 & x) >> 21)
#define EPIC_IN_INT0_DES_REG (EPIC_CCSROFF + 0x10210)
#define PCI2_OUTBOUND_BASE_ADRS_REG4(base) CVPUINT32(base, 0x9c88)
#define INCLUDE_END_COMMON 
#define FLASH_SECTOR_SIZE 0x00020000
#define _VX_LOW32(x) (long) (((long long)(x)) & (unsigned long) 0xffffffff)
#define EOS '\0'
#define DELETE_DONE OK
#define _ARCH_FLT_RADIX 2
#define M85XX_PORDEVSR_PCI_MODE_MASK 0x00800000
#define _PARM_BUFSIZ 1024
#define SM_INT_USER_1 8
#define SM_INT_USER_2 9
#define _PPC_TCR_FPEXT_U 0x0040
#define SYSFLG_WDB 0x200
#define VXB_ACCESS_REG_READ64 0x00000005
#define CS3_BNDS 0x018
#define _MMU_TLB_SZ_256M 0x00000900
#define S_vxdbgLib_INVALID_EVENT_TYPE VXDBG_ERROR_TO_ERRNO(VXDBG_ERR_INVALID_EVENT_TYPE)
#define __REGISTER_PREFIX__ 
#define M85XXRIO_AIDCAR(base) (CAST(VUINT32 *)(((char*)base) + 0x0008))
#define _VX_SH7040 133
#define VXB_PARAM_INT32 0x0001
#define S_iosLib_DUPLICATE_DEVICE_NAME EINVAL
#define VXB_INTR_TRIG_LEVEL 0x20
#define _WRS_USAGE_WARNING(x) _WRS_DEPRECATED(x)
#define S_vmLib_NOT_PAGE_ALIGNED (M_vmLib | 1)
#define EIDRM 84
#define EPIC_RES47_INT_VEC (EPIC_RES47_INT_NUM + EPIC_VEC_IN_IRQ0)
#define VXDBG_MEM_WIDTH_WRITE vxdbgMemWrite
#define REG_SET_XER (REG_SET_CR + 4)
#define MPC85XX_I2C_STATUS_REG_MCF 0x80
#define _PC_NAME_MAX 9
#define __INCmiiLibh 
#define _DBCR0_RST 0x30000000
#define _PPC_ESF_SIZE (9 * _PPC_REG_SIZE + _PPC_REG_SET_SIZE)
#define SM_INT_MAILBOX_R1 5
#define __INCivPpch 
#define SM_INT_MAILBOX_R4 7
#define RIO_CFG_INDEX 5
#define MPC85XX_I2C_STATUS_REG_BCSTM 0x08
#define MII_CR_AUTO_EN 0x1000
#define HOST_USER_DEFAULT "target"
#define _WRS_CONFIG_OBJECT_VERIFICATION 1
#define INCLUDE_VXMUX_NULLBUFPOOL 
#define REV2_SILICON 
#define _PC_MAX_CANON 7
#define IPCOM_USE_KEY_DB_CMD_VERIFY 
#define M8260_DPPC_VALUE 0x08000000
#define PCI2_INT_ACK (CCSBAR + 0x9008)
#define MAX_MAC_DEVS 4
#define EVENT_TASK_CPU_AFFINITY_SET CLASS3_EVENT(230)
#define EPIC_MAX_MSG_IRQS 4
#define ALIGN_REGS _VX_ALIGN_REGS
#define _PPC_ESR_AP 0x00080000
#define SPIN_LOCK_ISR_TAKE(x) (spinLockIsrTake (x) )
#define EVENTS_FETCH 0x80
#define INCLUDE_SEM_DELETE 
#define TLB_GLOBAL_BIT 25
#define EPIC_IN_INT25_DES_REG (EPIC_CCSROFF + 0x10530)
#define TIMING_CFG_0 0x104
#define TIMING_CFG_1 0x108
#define TIMING_CFG_2 0x10C
#define DDR_OFFSET 0x2000
#define _DBCR2_DAC12M_U 0x00c0
#define MII_PHY_100 0x0040
#define VXB_PARAM_INT64 0x0002
#define FIOBAUDRATE 4
#define __INCsllLibh 
#define CLASS3_EVENT(id) (MIN_CLASS3_ID + id)
#define M85XX_I2C1_BASE 0x3000
#define WDB_COMM_TIPC 9
#define PCI_IN_ATTR_RTT_LM_READ_UNLOCK_L2_CACHE_LINE 0x00070000
#define SYM_IS_TEXT(symType) ((symType) & SYM_TEXT)
#define _WRS_CONFIG_BUILD_KERNEL 1
#define _PPC_MSR_CE_U 0x0002
#define _PPC_MMUCSR0_L2TLB1_FI_V(x) (x >> 1)
#define VXB_PCI_BUS_CFG_WRITE(pDev,byteOffset,transactionSize,data) ((_func_vxbPciDevCfgWrite == NULL) ? ERROR : _func_vxbPciDevCfgWrite (pDev, byteOffset, transactionSize, (UINT32) data))
#define M85XX_L2CTL_L2MEXTDIS_BIT 20
#define ns165500Num NELEMENTS(ns165500Resources)
#define MEM_BLOCK_ERROR_MASK 0x0c
#define EVENT_OBJ_SIGWAIT CLASS2_EVENT(32)
#define FNONBIO _FNONBLOCK
#define _IFIELD_IMM(x) ((0x0000f000 & x) >> 12)
#define CHAR_MIN 0
#define __INCvxAtomicArchLibCommonh 
#define EVENT_TASKSUSPEND CLASS3_EVENT(4)
#define VM_STATE_GUARDED_NOT 0
#define CHAR_FROM_CONST(x) _VX_CHAR_FROM_CONST(x)
#define __VERSION__ "4.1.2"
#define _VX_MC68LC040 6
#define EVENT_ISR_DISPATCHER_DONE CLASS3_EVENT(61)
#define PCIEX_OUTBOUND_TRANS_EXT_ADRS_REG0(base) CVPUINT32(base, 0xac04)
#define PCIEX_OUTBOUND_TRANS_EXT_ADRS_REG1(base) CVPUINT32(base, 0xac24)
#define RIO_SWITCH_PORT_SRC_MASK 0xff000000
#define PCIEX_OUTBOUND_TRANS_EXT_ADRS_REG4(base) CVPUINT32(base, 0xac84)
#define EPIC_DMA0_INT_NUM 4
#define DEFAULT_ALIVE_TIMEOUT 600
#define VME_AM_STD_SUP_DATA 0x3d
#define MMU_STATE_CACHEABLE 0x00000000
#define CLASS_OFFSET 0xB
#define SLL_REMOVE(list,deleteNode,previousNode) { if (((SL_NODE *)(previousNode)) == NULL) { ((SL_LIST *)(list))->head = ((SL_NODE *)(deleteNode))->next; if (((SL_LIST *)(list))->tail == ((SL_NODE *)(deleteNode))) ((SL_LIST *)(list))->tail = NULL; } else { ((SL_NODE *)(previousNode))->next = ((SL_NODE *)(deleteNode))->next; if (((SL_LIST *)(list))->tail == ((SL_NODE *)(deleteNode))) ((SL_LIST *)(list))->tail = ((SL_NODE *)(previousNode)); } }
#define SYSFLG_PROXY 0x100
#define EPIC_PERFMON_0_MSK_REG1 (EPIC_CCSROFF + 0x01360)
#define M85XX_L2CEWCRn(x,n) (CAST(VUINT32 *)((x + 0x20018) + (n * 0x10)))
#define IPCOM_KEY_DB_KEY_ENCRYPTING_KEY "donald duck"
#define _WRS_CONFIG_FEATURE_IPNET_BUILD "speed"
#define EVENT_RTP_DELETE_STATE VXEV26
#define S_semLib_INVALID_STATE (M_semLib | 101)
#define EPIC_EX_INT0_VEC_REG (EPIC_CCSROFF + 0x10000)
#define _IFORM_EVX_3 93
#define PCI_ATTR_BS_BIT 0x40000000
#define EVENT_TASKDELAY CLASS3_EVENT(2)
#define MII_AN_PRTN_NEXT_REG 0x8
#define MII_EXP_FAULT 0x0010
#define WV_REV_ID_CURRENT_SMP WV_REV_ID_VXWORKS_6_7_SMP
#define __INT_WCHAR_T_H 
#define VXWORKS_VERSION RUNTIME_NAME " " RUNTIME_VERSION
#define __BIG_ENDIAN__ 1
#define IS_CLASS2_EVENT(event) ((event >= MIN_CLASS2_ID) && (event <= MAX_CLASS2_ID))
#define MII_PHY_LINK_UNKNOWN 0x0
#define S_memLib_PAGE_SIZE_UNAVAILABLE (M_memLib | 5)
#define _VX_PPC601 91
#define _VX_PPC602 92
#define _VX_PPC603 93
#define _VX_PPC604 94
#define SPD_SIZE 256
#define _PC_REC_INCR_XFER_SIZE 14
#define SPIN_LOCK_TASK_INIT(x,y) ( spinLockTaskInit(x, y))
#define _DBSR_DAC1R_U 0x0008
#define _WRS_IS_SUPV_EXC() (((excInfo.msr & _PPC_MSR_PR) == _PPC_MSR_PR) ? FALSE : TRUE)
#define S_msgQLib_NON_ZERO_TIMEOUT_AT_INT_LEVEL (M_msgQLib | 2)
#define _WRS_CONFIG_COMPONENT_IPPPP 1
#define WIND_CLASS_INST_RTN 0x1c
#define EPIC_EX_INT8_DES_REG (EPIC_CCSROFF + 0x10110)
#define USER_B_CACHE_ENABLE 
#define O_RDWR 2
#define VX_COPROC1_TASK 0x01000000
#define _PPC_ESF_R11 _PPC_ESF_R(11)
#define _T_PTRDIFF_ 
#define EPERM 1
#define ARM7TDMI _VX_ARM7TDMI
#define FIOSELECT 28
#define M_m2RipLib (110 << 16)
#define TPR 0x0000
#define _WRS_CONFIG_APP_TOOL_diab 1
#define _PPC_ESF_R12 _PPC_ESF_R(12)
#define VM_STATE_WBACK_NOT MMU_ATTR_CACHE_WRITETHRU
#define EPIC_EX_INT0_DES_REG (EPIC_CCSROFF + 0x10010)
#define WIND_TCB_T10 WIND_TCB_R24
#define WIND_TCB_T11 WIND_TCB_R25
#define WIND_TCB_T13 WIND_TCB_R27
#define WIND_TCB_T14 WIND_TCB_R28
#define WIND_TCB_T15 WIND_TCB_R29
#define WIND_TCB_T16 WIND_TCB_R30
#define WIND_TCB_T17 WIND_TCB_R31
#define S_objLib_OBJ_DELETED (M_objLib _WRS_BIT_OR 3)
#define MMU_ATTR_VALID_STATE_NUM 2
#define __SSTR 0x0200
#define EVENT_WINDWDCANCEL CLASS2_EVENT(12)
#define EPIC_IPI_DPATCH0_REG2 (EPIC_CCSROFF + 0x20060)
#define CS1_CONFIG 0x084
#define BUS_TYPE_NONE NONE
#define BOOT_FIELD_LEN 160
#define VX_TASK_PRIORITY_MIN 0
#define LLSB(x) ((x) & 0xff)
#define RIO_CSR_LCS_HIGHBAR 0x58
#define WIND_TCB_R11 (WIND_TCB_REGS + REG_SET_GR(11))
#define EPIC_EOI_REG (EPIC_CCSROFF + 0x000b0)
#define EPIC_EIVPR_VECTOR_MSK (0xffff)
#define S_objLib_OBJ_INVALID_OWNER (M_objLib _WRS_BIT_OR 12)
#define M85XX_L2ERRINJCTL(x) (CAST(VUINT32 *)((x + 0x20E08)))
#define EPIC_GT_B_INTERRUPT 30
#define __hardfp 1
#define SIO_KYBD_MODE_SET 0x1011
#define MMU_STATE_CACHEABLE_NOT 0x00000008
#define __INCclassLibPh 
#define _WRS_DEPRECATED(x) __attribute__((deprecated))
#define __SLBF 0x0001
#define _ARCH_LDBL_MIN 2.2250738585072014e-308L
#define _POSIX_STREAM_MAX 8
#define EPIC_VEC_EXT_IRQ0 0
#define EPIC_TM_A_FREQ_REG (EPIC_CCSROFF + 0x010f0)
#define _ARCH_SHRT_MAX 32767
#define INCLUDE_POOL 
#define WIND_CLASS_TYPE 0x38
#define EPIC_CTPR_TASKPRI_MSK (EPIC_BIT(3) | EPIC_BIT(2) | EPIC_BIT(1) | EPIC_BIT(0))
#define _SYS_SIZE_T_H 
#define USPRG0 256
#define RLIMIT_NPROC 7
#define VM_STATE_GLOBAL_NOT 0
#define M85XX_L2CTL_L2LFRID_BIT 8
#define INCLUDE_IPCOM_USE_ETHERNET 
#define EPIC_GTVPR_INTR_ACTIVE EPIC_BIT(30)
#define DDRBA (CCSBAR | DDR_OFFSET)
#define SIO_MCTRL_ISIG_MASK 0x100F
#define SEM_NO_RECURSE 0x400
#define EPIC_IN_INT26_VEC_REG (EPIC_CCSROFF + 0x10540)
#define _BIG_ENDIAN 1234
#define __SIZE_T__ 
#define MII_EXP_PRT_AN 0x0001
#define MII_PHY_LINK_AUTO 0x1
#define CACHE_DMA_INVALIDATE(adrs,bytes) CACHE_DRV_INVALIDATE (&cacheDmaFuncs, (adrs), (bytes))
#define M_fmsLib (155 << 16)
#define M85XXRIO_RxWAR_SIZE_1MB 21
#define TASK_PRIORITY_SELF -1
#define _EXC_NEW_OFF_SYSTIMER _EXC_OFF_DECR
#define __SRW 0x0010
#define EPIC_SMSG_VEC_REG_INTERVAL 0x20
#define MCSRR1 571
#define PCI_IN_ATTR_RTT_RIO_READ 0x00040000
#define _EXC_OFF_INST 0x00400
#define _ARCH_va_start(list,last_arg) (list = (va_list)(&last_arg + 1))
#define S_symLib_TABLE_NOT_EMPTY (M_symLib | 3)
#define WRS_DATA_ALIGN_BYTES(x) _WRS_DATA_ALIGN_BYTES(x)
#define WDB_POST_KERNEL_INIT 0
#define MMU_PAGE_OPTIMIZE (*(mmuLibFuncs.mmuPageOptimize))
#define EPIC_GT_A_INTERRUPT 23
#define EPIC_INT_ACK_REG (EPIC_CCSROFF + 0x000a0)
#define WIND_TCB_R18 (WIND_TCB_REGS + REG_SET_GR(18))
#define MMU_ATTR_CACHE_DEFAULT 0x00000800
#define _IFORM_EVS_1 86
#define EPIC_TSEC1TX_INT_VEC (EPIC_TSEC1TX_INT_NUM + EPIC_VEC_IN_IRQ0)
#define _VX_MCORE200 153
#define EPIC_PERFMON_INT_VEC (EPIC_PERFMON_INT_NUM + EPIC_VEC_IN_IRQ0)
#define MMU_MAX_PHYS_BITS_GET (*(mmuLibFuncs.mmuMaxPhysBitsGet))
#define INCLUDE_TASK_CREATE_DELETE 
#define EPIC_IN_INT26_DES_REG (EPIC_CCSROFF + 0x10550)
#define EVENT_OBJ_SIGSUSPEND CLASS2_EVENT(27)
#define M85XX_L2SRBAR_ADDR_MSK 0xFFFFC000
#define INT_MASK(src,des) rlwinm des, src, 0, _PPC_MSR_BIT_EE+1, _PPC_MSR_BIT_EE-1; rlwinm des, des, 0, _PPC_MSR_BIT_CE+1, _PPC_MSR_BIT_CE-1
#define INCLUDE_INTCTLR_LIB 
#define CACHE_TEXT_LOCAL_UPDATE(adrs,bytes) CACHE_TEXT_UPDATE(adrs, bytes)
#define ELOOP 64
#define _IFORM_VA_1 62
#define _IFORM_VA_2 63
#define IVEC_TO_INUM(intVec) ((int) (intVec))
#define _VX_PPC85XX 2004
#define LOCAL_MEM_SIZE2 0x4000000
#define LBC_CS3_LOCAL_SIZE_MASK 0xfff00000
#define _WRS_CHANGE_INSN_SET_PTR(p) (p)
#define F_SETFD 2
#define INCLUDE_SIGNALS 
#define F_SETFL 4
#define __INCconfigh 
#define MII_TECH_MASK MII_ADS_TECH_MASK
#define _EXC_PROG_SRR1_PRIV 0x00040000
#define _VX_DBLFUNCPTR_DEFINED 
#define _DBCR2_DAC2US_U 0x0c00
#define _POSIX_SYNC_IO 0
#define EPIC_TSEC4RX_INT_NUM 22
#define MMU_PAGE_INDEX_BITS_MAX 10
#define FWRITE _FWRITE
#define _DBSR_IDE_U 0x8000
#define EPIC_MSG_EN_REG (EPIC_CCSROFF + 0x01500)
#define SIO_MODEM_CD 0x08
#define _ARCH_SHRT_MIN (-32767-1)
#define __SWR 0x0008
#define SEM_M_SAFE_Q_FLUSH 0x2
#define _PARM_L_ctermid 64
#define _TOOL_HDR_STRINGIFY(x) #x
#define EVENT_SEMGIVE CLASS3_EVENT(12)
#define __INCivh 
#define SPEFSCR 512
#define _PPC_ESF_R0 _PPC_ESF_R(0)
#define PCI_OUTBOUND_TRANS_EXT_ADRS_REG0(base) CVPUINT32(base, 0x8c04)
#define SIO_ERROR_PARITY 1
#define WV_EVT_PROTO_REV_1_EAR 1
#define EVT_OBJ_6(OBJ,CLASS,evtId,ARG1,ARG2,ARG3,ARG4,ARG5,ARG6) do { if ( ACTION_IS_SET ) { EVT_OBJ_6_T evt_obj_6; evt_obj_6.objId = OBJ; evt_obj_6.classId = CLASS; evt_obj_6.args [0] = (int)ARG1; evt_obj_6.args [1] = (int)ARG2; evt_obj_6.args [2] = (int)ARG3; evt_obj_6.args [3] = (int)ARG4; evt_obj_6.args [4] = (int)ARG5; evt_obj_6.args [5] = (int)ARG6; eventPointSwHandle(evtId, &evt_obj_6, sizeof evt_obj_6); } } while ((0))
#define _PPC_ESF_R3 _PPC_ESF_R(3)
#define MII_CR_DEF_0_MASK 0xca7f
#define _WRS_FASTDATA __attribute__ ((__section__ (".data.fast")))
#define FIOSETOPTIONS FIOOPTIONS
#define _PPC_ESF_R4 _PPC_ESF_R(4)
#define _EXC_INFO_NIA 0x8000
#define VXBAF_ENDIAN_MASK 0xFFFF0000
#define PPC_DECR_INT_ID 599
#define FREQ_266_MHZ 266666666
#define OPT_REG_WRITE8 0x05
#define MSG_Q_TYPE_MASK 0x01
#define O_RDONLY 0
#define EPIC_IPI_DPATCH1_REG2 (EPIC_CCSROFF + 0x21060)
#define EPIC_IPI_DPATCH1_REG3 (EPIC_CCSROFF + 0x21070)
#define EINVAL 22
#define _ANSI_STDARG_H_ 
#define __INCresourceh 
#define RIO_CHANNEL_AVAILABLE NULL
#define MMU_CURRENT_SET (*(mmuLibFuncs.mmuCurrentSet))
#define __INCstringh 
#define _PPC_ESF_R7 _PPC_ESF_R(7)
#define RIO_FEATURES_EXTADDR_34 0x2000
#define RAND_MAX _PARM_RAND_MAX
#define S_selectLib_NO_SELECT_SUPPORT_IN_DRIVER (M_selectLib | 1)
#define _MMU_TLB_SZ_SHIFT 8
#define _DEFINED_atomic_t 
#define _WRS_READ_PREFETCH(ptr) __builtin_prefetch((ptr),0)
#define _SIZET_ 
#define EPIC_MSIDR_EX_PIN EPIC_BIT(31)
#define F_SETLK 8
#define MMU_ATTR_SPL_1 0x00002000
#define MMU_ATTR_SPL_2 0x00004000
#define MMU_ATTR_SPL_3 0x00008000
#define MMU_ATTR_SPL_4 0x00010000
#define MMU_ATTR_SPL_5 0x00020000
#define MMU_ATTR_SPL_6 0x00040000
#define MMU_ATTR_SPL_7 0x00080000
#define ENTIRE_CACHE ULONG_MAX
#define M85XX_L2CTL_L2LO_BIT 13
#define MII_AN_NEXT_REG 0x7
#define RIO_FEATURES_EXTADDR_50 0x4000
#define __SIZE_TYPE__ unsigned int
#define _VX_ALIGN_REGS _ARCH_ALIGN_REGS
#define __INCkernelBaseLibPh 
#define M_dshm (200 << 16)
#define OPT_REG_WRITE_READ_BACK_16 0x0A
#define EPIC_PERFMON_0_MSK_REG0 (EPIC_CCSROFF + 0x01350)
#define RIO_FEATURES_EXTADDR_66 0x8000
#define MMU_STATE_MASK_WIMG 0x0000001F
#define CDS85XX_FLASH_RESERVED_SIZE 0x00100000
#define DAC1 316
#define DAC2 317
#define EPIC_SMSG_INT0_DES_REG (EPIC_CCSROFF + 0x11c10)
#define FREQ_333_MHZ 333333333
#define EPIC_SR_IN_MU2_INT_NUM 40
#define OPT_REG_WRITE_READ_BACK_32 0x0B
#define _IFIELD_OPCD(x) ((0xfc000000 & x) >> 26)
#define CLOCK_THREAD_CPUTIME_ID 0x3
#define MEM_ALLOC_ERROR_SUSPEND_FLAG 0x40
#define EVENT_SALRUN_SOCKCLOSE CLASS3_EVENT(103)
#define EVENT_WDCREATE CLASS3_EVENT(16)
#define M85XXRIO_SEGS_PER_CHANNEL 4
#define INCLUDE_CPU_LIGHT_PWR_MGR 
#define M85XX_LTESR(base) (CAST(VUINT32 *)((base) + 0x50B0))
#define IPCOM_USE_SHELL IPCOM_SHELL_NATIVE
#define LAWAR_ENABLE 0x80000000
#define CORE_DUMP_SKIP_TEXT_SECTION TRUE
#define _PPC_L1CFG_NWAY_MASK 0x000FF000
#define BOOT_DEV_LEN 40
#define M85XXRIO_ROWBAR_OFFSET(n) (0x10C08 + ((n)*0x20))
#define MII_ID2_REVISON_MASK 0x000f
#define O_NOATIME _FNOATIME
#define EVENT_OBJ_SEMRTAKE CLASS2_EVENT(47)
#define REAL_SPD_SIZE 256
#define _VX_FR500 171
#define PPC8260 _VX_PPC8260
#define PCI_IO2LOCAL(x) (((UINT32)x - PCI_IO_ADRS) + CPU_PCI_IO_ADRS)
#define EPIC_SR_IN_MU2_INT_VEC (EPIC_SR_IN_MU2_INT_NUM + EPIC_VEC_IN_IRQ0)
#define _IFIELD_STRM(x) ((0x00600000 & x) >> 21)
#define OPT_REG_WRITE_READ_BACK_64 0x0C
#define EPIC_IPIVPR_INTR_MSK EPIC_BIT(31)
#define MII_10MBS 10000000
#define _DBSR_IDE 0x80000000
#define __LDBL_EPSILON__ 2.2204460492503131e-16L
#define MEM_BLOCK_ERROR_RETURN 0
#define ARM710A _VX_ARM710A
#define FIOLABELGET 33
#define PCI2_OUTBOUND_TRANS_EXT_ADRS_REG1(base) CVPUINT32(base, 0x9c24)
#define PCI2_OUTBOUND_TRANS_EXT_ADRS_REG2(base) CVPUINT32(base, 0x9c44)
#define INST_BCLRL_MASK 0xfc00ffff
#define O_SYNC _FSYNC
#define _FCNTRL 0x40000
#define VXDBG_BP_BY_ADDR_RANGE_REMOVE(pClient,retVal,startAddr,endAddr) { VXDBG_BP_DEL_INFO bpInfo; bpInfo.type = BP_BY_ADDR_RANGE_DELETE; bpInfo.pClnt = pClient; bpInfo.info.addrRange.startAddr = startAddr; bpInfo.info.addrRange.endAddr = endAddr; VXDBG_BP_DELETE(bpInfo, retVal); }
#define EPIC_SMSG_DEST_REG_VECREGOFF 0x10
#define _FSHLOCK 0x0080
#define M85XX_L2CEWCR_SIZMASK_MSK 0x0FFFFFFF
#define FIODISCARDGET 70
#define EPIC_IIVPR_INTR_ACTIVE EPIC_BIT(30)
#define MMU_PAGE_BLOCK_SIZE_GET (*(mmuLibFuncs.mmuBlockSizeGet))
#define EPIC_RES46_INT_NUM 46
#define INCLUDE_CONSTANT_RDY_Q 
#define _DEFINED_pid_t 
#define __INCeventLibPh 
#define PCI2_INBOUND_TRANS_ADRS_REG2(base) CVPUINT32(base, 0x9DC0)
#define __INCb_struct__Sched_paramh 
#define SLL_LAST(pList) ( (((SL_LIST *)pList)->tail) )
#define MMU_STATE_MEM_COHERENCY_NOT 0x00000000
#define PCI_ERROR_CAPTURE_DISABLE_REG 0x8e04
#define EVENT_RTPSIGTIMEDWAIT CLASS3_EVENT(91)
#define SYM_IS_ABS(symType) ((symType) & SYM_ABS)
#define PCI_ATTR_WS_1G 0x0000001d
#define PCI_ATTR_WS_1M 0x00000013
#define USER_D_CACHE_ENABLE 
#define DMA_CHANNEL_0 0
#define DMA_CHANNEL_1 1
#define DMA_CHANNEL_2 2
#define DMA_CHANNEL_3 3
#define S_memLib_INVALID_ALIGNMENT (M_memLib | 8)
#define INCLUDE_LOCK_TEXT_SECTION 
#define IPCOM_USE_MUX2 
#define OBJ_HANDLE_TBL_SIZE 256
#define MII_PHY_NULL 0xff
#define SYS_MODEL_8543E "Wind River SBC8543E - Security Engine"
#define DEFAULT_FILE_PERM 0000640
#define _DBCR0_RST_U 0x3000
#define EPIC_EX_DEST_REG_VECREGOFF 0x10
#define EPIC_VEC_GT_B_IRQ0 (EPIC_VEC_GT_A_IRQ0 + EPIC_MAX_GT_A_IRQS)
#define DLL_EMPTY(pList) ( (((DL_LIST *)pList)->head == NULL) )
#define PCI_ATTR_WS_2M 0x00000014
#define SYSFLG_VENDOR_1 0x2000
#define SYSFLG_VENDOR_2 0x4000
#define SYSFLG_VENDOR_3 0x8000
#define VXB_ITERATE_ORPHANS 2
#define CUST_ENET4 0xAA
#define CUST_ENET5 0xA0
#define _WRS_LOCK_ALIGN_ticket 128
#define RIO_CAR_PE_FEATURES 0x10
#define S_objLib_OBJ_TIMEOUT (M_objLib _WRS_BIT_OR 4)
#define __SWRNBF (__SWR|__SNBF)
#define RIO_CHANNEL_TAS_SET 3
#define INCLUDE_REBOOT_HOOKS 
#define MPC85XX_I2C_DIG_FILTER_REG_MASK 0x3F
#define MSG_NODE_SIZE(msgLength) (MEM_ROUND_UP((VX_MSG_NODE_SIZE + msgLength)))
#define VXB_BUSID_SPI 21
#define EPIC_MSIVPR_INTR_MSK EPIC_BIT(31)
#define MII_MF_TA_LEN 0x2
#define M85XX_L2SRBAREA1(x) (CAST(VUINT32 *)((x + 0x2010C)))
#define SYS_MODEL_8545E "Wind River SBC8545E - Security Engine"
#define SIO_MODEM_RI 0x10
#define _VX_HIGH32(x) (long) ((((long long)(x)) >> 32) & (unsigned long)0xffffffff)
#define PCI_ATTR_WS_4G 0x0000001f
#define PCI_ATTR_WS_4K 0x0000000B
#define SM_OBJ_MAX_TRIES 5000
#define MII_PHY_DEF_SET 0x1000
#define EPIC_TM_B0_VEC_REG (EPIC_CCSROFF + 0x02120)
#define _DBSR_IAC2_U 0x0040
#define RIO_CAR_DEST_OPERATIONS 0x1c
#define MMU_ENABLE (*(mmuLibFuncs.mmuEnable))
#define STACK_VERSION_MAJOR 3
#define EPIC_DMA0_INT_VEC (EPIC_DMA0_INT_NUM + EPIC_VEC_IN_IRQ0)
#define sioPollInput(pSioChan,inChar) ((pSioChan)->pDrvFuncs->pollInput (pSioChan, inChar))
#define SM_MASTER 0
#define INCLUDE_EXC_SHOW 
#define SYS_MODEL_8547E "Wind River SBC8547E - Security Engine"
#define VXBAF_CONVERT_LONG_LONG 0x00000008
#define _DEFINED_dev_t 
#define _DBCR2_DAC1US_U 0xc000
#define EPIC_IN_INT39_VEC_REG (EPIC_CCSROFF + 0x106e0)
#define _PPC_L1CFG_REPL_V(x) (x >> 18)
#define _IFORM_400_1 57
#define _IFORM_400_3 59
#define VXB_ACCESS_INT_VEC_GET 0x0000000e
#define ON_BOARD_FLASH 1
#define I2C_WRITOP 1
#define EVENT_WINDPENDQGET CLASS2_EVENT(13)
#define EVENT_CPC_DONE CLASS3_EVENT(233)
#define _VX_SH7729 136
#define __INCsmLibh 
#define S_miiLib_PHY_NO_ABLE (M_miiLib | 3)
#define SYS_MODEL_8548E "Wind River SBC8548E - Security Engine"
#define LBC_SDRAM_LOCAL_SIZE LOCAL_MEM_SIZE2
#define S_spinLockLib_LOCK_IN_RECOVERY (M_spinLockLib | 3)
#define M85XX_L2CEWCR_LOCK_BIT 30
#define S_mmuLib_NOT_CONTIGUOUS_STATE (M_mmuLib | 11)
#define VXB_REMOVAL_MASK 0x0000f000
#define EVENT_TIMER_ROLLOVER CONTROL_EVENT(2)
#define _WRS_WRITE_PREFETCH(ptr) __builtin_prefetch((ptr),1)
#define EPIC_TM_B0_DES_REG (EPIC_CCSROFF + 0x02130)
#define S_objLib_OBJ_HANDLE_TBL_FULL (M_objLib _WRS_BIT_OR 15)
#define LOGIN_USER_NAME "target"
#define EVENT_SEMFLUSH CLASS3_EVENT(11)
#define _PPC_MSR_SPE_U 0x0200
#define MMU_PHYS_TRANSLATE (*(mmuLibFuncs.mmuPhysTranslate))
#define SPRG4_W 276
#define EPIC_FEATURES_REG (EPIC_CCSROFF + 0x01000)
#define _PPC_SPEFSCR_FXH 0x10000000
#define _WRS_CONFIG_COMPONENT_USR_SRC 1
#define PCI_ATTR_WS_8K 0x0000000c
#define EBUSY 16
#define EPIC_MSIDR_P0_INT EPIC_BIT(0)
#define _WRS_CONFIG_TASK_CREATE_HOOKS_D 1
#define PCI_INBOUND_TRANS_ADRS_REG1(base) CVPUINT32(base, 0x8DE0)
#define PCI_INBOUND_TRANS_ADRS_REG2(base) CVPUINT32(base, 0x8DC0)
#define PCI_INBOUND_TRANS_ADRS_REG3(base) CVPUINT32(base, 0x8DA0)
#define _IFLAG_4XX_SPEC (_IFLAG_403_SPEC | _IFLAG_405_SPEC | _IFLAG_440_SPEC)
#define O_NDELAY _FNDELAY
#define _DBCR2_DAC1ER_U 0x3000
#define _ARCH_UCHAR_MAX 255
#define _VX_MAP1000 180
#define EPIC_IN_INT39_DES_REG (EPIC_CCSROFF + 0x106f0)
#define MII_PHY_1000T_FD 0x10000
#define _PPC_MSR_MMU_RI_EXTRACT(src,dst) rlwinm dst, src, 0, _PPC_MSR_BIT_IS, _PPC_MSR_BIT_DS
#define VXB_REG_BASE "regBase"
#define EPIC_IN_INT1_VEC_REG (EPIC_CCSROFF + 0x10220)
#define BUFSIZE BUFSIZ
#define VXB_ASSERT_V(cond) 
#define EVENT_WDSTART CLASS3_EVENT(18)
#define MII_PHY_AUTO 0x0010
#define EPIC_MSR_ST(n) (EPIC_BIT(n) & EPIC_MER_ST_MSK)
#define _IFIELD_AA(x) ((0x00000002 & x) >> 1)
#define EPIC_SEC_INT_NUM 29
#define INCLUDE_TASK_HOOKS 
#define MII_PHY_PRE_INIT 0x0001
#define _ARCH_FLT_MIN_EXP (-125)
#define S_ioLib_WRITE_PROTECTED EACCES
#define MCF5400 _VX_MCF5400
#define INCLUDE_COMMON_NET 
#define SPINLOCK_OPERATION_OK 0
#define EPIC_IIVPR_INTR_MSK EPIC_BIT(31)
#define EVT_OBJ_STR_0(OBJ,CLASS,evtId,LENGTH,STRING) do { if (ACTION_IS_SET) { EVT_OBJ_STR_0_T evt_obj_str_0; evt_obj_str_args_0.evt_obj_str.objId = OBJ; evt_obj_str_args_0.evt_obj_str.classId = CLASS; evt_obj_str_args_0.evt_obj_str.pData = STRING; evt_obj_str_args_0.evt_obj_str.length = LENGTH; eventPointSwHandle (evtId, &evt_obj_str_0, sizeof evt_obj_str_0); } } while ((0))
#define WDB_GOPHER_TAPE_NB 10
#define EVT_OBJ_STR_3(OBJ,CLASS,evtId,ARG1,ARG2,ARG3,LENGTH,STRING) do { if (ACTION_IS_SET) { EVT_OBJ_STR_ARGS_3_T evt_obj_str_args_3; evt_obj_str_args_3.evt_obj_str.objId = OBJ; evt_obj_str_args_3.evt_obj_str.classId = CLASS; evt_obj_str_args_3.evt_obj_str.pData = STRING; evt_obj_str_args_3.evt_obj_str.length = LENGTH; evt_obj_str_args_3.args [0] = (int)ARG1; evt_obj_str_args_3.args [1] = (int)ARG2; evt_obj_str_args_3.args [2] = (int)ARG3; eventPointSwHandle (evtId, &evt_obj_str_args_3, sizeof evt_obj_str_args_3); } } while ((0))
#define EVT_OBJ_STR_5(OBJ,CLASS,evtId,ARG1,ARG2,ARG3,ARG4,ARG5,LENGTH,STRING) do { if (ACTION_IS_SET) { EVT_OBJ_STR_ARGS_5_T evt_obj_str_args_5; evt_obj_str_args_5.evt_obj_str.objId = OBJ; evt_obj_str_args_5.evt_obj_str.classId = CLASS; evt_obj_str_args_5.evt_obj_str.pData = STRING; evt_obj_str_args_5.evt_obj_str.length = LENGTH; evt_obj_str_args_5.args [0] = (int)ARG1; evt_obj_str_args_5.args [1] = (int)ARG2; evt_obj_str_args_5.args [2] = (int)ARG3; evt_obj_str_args_5.args [3] = (int)ARG4; evt_obj_str_args_5.args [4] = (int)ARG5; eventPointSwHandle (evtId, &evt_obj_str_args_5, sizeof evt_obj_str_args_5); } } while ((0))
#define SIO_KYBD_LED_GET 0x1014
#define INCLUDE_IPNET_PACKET_POOL_4 
#define TRG_INT_ENT_INDEX 4
#define M85XXRIO_PESCSR(base) (CAST(VUINT32 *)(((char*)base) + 0x00158 ))
#define MII_PHY_1000T_HD 0x20000
#define M_loadSomCoffLib (96 << 16)
#define EPIC_IPI_VEC_REG(irq) (EPIC_IPI_0_VEC_REG + ((irq) * EPIC_IPI_VEC_REG_INTERVAL))
#define MMU_ATTR_SPL_GET(attr) ((attr) & MMU_ATTR_SPL_MSK)
#define RIO_FEATURES_EXTADDR_34_50 0x6000
#define MMU_STATE_MASK_WIMG_WRITABLE_EXECUTE 0x00000000
#define _ARCH_ALIGN_REGS 4
#define EPIC_OPT_SENSE_LVL 0x00400000
#define VX_READ_WRITE_SEMAPHORE(name,numReaders) _WRS_DATA_ALIGN_BYTES(VX_OBJ_ALIGN_SIZE) char name [VX_SEMAPHORE_SIZE + SEM_RW_EXT_SIZE + (SEM_RW_LIST_ENTRY_SIZE * numReaders)]
#define M_smmLib (171 << 16)
#define EROFS 30
#define EPIC_IN_INT1_DES_REG (EPIC_CCSROFF + 0x10230)
#define WIND_OBJ_DELETED 0x100
#define DOSFS_DEFAULT_CREATE_OPTIONS 0x04
#define _PPC_MSR_DS 0x0010
#define INST_MFLR 0x7c0802a6
#define PCI_INBOUND_ATTR_REG2(base) CVPUINT32(base, 0x8DD0)
#define _WRS_TLB_MISS_CLASS_SW 1
#define M_vmLib (84 << 16)
#define _IFLAG_AA 0x0004
#define SYM_MASK_NONE 0x00
#define _IFLAG_405_SPEC 0x0100
#define PCI_LAT_TIMER 0x40
#define S29GL_FLASH_OP_DELAY 
#define M_memLib (17 << 16)
#define VXB_LOST_DEVICES 3
#define AM29XXX _VX_AM29XXX
#define CPU_VARIANT _ppc85XX_e500v2
#define S_vmLib_TEXT_PROTECTION_UNAVAILABLE (M_vmLib | 5)
#define M_sntpsLib (114 << 16)
#define WIND_TCB_PC (WIND_TCB_REGS + REG_SET_PC)
#define _PPC_ESF_R22 _PPC_ESF_R(22)
#define VXB_ACCESS_INT_ENABLE 0x0000000f
#define EPIC_OPT_SENSE_EDG 0x00000000
#define __SEOF 0x0020
#define __INCfcntlcomh 
#define EPIC_DUART_INT_NUM 26
#define MMU_PAGE_UNMAP (*(mmuLibFuncs.mmuPageUnMap))
#define __LONG_MAX__ 2147483647L
#define __WCHAR_T__ 
#define S_semLib_INVALID_QUEUE_TYPE (M_semLib | 103)
#define PPC_ARG0_REG 3
#define EVENT_INT_EXIT_K (MIN_INT_ID - 2)
#define MII_ANAR_REMORT_FAULT 0x2000
#define _PPC_MMUCSR0_L2TLB0_FI 0x00000004
#define SPIN_LOCK_ACKNOWLEDGED 3
#define M_loadPecoffLib (117 << 16)
#define L_INCR SEEK_CUR
#define HRFS_DEFAULT_MAX_FILES 10
#define M_syscallLib (184 << 16)
#define TARGET_NAME_DEFAULT "vxTarget"
#define S_mmuLib_OUT_OF_PMEGS (M_mmuLib | 5)
#define __INCerrnoh 
#define __INCvxWindCommonh 
#define IPCOM_FILE_FD_SETSIZE 64
#define SYM_IS_GLOBAL(symType) ((symType) & SYM_GLOBAL)
#define VXDBG_MEM_MOVE(pSrc,pDest,size) vxdbgMemMove (pSrc, pDest, size);
#define _VX_SPARClite 11
#define SM_INT_NONE 0
#define _PPC_ESF_ERRNO (_PPC_ESF_VEC_OFF + SIZ_UINT32)
#define __INCsymLibh 
#define INCLUDE_VXBUS 
#define READ _VX_READ
#define SIMPENTIUM _VX_SIMPENTIUM
#define WDB_COMM_NETROM 4
#define __SERR 0x0040
#define _IFIELD_EE(x) ((0x00008000 & x) >> 15)
#define EPIC_IN_INT31_VEC_REG (EPIC_CCSROFF + 0x105e0)
#define LSDMR_RFEN 0x40000000
#define __INCsioLibCommonh 
#define ISR_STACK_SIZE (5000)
#define va_end(v) __builtin_va_end(v)
#define VME_AM_EXT_USR_PGM 0x0a
#define _WRS_CONFIG_CPU_PWR_MGMT 1
#define _VA_LIST_DEFINED 
#define _EXC_INFO_DAR 0x008
#define EVENT_LOGCOMMENT CONTROL_EVENT(7)
#define EFPOS 81
#define EPIC_EX_INT7_DES_REG (EPIC_CCSROFF + 0x100f0)
#define EPIC_INT_ACK1_REG (EPIC_CCSROFF + 0x210a0)
#define RTP_ID_OF_TASK(tid) ((RTP_ID)(((WIND_TCB *)tid)->rtpId))
#define FIONCONTIG 41
#define EDEADLK 33
#define SHELL_START_AT_BOOT TRUE
#define __INCtimeh 
#define EADDRINUSE 48
#define _EXC_CODE_SIZE 16
#define EVENT_RTPTASKSIGQUEUE CLASS3_EVENT(89)
#define INCLUDE_TTY_DEV 
#define EPIC_IN_INT31_DES_REG (EPIC_CCSROFF + 0x105f0)
#define htole16(x) bswap16((x))
#define MAPCA _VX_MAPCA
#define BOOT_FLASH_TLB_SIZE _MMU_TLB_SZ_1M
#define EVENT_TASKDESTROY CLASS3_EVENT(1)
#define Q_GET_EXPIRED(pQHead) ((Q_NODE *)((*(((Q_HEAD *)(pQHead))->pQClass->getExpiredRtn)) ((Q_HEAD *)(pQHead))))
#define VXBAF_CONVERT_SHORT_ORDER 0x00000002
#define FDSYNC _FDSYNC
#define FLOAT_NORM 
#define VX_TASK(name,stackSz) WIND_TCB name ##Tcb; _WRS_DATA_ALIGN_BYTES(_STACK_ALIGN_SIZE) char name ##Stk [STACK_ROUND_UP((stackSz))]; _WRS_DATA_ALIGN_BYTES(_STACK_ALIGN_SIZE) char name ##ExcStk [STACK_ROUND_UP((KERNEL_TASK_EXC_STACK_SIZE))];
#define LSDMR_BSMA_SHIFT(x) ((x << 23) & LSDMR_BSMA_MASK)
#define _WRS_CONFIG_VM_MULTIPLE_CONTEXT 1
#define IS_CLASS1_EVENT(event) ((event >= MIN_CLASS1_ID) && (event <= MAX_CLASS1_ID))
#define EDOM 37
#define VXDBG_MEM_WIDTH_ACCESS(mode,pSrc,pDest,size,width) if (mode == VX_READ) vxdbgMemRead (pSrc, pDest, size, width); else vxdbgMemWrite (pSrc, pDest, size, width);
#define EPIC_BITS(x,y) EPIC_BITS_M2N(x-y+1, x)
#define Q_KEY(pQHead,pQNode,keyType) (*(((Q_HEAD *)(pQHead))->pQClass->keyRtn)) (((Q_NODE *)(pQNode)), ((int)(keyType)))
#define INT_UNMASK(reg) mfmsr reg ; ori reg, reg, _PPC_MSR_EE ; mtmsr reg ; isync
#define FIODISKINIT 6
#define htole32(x) bswap32((x))
#define PCI2_INBOUND_BASE_ADRS_REG2(base) CVPUINT32(base, 0x9DC8)
#define PCI2_INBOUND_BASE_ADRS_REG3(base) CVPUINT32(base, 0x9DA8)
#define MII_CR_NORM_EN 0x0000
#define _PPC_VX_SVR_GET ((_func_vxSvrGet == NULL) ? 0 : (_func_vxSvrGet) ())
#define F_WRLCK 2
#define EPIC_TSEC1RX_INT_NUM 14
#define _WRS_USE_ELF_LOAD_FORMAT 
#define PORDEVSR_PCI_MODE 1
#define FIOCOMMITPOLICYGETFS 66
#define MMU_ATTR_SUP_DATA_RO (MMU_ATTR_SUP_RO)
#define _WRS_CONFIG_PPC32_FP "hard"
#define _IFORM_D_1 3
#define MPC85XX_I2C_ADR_REG (0x00000)
#define S_eventLib_TIMEOUT (M_eventLib | 0x0001)
#define CS0_CONFIG 0x080
#define _IFLAG_LK 0x0008
#define _PPC_SPEFSCR_FINV 0x00000800
#define M_distNameLib (119 << 16)
#define _PPC_SPEFSCR_FRMC_RND_NINF 0x00000003
#define VM_STATE_CACHEABLE MMU_ATTR_CACHE_DEFAULT
#define VM_PHYS_TRANSLATE(context,physicalAddr,pVirtualAddr) ((vmLibInfo.pVmPhysTranslateRtn == NULL) ? (ERROR) : ((*vmLibInfo.pVmPhysTranslateRtn) (context, physicalAddr, pVirtualAddr)))
#define VXB_INST_INIT_DONE 0x00000001
#define _ARCH_SUPPORTS_DCC 
#define _IOLBF 1
#define S_semLib_INVALID_OPERATION (M_semLib | 104)
#define htole64(x) bswap64((x))
#define EVENT_MSGCDELETE CLASS3_EVENT(38)
#define _DBCR1_IAC12M_U 0x00c0
#define EPIC_EOI0_REG (EPIC_CCSROFF + 0x200b0)
#define DEVICE_MANAGER_MAX_NUM_DEVICES 255
#define F_SETLKW 9
#define MII_MASSLA_STAT_LP1000T_FD 0x800
#define VXB_VER_4_0_0 0x00040000
#define OPT_REG_READ16 0x02
#define FREQ_66_MHZ 66000000
#define M_pingLib (99 << 16)
#define EIEIO _WRS_ASM (" eieio")
#define _PPC_ESF_P7 _PPC_ESF_R10
#define EVENT_SEMCCREATE CLASS3_EVENT(9)
#define _WRS_CONFIG_OBJECT_LIB 1
#define WDB_COMM_PORT 0x4321
#define EDR_ERRLOG_SIZE (pmFreeSpace(EDR_PM_ARENA)/2)
#define EPIC_EX_INT7_VEC_REG (EPIC_CCSROFF + 0x100e0)
#define _IFLAG_OE 0x0001
#define M85XXRIO_DICAR_OFFSET 0x4
#define ENOSTR 75
#define MMU_ATTR_PROT_SUP_GET(attr) ((attr) & MMU_ATTR_PROT_SUP_MSK)
#define RIO_CAR_ASSEMBLY_ID 0x08
#define SYSFLG_NO_SECURITY 0x20
#define ARM _VX_ARM
#define INCLUDE_AIM_MMU_SHOW 
#define M8260ABBREVIATIONS 
#define OPT_REG_READ32 0x03
#define MII_MASSLA_STAT_LP1000T_HD 0x400
#define PCI_OUT_ATTR_RTT_IO 0x00080000
#define M_unldLib (87 << 16)
#define EPIC_WHO_AM_I_REG (EPIC_CCSROFF + 0x00090)
#define M_hsiLib (156 << 16)
#define _PC_REC_MIN_XFER_SIZE 16
#define FIOCOMMITFS 56
#define VXB_SPIN_LOCK_GIVE(x) (*pVxbSpinLockGive)(x)
#define __INCregsh 
#define INCLUDE_WDB_FUNC_CALL 
#define ENAMETOOLONG 26
#define EPIC_OPT_EN_Y 0x00000000
#define S_spinLockLib_LOCK_UNAVAILABLE (M_spinLockLib | 4)
#define EPIC_WHOAMI_ID_MSK (EPIC_BIT(4) | EPIC_BIT(3) | EPIC_BIT(2) | EPIC_BIT(1) | EPIC_BIT(0))
#define DEFAULT_CPUS_MAX 10
#define MMU_TRANS_TBL_MASK (*(mmuLibFuncs.mmuTransTblMask))
#define I2C_DELAY(d) i2cCycleMpc85xxDelay(d)
#define __DBL_HAS_QUIET_NAN__ 1
#define TRG_CLASS_4_ON 0x10001000
#define PCI2_OUTBOUND_ATTR_REG2(base) CVPUINT32(base, 0x9c50)
#define MMU_STATE_GUARDED 0x00000002
#define INCLUDE_HOST_TBL 
#define INST_BC _OP(16, 0)
#define INST_BL (_OP(18, 0) | 1)
#define MIN_CLASS2_ID 600
#define BSP_VER_1_1 1
#define BSP_VER_1_2 1
#define M_hookLib (187 << 16)
#define EPIC_SR_IN_MU1_INT_NUM 38
#define EPIC_RES46_INT_VEC (EPIC_RES46_INT_NUM + EPIC_VEC_IN_IRQ0)
#define M85XXRIO_IDQDPAR(base) (CAST(VUINT32 *)(((char*)base) + 0x1346C ))
#define ECMBA (CCSBAR | ECM_OFFSET)
#define OPT_REG_READ64 0x04
#define VXB_BUSID_HYPERTRANSPORT 6
#define _ARCH_BYTE_ORDER _PARM_BIG_ENDIAN
#define LAWAR_SIZE_512KB 0x00000012
#define FLASH_CHIP_WIDTH 2
#define S_excLib_EXCEPTION_STACK_OVERFLOW (M_excLib | 1)
#define le64toh(x) bswap64((x))
#define OPT_ECHO 0x01
#define M_proxyArpLib (76 << 16)
#define __INCsemLibh 
#define EVENT_SEMWTAKE CLASS3_EVENT(206)
#define EPIC_TSEC4ERR_INT_VEC (EPIC_TSEC4ERR_INT_NUM + EPIC_VEC_IN_IRQ0)
#define _PARM_LITTLE_ENDIAN 4321
#define ESOCKTNOSUPPORT 44
#define __WCHAR_TYPE__ short unsigned int
#define _EXC_OFF_MACH 0x00200
#define PCI_INBOUND_TRANS_EXT_ADRS_REG3(base) CVPUINT32(base, 0x8DA4)
#define MMU_ATTR_USR_TEXT (MMU_ATTR_USR_EXE | MMU_ATTR_SUP_TEXT)
#define MII_FDX_STR "full duplex"
#define SEMRW_IS_FREE(semId) ( (((semId)->semOwner == NULL) && (((SEM_RW_EXT *) ((UINT) semId + sizeof (SEMAPHORE)))->readCount == 0)) )
#define EPIC_OPT_CRIT_ON (0x40000000 >> 16)
#define _WRS_ABSOLUTE_BEGIN(x) STATUS absSymbols_ ##x (void) {
#define S_objLib_OBJ_NAME_CLASH (M_objLib _WRS_BIT_OR 8)
#define WDB_MIPC_BUS_NAME "main"
#define VM_STATE_MASK_MEM_COHERENCY MMU_ATTR_CACHE_MSK
#define EVT_WVEVENT(USR_EVENT,DATA,LENGTH) do { if (ACTION_IS_SET) { EVENT_WVEVENT_T event; event.userEventId = USR_EVENT; event.data = DATA; event.length = LENGTH; event.pc = NULL; eventPointSwHandle (MIN_USER_ID, &event, sizeof (event)); } } while ((0))
#define PARODD 0x80
#define _DBSR_BRT 0x04000000
#define HANDLE_VERIFY(handle,handleType) ( ( (((HANDLE_ID) (handle))->magic == (unsigned)(handle)) && (((HANDLE_ID) (handle))->type == (handleType)) ) ? OK : ERROR )
#define VXB_REG_NONE 0x00000000
#define MMU_ATTR_PROT_MSK 0x0000003f
#define __INCstdioh 
#define EVENT_RTPSIGNAL CLASS3_EVENT(84)
#define __INCb_timer_th 
#define VXBAF_NOT_FIRST_BUS 0x00000080
#define EVENT_WINDPRIORITYSETLOWER CLASS2_EVENT(5)
#define CPU_PWR_ISR_P_STATE (0)
#define MII_PHY_RX_FLOW_CTRL 0x80000
#define MC68060 _VX_MC68060
#define CREAD 0x2
#define INST_ADDI_SP 0x38210000
#define VXB_REMOVAL_ORPHAN 0x00002000
#define EVENT_SD_MAP CLASS3_EVENT(202)
#define S_smLib_MEMORY_ERROR (M_smLib | 1)
#define putc(c,p) __sputc(c, p)
#define KERNEL_LOCK_GIVE() (kernelLockGive())
#define EPIC_EIVPR_INTR_POLARITY EPIC_BIT(23)
#define MII_PHY_FLAGS_SET(setBits) (pPhyInfo->phyFlags |= (setBits))
#define CAM_DRAM_CACHE_MODE _MMU_TLB_ATTR_M
#define MII_PHY_10 0x0080
#define HID1_ASTME 0x00002000
#define POSIX_PTHREAD_RR_TIMESLICE 10
#define vxAtomicAnd_inline vxAtomicAnd
#define FOLLOW_LINK -2
#define WDB_MIPC_PORT 2
#define Q_PUT(pQHead,pQNode,key) (*(((Q_HEAD *)(pQHead))->pQClass->putRtn)) (((Q_HEAD *)(pQHead)), ((Q_NODE *)(pQNode)), (key))
#define BUFSIZ _PARM_BUFSIZ
#define VEC_BASE_ADRS ((char *) 0x0)
#define MMU_ATTR_SUP_EXE (MMU_ATTR_PROT_SUP_READ | MMU_ATTR_PROT_SUP_EXE)
#define WDB_PRE_KERNEL_INIT 1
#define VXB_PCI_BUS_CFG_READ(pDev,byteOffset,transactionSize,data) ((_func_vxbPciDevCfgRead == NULL) ? ERROR : _func_vxbPciDevCfgRead (pDev, byteOffset, transactionSize, (void *) &data))
#define S_smLib_NO_REGIONS (M_smLib | 4)
#define _INSTRUCTION_CACHE 0
#define __FLT_MAX_10_EXP__ 38
#define _PPC_L1CSR_E 0x00000001
#define _IFIELD_FM(x) ((0x01fe0000 & x) >> 17)
#define WIND_OBJ_NO_RECLAIM 0x20
#define _VX_SH32 130
#define _WCHAR_T_DECLARED 
#define INCLUDE_BOOTXSYS 
#define MII_FDX_LEN sizeof (MII_FDX_STR)
#define VXB_INTR_DYNAMIC 0x00000F7F
#define __INCvmLibPh 
#define MCORE _VX_MCORE
#define LONGSWAP(x) ((LLSB(x) << 24) | (LNLSB(x) << 16)| (LNMSB(x) << 8) | (LMSB(x)))
#define S_vxdbgLib_INVALID_BP VXDBG_ERROR_TO_ERRNO(VXDBG_ERR_INVALID_BP)
#define SYM_MASK_ANY_TYPE SYM_MASK_NONE
#define WV_EVT_PROTO_REV_6_6 3
#define WV_EVT_PROTO_REV_6_7 3
#define EVENT_ISR_DESTROY CLASS3_EVENT(64)
#define FIONREAD64 52
#define _FEXCL 0x0800
#define M85XXRIO_RIWTAR_TRAD(adrs) (adrs >> 12)
#define __INCb_nlink_th 
#define M85XX_L2ERRCAPTDATAHI(x) (CAST(VUINT32 *)((x + 0x20E20)))
#define VXB_REG_SPEC 0x00000003
#define TASK_LOCK() TASK_CPU_LOCK()
#define LSDMR_BSMA_MASK 0x00E00000
#define _WRS_FUNC_NORETURN __attribute__((noreturn))
#define __weak_reference(sym,alias) __asm__(".weak " #alias); __asm__(".equ " #alias ", " #sym)
#define EPIC_IIDR_CRIT_INT EPIC_BIT(30)
#define OBJ_INSTRUMENTATION_ENABLE(objId) ( ((OBJ_CORE *)(objId))->handle.attributes |= WIND_OBJ_INSTRUMENTED )
#define I2C_ERROR_CYCLE_WRITE 4
#define _VX_SIMPENTIUM 191
#define EPIC_REG_WRITE(offset,value) *(volatile UINT32 *)((UINT32)pEpicRegBase + (offset & REG_ADRS_MASK)) = value
#define MII_PHY_FLAGS_CLEAR(clearBits) (pPhyInfo->phyFlags &= ~(clearBits))
#define MMU_ATTR_PROT_USR_READ 0x00000008
#define MII_AN_TBL_MAX 20
#define QUEUE_NONINTERRUPTIBLE 0
#define EPROTONOSUPPORT 43
#define UINT_MAX (INT_MAX * 2U + 1)
#define EVENT_WINDWDSTART CLASS2_EVENT(11)
#define EFBIG 27
#define RIO_WPCSR_ERROR 0x20000000
#define VXB_INTR_TRIG_NEG 0x01
#define SIO_MODE_SET 0x1007
#define feof(p) __sfeof(p)
#define EPIC_GTVPR_INTR_MSK EPIC_BIT(31)
#define PCI_CFG_ADR_REG (CCSBAR + 0x8000)
#define RIO_WPCSR_AVAILABLE 0x01000000
#define ARMARCH3 _VX_ARMARCH3
#define ARMARCH4 _VX_ARMARCH4
#define ARMARCH5 _VX_ARMARCH5
#define ARMARCH6 _VX_ARMARCH6
#define ARMARCH7 _VX_ARMARCH7
#define SEM_TYPE_MASK 0xf
#define SLL_EMPTY(pList) ( (((SL_LIST *)pList)->head == NULL) )
#define DECAR 54
#define _PPC_MAS0_NV 0x00000000
#define __FLT_MAX_EXP__ 128
#define P_PID 0
#define INCLUDE_EDR_STUB 
#define M85XX_OR0(base) (CAST(VUINT32 *)((base) + 0x5004))
#define M85XX_OR1(base) (CAST(VUINT32 *)((base) + 0x500c))
#define _DBCR1_IAC2US_U 0x0c00
#define M85XX_OR4(base) (CAST(VUINT32 *)((base) + 0x5024))
#define _DEFINED_struct_timespec 
#define __INCtimesh 
#define M85XX_OR7(base) (CAST(VUINT32 *)((base) + 0x503C))
#define _PARM_NAME_MAX 255
#define SM_INT_MAILBOX_1 1
#define SM_INT_MAILBOX_2 2
#define SM_INT_MAILBOX_4 3
#define MMU_ATTR_VALID_INDEX_SHIFT 6
#define SIO_HW_OPTS_GET 0x1006
#define VME_AM_STD_SUP_PGM 0x3e
#define _DBSR_HWBP_MSK ( _DBSR_IAC1 | _DBSR_IAC2 | _DBSR_DAC1R | _DBSR_DAC1W | _DBSR_DAC2R | _DBSR_DAC2W )
#define EPIC_IN_INT44_DES_REG (EPIC_CCSROFF + 0x10790)
#define MII_MASSLA_STAT_CONF_RES 0x4000
#define PCI_ATTR_WS_128M 0x0000001a
#define __INCe_vxTypesOldh 
#define REG_ADRS_MASK 0x00ffffff
#define LAWAR_SIZE_64KB 0x0000000F
#define EPIC_SMSG_INT7_VEC_REG (EPIC_CCSROFF + 0x11ce0)
#define REG_SET_CTR (REG_SET_LR + _PPC_REG_SIZE)
#define BUSAF_VERBOSE 0x01000000
#define __DBL_MANT_DIG__ 53
#define ___int_size_t_h 
#define bswap16(x) ((LSB(x) << 8) | MSB(x))
#define REG_SET_CR (REG_SET_PC + _PPC_REG_SIZE)
#define VXB_MAXBARS 10
#define FEXLOCK _FEXLOCK
#define __INCvxdbgLibPh 
#define _VX_COLDFIRE 160
#define EPIC_IIVPR_VECTOR(vec) ((vec) & EPIC_IIVPR_VECTOR_MSK)
#define M85XXRIO_LCSBA1CSR_OFFSET 0x5C
#define EPIC_CTASK_PRI_REG (EPIC_CCSROFF + 0x00080)
#define HID1_RUN_MODE(x) (((x)&0x70000000)>>28)
#define VXB_DEVID_BUSCTRL 1
#define _PPC_L1CSR_SLC 0x00000800
#define VM_STATE_VALID MMU_ATTR_VALID
#define VXB_INTR_TABSZ 124
#define M85XXRIO_PGCCSR(base) (CAST(VUINT32 *)(((char*)base) + 0x0013C ))
#define EVENT_NUM_CPU CONTROL_EVENT(17)
#define INST_B_MASK 0xfc000000
#define EPIC_IN_INT25_VEC_REG (EPIC_CCSROFF + 0x10520)
#define PID 48
#define ACTION_IS_SET _WRS_UNLIKELY(evtAction != 0)
#define PIR 286
#define FNDELAY _FNDELAY
#define _DBCR1_IAC2ER_U 0x0300
#define LAWAR_SIZE_64MB 0x00000019
#define EPIC_IN_INT45_VEC_REG (EPIC_CCSROFF + 0x107a0)
#define WDB_TTY_CHANNEL 1
#define M_fastPathLib (135 << 16)
#define __LDBL_MIN_EXP__ (-1021)
#define EPIC_OPT_PRI_VALUE(p) EPIC_EIVPR_PRIORITY(p)
#define SIO_MSTAT_GET 0x100C
#define BRIDGE_CLASS_TYPE 0x6
#define EPIC_MSG_REG2 (EPIC_CCSROFF + 0x01420)
#define HOST_PASSWORD_DEFAULT ""
#define _EXC_OFF_SYSCALL 0x00c00
#define MAX_DIRNAMES 148
#define EVENT_WINDSEMDELETE CLASS2_EVENT(6)
#define PCIEX_OUTBOUND_TRANS_ADRS_REG1(base) CVPUINT32(base, 0xac20)
#define VXB_HANDLE_WIDTH(x) ((x) & 0x0F)
#define LMSB(x) (((x) >> 24) & 0xff)
#define MMU_STATE_MEM_COHERENCY 0x00000004
#define EPIC_INT_EDG_NEG 0
#define _POSIX_MAX_CANON 255
#define EPIC_MSIDR_CRIT1_INT EPIC_BIT(29)
#define SM_INT_MAILBOX_R2 6
#define INST_SC _OP(17, 1)
#define S_ioLib_DEVICE_ERROR EIO
#define stdout (*__stdout())
#define TRG_CLASS_1 0x00000001
#define TRG_CLASS_2 0x00000010
#define TRG_CLASS_3 0x00000100
#define TRG_CLASS_4 0x00001000
#define TRG_CLASS_5 0x00010000
#define TRG_CLASS_6 0x01111111
#define INCLUDE_OBJ_LIB 
#define MSG_Q_EVENTSEND_ERR_NOTIFY 0x02
#define MAX_USER_ID 65535
#define NUM_DOSFS_FILES 20
#define LSDMR_RFCR_MASK 0x00038000
#define MAP_ERRNO_2_POSIX(errno) (((errno) & ERRNO_PX_FLAG)? (errno) &= 0x7fff : (errno) )
#define __EABI__ 1
#define VM_ENABLE(enable) ((vmLibInfo.pVmEnableRtn == NULL) ? (ERROR) : ((*vmLibInfo.pVmEnableRtn) (enable)))
#define EVENT_RTPNAME CONTROL_EVENT(16)
#define _ARCH_LONG_MAX 2147483647
#define MMU_STATE_SUP_R_USR_X (MMU_STATE_SUP_R | _MMU_UX)
#define M_qPriBMapLib (63 << 16)
#define RIO_EXTENDED_FEATURES_TOP 0xfffC
#define M85XXRIO_RIWAR_TGINT_MSK 0xf
#define FIRST_CUSTOM_BUS_ACCESS_METHOD 0x00000100
#define PLAT_RATIO_400_MHZ 6
#define SHELL_COMPATIBLE FALSE
#define I2C_CYCLE_READ(x,ad,y) i2cCycleMpc85xxRead(x,ad,y)
#define S_symLib_INVALID_SYM_ID_PTR (M_symLib | 13)
#define RLIMIT_DATA 2
#define PCI_ATTR_WS_16K 0x0000000D
#define PCI_ATTR_WS_16M 0x00000017
#define CACHE_DMA_FLUSH(adrs,bytes) CACHE_DRV_FLUSH (&cacheDmaFuncs, (adrs), (bytes))
#define INST_BCR_MASK 0xfc00fffe
#define WIND_TCB_CR (WIND_TCB_REGS + REG_SET_CR)
#define M85XXRIO_RIWBAR_BEXAD(adrs) (adrs << 22)
#define _PPC_SPEFSCR_MODE 0x00010000
#define _VX_PPC750 2010
#define MII_SR_10T_FULL_DPX 0x1000
#define EPIC_MSIR_INT0_STATE_REG (EPIC_CCSROFF + 0x01600)
#define S_mmuLib_INVALID_DESCRIPTOR (M_mmuLib | 3)
#define FSTAT_LNK 0120000
#define PPC403 _VX_PPC403
#define MMU_STATE_MASK_EXECUTE 0x00003000
#define PPC405 _VX_PPC405
#define _ARCH_ULONG_MAX 4294967295u
#define M85XXRIO_ROWAR_OFFSET(n) (0x10C10 + ((n)*0x20))
#define S_vmLib_BAD_MASK_PARAM (M_vmLib | 3)
#define MII_BP_ACK 0x4000
#define WDB_PROXY_TASK_OPTIONS VX_UNBREAKABLE
#define _PARM_TMP_MAX 64
#define PCI2_INBOUND_TRANS_ADRS_REG3(base) CVPUINT32(base, 0x9DA0)
#define MPC85XX_I2C_CONTROL_REG_MEN 0x80
#define SS_2D_5 6
#define _IFORM_XFX_1 42
#define WDB_TIPC_PORT_INSTANCE 71
#define _IFORM_XFX_3 44
#define _IFORM_XFX_4 45
#define _IFORM_XFX_5 84
#define _IFORM_XFX_6 85
#define MEM_ALLOC_ERROR_LOG_AND_SUSPEND 0x02
#define IPCOM_SOCK_NONE 5
#define EMSGSIZE 36
#define M_loadEcoffLib (79 << 16)
#define S_iosLib_INVALID_ETHERNET_ADDRESS EINVAL
#define PCI_OUT_ATTR_WTT_MEM 0x00004000
#define ARM810 _VX_ARM810
#define _VX_MAPCA 182
#define DEVMETHOD_CALL(METHOD) ((UINT32)(&METHOD ##_desc[0]))
#define EPIC_MER_EN_MSK 0xf
#define INST_LWZU_SP 0x84010000
#define _PC_ALLOC_SIZE_MIN 2
#define EPIC_TSEC2ERR_INT_NUM 24
#define OBJ_IS_DELETED(objId) ( (((OBJ_CORE *)(objId))->handle.attributes & WIND_OBJ_DELETED) != 0 )
#define I2C_CHCKOP 3
#define RIO_CAR_SRC_OPERATIONS 0x18
#define __INCvsbConfig_h 
#define VXDBG_CTX_FUNCS_ARE_INSTALLED() (_func_vxdbgFuncs[VXDBG_STOP] != NULL)
#define PPC _VX_PPC
#define __INCtoolPpch 
#define EVENT_OBJ_MSGSRECEIVE CLASS2_EVENT(43)
#define EPIC_OPT_CRIT_MSK (EPIC_EIDR_CRIT_INT >> 16)
#define _VX_MCORE300 154
#define VM_STATE_GLOBAL MMU_ATTR_SPL_0
#define _TOOL_HDR(tc,file) _TOOL_HDR_STRINGIFY(tool/tc/file)
#define VX_TASK_OBJ_OWNER 0x0800
#define EVENT_MEMREALLOC CLASS3_EVENT(33)
#define EPIC_IN_INT7_VEC_REG (EPIC_CCSROFF + 0x102e0)
#define _IFIELD_VSH(x) ((0x000003c0 & x) >> 6)
#define WDT_RATE_MAX (sysTimerClkFreq / (1 << 21))
#define PPC440 _VX_PPC440
#define MAX_LINKHDR_CFG 32
#define EVENT_RTPSIGPROCMASK CLASS3_EVENT(94)
#define PCI_ERROR_DETECT_REG 0x8e00
#define EVENT_RTP_DELETE CLASS3_EVENT(79)
#define EPIC_RES30_INT_NUM 30
#define TIMER_RELTIME (~TIMER_ABSTIME)
#define Q_FIRST(pQHead) ((Q_NODE *)(((Q_HEAD *)(pQHead))->pFirstNode))
#define I2C_IOCTL_RMW_OR 2
#define _DBSR_MRR_U 0x3000
#define SIO_MCTRL_OSIG_MASK 0x1010
#define NELEMENTS(array) (sizeof (array) / sizeof ((array) [0]))
#define WAIT_FOREVER (-1)
#define M_rpcClntStat (47 << 16)
#define _WRS_CONFIG_FEATURE_IPNET_INET4_ONLY 1
#define __INCunistdh 
#define VXB_OPTIONS "options"
#define VM_STATE_SET(context,virtualAddr,len,stateMask,state) ((vmLibInfo.pVmStateSetRtn == NULL) ? (ERROR) : ((*vmLibInfo.pVmStateSetRtn) (context, (VIRT_ADDR) virtualAddr, len, stateMask, state)))
#define RIO_CSR_WRITE_PORT 0x44
#define OBJ_SET_DELETED(objId) ( ((OBJ_CORE *)(objId))->handle.attributes |= WIND_OBJ_DELETED )
#define _TYPE_PHYS_ADDR typedef UINT64 PHYS_ADDR
#define _WRS_SUP_STACK_UNRELOC(p) p
#define _PPC_ESF_SP_OFF (0)
#define VXEV01 0x00000001
#define VXEV02 0x00000002
#define VXEV03 0x00000004
#define VXEV04 0x00000008
#define VXEV05 0x00000010
#define VXEV06 0x00000020
#define VXEV07 0x00000040
#define VXEV08 0x00000080
#define VXEV09 0x00000100
#define EHOSTDOWN 67
#define EVENT_IOWRITE CLASS3_EVENT(50)
#define IPTELNETS 
#define M_loadAoutLib (80 << 16)
#define _FNOCTTY 0x8000
#define SM_OFFSET_TO_LOCAL(offset,baseAddr,typeCast) ((typeCast) ((char *) offset + baseAddr))
#define EVENT_SYSCALL_BAD_ID CLASS3_EVENT(76)
#define MB_CUR_MAX _PARM_MB_CUR_MAX
#define vxAtomicSub_inline vxAtomicSub
#define O_TRUNC _FTRUNC
#define VXEV11 0x00000400
#define VXEV12 0x00000800
#define VXEV13 0x00001000
#define VXEV14 0x00002000
#define VXEV15 0x00004000
#define VXEV16 0x00008000
#define VXEV17 0x00010000
#define VXEV18 0x00020000
#define VXEV19 0x00040000
#define max(x,y) (((x) < (y)) ? (y) : (x))
#define _PPC_MAS0_TLBSEL1 0x10000000
#define F_DUPFD 0
#define KERNEL_TASK_EXC_STACK_SIZE (4096)
#define MII_PHY_FD 0x0100
#define _WRS_KERNEL_LOCK_OFFSET_line (0x10 + _WRS_KERNEL_LOCK_ALIGN_tkt_ctr)
#define M_pppHookLib (102 << 16)
#define SYM_MASK_EXACT_TYPE SYM_MASK_ALL
#define VXEV20 0x00080000
#define VXEV21 0x00100000
#define VXEV22 0x00200000
#define VXEV23 0x00400000
#define VXEV24 0x00800000
#define VXEV25 0x01000000
#define WDB_TTY_ECHO FALSE
#define VXEV27 0x04000000
#define VXEV28 0x08000000
#define VXEV29 0x10000000
#define WIND_TCB_LR (WIND_TCB_REGS + REG_SET_LR)
#define SM_LOCAL_TO_OFFSET(localAdrs,baseAddr) ((int) ((char *) localAdrs - baseAddr))
#define SYSFLG_NO_AUTOBOOT 0x04
#define MII_MAX_PHY_NUM 0x20
#define MMU_STATE_PROTECTION_BIT_SHIFT 8
#define RIO_TGTID_GENERIC 0
#define _ARCH_LDBL_EPSILON 2.2204460492503131e-16L
#define SEMRW_RQHEAD(semId) ( ((SEM_RW_EXT *) ((UINT) semId + sizeof (SEMAPHORE)))->readQHead )
#define M85XX_L2ERRINTEN(x) (CAST(VUINT32 *)((x + 0x20E48)))
#define VXEV31 0x40000000
#define VXEV32 0x80000000
#define EVT_CTX_DISP(ARG1,PRI,NORMAL_PRI) do { if ( ACTION_IS_SET ) EVT_CTX_DISP_NOTEST(ARG1, PRI, NORMAL_PRI); } while ((0))
#define __INCqClassh 
#define M_moduleLib (86 << 16)
#define HID0_MCP 0x80000000
#define _DBCR0_IRPT_U 0x0200
#define M85XX_L2CTL_L2LFR_MSK 0x00000400
#define RNG_ELEM_PUT(ringId,ch,toP) ( toP = (ringId)->pToBuf, (toP == (ringId)->pFromBuf - 1) ? 0 : ( (toP == (ringId)->bufSize - 1) ? ( ((ringId)->pFromBuf == 0) ? 0 : ( (ringId)->buf[toP] = ch, (ringId)->pToBuf = 0, 1 ) ) : ( (ringId)->buf[toP] = ch, (ringId)->pToBuf++, 1 ) ) )
#define EPIC_INTER_IN_SERVICE 2
#define I2C_IOCTL_RMW_AND_OR 4
#define MMU_ATTR_MSK_ID_GET(mask) ((mask) & MMU_ATTR_MSK_ID_MSK)
#define MSG_NODE_DATA(pNode) (((char *) pNode) + sizeof (MSG_NODE))
#define MII_PHY_HD 0x0200
#define INCLUDE_VXMUX_MBLK 
#define M_mountLib (94 << 16)
#define EVENT_RTPCHILDWAIT CLASS3_EVENT(90)
#define VXBAF_BYTE_ORDER_LE_32 0x00e40000
#define ns165501Num NELEMENTS(ns165501Resources)
#define EPIC_TSEC2TX_INT_VEC (EPIC_TSEC2TX_INT_NUM + EPIC_VEC_IN_IRQ0)
#define __INCtyLibh 
#define _FRSYNC 0x20000
#define S_miiLib_PHY_NULL (M_miiLib | 2)
#define VX_COPROC3_TASK 0x04000000
#define _IFORM_VX_1 64
#define _IFORM_VX_2 65
#define _IFORM_VX_3 66
#define _IFORM_VX_4 67
#define _IFORM_VX_5 68
#define _WRS_SDA_CONST __attribute__ ((__section__ (".sdata2")))
#define _DBCR1_IAC1US_U 0xc000
#define M85XX_L2ERRCAPTDATALO(x) (CAST(VUINT32 *)((x + 0x20E24)))
#define EPIC_TSEC1RX_INT_VEC (EPIC_TSEC1RX_INT_NUM + EPIC_VEC_IN_IRQ0)
#define __SMOD 0x2000
#define EPIC_IPI_DPATCH_REG1 (EPIC_CCSROFF + 0x00050)
#define FIODISKFORMAT 5
#define RIO_HOST_ID_OFFSET 16
#define WDT_RATE_MIN (sysTimerClkFreq / (1 << 29))
#define _DBCR2_DAC12M 0x00c00000
#define INST_BCLR_MASK 0xfc00ffff
#define WIND_TCB_P1 WIND_TCB_R4
#define EISCONN 56
#define WIND_TCB_P3 WIND_TCB_R6
#define WIND_TCB_P4 WIND_TCB_R7
#define WIND_TCB_P5 WIND_TCB_R8
#define WIND_TCB_P6 WIND_TCB_R9
#define WIND_TCB_P7 WIND_TCB_R10
#define MMU_ATTR_SUP_TEXT (MMU_ATTR_SUP_EXE)
#define I2C_READOP 0
#define M85XX_L2CTL_L2DO_MSK 0x00400000
#define S_eventLib_EVENTSEND_FAILED (M_eventLib | 0x0004)
#define _WRS_INLINE_vxAtomicGet 
#define I2C_TSENSOR_SEEKER_ADRS 0
#define ECONNABORTED 53
#define FATAL_SYSTEM_CORE_DUMP_ENABLE TRUE
#define INST_STW_R0_SP INST_STW_SP
#define __INCvxInlineh 
#define VXBAF_BYTE_ORDER_LE_64 0xe4e40000
#define DBG_BREAK_INST 0x7fe00008
#define _TYPE_clock_t typedef unsigned int clock_t
#define EPIC_RES45_INT_NUM 45
#define __INCmmuAttrh 
#define I2C_CYCLE_ACKOUT(x) i2cCycleMpc85xxAckOut(x)
#define EPIC_IN_INT24_VEC_REG (EPIC_CCSROFF + 0x10500)
#define M_dbgLib (4 << 16)
#define WIND_TCB_R0 (WIND_TCB_REGS + REG_SET_GR(0))
#define WIND_TCB_R1 (WIND_TCB_REGS + REG_SET_GR(1))
#define WIND_TCB_R2 (WIND_TCB_REGS + REG_SET_GR(2))
#define WIND_TCB_R3 (WIND_TCB_REGS + REG_SET_GR(3))
#define WIND_TCB_R5 (WIND_TCB_REGS + REG_SET_GR(5))
#define WIND_TCB_R6 (WIND_TCB_REGS + REG_SET_GR(6))
#define WIND_TCB_R8 (WIND_TCB_REGS + REG_SET_GR(8))
#define WIND_TCB_R9 (WIND_TCB_REGS + REG_SET_GR(9))
#define _DBCR1_IAC1ER_U 0x3000
#define __const const
#define MMU_ATTR_MSK_ID_MSK 0x000000e0
#define VX_MUTEX_SEMAPHORE VX_SEMAPHORE
#define M85XX_L2CEWCR_E_BIT 31
#define EVENT_OBJ_SEMTAKE CLASS2_EVENT(21)
#define EPIC_OPT_EXPIN_OFF (0x00000000 >> 16)
#define MII_ANAR_ASM_PAUSE 0x0800
#define CS7 0x8
#define SIO_ERROR_NONE (-1)
#define DDR_ERR_SBE 0xe58
#define STACK_DIR _VX_STACK_DIR
#define M85XXRIO_RIWAR_PCI 0x00
#define INCLUDE_IPCOM_USE_INET 
#define _IFIELD_CRM(x) ((0x000ff000 & x) >> 12)
#define min(x,y) (((x) < (y)) ? (x) : (y))
#define _DBSR_DAC2R_U 0x0002
#define WIND_TCB_SP WIND_TCB_R1
#define S_objLib_OBJ_LIB_NOT_INITIALIZED (M_objLib _WRS_BIT_OR 18)
#define EPIC_MSIDR_CRIT0_INT EPIC_BIT(30)
#define EPIC_PCI2_INT_VEC (EPIC_PCI2_INT_NUM + EPIC_VEC_IN_IRQ0)
#define M_dosFsLib (56 << 16)
#define _VX_PENTIUM3 85
#define _PPC_MMUCSR0_L2TLB0_FI_V(x) (x >> 2)
#define M85XXRIO_PMBH0CSR(base) (CAST(VUINT32 *)(((char*)base) + 0x00100 ))
#define EPIC_SR_IN_DB1_INT_NUM 34
#define MMU_STATE_MASK_WRITABLE_EXECUTE 0x00003c00
#define MII_PHY_MONITOR 0x4000
#define PCI_OUTBOUND_TRANS_EXT_ADRS_REG1(base) CVPUINT32(base, 0x8c24)
#define PCI_OUTBOUND_TRANS_EXT_ADRS_REG3(base) CVPUINT32(base, 0x8c64)
#define PCI_OUTBOUND_TRANS_EXT_ADRS_REG4(base) CVPUINT32(base, 0x8c84)
#define RES_ADDR 3
#define WIND_TCB_T0 WIND_TCB_R14
#define WIND_TCB_T1 WIND_TCB_R15
#define WIND_TCB_T2 WIND_TCB_R16
#define WIND_TCB_T5 WIND_TCB_R19
#define MPC85XX_I2C_CONTROL_REG_MTX 0x10
#define WIND_TCB_T7 WIND_TCB_R21
#define WIND_TCB_T8 WIND_TCB_R22
#define WIND_TCB_T9 WIND_TCB_R23
#define WDB_COMM_TYPE WDB_COMM_END
#define ERRMAX 89
#define LAWAR_TGTIF_DDRSDRAM 0x00F00000
#define SIO_MCTRL_BITS_SET 0x100D
#define __INCb_blkcnt_th 
#define FREQ_100_MHZ 99999999
#define FCREAT _FCREAT
#define M_smLib (72 << 16)
#define S_mmuLib_INVALID_PAGE_SIZE (M_mmuLib | 1)
#define RLIMIT_MEMLOCK 6
#define MMU_ATTR_USR_DATA (MMU_ATTR_USR_RW | MMU_ATTR_SUP_DATA)
#define RIO_CHANNEL_CFG 6
#define EPIC_SMSG_INT6_DES_REG (EPIC_CCSROFF + 0x11cd0)
#define WDB_PROXY_HAS_CONTROL_PORT TRUE
#define WV_EVT_PROTO_REV_3_1_FCS 4
#define PCI2_CFG_DATA_REG (CCSBAR + 0x9004)
#define INT_BANK_DESC_NUM 10
#define EPIC_EX_INT10_VEC_REG (EPIC_CCSROFF + 0x10140)
#define INCLUDE_MII_BUS 
#define TASK_PRIORITY_SET_COMPATIBLE FALSE
#define PCI_INBOUND_BASE_ADRS_REG1(base) CVPUINT32(base, 0x8DE8)
#define INCLUDE_ANSI_CTYPE 
#define WDB_END_DEVICE_NAME NULL
#define VXB_INTR_TRIG_FALLING_EDGE (VXB_INTR_TRIG_NEG | VXB_INTR_TRIG_EDGE)
#define _ARCH_LDBL_MAX 1.7976931348623157e+308L
#define PCI_INBOUND_BASE_ADRS_REG2(base) CVPUINT32(base, 0x8DC8)
#define EPIC_IN_INT38_VEC_REG (EPIC_CCSROFF + 0x106c0)
#define _PPC_L1CSR_UL 0x00000400
#define DDR_SDRAM_LOCAL_ADRS LOCAL_MEM_LOCAL_ADRS
#define MMU_ATTR_PROT_USR_EXE 0x00000020
#define PCI2_OUTBOUND_TRANS_EXT_ADRS_REG0(base) CVPUINT32(base, 0x9c04)
#define RLIMIT_STACK 3
#define _FTEXT 0x200000
#define INST_MTLR 0x7c0803a6
#define _PPC_ESF_MSR _PPC_ESF_R(GREG_NUM)
#define MII_NP_NP 0x8000
#define VME_AM_SUP_SHORT_IO 0x2d
#define _VA_LIST_T_H 
#define LOCAL2PCI_MEMIO(x) ((int)(x) + PCI_MSTR_MEM_BUS)
#define _PPC_HID0_DOZE 0x00800000
#define MII_PHY_LINK_FORCE 0x2
#define M_cbioLib (133 << 16)
#define __INCb_atomic_th 
#define M85XX_L2CTL_L2I_BIT 30
#define VM_INSTALLED (vmLibInfo.vmLibInstalled)
#define INCwrSbc8548h 
#define EPIC_OPT_POLAR_EDG_NEG 0x00000000
#define INCLUDE_SPE 
#define INCLUDE_END 
#define EVENT_OWNERSET CLASS3_EVENT(59)
#define INST_BCL (_OP(16, 0) | 1)
#define FIOGETNAME 18
#define EPIC_EX_INT10_DES_REG (EPIC_CCSROFF + 0x10150)
#define EPIC_MIDR_CRIT1_INT EPIC_BIT(29)
#define MMU_STATE_SUP_RWX_USR_RW (MMU_STATE_SUP_RWX | _MMU_UR | _MMU_UW)
#define MMU_STATE_SUP_RWX_USR_RX (MMU_STATE_SUP_RWX | _MMU_UR | _MMU_UX)
#define __RCSID(s) __IDSTRING(rcsid,s)
#define _DBCR0_IAC1 0x00800000
#define _DBCR0_IAC2 0x00400000
#define L2_CACHE_SIZE L2SIZ_512KB
#define __INCcoprocLibPh 
#define _PPC_L1CSR_FI 0x00000002
#define _PPC_ESR_DLK 0x00200000
#define S_vxdbgLib_ILLEGAL_OPERATION VXDBG_ERROR_TO_ERRNO(VXDBG_ERR_ILLEGAL_OPERATION)
#define __FLT_MAX__ 3.40282347e+38F
#define EVENT_MSGSCREATE CLASS3_EVENT(39)
#define _WRS_ADJUST_PC_FOR_BRANCH_DELAY(pReg) {}
#define EVENT_EVENTSEND CLASS3_EVENT(57)
#define PCI_IN_ATTR_RTT_LM_WRITE_NO_SNOOP 0x00004000
#define MAX_LOG_MSGS 50
#define _WRS_CONFIG_COMPONENT_USR_TEST 1
#define FSTAT_NON 0140000
#define INCLUDE_LINKBUFPOOL 
#define MQ_HASH_SIZE 0
#define OBJ_SET_DELETE_ON_LAST_CLOSE(objId) ( ((OBJ_CORE *)(objId))->handle.attributes |= WIND_OBJ_DELETE_ON_LAST_CLOSE )
#define MMU_ATTR_USR_IO (MMU_ATTR_USR_RW | MMU_ATTR_SUP_IO)
#define SEM_Q_FIFO 0x00
#define M_miiLib (123 << 16)
#define VX_COPROC5_TASK 0x10000000
#define _IFORM_VA_1B 77
#define MULTI_BUS BUS_TYPE_MULTIBUS
#define __va_list__ 
#define _WRS_CONFIG_CPU_PWR_MGMT_D 1
#define JOB_TASK_DONE_EVENT VXEV27
#define __INCclassLibh 
#define EPIC_BIT(x) (1 << (x))
#define M_tickLib (60 << 16)
#define SM_REGIONS_MAX 20
#define RIO_FEATURES_BRIDGE 0x0001
#define EPIC_IN_INT19_VEC_REG (EPIC_CCSROFF + 0x10460)
#define _POSIX_ASYNC_IO 0
#define _VX_MAP 180
#define _WRS_DATA_ALIGN_BYTES(x) __attribute__((aligned(x)))
#define RIO_BRIDGE_ININTIALIZED 2
#define EPIC_SMSG_INTERRUPT 29
#define EVENT_RTP_INIT_TASK CLASS3_EVENT(80)
#define IS_VALID_CACHEABLE(mask,attr) ( ((mask) & MMU_ATTR_VALID_MSK) == MMU_ATTR_VALID_MSK && ((mask) & MMU_ATTR_CACHE_MSK) == MMU_ATTR_CACHE_MSK && ((attr) & MMU_ATTR_VALID) == MMU_ATTR_VALID && ((attr) & (MMU_ATTR_CACHE_COPYBACK | MMU_ATTR_CACHE_DEFAULT)) != 0 )
#define M_adrSpaceLib (180 << 16)
#define M85XX_LBCR(base) (CAST(VUINT32 *)((base) + 0x50D0))
#define _IFORM_A_1 50
#define _IFORM_A_4 53
#define _DBLFUNCPTR_DEFINED 
#define MMU_ATTR_VALID 0x00000040
#define PCIEX_INBOUND_TRANS_EXT_ADRS_REG3(base) CVPUINT32(base, 0xaDA4)
#define VXB_BUSID_PCIX 4
#define M85XXRIO_ROWAR_WRTYPE_FLUSH 0x1
#define S_msgQLib_ILLEGAL_PRIORITY (M_msgQLib | 5)
#define EPIC_CISR0_MSG_INT_MSK 0xf000
#define MMU_STATE_SUP_RWX_USR_WX (MMU_STATE_SUP_RWX | _MMU_UW | _MMU_UX)
#define EVENTS_NONINTERRUPTIBLE 0x00
#define EPIC_OPT_SENSE_MSK EPIC_EIVPR_INTR_SENSE
#define VM_STATE_MEM_COHERENCY_NOT 0
#define be16toh(x) ((UINT16)(x))
#define EVENT_RTP_SPAWN CLASS3_EVENT(78)
#define SEM_NO_ERROR_CHECK 0x80
#define PCI_ERROR_ATTR_CAPTURE_REG 0x8e0c
#define RIO_CSR_LCS_BAR 0x5c
#define INCLUDE_TASK_VARS 
#define PCI_CFG_NONE 2
#define MPC85XX_I2C_STATUS_REG_MIF 0x02
#define EPIC_IN_INT19_DES_REG (EPIC_CCSROFF + 0x10470)
#define DDR_SDRAM_CFG_2 0x114
#define EVENT_TASKSTOP CLASS3_EVENT(43)
#define MAX_NUM_RIO_TARGETS 10
#define M85XX_LAWAR5(base) (CAST(VUINT32 *)((base) + 0xcB0))
#define VXBAF_IO_SPACE_OPERATION 0x00000020
#define M85XXRIO_RxWAR_TYPE_MSK 0xf
#define _T_SIZE 
#define WDB_COMM_SERIAL 1
#define M85XX_LAWAR6(base) (CAST(VUINT32 *)((base) + 0xcd0))
#define sioCallbackInstall(pSioChan,callbackType,callback,callbackArg) ((pSioChan)->pDrvFuncs->callbackInstall (pSioChan, callbackType, callback, callbackArg))
#define _EXC_OFF_TRACE 0x00d00
#define __warn_references(sym,msg) __asm__(".section .gnu.warning." #sym); __asm__(".asciz \"" msg "\""); __asm__(".previous")
#define S_vxdbgLib_INVALID_REGSET VXDBG_ERROR_TO_ERRNO(VXDBG_ERR_INVALID_REGSET)
#define S_msgQLib_UNSUPPORTED_OPERATION (M_msgQLib | 6)
#define M_excLib (194 << 16)
#define M_bufLib (64 << 16)
#define MAX_CONTROL_ID 49
#define EPIC_IPIVPR_VECTOR(vec) ((vec) & EPIC_IPIVPR_VECTOR_MSK)
#define _PC_FILESIZEBITS 5
#define BRIDGE_BAR0_OFFSET 0x10
#define _VX_MIPSI32R2 46
#define _OP(opcd,xo) ((opcd << 26) + (xo << 1))
#define DBSR 304
#define INCLUDE_FORMATTED_IO 
#define EPIC_DUART_INT_VEC (EPIC_DUART_INT_NUM + EPIC_VEC_IN_IRQ0)
#define STD_OUT 1
#define _EXTENSION_POSIX_1003 1
#define WDB_END_DEVICE_UNIT 0
#define M_mmuLib (85 << 16)
#define IS_SYSCALL_EVENT(event) ((event >= EVENT_SYSCALL_0) && (event <= EVENT_SYSCALL_8))
#define EPIC_IN_INT30_VEC_REG (EPIC_CCSROFF + 0x105c0)
#define OBJ_IS_PUBLIC(objId) ( (((OBJ_CORE *)(objId))->handle.attributes & WIND_OBJ_PUBLIC) != 0 )
#define __CONCAT1(x,y) x ## y
#define EPIC_MAX_IPI_IRQS 4
#define CPU_PWR_UTIL_PERIOD1 (300)
#define CPU_PWR_UTIL_PERIOD2 (1000)
#define ECONNREFUSED 61
#define FIOOPTIONS 3
#define WDB_MTU 1500
#define VX_MSG_Q_SIZE 176
#define EPIC_IPIVPR_INTR_ACTIVE EPIC_BIT(30)
#define _PPC_HID0_NAP 0x00400000
#define EAGAIN 11
#define PLAT_RATIO_333_MHZ 4
#define DBG_NO_SINGLE_STEP 1
#define __DBL_MAX_10_EXP__ 308
#define _GNU_TOOL 
#define M85XXRIO_PEIR(base) (CAST(VUINT32 *)(((char*)base) + 0x10014 ))
#define _PARM_L_tmpnam 64
#define M_taskPxLib (198 << 16)
#define __LDBL_DENORM_MIN__ 4.9406564584124654e-324L
#define AUTOCONF_INCLUDED 
#define I2C_DEVICE_TYPE_EEPROM_AT24C256 0
#define BUS_TYPE_VME 1
#define PCI_ARCADIA_BRIDGE_DEV_ID 0x051310E3
#define FLASH_ADRS_MASK 0xfff00000
#define _EXC_OFF_FPU 0x00800
#define WIND_OBJ_DELETE_ON_LAST_CLOSE 0x08
#define MMU_ATTR_USR_RO (MMU_ATTR_PROT_USR_READ)
#define BUCSR 1013
#define MMU_ATTR_USR_RW (MMU_ATTR_PROT_USR_READ | MMU_ATTR_PROT_USR_WRITE)
#define VME_AM_IS_SHORT(addr) ((addr & 0xf0) == 0x20)
#define RIO_CAR_DEVICE_INFO 0x04
#define MII_WRITE(addr,reg,val1,val2) val2 = ((* (pPhyInfo->phyWriteRtn)) ((pPhyInfo->pDrvCtrl), (addr), (reg), (val1)));
#define PCICMD_ADRS (PCI_CFG_BASE + 0x04)
#define MII_TECH_10BASE_T 0x0020
#define MMU_STATE_MASK_GUARDED 0x00000002
#define _VX_SIMSPARCSOLARIS 61
#define _PPC_MSR_SPE 0x02000000
#define INCLUDE_CPU_PWR_MGMT 
#define EPIC_TSEC2ERR_INT_VEC (EPIC_TSEC2ERR_INT_NUM + EPIC_VEC_IN_IRQ0)
#define _WRS_PAL_COPROC_LIB 
#define _VX_FD_ZERO(p) bzero((char *)(p), sizeof(*(p)))
#define ULTRASPARC _VX_ULTRASPARC
#define __STDC__ 1
#define MII_CR_RESET 0x8000
#define _WRS_CONFIG_ISR_OBJECTS 1
#define CACHE_SNOOP_DISABLE 0x20
#define VX_CLASS_LIST_LOCK(lock) semMTakeScalable (lock, WAIT_FOREVER, CLASS_LIST_SEM_INLINE_OPTIONS)
#define SH7600 _VX_SH7600
#define INCLUDE_MMU_BASIC 
#define __sferror(p) ((HANDLE_VERIFY(p, handleTypeFile) != OK) ? (FALSE) : (((p)->_flags & __SERR) != 0))
#define M_sntpcLib (113 << 16)
#define VXB_BUSID_MII 8
#define MII_CR_1000 0x0040
#define INCLUDE_WDB_GOPHER 
#define M_scsiLib (55 << 16)
#define EVENT_MEMADDTOPOOL CLASS3_EVENT(34)
#define HD_1 129
#define HD_2 130
#define _DBSR_TRAP_U 0x0100
#define RIO_WPCSR_EMPTY 0x04000000
#define MAX_LIO_CALLS 0
#define spReg gpr[1]
#define WV_EVT_PROTO_REV_3_0_FCS 3
#define _IFIELD_CRBA(x) ((0x001f0000 & x) >> 16)
#define EPIC_IN_INT11_VEC_REG (EPIC_CCSROFF + 0x10360)
#define SYM_IS_BSS(symType) ((symType) & SYM_BSS)
#define _IFIELD_CRBB(x) ((0x0000f800 & x) >> 11)
#define _PPC_L1CFG_REPL_MASK 0x00400000
#define VXDBG_MEM_WIDTH_READ vxdbgMemRead
#define _SYS_UIO_H_ 
#define WIND_CLASS_ALLOW_DUPLICATE_NAMES 0x01
#define M_ftpLib (136 << 16)
#define INCLUDE_TFFS_MOUNT 
#define EVENT_INT_ENTER EVENT_INT_ENT(0)
#define EPIC_IN_INT12_DES_REG (EPIC_CCSROFF + 0x10390)
#define _IFORM_EVX_14 104
#define MII_MAX_REG_NUM 0x20
#define _PPC_HID0_TBEN 0x00004000
#define BSP_VERSION "2.0"
#define __XSI_VISIBLE 600
#define INCLUDE_MSG_Q 
#define __INCsmpPpcPh 
#define SPE_CONTEXT_GET(pTcb) (SPE_CONTEXT *)(pTcb->pCoprocCtx)
#define LSDMR_RFCR_SHIFT(x) ((x << 15) & LSDMR_RFCR_MASK)
#define DEV_HDR_REMOVABLE 0x0001
#define FD_CLOEXEC 1
#define M85XXRIO_IPWMR(base) (CAST(VUINT32 *)(((char*)base) + 0x134E0 ))
#define LAWAR_SIZE_4KB 0x0000000B
#define M_taskLib (3 << 16)
#define __LDBL_DIG__ 15
#define FIOREADYCHANGE 11
#define EPIC_PCI_EXPRESS_INT_NUM 10
#define _MMU_SR 0x00000100
#define VXDBG_MEM_ACCESS(mode,pSrc,pDest,size) VXDBG_MEM_WIDTH_ACCESS(mode, pSrc, pDest, size, 0)
#define L2_SRAM_SIZE 0
#define EPIC_MAX_SMSG_IRQS 8
#define M85XX_L2CTL_L2BLKSIZ_MSK 0x0C000000
#define EXT_NUM_IRQ0 EXT_VEC_IRQ0
#define EPIC_IN_INT11_DES_REG (EPIC_CCSROFF + 0x10370)
#define PPC8560 _VX_PPC8560
#define __INCeventLibh 
#define __LDBL_MIN_10_EXP__ (-307)
#define FS_COMMIT_POLICY_NONE 0
#define DDR_SDRAM_LOCAL_ADRS_END (DDR_SDRAM_LOCAL_ADRS + DDR_SDRAM_LOCAL_SIZE)
#define RUNTIME_NAME "VxWorks"
#define WV_CLASS_NONE 0x00000000
#define EPIC_EIVPR_INTR_SENSE EPIC_BIT(22)
#define _DBCR0_DAC1W_U 0x0004
#define INCLUDE_SHELL_BANNER 
#define HRFS_DEFAULT_COMMIT_POLICY FS_COMMIT_POLICY_AUTO
#define EPIC_IPIDR_P0 EPIC_BIT(0)
#define MMU_BUFFER_WRITE (*(mmuLibFuncs.mmuBufferWrite))
#define FIOPROTOHOOK 22
#define EPIC_SMSG_DEST_REG(irq) (EPIC_SMSG_VEC_REG(irq) + EPIC_SMSG_DEST_REG_VECREGOFF)
#define MII_EXP_PRTN_NP 0x0008
#define CACHE_DMA_IS_WRITE_COHERENT() CACHE_DRV_IS_WRITE_COHERENT (&cacheDmaFuncs)
#define PCI_DEV_ID_85XX 0x000C1057
#define EPIC_EX_INT6_VEC_REG (EPIC_CCSROFF + 0x100c0)
#define EVENTS_SEND_IF_FREE 0x04
#define SLL_PUT_AT_TAIL(list,node) { ((SL_NODE *)(node))->next = NULL; if (((SL_LIST *)(list))->head == NULL) { ((SL_LIST *)(list))->head = (SL_NODE *)(node); ((SL_LIST *)(list))->tail = (SL_NODE *)(node); } else ((SL_LIST *)(list))->tail->next = (SL_NODE *)(node); ((SL_LIST *)(list))->tail = (SL_NODE *)(node); }
#define __INCb_clock_th 
#define VXBAF_CONVERT_BYTE_ORDER 0x00000001
#define IPCOM_ENV_NONE 1
#define M85XXRIO_ODQEPAR(base) (CAST(VUINT32 *)(((char*)base) + 0x11028))
#define S_smLib_NOT_ATTACHED (M_smLib | 3)
#define _WRS_KERNEL_LOCK_OFFSET_file (0x0c + _WRS_KERNEL_LOCK_ALIGN_tkt_ctr)
#define _CPU_CACHE_ALIGN_SHIFT 5
#define INCLUDE_PARAM_SYS 
#define PPC_NO_REAL_MODE 
#define INCLUDE_IO_FILE_SYSTEM 
#define HCF_RES_ADDR 3
#define VXB_ACCESS_INT_DISABLE 0x00000010
#define CONTIG_MAX -1
#define MAC_OFFSET_MOTTSEC 0
#define RIO_FEATURES_EXTADDR_34_50_66 0xe000
#define MIPSI32 _VX_MIPSI32
#define __RCSID_SOURCE(s) __IDSTRING(rcsid_source,s)
#define MMU_STATE_SUP_RX_USR_RW (MMU_STATE_SUP_RX | _MMU_UR | _MMU_UW)
#define MMU_STATE_SUP_RX_USR_RX (MMU_STATE_SUP_RX | _MMU_UR | _MMU_UX)
#define FIODISCARD 71
#define __INCsioLibh 
#define VX_BINARY_SEMAPHORE VX_SEMAPHORE
#define EPIC_EIVPR_PRIORITY(p) (((p) << 16) & EPIC_EIVPR_PRIORITY_MSK)
#define _VX_ARCH_DIR ppc
#define MII_PHY_ISO_UNAVAIL 0x200000
#define _PPC_TCR_WIE_U 0x0800
#define EPIC_INT_EDG_POS 1
#define MMU_ATTR_CACHE_COPYBACK 0x00000100
#define EPIC_PROC_INIT_REG (EPIC_CCSROFF + 0x01090)
#define MMU_STATE_ENDIAN_LITTLE 0x00000001
#define INST_BC_RL 0x4c000021
#define VM_PAGE_OPTIMIZE(context,virtAddr,len,option) ((vmLibInfo.pVmPageOptimizeRtn == NULL) ? (ERROR) : ((*vmLibInfo.pVmPageOptimizeRtn) (context, virtAddr, len, option)))
#define EPIC_EX_INT6_DES_REG (EPIC_CCSROFF + 0x100d0)
#define MII_SR_T2_FULL_DPX 0x0400
#define M85XXRIO_IPWSR(base) (CAST(VUINT32 *)(((char*)base) + 0x134E4 ))
#define MII_MASSLA_STAT_LOCAL_RCV 0x2000
#define IPCOM_PCONFIG_H 
#define I2C_CYCLE_START(x) i2cCycleMpc85xxStart(x)
#define FD_CLR(n,p) _VX_FD_CLR (n, p)
#define MSG_Q_OPTIONS_MASK (MSG_Q_TYPE_MASK | MSG_Q_EVENTSEND_ERR_NOTIFY | MSG_Q_INTERRUPTIBLE)
#define M85XXRIO_ROWAR0(base) (CAST(VUINT32 *)(((char*)base) + 0x10C10 ))
#define _ARCH_CHAR_MIN (-127-1)
#define INCLUDE_WDB_START_NOTIFY 
#define CDF_OVERRIDE TRUE
#define MB_LEN_MAX 1
#define DRV_INTCTLR_PPC 
#define _FFD_CLOEXEC 0x100000
#define VX_MEM_BARRIER_R() _WRS_BARRIER("sync");
#define __ppc 1
#define VX_MEM_BARRIER_W() _WRS_BARRIER("sync");
#define MIPSI64 _VX_MIPSI64
#define EOPNOTSUPP 45
#define _EXC_OFF_PROG 0x00700
#define M85XXRIO_ROWARn(base,n) (CAST(VUINT32 *)(((char*)base) + 0x10C10 + ((n)*0x20)))
#define SEM_RW_LIST_ENTRY_SIZE 0x0c
#define M_icmpLib (74 << 16)
#define S_objLib_OBJ_NO_METHOD (M_objLib _WRS_BIT_OR 5)
#define _ARCH_DBL_EPSILON 2.2204460492503131e-16
#define S_taskLib_TASK_SWAP_HOOK_SET (M_taskLib | 105)
#define _VX_AM29035 53
#define S_classLib_CLASS_ID_ERROR (M_classLib | 1)
#define __P(protos) protos
#define MEM_ALLOC_ERROR_MASK 0x03
#define CORE_DUMP_MEM_FILTER_MAX 10
#define UIO_SMALLIOV 8
#define __INCvwModNumh 
#define MII_TECH_10BASE_FD 0x0040
#define MAX_CLASS1_ID 599
#define SM_OBJ_MAX_MEM_PART 4
#define EPIC_TM_A3_VEC_REG (EPIC_CCSROFF + 0x011e0)
#define __INCb_cpuset_th 
#define VX_MAX_TASK_SWITCH_RTNS 16
#define RIO_NO_HARDWARE 0
#define _WRS_UNALIGNED_COPY(pSrc,pDest,size) ( __builtin_memcpy ((pDest), (void *)(pSrc), size))
#define BRK_HARDWARE 0
#define MMU_STATE_SUP_RX_USR_WX (MMU_STATE_SUP_RX | _MMU_UW | _MMU_UX)
#define EPIC_SR_IN_DB1_INT_VEC (EPIC_SR_IN_DB1_INT_NUM + EPIC_VEC_IN_IRQ0)
#define EPIC_MIDR_EX_PIN EPIC_BIT(31)
#define _T_WCHAR 
#define CLASS2_EVENT(id) (MIN_CLASS2_ID + id)
#define PCIBA (CCSBAR | PIC_OFFSET)
#define EVENT_SD_DELETE CLASS3_EVENT(201)
#define EVENT_TASKCONT CLASS3_EVENT(44)
#define EPIC_FRR_NCPU_MASK 0x00001f00
#define EVENT_TASKLOCK CLASS1_EVENT(7)
#define MII_MF_OP_RD 0x2
#define __INCregsPpch 
#define _PPC_ESF_R8 _PPC_ESF_R(8)
#define I2C_CYCLE_ACKIN(x) i2cCycleMpc85xxAckIn(x)
#define MMU_ATTR_TRANSLATE (*(mmuLibFuncs.mmuAttrTranslate))
#define SM_ANCHOR_ADRS ((char *) (SM_BASE_ADRS + SM_ANCHOR_OFFSET))
#define F_UNLKSYS 4
#define S_iosLib_TOO_MANY_OPEN_FILES EMFILE
#define SIO_MODE_INT 2
#define M_nfsdLib (95 << 16)
#define INCLUDE_WDB_EXC_NOTIFY 
#define SIO_CALLBACK_PUT_RCV_CHAR 2
#define M_ipcom (199 << 16)
#define M_poolLib (124 << 16)
#define MCORE10 _VX_MCORE10
#define O_NOCTTY _FNOCTTY
#define MCORE15 _VX_MCORE15
#define AIO_PRIO_DELTA_MAX 254
#define VX_CODE_BARRIER() _WRS_BARRIER("")
#define TRON _VX_TRON
#define _WRS_KERNEL_LOCK_ALIGN_tkt_ctr (_WRS_KERNEL_LOCK_VAR_ALIGN)
#define FIONBIO 16
#define FMARK _FMARK
#define _FAPPEND 0x0008
#define _PPC_ESF_R13 _PPC_ESF_R(13)
#define _VX_MIPS 40
#define _PPC_ESF_R14 _PPC_ESF_R(14)
#define WDB_COMM_NETWORK 0
#define M_loadCoffLib (83 << 16)
#define WIND_TCB_R14 (WIND_TCB_REGS + REG_SET_GR(14))
#define EPIC_RES43_INT_VEC (EPIC_RES43_INT_NUM + EPIC_VEC_IN_IRQ0)
#define WIND_JOBS_MAX 64
#define RIO_BUS_CONFIG_IN_PROGRESS 3
#define __INCb_BOOLh 
#define WIND_TCB_R15 (WIND_TCB_REGS + REG_SET_GR(15))
#define _PPC_ESF_R17 _PPC_ESF_R(17)
#define EPIC_IN_INT30_DES_REG (EPIC_CCSROFF + 0x105d0)
#define __FLT_MIN__ 1.17549435e-38F
#define S_vmLib_FUNCTION_UNSUPPORTED (M_vmLib | 7)
#define IPCOM_USE_INET 
#define _VX_I80386 81
#define _WRS_ABSOLUTE_EXTERN(name) extern const char name[]
#define MMU_ASID_MIN 1
#define MEM_ALLOC_ERROR_LOG_MSG 0x01
#define S_taskLib_TASK_SWAP_HOOK_REFERENCED (M_taskLib | 104)
#define EVENT_TASKUNLOCK CLASS1_EVENT(8)
#define _ARCH_LONG_MIN (-2147483647-1)
#define EVENT_WINDPENDQFLUSH CLASS2_EVENT(14)
#define _WRS_CONFIG_COMPONENT_IPAPPL 1
#define EPIC_MIVPR_PRIORITY_MSK (EPIC_BIT(19) | EPIC_BIT(18) | EPIC_BIT(17) | EPIC_BIT(16))
#define __POSIX_VISIBLE 200112
#define SPARCV9 _VX_SPARCV9
#define _PPC_SPEFSCR_SOVH 0x80000000
#define _PPC_ESR_SPE 0x00000080
#define _PPC_MMUCSR0_L2TLB1_FI 0x00000002
#define RIO_CSR_PE_LL_CTRL 0x4c
#define EPIC_PERFMON_3_MSK_REG0 (EPIC_CCSROFF + 0x013b0)
#define MRTPR_PTP_MASK 0xff000000
#define __INCb_blksize_th 
#define IPCOM_FILE_NATIVE_ROOT "/ram/"
#define WDB_DPRINTF_MAX_MSG_LENGTH 100
#define PCI_INBOUND_ATTR_REG1(base) CVPUINT32(base, 0x8DF0)
#define LAWAR_SIZE_128KB 0x00000010
#define MII_PHY_NO_DELAY 0x0
#define EPIC_MSIDR_P1_INT EPIC_BIT(1)
#define PCI2_INBOUND_ATTR_REG2(base) CVPUINT32(base, 0x9DD0)
#define PCI2_INBOUND_ATTR_REG3(base) CVPUINT32(base, 0x9DB0)
#define _VX_SIMSPARCSUNOS 60
#define PCI_INBOUND_ATTR_REG3(base) CVPUINT32(base, 0x8DB0)
#define TRUE (1)
#define M_isrLib (175 << 16)
#define _WRS_CONFIG_COMPONENT_IPRIP 1
#define _VX_MAP1000A 181
#define __INCversionh 
#define M_exEngLib (169 << 16)
#define EAFNOSUPPORT 47
#define EPIC_IIVPR_VECTOR_MSK (0xffff)
#define M85XX_MAMR(base) (CAST(VUINT32 *)((base) + 0x5070))
#define LAWAR_SIZE_128MB 0x0000001A
#define EEXIST 17
#define VX_COPROC2_TASK 0x02000000
#define M85XXRIO_PLMREQCSR(base) (CAST(VUINT32 *)(((char*)base) + 0x00140 ))
#define M_lstLib (15 << 16)
#define _VX_ULTRASPARC 111
#define EPIC_IN_INT43_DES_REG (EPIC_CCSROFF + 0x10770)
#define VME_AM_EXT_SUP_ASCENDING 0x0f
#define SEMRW_EXT_PTR_GET(semId) ( (SEM_RW_EXT *) ((UINT) semId + sizeof (SEMAPHORE) )
#define S_vmLib_BAD_STATE_PARAM (M_vmLib | 2)
#define EPIC_SMSG_INT6_VEC_REG (EPIC_CCSROFF + 0x11cc0)
#define XSCALE _VX_XSCALE
#define INCLUDE_ELF 
#define VM_STATE_MASK_GLOBAL MMU_ATTR_SPL_MSK
#define M85XXRIO_ODDPR(base) (CAST(VUINT32 *)(((char*)base) + 0x13418))
#define M85XX_L2CTL_L2SRAM_MSK 0x00070000
#define MMU_STATE_SUP_R_USR_R (MMU_STATE_SUP_R | _MMU_UR)
#define MMU_ATTR_PROT_GET(attr) ((attr) & MMU_ATTR_PROT_MSK)
#define MMU_STATE_SUP_R_USR_W (MMU_STATE_SUP_R | _MMU_UW)
#define EPIC_OPT_EN_N 0x80000000
#define EPIC_EX_DFT_POLAR EPIC_INT_ACT_HIGH
#define INCLUDE_CACHE_SUPPORT 
#define _WRS_ASM(x) __asm__ volatile (x)
#define _EXC_OFF_DECR 0x00900
#define CORE_DUMP_MEM_POOL_PROTECTION_ENABLE TRUE
#define EPIC_CTPR_TASKPRI(p) ((p) & EPIC_CTPR_TASKPRI_MSK)
#define S_ioLib_CANT_OVERWRITE_DIR EISDIR
#define M_vwModNum (27 << 16)
#define SYM_TEXT 0x4
#define VXB_PARAM_POINTER 0x0004
#define FIOATTRIBSET 35
#define M85XXRIO_ROWAR_RDTYPE_IO_READ_HOME 0x2
#define S_msgQLib_INVALID_MSG_COUNT (M_msgQLib | 7)
#define EVENT_CPC_ACK CLASS3_EVENT(234)
#define MEM_BLOCK_ERROR_EDR_WARN_FLAG 0x800
#define __COPYRIGHT(s) __IDSTRING(copyright,s)
#define EILSEQ 82
#define M85XX_LAWAR0(base) (CAST(VUINT32 *)((base) + 0xc10))
#define M85XX_LAWAR1(base) (CAST(VUINT32 *)((base) + 0xc30))
#define M85XX_LAWAR2(base) (CAST(VUINT32 *)((base) + 0xc50))
#define M85XX_LAWAR3(base) (CAST(VUINT32 *)((base) + 0xc70))
#define M85XX_LAWAR4(base) (CAST(VUINT32 *)((base) + 0xc90))
#define SM_OBJ_MAX_MSG_Q 10
#define M85XX_LAWAR7(base) (CAST(VUINT32 *)((base) + 0xcf0))
#define EPIC_IN_INT27_VEC_REG (EPIC_CCSROFF + 0x10560)
#define ESPIPE 29
#define FIOFSTATFSGET64 70
#define _IFLAG_E500_SPEC 0x2000
#define M85XX_L2SRBAR0(x) (CAST(VUINT32 *)((x + 0x20100)))
#define M85XX_L2SRBAR1(x) (CAST(VUINT32 *)((x + 0x20108)))
#define __PTRDIFF_TYPE__ int
#define FIOFSTATGET 64
#define _VX_STATUS_DEFINED 
#define _ARCH_FLT_MIN_10_EXP (-37)
#define EPIC_TM_A2_VEC_REG (EPIC_CCSROFF + 0x011a0)
#define EVENT_SYSCALL_RETURN_OK CLASS3_EVENT(74)
#define SYS_MODEL_8543 "Wind River SBCC8543"
#define SYS_MODEL_8545 "Wind River SBC8545"
#define _VX_ARMARCH7_T 1126
#define SYS_MODEL_8548 "Wind River SBC8548"
#define M_amsLib (154 << 16)
#define CVPUINT32(base,addr) (CAST(VUINT32 *)((base) + (addr)))
#define EVENT_WINDSPAWN CLASS2_EVENT(0)
#define __WCHAR_MAX__ 65535U
#define M_coprocLib (179 << 16)
#define MMU_ATTR_PROT_USR_MSK 0x00000038
#define SLL_INIT(list) { ((SL_LIST *)(list))->head = NULL; ((SL_LIST *)(list))->tail = NULL; }
#define S_symLib_NAME_CLASH (M_symLib | 2)
#define _VX_FRV 170
#define EPIC_IN_INT24_DES_REG (EPIC_CCSROFF + 0x10510)
#define __INCtaskHookLibh 
#define _WCHAR_T 
#define INCLUDE_TIMER_SYS 
#define _PPC_L1CFG_LA_V(x) (x >> 17)
#define SEM_NO_EVENT_SEND 0x100
#define EVENT_MSGCCREATE CLASS3_EVENT(35)
#define WDB_COMM_PIPE 7
#define M_shellLib (173 << 16)
#define EPIC_MSG_INT2_VEC_REG (EPIC_CCSROFF + 0x11640)
#define _WRS_BARRIER(x) __asm volatile (x ::: "memory")
#define PM_RESERVED_MEM (6 * VM_PAGE_SIZE)
#define VOID_FROM_CONST(x) _VX_VOID_FROM_CONST(x)
#define INT_EVENT(id) (MIN_INT_ID + id)
#define EPIC_IRQSR0_EX_INT_MSK 0xfff
#define IPCOM_SHELL_IPCOM 3
#define _LITTLE_ENDIAN 4321
#define _IOFBF 0
#define INCLUDE_ERF 
#define SEMB_EMPTY_STATE 0x10
#define EPIC_I2C_INT_NUM 27
#define __FLT_EVAL_METHOD__ 0
#define S_vxdbgLib_HW_REGS_FULL VXDBG_ERROR_TO_ERRNO(VXDBG_ERR_HW_REGS_FULL)
#define PID0 48
#define PID1 633
#define PID2 634
#define NUM_SIGNAL_QUEUES 16
#define __INCfuncBindPh 
#define SEM_M_INLINE_PRI_RESORT 0x10
#define _IFIELD_XO_1(x) ((0x000007fe & x) >> 1)
#define _IFIELD_XO_2(x) ((0x000003fe & x) >> 1)
#define _IFIELD_XO_3(x) ((0x0000003e & x) >> 1)
#define PCI_ATTR_WS_2G 0x0000001e
#define M_inetLib (43 << 16)
#define S_ioLib_CANCELLED ECANCELED
#define SSIZE_MAX _POSIX_SSIZE_MAX
#define M85XX_PVR(base) (CAST(VUINT32 *)((base) + 0xE00A0))
#define __INCtaskLibh 
#define _DBSR_RET 0x00008000
#define _POSIX_DELAYTIMER_MAX 32
#define SHELL_DEFAULT_CONFIG "LINE_EDIT_MODE=,LINE_LENGTH=256,STRING_FREE=manual,INTERPRETER=,VXE_PATH=.;/romfs"
#define __SNBF 0x0002
#define COMMAND_REGISTER_WIDTH 0x2
#define VM_CTX_MASK_OUT 0x0
#define _VX_MAP_ERRNO_2_POSIX(errno) (((errno) & ERRNO_PX_FLAG)? (errno) &= 0x7fff : (errno) )
#define LINK_MAX _POSIX_LINK_MAX
#define M_msgQDistLib (121 << 16)
#define ROM_SIZE 0x00100000
#define EPIC_IN_INT9_VEC_REG (EPIC_CCSROFF + 0x10320)
#define HCF_RES_STRING 1
#define _PPC_L1CFG_CARCH_MASK 0xC0000000
#define WIND_OBJ_PUBLIC 0x40
#define _IFORM_405_TLB 60
#define FIORENAME 10
#define SYSFLG_VENDOR_0 0x1000
#define _FNOATIME 0x80000
#define USER_D_MMU_ENABLE 
#define WV_OBJ_CLASS_IS_INSTRUMENTED(classId) (classId->handle.attributes & WIND_CLASS_INSTRUMENTED)
#define M_msgQDistGrpLib (120 << 16)
#define LEADING_UNDERSCORE FALSE
#define ARMARCH5_T _VX_ARMARCH5_T
#define PPC505 _VX_PPC505
#define PPC509 _VX_PPC509
#define _FD_FUNC_DEFINED 
#define MII_SR_10T_HALF_DPX 0x0800
#define EVT_NOOBJ_STR_0(evtId,LENGTH,DATA) do { if (ACTION_IS_SET) { EVT_NOOBJ_STR_0_T evt_noobj_str_0; evt_noobj_str_0.data = DATA; evt_noobj_str_0.length = LENGTH; eventPointSwHandle (evtId, &evt_noobj_str_0, sizeof evt_noobj_str_0); } } while ((0))
#define VXDBG_BP_BY_ID_REMOVE(pClient,retVal,brkptId) { VXDBG_BP_DEL_INFO bpInfo; bpInfo.type = BP_BY_ID_DELETE; bpInfo.pClnt = pClient; bpInfo.info.id.bpId = brkptId; VXDBG_BP_DELETE(bpInfo, retVal); }
#define N_TLB_ENTRIES 256
#define TRG_CLASS_5_ON 0x10010000
#define STACK_ROUND_UP(x) ROUND_UP(x, _STACK_ALIGN_SIZE)
#define _VX_PPC860 97
#define SPIN_LOCK_TASK_DECL(x,flag) spinlockTask_t x = { {{0}}, -1, 0, NULL, flag}
#define VXEV10 0x00000200
#define FIOINODETONAME 45
#define FIOCOMMITPERIODGETFS 68
#define EPIC_SEC_INT_VEC (EPIC_SEC_INT_NUM + EPIC_VEC_IN_IRQ0)
#define M85XX_PORPLLSR_PLAT_RATIO(base) ((*M85XX_PORPLLSR(base) & M85XX_PORPLLSR_PLAT_RATIO_MASK)>>1)
#define MIN_CLASS3_ID 10000
#define M_unLib (188 << 16)
#define S_ioLib_NO_DRIVER ENXIO
#define SM_TAS_TYPE SM_TAS_HARD
#define VXB_BUSID_MF 10
#define M_tyLib (31 << 16)
#define SODIMM_FLASH 2
#define IPCOM_USE_TIME 
#define EVENT_SALRUN_WAIT CLASS3_EVENT(101)
#define PENDED 2
#define __FINITE_MATH_ONLY__ 0
#define _PPC_SPEFSCR_FINVS 0x00100000
#define S_objLib_OBJ_ILLEGAL_CLASS_TYPE (M_objLib _WRS_BIT_OR 10)
#define SYSFLG_TFTP 0x80
#define CACHE_PIPE_FLUSH() ((cacheLib.pipeFlushRtn == NULL) ? OK : (cacheLib.pipeFlushRtn) ())
#define S_ioLib_NAME_TOO_LONG ENAMETOOLONG
#define WIND_OBJ_CORE_SIZE 0x40
#define __INCdsmPpch 
#define EPIC_VEC_OPTION_NA 27
#define _PPC_SPEFSCR_OVH 0x40000000
#define M_pmLib (139 << 16)
#define DEFAULT_VM_MAP_ATTR_MASK (MMU_ATTR_VALID_MSK | MMU_ATTR_PROT_MSK | MMU_ATTR_CACHE_MSK | MMU_ATTR_SPL_MSK)
#define VX_COPROC7_TASK 0x40000000
#define TLB_CACHE_MODE VM_STATE_CACHEABLE | VM_STATE_MEM_COHERENCY
#define STACK_VERSION_PATCH 2
#define EBADF 9
#define S29GL_FLASH_WIDTH 2
#define AUX_CLK_RATE_MAX ((CCB_FREQ / 16) / (1 << FIT_DIVIDER_TAP_10))
#define __INCcacheLibh 
#define __INCesfPpch 
#define __STDDEF_H__ 
#define IPCOM_AUTOCONF_H 
#define LSRT_VALUE 0x20
#define IO_ADRS_EI ((char *) 0x000fff00)
#define MII_EXT_STAT_REG 0xf
#define INT_LEVEL(eventNum) ((eventNum)-MIN_INT_ID)
#define _IFORM_XO_2 48
#define _IFORM_XO_3 49
#define ECANCELED 72
#define S_taskLib_NO_TCB (M_taskLib | 111)
#define _ARCH_CHAR_BIT 8
#define DOSFS_CACHE_BACKGROUND_FLUSH_TASK_ENABLE FALSE
#define SPIN_LOCK_NOBODY -1
#define EVENT_SEMRTAKE CLASS3_EVENT(205)
#define _IFORM_I_1 0
#define M85XXRIO_ODQDPAR(base) (CAST(VUINT32 *)(((char*)base) + 0x1100C))
#define _IFORM_EVX_6 96
#define semCount state.count
#define EPIC_WHOAMI_ID(n) ((n) & EPIC_WHOAMI_ID_MSK)
#define BOOT_CMD_STACK_SIZE (11000)
#define REFCNT_NOT_ZERO 1
#define TFFS_FLASH_TLB_SIZE _MMU_TLB_SZ_64M
#define DDR_SDRAM_MD_CNTL 0x120
#define INCLUDE_IO_RTP 
#define PPC85XX _VX_PPC85XX
#define I2C_BYTE_NUM_SHIFT 7
#define _IFORM_EFX_1 87
#define EVENT_WINDSUSPEND CLASS2_EVENT(2)
#define EVENT_MSGCREPLYGET CLASS3_EVENT(37)
#define MII_READ(addr,reg,val1,val2) val2 = ((* (pPhyInfo->phyReadRtn)) ((pPhyInfo->pDrvCtrl), (addr), (reg), (val1)));
#define ETXTBSY 63
#define S_vxdbgLib_ERR_IPI_EMIT VXDBG_ERROR_TO_ERRNO(VXDBG_ERR_IPI_EMIT)
#define DEFAULT_BOOT_LINE "motetsec(0,0)host:vxWorks h=192.102.10.32 e=192.102.10.15 u=vxworks pw=vxworks f=0x0"
#define XBD_BLK_DEV_TASK_PRIORITY 50
#define M_distLib (118 << 16)
#define _EXC_INFO_FPCSR 0x040
#define _WRS_CONFIG_FAST_MATH 1
#define _WRS_SNOOP_NEEDS_DMA_MALLOC_SUPPORT 
#define _IFLAG_RC 0x0002
#define PCI_XINT4_LVL 0x5
#define _MMU_UW 0x00000800
#define MMU_STATE_VALID 0x80000000
#define _VX_PPC 90
#define FIOFLUSH 2
#define FIOSYNC 21
#define _DBSR_DAC1R 0x00080000
#define EPIC_VEC_GT_A_IRQ0 (EPIC_VEC_IN_IRQ0 + EPIC_MAX_IN_IRQS)
#define NV_MAC_ADRS_OFFSET 0x200
#define _DBSR_DAC1W 0x00040000
#define __INCb_pthread_attr_th 
#define _WRS_CONFIG_DETERMINISTIC 1
#define __INCvxLibh 
#define EPIC_RES44_INT_NUM 44
#define htobe16(x) ((UINT16)(x))
#define _PPC_HID0_DOZE_U 0x0080
#define __restrict 
#define EVENT_SYSCALL_RETURN_ERR CLASS3_EVENT(75)
#define MMU_STATE_SUP_RX_USR_R (MMU_STATE_SUP_RX | _MMU_UR)
#define MMU_STATE_SUP_RX_USR_W (MMU_STATE_SUP_RX | _MMU_UW)
#define MMU_STATE_SUP_RX_USR_X (MMU_STATE_SUP_RX | _MMU_UX)
#define ETOOMANYREFS 59
#define _PPC_SPEFSCR_FINVH 0x08000000
#define __SHRT_MAX__ 32767
#define WDB_MODE WDB_MODE_DUAL
#define EPIC_IN_INT7_DES_REG (EPIC_CCSROFF + 0x102f0)
#define CCSBAR 0xE0000000
#define __LDBL_MAX__ 1.7976931348623157e+308L
#define MAX_MAC_ADRS 4
#define EPIC_TM_A1_VEC_REG (EPIC_CCSROFF + 0x01160)
#define M_ipRouteLib (141 << 16)
#define Q_ATTRIBUTE_SET(qHead,value) (((Q_HEAD *)(qHead))->qPriv2 = (UINT)(value))
#define OBJ_RECLAIM_DISABLE(objId) ( ((OBJ_CORE *)(objId))->handle.attributes |= WIND_OBJ_NO_RECLAIM )
#define CACHE_LIBRARY_MODE (CACHE_COPYBACK | CACHE_SNOOP_ENABLE)
#define S_vxdbgLib_TIMEOUT VXDBG_ERROR_TO_ERRNO(VXDBG_ERR_TIMEOUT)
#define TBL_R 268
#define M_loadElfLib (97 << 16)
#define _VX_ARMSA110 124
#define TBL_W 284
#define M85XXRIO_RIWAR_LOCAL_W_LOCK_L2 7
#define _PARM_UTS_SYSNAME_MAX 64
#define SIMLINUX _VX_SIMLINUX
#define INCLUDE_WDB_REG 
#define htobe32(x) ((UINT32)(x))
#define M_grmLib (167 << 16)
#define EPIC_TSEC2RX_INT_VEC (EPIC_TSEC2RX_INT_NUM + EPIC_VEC_IN_IRQ0)
#define EPIC_IN_DFT_POLAR EPIC_INT_ACT_HIGH
#define EVENT_SYSCALL_ENTER EVENT_SYSCALL_BASE
#define INST_BC_RL_MASK 0xfc00fbff
#define M85XX_L2ERRATTR(x) (CAST(VUINT32 *)((x + 0x20E4C)))
#define SPARC _VX_SPARC
#define MII_MASSLA_STAT_CONF_FAULT 0x8000
#define VM_STATE_BUFFERABLE_NOT 0x00
#define _ARCH_DBL_MAX_EXP 1024
#define PCI_OUTBOUND_TRANS_ADRS_REG1(base) CVPUINT32(base, 0x8c20)
#define _WRS_CONFIG_COMPONENT_MIPC 1
#define _PARM_FOPEN_MAX 20
#define RIO_NOT_INITIALIZED 1
#define VM_PAGE_SIZE 4096
#define _EXC_INFO_MSR 0x004
#define EPIC_EIDR_CRIT1_INT EPIC_BIT(29)
#define USER_D_CACHE_MODE (CACHE_LIBRARY_MODE)
#define USER_I_CACHE_MODE (CACHE_LIBRARY_MODE)
#define S_miiLib_PHY_LINK_DOWN (M_miiLib | 1)
#define _IFLAG_440_SPEC 0x0800
#define __SNPT 0x0800
#define _PPC_TSR_FIS_U 0x0400
#define MMU_ATTR_USR_DATA_RO (MMU_ATTR_USR_RO | MMU_ATTR_SUP_DATA_RO)
#define ETHERNET_MAC_HANDLER 
#define MII_CR_FDX 0x0100
#define __INCb_size_th 
#define L2SIZ_512KB 2
#define INCLUDE_MUX2 
#define LAWBAR_ADRS_SHIFT 12
#define EPIC_SMSG_INT4_VEC_REG (EPIC_CCSROFF + 0x11c80)
#define MII_TECH_PAUSE_MASK 0x0c00
#define htobe64(x) ((UINT64)(x))
#define _ARCH_va_arg(list,type) ((type *)(list += sizeof(type)))[-1]
#define EINPROGRESS 68
#define EPIC_RES25_INT_NUM 25
#define _ARCH_FLT_MAX_EXP 128
#define _PC_ASYNC_IO 3
#define EPIC_IN_INT37_VEC_REG (EPIC_CCSROFF + 0x106a0)
#define INCLUDE_WDB_EXIT_NOTIFY 
#define EPIC_GTVPR_PRIORITY_MSK (EPIC_BIT(19) | EPIC_BIT(18) | EPIC_BIT(17) | EPIC_BIT(16))
#define _POSIX_PRIO_IO 0
#define IPCOM_USE_TCP 
#define _PPC_MSR_DE 0x0200
#define _WRS_CONFIG_SV_INSTRUMENTATION 1
#define putchar(c) (__sputc(c, (stdout)))
#define BSD_4_2 3
#define _VX_PENTIUM 83
#define COMMAND_REGISTER_OFFSET 0x4
#define _WRS_CONFIG_FEATURE_USR 1
#define M_aioPxLib (92 << 16)
#define VX_NO_STACK_FILL 0x0100
#define EPIC_TSEC1ERR_INT_VEC (EPIC_TSEC1ERR_INT_NUM + EPIC_VEC_IN_IRQ0)
#define _PPC_PID_REG PID0
#define EVENT_WINDDELAY CLASS2_EVENT(9)
#define WIND_OBJ_ORPHANED 0x10
#define _VX_TOOL TOOL
#define EPIC_RES31_INT_VEC (EPIC_RES31_INT_NUM + EPIC_VEC_IN_IRQ0)
#define S_vmLib_PHYS_PAGES_ALREADY_MAPPED (M_vmLib | 8)
#define AIM_MMU_INIT_PT_INCR 0x20
#define MEDR_BLOCK_GUARD_ENABLE FALSE
#define INT_CPU_MICRO_LOCK() intCpuMicroLock()
#define EVENT_SALRUN_TERMINATE CLASS3_EVENT(107)
#define RIO_FEATURES_EXTADDR_34_66 0xa000
#define _WRS_ARCH_SUPPORTS_MEM_BARRIER 
#define M_rawFsLib (70 << 16)
#define __INClstLibh 
#define MPC85XX_I2C_DATA_REG_MASK 0xFF
#define _POSIX_AIO_MAX 1
#define I960CA _VX_I960CA
#define _VX_I80X86 80
#define _ARCH_SCHAR_MAX 127
#define EPIC_IN_INT37_DES_REG (EPIC_CCSROFF + 0x106b0)
#define _PPC_SPEFSCR_FDBZ 0x00000400
#define DDR_SDRAM_MODE_CFG 0x118
#define INCLUDE_PLB_BUS 
#define FD_SETSIZE _VX_FD_SETSIZE
#define __LDBL_MAX_EXP__ 1024
#define WDB_DPRINTF_MAX_MSGS 100
#define KERNEL_LOCK_TAKE() (kernelLockTake())
#define __printflike(fmtarg,firstvararg) __attribute__((__format__ (__printf__, fmtarg, firstvararg)))
#define M_smUtilLib (77 << 16)
#define EVENT_OBJ_TASK CLASS2_EVENT(19)
#define MII_ANAR_NEXT_PAGE 0x8000
#define _ARCH_FLT_DIG 7
#define _ARCH_MB_LEN_MAX 1
#define VM_CONTEXT_UNION_INIT(context,startAddr,len) ((vmLibInfo.pVmCtxUnionInitRtn == NULL) ? (ERROR) : ((*vmLibInfo.pVmCtxUnionInitRtn) (context, startAddr, len)))
#define _WRS_IOLONG ULONG
#define RIO_FEATURES_PROCESSOR 0x0004
#define M_pgPoolPhysLib (182 << 16)
#define ENOTBLK 66
#define M_cacheLib (69 << 16)
#define _PPC_ESF_FPCSR (_PPC_ESF_DSISR + SIZ_UINT32)
#define MMU_STATE_SUP_RW_USR_RW (MMU_STATE_SUP_RW | _MMU_UR | _MMU_UW)
#define MMU_STATE_SUP_RW_USR_RX (MMU_STATE_SUP_RW | _MMU_UR | _MMU_UX)
#define MII_MASSLA_STAT_REMOTE_RCV 0x1000
#define MAX_ARGS 10
#define EPROTOTYPE 41
#define M_graLib (172 << 16)
#define bswap32(x) LONGSWAP((UINT32)(x))
#define Q_EACH(pQHead,routine,routineArg) ((Q_NODE *)((*(((Q_HEAD *)(pQHead))->pQClass->eachRtn)) (((Q_HEAD *)(pQHead)),((FUNCPTR)(routine)),((int)(routineArg)))))
#define EPIC_EX_VEC_REG_INTERVAL 0x20
#define EPIC_IN_INT18_VEC_REG (EPIC_CCSROFF + 0x10440)
#define TRG_USER_INDEX 3
#define EVENT_WINDTICKTIMEOUT CLASS2_EVENT(31)
#define VXBAF_BYTE_ORDER_LE_16 0x00040000
#define EPIC_EX_INT9_VEC_REG (EPIC_CCSROFF + 0x10120)
#define _WRS_BIT_OR |
#define SYSFLG_DEBUG 0x02
#define LAWAR_SIZE_32KB 0x0000000E
#define M85XX_PORPLLSR(base) (CAST(VUINT32 *)((base) + 0xE0000))
#define VXEV26 0x02000000
#define MII_ID2_MODE_MASK 0x03f0
#define _PPC_MSR_IS 0x0020
#define EPIC_PERFMON_3_MSK_REG1 (EPIC_CCSROFF + 0x013c0)
#define EPIC_MAX_GT_B_IRQS 4
#define _POSIX_AIO_LISTIO_MAX 2
#define VXB_DRIVER_METHOD(NAME) ((UINT32)&NAME ##_desc[0])
#define M_tplLib (170 << 16)
#define SPINLOCK_OPERATION_ABORTED -1
#define EPIC_REG_READ(offset) *(volatile UINT32 *)((UINT32)pEpicRegBase + (offset & REG_ADRS_MASK))
#define EALREADY 69
#define _PPC_SPEFSCR_FINVE 0x00000020
#define LAWAR_SIZE_32MB 0x00000018
#define PCI2_OUTBOUND_TRANS_ADRS_REG1(base) CVPUINT32(base, 0x9c20)
#define bswap64(x) 
#define SLL_PREVIOUS(list,node,previousNode) { SL_NODE *temp; (SL_NODE *)(previousNode) = NULL; temp = ((SL_LIST *)(list))->head; if (temp != NULL) && (temp != (node)) while (temp->next != NULL) { if (temp->next == (node)) { (SL_NODE *)(previousNode) = temp; break; } temp = temp->next; } }
#define __INCtoolMacrosPh 
#define _POSIX_SYNCHRONIZED_IO 0
#define I960HX _VX_I960HX
#define EPIC_IN_INT18_DES_REG (EPIC_CCSROFF + 0x10450)
#define INCLUDE_MMU_OPTIMIZE 
#define M_salLib (189 << 16)
#define INCLUDE_VXBUS_SHOW 
#define MPC85XX_I2C_STATUS_REG_SRW 0x04
#define M85XXRIO_IMR(base) (CAST(VUINT32 *)(((char*)base) + 0x11060))
#define CACHE_DRV_FLUSH(pFuncs,adrs,bytes) (((pFuncs)->flushRtn == NULL) ? OK : ((pFuncs)->flushRtn) (DATA_CACHE, (adrs), (bytes)))
#define MIPS32 _VX_MIPS32
#define EPIC_TM_A1_DES_REG (EPIC_CCSROFF + 0x01170)
#define FLASH1_BASE_ADRS 0xf8000000
#define EPIC_IN_INT32_DES_REG (EPIC_CCSROFF + 0x10610)
#define MMU_ATTR_CACHE_MSK 0x00000f80
#define MIN_RESERVE_ID 20000
#define _PPC_SPEFSCR_FINXE 0x00000040
#define MMU_STATE_CACHEABLE_COPYBACK 0x00000000
#define MMU_STATE_SUP_RW_USR_WX (MMU_STATE_SUP_RW | _MMU_UW | _MMU_UX)
#define _WRS_ARCH_HAS_CPU_PWR_MGMT 
#define _PPC_SPEFSCR_FINXS 0x00200000
#define O_APPEND _FAPPEND
#define _WRS_CONFIG_FULL_EDR_STUBS 1
#define _MMU_TLB_TS_1 0x00001000
#define I960JX _VX_I960JX
#define VXB_VER_MINOR(x) (((x)>>8)&0x0ff)
#define MII_CRC_LEN 0x4
#define _IFORM_B_1 1
#define _ARCH_SCHAR_MIN (-127-1)
#define I960KA _VX_I960KA
#define I960KB _VX_I960KB
#define _ARCH_HUGH_VAL _ARCH_DBL_MAX
#define _POSIX_LINK_MAX 8
#define INTERRUPT_STACK_UNDERFLOW_SIZE 4096
#define WV_CLASS_1 0x00000001
#define WV_CLASS_2 0x00000003
#define _PPC_L1CFG_SIZE_MASK 0x00000FFF
#define DEC_CLOCK_FREQ OSCILLATOR_FREQ
#define WV_ON 0x10000000
#define WV_EVT_INT_ENT(intNum) EVT_CTX_1(EVENT_INT_ENTER, intNum);
#define STREAM_MAX FOPEN_MAX
#define VXDBG_ALL_TASKS 0
#define PCI_XINT3_LVL 0x4
#define PCI_ATTR_WS_256K 0x00000011
#define EVENT_PAUSE CLASS3_EVENT(26)
#define MIPS64 _VX_MIPS64
#define MMU_ATTR_USR_RWX (MMU_ATTR_USR_RW | MMU_ATTR_PROT_USR_EXE)
#define SEM_RW_OPTIONS_MASK (SEM_MUT_OPTIONS_MASK)
#define M_eventLib (134 << 16)
#define _DBCR2_DAC2ER 0x03000000
#define __sclearerr(p) ((void)((HANDLE_VERIFY(p, handleTypeFile) != OK) ? (0) : (((p)->_flags &= ~(__SERR|__SEOF)))))
#define OBJ_SET_DEALLOC_MEM(objId) ( ((OBJ_CORE *)(objId))->handle.attributes |= WIND_OBJ_DEALLOC_MEM )
#define FIOUNLINK 59
#define QUEUE_INTERRUPTIBLE 1
#define MII_PHY_DEF_ADDR 0x0
#define G100 _VX_G100
#define _IFIELD_LI(x) ((0x02000000 & x) ? ((0xf6000000 | x) & ~3) : ((0x03fffffc & x) & ~3))
#define M85XX_LBCDLLSR(base) (CAST(VUINT32 *)((base) + 0xE0E20))
#define PADDING_SHIFT_COUNT (29)
#define DEVMETHOD_DEF(METHOD,STRING) char METHOD ##_desc[]=STRING;
#define MAP1000 _VX_MAP1000
#define _POSIX_CHILD_MAX 6
#define _WRS_CONFIG_WLAN_ATH 1
#define __INCintLibh 
#define VM_STATE_MASK_GUARDED MMU_ATTR_CACHE_MSK
#define EVT_STORE_UINT16(pBuf,event_id) *pBuf++ = (event_id)
#define BOOT_COLD BOOT_CLEAR
#define VXB_HANDLE_IO 8
#define IVOR10 410
#define IVOR11 411
#define IVOR13 413
#define IVOR15 415
#define _WRS_CONFIG_EDR_POLICY_HOOKS_D 1
#define CDROM_COM_BUF_SIZE 3
#define _DEFINED_cpuset_t 
#define TASK_USER_EXEC_STACK_UNDERFLOW_SIZE 4096
#define VXDBG_CTX_STOP(pClnt,pCtx) _func_vxdbgFuncs[VXDBG_STOP] (pClnt, pCtx)
#define IPCOM_STDIO_BUFSIZE 3000
#define SIO_ERROR_FRAMING 0
#define ENODATA 78
#define _MMU_TLB_SZ_64K 0x00000300
#define _ARCH_ALIGN_MEMORY 4
#define INCLUDE_MUXTK_OVER_END 
#define IPCOM_USE_AUTH 
#define __INCtaskLibCommonh 
#define MMU_ATTR_NO_BLOCK (MMU_ATTR_SPL_7)
#define EPIC_EIDR_CRIT0_INT EPIC_BIT(30)
#define SYM_IS_LOCAL(symType) ((symType) & SYM_LOCAL)
#define __INCbootLibh 
#define __END_DECLS 
#define STACK_RESIDENT RAM_DST_ADRS
#define EVENTS_OPTIONS_NONE 0x00
#define EVT_STORE_UINT32(pBuf,value) do { *((short *) pBuf) = (value) >> 16; *(((short *) pBuf) + 1) = (value); pBuf++; } while ((0))
#define M85XXRIO_IPWQBAR(base) (CAST(VUINT32 *)(((char*)base) + 0x134EC ))
#define INST_LWZ_SP 0x80010000
#define M85XXRIO_BDIDCSR_OFFSET 0x60
#define IVOR32 528
#define IVOR33 529
#define IVOR34 530
#define IVOR35 531
#define M85XXRIO_OSR(base) (CAST(VUINT32 *)(((char*)base) + 0x11004))
#define EPIC_IIDR_P0_INT EPIC_BIT(0)
#define EPIC_IN_INT10_VEC_REG (EPIC_CCSROFF + 0x10340)
#define __STDC_HOSTED__ 1
#define EVENT_WINDPENDQTERMINATE CLASS2_EVENT(17)
#define FIODATASYNC 57
#define VM_CONTEXT_DELETE(context) ((vmLibInfo.pVmCtxDeleteRtn == NULL) ? (ERROR) : ((*vmLibInfo.pVmCtxDeleteRtn) (context)))
#define CACHE_DRV_IS_WRITE_COHERENT(pFuncs) ((pFuncs)->flushRtn == NULL)
#define EPIC_MER_EN(n) (EPIC_BIT(n) & EPIC_MER_EN_MSK)
#define _IFORM_X_1 11
#define _IFORM_X_2 12
#define _IFORM_X_4 14
#define _IFORM_X_5 15
#define _IFORM_X_6 16
#define _IFORM_X_7 17
#define _IFORM_X_8 18
#define _IFORM_X_9 19
#define NO_L2_EXT_WRITE_REGIONS 4
#define VXDBG_ERROR_TO_ERRNO(error) (M_vxdbgLib | error)
#define SIMSPARCSUNOS _VX_SIMSPARCSUNOS
#define atomic32And_inline atomic32And
#define _EXC_PROG_SRR1_ILL 0x00080000
#define M_loadLib (14 << 16)
#define CACHE_TEXT_UPDATE(adrs,bytes) ((cacheLib.textUpdateRtn == NULL) ? OK : (cacheLib.textUpdateRtn) ((adrs), (bytes)))
#define _POSIX_DATAKEYS_MAX 16
#define __INCvxArchh 
#define M85XX_L2CEWAREAn(x,n) (CAST(VUINT32 *)((x + 0x20014) + (n * 0x10)))
#define M85XX_BR0(base) (CAST(VUINT32 *)((base) + 0x5000))
#define M85XX_BR1(base) (CAST(VUINT32 *)((base) + 0x5008))
#define M85XX_BR2(base) (CAST(VUINT32 *)((base) + 0x5010))
#define M85XX_BR3(base) (CAST(VUINT32 *)((base) + 0x5018))
#define M85XX_BR4(base) (CAST(VUINT32 *)((base) + 0x5020))
#define M85XX_BR5(base) (CAST(VUINT32 *)((base) + 0x5028))
#define M85XX_BR6(base) (CAST(VUINT32 *)((base) + 0x5030))
#define M85XX_BR7(base) (CAST(VUINT32 *)((base) + 0x5038))
#define _PARM_RAND_MAX 32767
#define EPIC_IPI_3_VEC_REG (EPIC_CCSROFF + 0x010d0)
#define EPIC_MSG_VEC_REG_INTERVAL 0x20
#define IPCOM_SYSLOG_IPCOM_PRIORITY IPCOM_SYSLOG_PRIO_DEFAULT
#define SH7700 _VX_SH7700
#define EPIC_IN_INT10_DES_REG (EPIC_CCSROFF + 0x10350)
#define _WRS_VXWORKS_MAINT 0
#define RIO_WPCSR_FAILED 0x10000000
#define __DBL_DIG__ 15
#define PCI_ATTR_WS_4M 0x00000015
#define VXB_HANDLE_OP(x) ((x) & 0xF0)
#define INCLUDE_VXBUS_INIT 
#define _IFORM_D_8 10
#define EINTR 4
#define SM_MAX_PKTS 200
#define S_objLib_OBJ_NAME_TRUNCATED (M_objLib _WRS_BIT_OR 7)
#define EPIC_EX_INT5_VEC_REG (EPIC_CCSROFF + 0x100a0)
#define PATH_MAX _PARM_PATH_MAX
#define _PPC_ESF_XER (_PPC_ESF_CR + 4)
#define INST_STW_SP_MASK 0xfc1f0000
#define EPIC_EIDR_EX_PIN EPIC_BIT(31)
#define _IFLAG_MAC (_IFLAG_405_SPEC | _IFLAG_440_SPEC)
#define _WRS_CONFIG_OBJECT_OWNERSHIP 1
#define _PPC_L1CSR_FLR 0x00000100
#define SH7729 _VX_SH7729
#define VXB_VER_MAJOR(x) ((x)>>16)
#define _DYNAMIC_BUS_SIZING FALSE
#define M85XX_L2CEWARn(x,n) (CAST(VUINT32 *)((x + 0x20010) + (n * 0x10)))
#define EXC_MSG_ADRS ((char *) (LOCAL_MEM_LOCAL_ADRS+EXC_MSG_OFFSET))
#define EVT_CTX_IDLE(evtId) EVT_CTX_0(evtId)
#define INCLUDE_CTORS_DTORS 
#define VXEV30 0x20000000
#define _PPC_TSR_DIS (_PPC_TSR_DIS_U << 16)
#define M_resolvLib (107 << 16)
#define TMP_MAX _PARM_TMP_MAX
#define __scanflike(fmtarg,firstvararg) __attribute__((__format__ (__scanf__, fmtarg, firstvararg)))
#define MMU_STATE_ENDIAN_BIG 0x00000000
#define EPIC_IRQ_SUMM_REG0 (EPIC_CCSROFF + 0x01310)
#define atomic32Inc_inline atomic32Inc
#define CPU_PWR_HIGH_THRESHOLD (100)
#define WV_CLASS_TASKNAMES_PRESERVE_ON 0x10001000
#define EPIC_IRQ_SUMM_REG1 (EPIC_CCSROFF + 0x01320)
#define EPIC_EX_INTERRUPT 21
#define _CALL_SYSV 1
#define ENOTCONN 57
#define IPCOM_STACK_ADJUST(x) ((x * 3) / 2)
#define EPIC_OPT_EXPIN_ON (0x80000000 >> 16)
#define SIO_KYBD_MODE_GET 0x1012
#define VME_AM_EXT_USR_ASCENDING 0x0b
#define _WRS_CONFIG_LOADER 1
#define _VX_MC68000 1
#define __LDBL_MIN__ 2.2250738585072014e-308L
#define M85XX_PORPLLSR_E500_RATIO_MASK 0x003f0000
#define EPIC_EOI1_REG (EPIC_CCSROFF + 0x210b0)
#define OBJ_IS_RECLAIM_DISABLE(objId) ( (((OBJ_CORE *)(objId))->handle.attributes & WIND_OBJ_NO_RECLAIM) != 0 )
#define EPIC_MAX_IN_IRQS 48
#define EPIC_EX_INT5_DES_REG (EPIC_CCSROFF + 0x100b0)
#define SPIN_LOCK_TASK_TAKE(x) (spinLockTaskTake (x) )
#define EVENT_SALRUN_SOCKIGNORE CLASS3_EVENT(104)
#define M_semLib (22 << 16)
#define OM_DELETE_ON_LAST_CLOSE 0x40000000
#define SH7750 _VX_SH7750
#define EVENT_SALDELETE CLASS3_EVENT(100)
#define M85XX_LTEATR(base) (CAST(VUINT32 *)((base) + 0x50BC))
#define IPCOM_USE_SYSVAR_EXT 
#define IPCOM_VR_MAX 8
#define _VX_MC68010 2
#define BOOT_FILE_LEN 160
#define _ESOP(opcd,xo) ((opcd << 26) + (xo << 3))
#define IPCOM_SOCK_IPNET 2
#define EPIC_RES44_INT_VEC (EPIC_RES44_INT_NUM + EPIC_VEC_IN_IRQ0)
#define M_usbHostLib (131 << 16)
#define _WRS_INITTEXT __attribute__ ((__section__ (".text.init")))
#define _PPC_MSR_MCE _PPC_MSR_ME
#define VXB_BUSID_RAPIDIO 7
#define INCLUDE_ETSEC_VXB_END 
#define EPIC_MSG_DEST_REG_VECREGOFF 0x10
#define M85XX_LCRR(base) (CAST(VUINT32 *)((base) + 0x50D4))
#define _VX_MC68020 3
#define FTRUNC _FTRUNC
#define __INCvmeh 
#define M_cmsLib (161 << 16)
#define _WCHAR_T_ 
#define S_vxdbgLib_INVALID_MEM_ACCESS VXDBG_ERROR_TO_ERRNO(VXDBG_ERR_INVALID_MEM_ACCESS)
#define EPIC_VEC_CTRL_EXT (EPIC_MAX_ALL_IRQS)
#define vxbintrCtlr_H 
#define _PPC_EXC_VEC_BASE_HIGH 0xfff00000
#define MSG_Q_FIFO 0x00
#define _DBCR0_IDM 0x40000000
#define _VX_FD_SETSIZE 2048
#define _VX_MC68030 4
#define _STDDEF_H 
#define INCLUDE_SEM_BINARY_CREATE 
#define FLASH_ADRS FLASH1_BASE_ADRS
#define VX_PRIVATE_ENV 0x0080
#define _FTRUNC 0x0400
#define PCIEX_XINT4_LVL 0x3
#define TASK_CPU_UNLOCK() ( taskCpuUnlock () )
#define BUS_TYPE_PCI 3
#define MMU_ATTR_PROT_USR_TO_SUP(attr) (((attr) & MMU_ATTR_PROT_USR_MSK) >> 3)
#define S_excLib_INTERRUPT_STACK_OVERFLOW (M_excLib | 2)
#define _VX_MC68040 5
#define M85XX_L2CTL_L2SIZ_MSK 0x30000000
#define EVENT_MSGQRECEIVE CLASS3_EVENT(22)
#define _IONBF 2
#define M85XXRIO_ROWAR_WRTYPE_NWRITE_R 0x5
#define MAX_AIO_SYS_TASKS 0
#define __INCb_ssize_th 
#define CPU PPC32
#define VXB_ACCESS_INT_DISCONN 0x0000000d
#define MII_SR_T4 0x8000
#define INCLUDE_MUX2_OVER_END 
#define EVENT_WINDTICKANNOUNCETMRWD CLASS2_EVENT(8)
#define VXB_REG_INTERVAL "regInterval"
#define PCI_XINT2_LVL 0x3
#define STACK_VERSION_PATCH_MINOR 0
#define EPIC_SR_OUT_MU1_INT_VEC (EPIC_SR_OUT_MU1_INT_NUM + EPIC_VEC_IN_IRQ0)
#define EPIC_SR_IN_MU1_INT_VEC (EPIC_SR_IN_MU1_INT_NUM + EPIC_VEC_IN_IRQ0)
#define EPIC_TM_A2_DES_REG (EPIC_CCSROFF + 0x011b0)
#define _VX_MC68060 7
#define _DBCR1_IAC1US 0xc0000000
#define EVENT_OBJ_MSGCDELETE CLASS2_EVENT(37)
#define M85XX_L2ERRDET(x) (CAST(VUINT32 *)((x + 0x20E40)))
#define CPU_PWR_LOW_THRESHOLD (0)
#define INCLUDE_FS_EVENT_UTIL 
#define OPT_ABORT 0x20
#define _IFIELD_ME(x) ((0x0000003e & x) >> 1)
#define _ARCH_UINT_MAX 4294967295u
#define M85XXRIO_CR(base) (CAST(VUINT32 *)(((char*)base) + 0x10000 ))
#define WDB_BP_MAX 25
#define EPIC_RES25_INT_VEC (EPIC_RES25_INT_NUM + EPIC_VEC_IN_IRQ0)
#define _DEFINED_gid_t 
#define VX_UNBREAKABLE 0x0002
#define _FMARK 0x0010
#define EVENT_WIND_EXIT_IDLE CLASS1_EVENT(6)
#define INCLUDE_EXC_TASK 
#define _IFIELD_CRFS(x) ((0x001c0000 & x) >> 18)
#define CORE_DUMP_MEM_POOL_PAGE_SIZE 0x8000
#define MIPSI2 _VX_MIPSI2
#define MIPSI3 _VX_MIPSI3
#define __INCsemLibPh 
#define O_WRONLY 1
#define WDB_COMM_END 6
#define CS5 0x0
#define CS6 0x4
#define CS8 0xc
#define _ARCH_FLT_MAX_10_EXP 38
#define _IFIELD_VUIMM(x) ((0x001f0000 & x)>> 16)
#define O_EXCL _FEXCL
#define INCLUDE_MUX 
#define _ARCH_DBL_MANT_DIG 53
#define vxCas_inline vxCas
#define _PPC_ESF_STK_SIZE ((_PPC_ESF_SIZE + _STACK_ALIGN_SIZE - 1) & ~(_STACK_ALIGN_SIZE - 1))
#define ENOTSOCK 50
#define EVENT_TASKRESUME CLASS3_EVENT(5)
#define WDB_TTY_BAUD 9600
#define SYSFLG_AUTOCONFIG 0x40
#define S_ioLib_DEVICE_TIMEOUT EIO
#define _MMU_SW 0x00000400
#define _MMU_SX 0x00001000
#define CS0_BNDS 0x000
#define INCLUDE_FLASH 
#define _WRS_CONFIG_FEATURE_IP_GPP_BUILD 1
#define TRG_CLASS_3_ON 0x10000100
#define SIO_CALLBACK_ERROR 3
#define NO_WAIT 0
#define __vsbConfig_INCLUDED 
#define MII_ANAR_PAUSE_MASK 0x0c00
#define EPIC_EX_INT11_VEC_REG (EPIC_CCSROFF + 0x10160)
#define EPIC_REG_NO_OFFSET_READ(regAdrs) *(volatile UINT32 *)(regAdrs)
#define ENOSR 74
#define VXB_DRIVER_METHOD_DECL(NAME) IMPORT char NAME ##_desc[];
#define _PPC_TSR_DIS_U 0x0800
#define _VX_ARM7TDMI 122
#define FIOWFLUSH 27
#define VXB_ACCESS_CFG_READ 0x00000012
#define EPIC_IN_INT42_VEC_REG (EPIC_CCSROFF + 0x10740)
#define M_igmpRouterLib (128 << 16)
#define SIZ_UINT16 2
#define _MMU_UR 0x00000200
#define _MMU_UX 0x00002000
#define MMU_REGION_INDEX_BITS 10
#define EPIC_TSEC4ERR_INT_NUM 23
#define S_eventLib_TASK_NOT_REGISTERED (M_eventLib | 0x0006)
#define NUM_TTY 1
#define _MMU_TLB_PERM_W 0x00000040
#define _MMU_TLB_PERM_X 0x00000020
#define IPCOM_PROC_STACK_DEFAULT IPCOM_STACK_ADJUST(4096)
#define MAX_ISR_JOBS 16
#define HRFS_DEFAULT_MAX_BUFFERS 16
#define EVENT_TASK_STATECHANGE CLASS1_EVENT(11)
#define M85XX_L2CTL_L2IO_BIT 21
#define EPIC_DUART2_INT_NUM 12
#define MMU_ATTACH_INIT (*(mmuLibFuncs.mmuTransTblUnionInit))
#define LBC_CS3_LOCAL_ADRS 0xf0100000
#define _VX_I80486 82
#define SIZ_UINT32 4
#define LSW(x) ((x) & 0xffff)
#define CACHE_DMA_PHYS_TO_VIRT(adrs) CACHE_DRV_PHYS_TO_VIRT (&cacheDmaFuncs, (adrs))
#define _T_PTRDIFF 
#define ARCH_HDR(dir,file) TOOL_HDR_STRINGIFY(arch/dir/file)
#define __INCvxbAccessh 
#define M_snmpdLib (104 << 16)
#define _PPC_SPEFSCR_FG 0x00002000
#define MMU_PAGE_SIZE 0x1000
#define OM_CREATE 0x10000000
#define EPIC_IPIVPR_VECTOR_MSK (0xffff)
#define _PPC_HID0_NAP_U 0x0040
#define CORE_DUMP_SKIP_USER_RESERVED_MEM FALSE
#define _PPC_SPEFSCR_FX 0x00001000
#define EVT_STR_N(evtId,NPARAMS,ARG1,ARG2,ARG3,ARG4,ARG5,ARG6,LENGTH,DATA) do { if (ACTION_IS_SET) { EVT_STR_N_T evt_str_n; evt_str_n.args [0] = ARG1; evt_str_n.args [1] = ARG2; evt_str_n.args [2] = ARG3; evt_str_n.args [3] = ARG4; evt_str_n.args [4] = ARG5; evt_str_n.args [5] = ARG6; evt_str_n.nParams = NPARAMS; evt_str_n.data = DATA; evt_str_n.length = LENGTH; eventPointSwHandle (evtId, &evt_str_n, sizeof evt_str_n); } } while ((0))
#define VX_STDIO 0x0010
#define EPIC_IN_INT4_VEC_REG (EPIC_CCSROFF + 0x10280)
#define EVENT_SIGSUSPEND CLASS3_EVENT(25)
#define INC_VXBPLBLIB_H 
#define _VX_ATOMIC_INIT(i) {(i)}
#define INCLUDE_END_ETHER_HDR 
#define L_ctermid _PARM_L_ctermid
#define FSTAT_BLK 0060000
#define EPIC_SMSG_INT5_VEC_REG (EPIC_CCSROFF + 0x11ca0)
#define _IFORM_X_10 20
#define OBJ_ENTRY_INDEX_GET(objHdl) ((objHdl) & OBJ_HANDLE_ENTRY_MASK)
#define _IFORM_X_12 22
#define _IFORM_X_14 24
#define _IFORM_X_16 26
#define _IFORM_X_17 27
#define _IFORM_X_18 28
#define _IFORM_X_19 29
#define atomic32Sub_inline atomic32Sub
#define MII_CR_100 0x2000
#define _WRS_KERNEL_LOCK_OFFSET_svc_ctr (0x04 + _WRS_KERNEL_LOCK_ALIGN_tkt_ctr)
#define IP_PORT_VXWORKS 68
#define SM_CPU_ATTACHED 1
#define FD_SET(n,p) _VX_FD_SET (n, p)
#define __FLT_HAS_DENORM__ 1
#define vxAtomicGet_inline(target) ((atomicVal_t)(*(volatile atomic_t *)(target)))
#define PCI_OUTBOUND_ATTR_REG0(base) CVPUINT32(base, 0x8c10)
#define PCI_OUTBOUND_ATTR_REG1(base) CVPUINT32(base, 0x8c30)
#define PCI_OUTBOUND_ATTR_REG2(base) CVPUINT32(base, 0x8c50)
#define PCI_OUTBOUND_ATTR_REG4(base) CVPUINT32(base, 0x8c90)
#define _IFORM_X_20 30
#define _IFORM_X_21 31
#define _IFORM_X_22 32
#define _IFORM_X_23 33
#define _IFORM_X_24 34
#define _IFORM_X_25 35
#define _IFORM_X_26 36
#define _IFORM_X_27 37
#define _IFORM_X_28 70
#define _IFORM_X_29 71
#define SH7000 _VX_SH7000
#define IPCOM_SHELL_MINI 2
#define EPIC_IN_INT23_VEC_REG (EPIC_CCSROFF + 0x104e0)
#define IPCOM_SHELL_NONE 1
#define _IFORM_X_30 72
#define _IFORM_X_31 73
#define _IFORM_X_32 74
#define _IFORM_X_33 75
#define _IFORM_X_34 79
#define _IFORM_X_36 81
#define _IFORM_X_37 82
#define _IFORM_X_38 83
#define EPIC_OPT_POLAR_EDG_POS 0x00800000
#define INCLUDE_AUX_CLK 
#define MII_PHY_GMII_TYPE 0x100000
#define CACHE_WRITEALLOCATE 0x04
#define SEEK_CUR 1
#define VXB_ASSERT_NONNULL(pVar,errVal) 
#define EPIC_IPI_INTERRUPT 25
#define CLOCAL 0x1
#define CUST_ENET3_2 0xA2
#define WIND_CLASS_INSTRUMENTED 0x04
#define SM_ALIGN_BOUNDARY 16
#define M85XX_MBMR(base) (CAST(VUINT32 *)((base) + 0x5074))
#define DDR_ERR_INT_EN 0xe48
#define BOOT_OTHER_FIELD_DELIMITER ';'
#define S_cacheLib_INVALID_CACHE (M_cacheLib | 1)
#define ROM_BASE_ADRS 0xFFF00000
#define INCLUDE_VXBUS_ACTIVATE 
#define INCLUDE_WDB_TTY_TEST 
#define OBJ_UNLOCK(classId,lockLevel) INT_CPU_MICRO_UNLOCK (lockLevel)
#define VXDBG_CTX_CONT(pClnt,pCtx) _func_vxdbgFuncs[VXDBG_CONT] (pClnt, pCtx)
#define VM_CONTIG_BLOCK_EACH(context,startAddr,numPages,stateMask,eachRtn,eachArg) ((vmLibInfo.pVmContigBlockEachRtn == NULL) ? (ERROR) : ((*vmLibInfo.pVmContigBlockEachRtn) (context, startAddr, numPages, stateMask, eachRtn, eachArg)))
#define SLL_GET(list,node) { if (((node) = (void *)((SL_LIST *)(list))->head) != NULL) ((SL_LIST *)(list))->head = ((SL_NODE *)(node))->next; }
#define vxAtomicAdd_inline vxAtomicAdd
#define _WRS_ARCH_HAS_IDLE_TASK 
#define FSHLOCK _FSHLOCK
#define EPIC_IN_INT42_DES_REG (EPIC_CCSROFF + 0x10750)
#define MEDR_FREE_QUEUE_LEN 64
#define _TIME_T 
#define IPCOM_PROC_STACK_SMALL IPCOM_STACK_ADJUST(2048)
#define AUX_CLK_RATE_MIN ((CCB_FREQ / 16) / (1 << FIT_DIVIDER_TAP_21))
#define __FLT_RADIX__ 2
#define EPIC_IN_INT23_DES_REG (EPIC_CCSROFF + 0x104f0)
#define DLL_PREVIOUS(pNode) ( (((DL_NODE *)(pNode))->previous) )
#define DLL_ADD(list,node) { DL_NODE *listTail = (list)->tail; DLL_INSERT ((list), listTail, (node)); }
#define _VX_MCORE 150
#define WV_EVT_PROTO_REV_2_2_FCS 5
#define S_taskLib_TASK_HOOK_TABLE_FULL (M_taskLib | 102)
#define VM_CONTEXT_SWITCH(context) ((vmLibInfo.pVmCtxSwitchRtn == NULL) ? (OK) : ((*vmLibInfo.pVmCtxSwitchRtn) (context)))
#define EVENT_WINDSTOP CLASS2_EVENT(29)
#define SYS_CLK_FREQ 400000000
#define SH7040 _VX_SH7040
#define _PPC_MMUCSR0_DL1MMU_FI 0x00000008
#define CACHE_INDEX_TO_STATE(index) ((UINT)index << MMU_ATTR_CACHE_INDEX_SHIFT)
#define EPIC_IN_INTERRUPT 20
#define MII_CR_COLL_TEST 0x0080
#define TYLIB_WRT_THRESHLD 20
#define DELTA(a,b) (abs((int)a - (int)b))
#define __DBL_MAX__ 1.7976931348623157e+308
#define IPCOM_NETIF_NATIVE 2
#define _IFIELD_VSIMM(x) ((0x00100000 & x) ? (0xffffffe0 | (x>>16)) : (0x0000001f & (x>>16)))
#define L1CSR0 1010
#define M85XXRIO_RIWAR_LOCAL 0xf
#define RIO_SWITCH_PORT_COUNT(x) ((x) & RIO_SWITCH_PORT_MASK) >> 16)
#define MRTPR_PTP_WRITE(x) ( (x << 24) & MRTPR_PTP_MASK)
#define RIO_MAX_INBOUND_CHANNELS 5
#define RIO_WPCSR_FULL 0x02000000
#define INCLUDE_BASE_KERNEL 
#define S_vxdbgLib_INVALID_HW_BP VXDBG_ERROR_TO_ERRNO(VXDBG_ERR_INVALID_HW_BP)
#define VM_STATE_MASK_WBACK VM_STATE_MASK_MEM_COHERENCY
#define _WRS_FRAMEP_FROM_JMP_BUF(env) ((char *) (env)[0].reg.spReg)
#define __DBL_HAS_INFINITY__ 1
#define EPIC_IIDR_CRIT1_INT EPIC_BIT(29)
#define EVT_CTX_TASKINFO(evtId,STATE,PRIORITY,LOCKCNT,TID,ENTRYPT,RTP,AFFINITY,NAME) do { if ( ACTION_IS_SET ) { EVENT_TASKNAME_T evt_ctx_taskinfo; evt_ctx_taskinfo.state = STATE; evt_ctx_taskinfo.priority = PRIORITY; evt_ctx_taskinfo.lockCnt = LOCKCNT; evt_ctx_taskinfo.tid = TID; evt_ctx_taskinfo.entryPt = ENTRYPT; evt_ctx_taskinfo.rtp = RTP; evt_ctx_taskinfo.affinity = AFFINITY; evt_ctx_taskinfo.name = NAME; eventPointSwHandle (evtId, &evt_ctx_taskinfo, sizeof evt_ctx_taskinfo); } } while ((0))
#define _WRS_CONFIG_COMPONENT_VXCOMPAT 1
#define FS_COMMIT_POLICY_MANUAL 2
#define _PC_SYMLINK_MAX 18
#define PCIEX_XINT3_LVL 0x2
#define _DBCR0_DAC2W_U 0x0001
#define MII_NP_MSG 0x2000
#define MMU_ATTR_PROT_SUP_WRITE 0x00000002
#define _POSIX_NGROUPS_MAX 0
#define BOOT_WARM_QUICK_AUTOBOOT BOOT_QUICK_AUTOBOOT
#define M85XXRIO_PESCSR_OFFSET 0x0158
#define PCIEX_CFG_ADR_REG (CCSBAR + 0xA000)
#define __INCvxANSIh 
#define EVT_CTX_0(evtId) do { if (ACTION_IS_SET) eventPointSwHandle (evtId, NULL, 0); } while ((0))
#define EVT_CTX_1(evtId,ARG1) do { if ( ACTION_IS_SET ) { EVT_CTX_1_T evt_ctx_1; evt_ctx_1.args [0] = ARG1; eventPointSwHandle (evtId, &evt_ctx_1, sizeof evt_ctx_1); } } while ((0))
#define BOOT_USB_ATTEMPT_DELAY 60
#define PCI_MEMIO2LOCAL(x) (((UINT32)x - PCI_MEMIO_ADRS) + CPU_PCI_MEMIO_ADRS)
#define LOW32(x) _VX_LOW32(x)
#define SYS_V 2
#define SM_READY ((UINT) 0x87654321)
#define stdin (*__stdin())
#define _PPC_SPEFSCR_OV 0x00004000
#define _PC_2_SYMLINKS 1
#define EVENT_SALCALL_REPLY CLASS3_EVENT(98)
#define MII_SR_T2_HALF_DPX 0x0200
#define S_symLib_SYMBOL_STILL_IN_TABLE (M_symLib | 4)
#define VXB_LOCK_WRITER FALSE
#define __FLT_MANT_DIG__ 24
#define M_loadAoutHppaLib (93 << 16)
#define EPIC_SENSE_EDG 0
#define _EXC_PROG_SRR1_NIA 0x00010000
#define MPC85XX_I2C_CONTROL_REG (0x00008)
#define EPIC_RES36_INT_VEC (EPIC_RES36_INT_NUM + EPIC_VEC_IN_IRQ0)
#define PCI_XINT1_LVL 0x2
#define M85XX_L2CTL_L2E_BIT 31
#define MPC85XX_I2C_FREQ_DIV_REG_MASK 0x3F
#define DEVMETHOD(NAME,FUNC) { (UINT32)&NAME ##_desc, (FUNCPTR) FUNC }
#define EVENT_IOCREAT CLASS3_EVENT(53)
#define _POSIX_PATH_MAX 256
#define PCI_ATTR_WS_32K 0x0000000E
#define PCI_ATTR_WS_32M 0x00000018
#define __INCspePpcLibh 
#define RUNTIME_SMP_VERSION RUNTIME_VERSION " " RUNTIME_SMP_NAME
#define _DBSR_IRPT_U 0x0200
#define _WRS_CPU_FAMILY_PREPENDS_UNDERSCORE FALSE
#define FIONCONTIG64 50
#define SYM_TBL_HASH_SIZE_LOG2 8
#define MII_CR_ISOLATE 0x0400
#define ACC_SIZE 2
#define _PPC_ESF_REG_BASE (_PPC_ESF_FPCSR + SIZ_UINT32)
#define WDB_COMM_CUSTOM 5
#define be32toh(x) ((UINT32)(x))
#define RTP_HEAP_INIT_SIZE 0x10000
#define WV_REV_ID_VXWORKS_6_6 0xb1b30000
#define WV_REV_ID_VXWORKS_6_7 0xb1b50000
#define TYLIB_XOFF_PCNT 85
#define EVENT_WINDPENDQPUT CLASS2_EVENT(15)
#define _ARCH_DBL_MIN_10_EXP (-307)
#define RLIM_INFINITY (((UINT64)1 << 63) - 1)
#define RIO_OP_SUPPORTED_WRITE 0x00020000
#define SM_OBJ_MAX_NAME 100
#define _WRS_CONFIG_NETSOURCE 1
#define EPIC_IPIVPR_PRIORITY_MSK (EPIC_BIT(19) | EPIC_BIT(18) | EPIC_BIT(17) | EPIC_BIT(16))
#define _PPC_ESF_R(n) (_PPC_ESF_REG_BASE + (n) * _PPC_REG_SIZE)
#define _SIZE_T_DEFINED 
#define M85XX_L2CTL(x) (CAST(VUINT32 *)((x + 0x20000)))
#define OBJ_IS_NAMED(objId) ( (((OBJ_CORE *)(objId))->handle.attributes & WIND_OBJ_NAMED) != 0 )
#define INT_CPU_MICRO_UNLOCK(key) intCpuMicroUnlock(key)
#define _PPC_BUCSR_E 0x1
#define _WCHAR_T_DEFINED_ 
#define EPIC_MSIIR_REG (EPIC_CCSROFF + 0x01740)
#define _POSIX_NO_TRUNC 0
#define ECHILD 10
#define EVENT_OBJ_SIGPAUSE CLASS2_EVENT(26)
#define _IFORM_X_11 21
#define VME_AM_STD_USR_DATA 0x39
#define EPIC_EIDR_P1_INT EPIC_BIT(1)
#define MAX_CLASS2_ID 9999
#define VX_MSG_NODE_SIZE 12
#define DLL_LAST(pList) ( (((DL_LIST *)(pList))->tail) )
#define _WRS_INLINE_QorIQdcbi 
#define INCLUDE_NET_BOOT 
#define MSR_SPE_BIT_SHIFT 25
#define OTHER_DEFAULT ""
#define _WRS_INLINE_QorIQdcbt 
#define LAWAR_TGTIF_LBC 0x00400000
#define m85xxTimerNum NELEMENTS(m85xxTimerResources)
#define _IFORM_X_15 25
#define INCLUDE_IPPROXYARP 
#define M85XXRIO_ROWAR_RDTYPE_MAINT_READ 0x7
#define EPIC_INV_PRIO_ERROR ((ULONG)(-1))
#define EVENT_IOIOCTL CLASS3_EVENT(51)
#define EVENT_SD_CREATE CLASS3_EVENT(200)
#define WRS_PACK_ALIGN(x) _WRS_PACK_ALIGN(x)
#define PPC601 _VX_PPC601
#define PPC602 _VX_PPC602
#define PPC603 _VX_PPC603
#define PPC604 _VX_PPC604
#define EPIC_IN_INT14_VEC_REG (EPIC_CCSROFF + 0x103c0)
#define SIO_AVAIL_MODES_GET 0x1009
#define WORDSWAP(x) (MSW(x) | (LSW(x) << 16))
#define EPIC_IN_INT9_DES_REG (EPIC_CCSROFF + 0x10330)
#define QUEUE_ATTRIBUTE_MASK 0x1
#define MMU_ATTR_PROT_USR_GET(attr) ((attr) & MMU_ATTR_PROT_USR_MSK)
#define _WRS_RET_PC_FROM_JMP_BUF(env) ((INSTR *) (env)[0].reg.lr)
#define _MMU_TLB_SZ_256K 0x00000400
#define EPIC_OPT_EN_MSK EPIC_EIVPR_INTR_MSK
#define BOOT_OTHER_LEN 80
#define DDR_CAPTURE_DATA_HI 0xe20
#define EPIC_IN_INT8_VEC_REG (EPIC_CCSROFF + 0x10300)
#define M85XXRIO_RxWAR_SIZE_4MB 23
#define _PARM_L_cuserid 64
#define BUS_MASTER_ENABLE_BIT 0x4
#define _VX_PPC970 2005
#define _STACK_DIR _STACK_GROWS_DOWN
#define EVENT_WINDTICKANNOUNCETMRSLC CLASS2_EVENT(7)
#define MII_MASSLA_STAT_REG 0xa
#define PLAT_RATIO_533_MHZ 8
#define VM_CTX_MASK_IN 0x1
#define WV_REV_ID_VXWORKS_6_7_SMP 0xb1b40000
#define PCI_OUT_ATTR_RTT_MEM 0x00040000
#define __VXWORKS__ 1
#define S_vxdbgLib_HOOK_TBL_FULL VXDBG_ERROR_TO_ERRNO(VXDBG_ERR_HOOK_TBL_FULL)
#define S_vxdbgLib_INVALID_CTX VXDBG_ERROR_TO_ERRNO(VXDBG_ERR_INVALID_CTX)
#define INCLUDE_WDB_USER_EVENT 
#define FD_0_TYPE 0
#define __SOFF 0x1000
#define VXDBG_BP_BY_ADDR_AND_CTX_REMOVE(pClient,retVal,address,pContext) { VXDBG_BP_DEL_INFO bpInfo; bpInfo.type = BP_BY_ADDR_AND_CTX_DELETE; bpInfo.pClnt = pClient; bpInfo.info.addrCtx.addr = address; bpInfo.info.addrCtx.pCtx = pContext; VXDBG_BP_DELETE(bpInfo, retVal); }
#define __INCdbgPpcLibh 
#define _VX_PPC403 95
#define FR500 _VX_FR500
#define _EXC_OFF_RESET 0x00100
#define FAST register
#define WIND_TCB_MSR (WIND_TCB_REGS + REG_SET_MSR)
#define EPIC_IRQSR0_EX_INT(n) (EPIC_BIT(11-(n)) & EPIC_IRQSR0_EX_INT_MSK)
#define EPIC_CRIT_SUMM_REG1 (EPIC_CCSROFF + 0x01340)
#define _PPC_ESR_ILK_U 0x0010
#define M_wdLib (34 << 16)
#define EIEIO_SYNC _WRS_ASM (" eieio; sync")
#define WR_ENET0 0x00
#define KERNEL_HEAP_SIZE ((unsigned int)(sysMemTop() - FREE_RAM_ADRS) / 3 * 2)
#define S29GL_SECTOR_SIZE 0x00020000
#define _IFIELD_VRC(x) ((0x00000400 & x) >> 10)
#define M85XXRIO_CTCSR(base) (CAST(VUINT32 *)(((char*)base) + 0x0006C ))
#define EVENT_OBJ_EVENTSEND CLASS2_EVENT(35)
#define EPIC_IPIVPR_PRIORITY_GET(p) (((p) & EPIC_IPIVPR_PRIORITY_MSK) >> 16)
#define SM_INT_BUS 4
#define INCLUDE_IO_MISC 
#define CS2_BNDS 0x010
#define RIO_OP_SUPPORTED_READ 0x00010000
#define MMU_REGION_ENTRY_BITS 2
#define M85XX_L2CTL_L2SLC_MSK 0x00001000
#define MEM_BLOCK_CHECK 0x10
#define WV_CLASS_3 0x00000007
#define M85XX_LSDMR(base) (CAST(VUINT32 *)((base) + 0x5094))
#define EPIC_MSG_REG0 (EPIC_CCSROFF + 0x01400)
#define EPIC_MSG_REG1 (EPIC_CCSROFF + 0x01410)
#define BOOT_CLEAR 0x02
#define DDR_CAPTURE_DATA_LO 0xe24
#define M85XXRIO_RIWBARn(base,n) (CAST(VUINT32 *)(((char*)base) + 0x10D68 + (0x80 - (n*0x20))))
#define SEMC_IS_FREE(semId) (semId->semCount > 0)
#define TASK_USER_EXEC_STACK_OVERFLOW_SIZE 4096
#define DLL_GET(list,node) { (node) = (void *)((DL_LIST *)(list))->head; if ((node) != NULL) { ((DL_LIST *)(list))->head = ((DL_NODE *)(node))->next; if (((DL_NODE *)(node))->next == NULL) ((DL_LIST *)(list))->tail = NULL; else ((DL_NODE *)(node))->next->previous = NULL; } }
#define CACHE_DRV_VIRT_TO_PHYS(pFuncs,adrs) (((pFuncs)->virtToPhysRtn == NULL) ? (void *) (adrs) : (void *) (((pFuncs)->virtToPhysRtn) (adrs)))
#define MMU_ATTR_USR_IO_RO (MMU_ATTR_USR_RO | MMU_ATTR_SUP_IO_RO)
#define LAWAR_SIZE_512MB 0x0000001C
#define IPCOM_FORWARDER_TRUE_CACHE_WAYS_SHIFT (0)
#define EPIC_SMSG_VEC_REG(irq) (EPIC_SMSG_INT0_VEC_REG + ((irq) * EPIC_SMSG_VEC_REG_INTERVAL))
#define PCI_INBOUND_BASE_ADRS_REG3(base) CVPUINT32(base, 0x8DA8)
#define INIT_NBIO_MSGS 32
#define _WRS_VXLIB_SUPPORT 
#define _WRS_INLINE_QorIQlwsync 
#define S_taskLib_NAME_NOT_FOUND (M_taskLib | 101)
#define _DEFINED_key_t 
#define EPIC_MSG_DEST_REG(irq) (EPIC_MSG_VEC_REG(irq) + EPIC_MSG_DEST_REG_VECREGOFF)
#define DIV_FACT_16 1
#define MII_ALL_BUS_SCAN 0x2000
#define PCI_ERROR_DATA_LOW_CAPTURE_REG 0x8e18
#define EPIC_MSIVPR_INTR_ACTIVE EPIC_BIT(30)
#define MPC85XX_I2C_CONTROL_REG_MIEN 0x40
#define DEFFILEMODE 0666
#define DDR_DATA_ERR_INJECT_HI 0xe00
#define BOOT_LINE_OFFSET 0x4200
#define VXB_INTR_TRIG_POS 0x02
#define S_taskLib_TASK_SWAP_HOOK_CLEAR (M_taskLib | 106)
#define LSDMR_OP_MASK 0x38000000
#define Q_ADVANCEN(pQHead,n) if (((Q_HEAD *)pQHead)->pQClass->valid == qPriDeltaClassId && ((Q_HEAD *)pQHead)->pFirstNode != NULL) { if (n > ((Q_PRI_NODE *)((Q_HEAD *)pQHead)->pFirstNode)->key) ((Q_PRI_NODE *)((Q_HEAD *)pQHead)->pFirstNode)->key = 0; else ((Q_PRI_NODE *)((Q_HEAD *)pQHead)->pFirstNode)->key -= n; }
#define _WRS_GET_PC_FOR_BRANCH_DELAY(pc,pReg) (pc = (INSTR *) (pReg)->reg_pc)
#define RIO_FEATURES_EXTCAP 0x1000
#define MMU_PAGE_ENTRY_BITS 4
#define EVENT_OBJ_VERIFY_FAIL CLASS3_EVENT(77)
#define _ARCH_ALIGN_STACK 4
#define _DBCR0_BRT 0x04000000
#define WV_ACTION_UNSET { vxAtomicAnd ((atomic_t*)&evtAction, ~(0x0100)); }
#define __INCvxWindh 
#define TOTAL_FLASH_SIZE 0x4000000
#define _PARM_STACK_GROWS_DOWN (-1)
#define O_NONBLOCK _FNONBLOCK
#define _PPC_SPEFSCR_FUNFE 0x00000008
#define _PPC_SPEFSCR_FUNFH 0x02000000
#define _VX_NBBY 8
#define _PPC_SPEFSCR_FUNFS 0x00040000
#define WV_REV_ID_T3 0xcdcd0000
#define _WRS_FASTTEXT __attribute__ ((__section__ (".text.fast")))
#define EPIC_EX_VEC_REG(irq) (EPIC_EX_INT0_VEC_REG + ((irq) * EPIC_EX_VEC_REG_INTERVAL))
#define MII_PHY_TX_FLOW_CTRL 0x40000
#define WDB_RESTART_TIME 10
#define MMU_ATTR_USR_EXE (MMU_ATTR_PROT_USR_READ | MMU_ATTR_PROT_USR_EXE)
#define EPIC_IIVPR_PRIORITY_MSK (EPIC_BIT(19) | EPIC_BIT(18) | EPIC_BIT(17) | EPIC_BIT(16))
#define _DEFINED_struct__Timespec 
#define __INC_m85xxVxBusRioH 
#define EPIC_IN_INT36_VEC_REG (EPIC_CCSROFF + 0x10680)
#define SPE_NUM_REGS 32
#define EPIC_IIDR_CRIT0_INT EPIC_BIT(30)
#define EPIC_IN_VEC_REG(irq) (EPIC_IN_INT0_VEC_REG + ((irq) * EPIC_IN_VEC_REG_INTERVAL))
#define PCIEX_XINT2_LVL 0x1
#define M85XXRIO_PLTOCCSR(base) (CAST(VUINT32 *)(((char*)base) + 0x00120 ))
#define EADDRNOTAVAIL 49
#define _PC_MAX_INPUT 8
#define OBJ_IS_REFERENCED(objId) ( DLL_FIRST (&((OBJ_CORE *)(objId))->objHandleList) != NULL )
#define EVENT_RTPSIGWRAPPER_DONE CLASS3_EVENT(93)
#define MII_MF_REG_LEN 0x5
#define EPIC_IN_INT5_DES_REG (EPIC_CCSROFF + 0x102b0)
#define S_mmuLib_ISR_CALL_BLOCKED (M_mmuLib | 12)
#define PCI_OUTBOUND_ATTR_REG3(base) CVPUINT32(base, 0x8c70)
#define _EXTENSION_POSIX_REENTRANT 1
#define _DEFINED_pthread_attr_t 
#define _VX_MC680X0 9
#define TRG_CLASS3_INDEX 2
#define M_fioLib (9 << 16)
#define CLASS_LIST_SEM_INLINE_OPTIONS (CLASS_LIST_SEM_INIT_OPTIONS | SEM_NO_ID_VALIDATE | SEM_NO_ERROR_CHECK | SEM_NO_EVENT_SEND)
#define OBJ_IS_OWNER(objId) ( DLL_FIRST (&((OBJ_CORE *)(objId))->ownerList) != NULL )
#define EPIC_MSG_STATE_REG (EPIC_CCSROFF + 0x01510)
#define _WRS_STRICT_ALIGNMENT 1
#define EPIC_RES30_INT_VEC (EPIC_RES30_INT_NUM + EPIC_VEC_IN_IRQ0)
#define _GCC_WCHAR_T 
#define FREQ_400_MHZ 400000000
#define VM_STATE_MASK_VALID MMU_ATTR_VALID_MSK
#define MMU_STATE_SET (*(mmuLibFuncs.mmuStateSet))
#define __SOPT 0x0400
#define DDR_CAPTURE_ATTRIBUTES 0xe4c
#define ENUM_TO_EVEC(excNum) ((VOIDFUNCPTR *) (excNum))
#define M_mtpLib (168 << 16)
#define EPIC_IN_INT36_DES_REG (EPIC_CCSROFF + 0x10690)
#define WV_REV_ID_T2 0xb0b00000
#define OBJ_SET_PUBLIC(objId) ( ((OBJ_CORE *)(objId))->handle.attributes |= WIND_OBJ_PUBLIC )
#define FIOWBUFSET 25
#define BLOB_LENGTH_WORD(dataLength,alignment) (dataLength | (BLOB_PADDING(dataLength,alignment) << PADDING_SHIFT_COUNT))
#define _PC_NO_TRUNC 10
#define getchar() __sgetc(stdin)
#define _WRS_CONFIG_SPACE "kernel"
#define MII_SR_ABIL_MASK 0xff80
#define __GXX_ABI_VERSION 1002
#define SIO_KYBD_LED_NUM 1
#define OBJ_SET_NAMED(objId) ( ((OBJ_CORE *)(objId))->handle.attributes |= WIND_OBJ_NAMED )
#define M85XXRIO_ROWAR_WRTYPE_MAINT_WRITE 0x7
#define I2C_FRMTOP 2
#define MPC85XX_I2C_ADDRESS_REG_MASK 0xFE
#define S_mmuLib_TLB_PAGE_NOT_LOCKED (M_mmuLib | 8)
#define EPIC_DUART2_INT_VEC (EPIC_DUART2_INT_NUM + EPIC_VEC_IN_IRQ0)
#define MAX_FILENAME_LENGTH PATH_MAX
#define M85XX_L2ERRCAPTECC(x) (CAST(VUINT32 *)((x + 0x20E28)))
#define F_UNLCK 3
#define vxAtomicNand_inline vxAtomicNand
#define M_muxLib (109 << 16)
#define INCLUDE_WDB_BANNER 
#define INCLUDE_AIM_MMU_CONFIG 
#define FS_NAMES_ATA_PRIMARY_MASTER "/ata0a"
#define S_memLib_BLOCK_ERROR (M_memLib | 3)
#define ENET_DEFAULT0 WR_ENET0
#define ENET_DEFAULT1 WR_ENET1
#define _PPC_SPEFSCR_FRMC_RND_PINF 0x00000002
#define WB_MAX_IRQS 256
#define EPIC_TM_B3_VEC_REG (EPIC_CCSROFF + 0x021e0)
#define MC68LC040 _VX_MC68LC040
#define VXB_HANDLE_MEM 0
#define VME_AM_STD_USR_PGM 0x3a
#define _MMU_TLB_IPROT 0x00000080
#define SM_PKTS_SIZE 0
#define VX_WDOG_SIZE 92
#define SIO_KYBD_MODE_ASCII 2
#define M_loadBoutLib (81 << 16)
#define MII_MONITOR_DELAY 0x2
#define EPIC_TM_B3_DES_REG (EPIC_CCSROFF + 0x021f0)
#define _WRS_PACK_ALIGN(x) __attribute__((packed, aligned(x)))
#define DDR_DATA_ERR_INJECT_LO 0xe04
#define _DBCR0_BRT_U 0x0400
#define _ARCH_LDBL_MIN_EXP (-1021)
#define EPIC_RES36_INT_NUM 36
#define S_taskLib_ILLEGAL_OPTIONS (M_taskLib | 110)
#define M_cplusLib (90 << 16)
#define EPIC_RES11_INT_VEC (EPIC_RES11_INT_NUM + EPIC_VEC_IN_IRQ0)
#define MII_MF_ST 0x1
#define __PTRDIFF_T 
#define _WRS_INLINE_ffsLsb 
#define EVENT_OBJ_MSGCREPLYSEND CLASS2_EVENT(41)
#define F_RSETLK 11
#define VXB_BUSID_VME 2
#define M85XXRIO_RIWARn(base,n) (CAST(VUINT32 *)(((char*)base) + 0x10D70 + (0x80 - (n*0x20))))
#define F_GETFD 1
#define EPIC_IN_INT17_DES_REG (EPIC_CCSROFF + 0x10430)
#define _POSIX_CLOCKRES_MIN 20
#define BRK_HARDMASK 0
#define F_GETFL 3
#define _PPC_MSR_POW_U _PPC_MSR_WE_U
#define _STATUS_DEFINED 
#define EVENT_EXCEPTION CLASS1_EVENT(10)
#define ROUND_DOWN(x,align) ((int)(x) & ~(align - 1))
#define SPIN_LOCK_ISR_GIVE(x) (spinLockIsrGive (x) )
#define fileno(p) __sfileno(p)
#define atomic32Clear_inline atomic32Clear
#define FIOCANCEL 14
#define ferror(p) __sferror(p)
#define SEMB_FULL_STATE NULL
#define INCLUDE_LOGGING 
#define __DBL_MIN__ 2.2250738585072014e-308
#define DLL_NEXT(pNode) ( (((DL_NODE *)(pNode))->next) )
#define WV_REV_ID_VXWORKS_6_6_SMP 0xb1b20000
#define _VA_LIST 
#define WIND_TCB_P0 WIND_TCB_R3
#define _WRS_NO_TGT_SHELL_FP 1
#define _DBCR2_DAC1US 0xc0000000
#define EPIC_VEC_MSG_IRQ0 (EPIC_VEC_GT_B_IRQ0 + EPIC_MAX_GT_B_IRQS)
#define _FDEFER 0x0020
#define WDB_INIT WDB_POST_KERNEL_INIT
#define M85XXRIO_DOCAR(base) (CAST(VUINT32 *)(((char*)base) + 0x0001C))
#define VX_MAX_SMP_CPUS 8
#define MMU_STATE_SUP_RX_USR_RWX (MMU_STATE_SUP_RX | _MMU_URWX)
#define TRG_CLASS_6_ON 0x11111111
#define INST_MFLR_R0 INST_MFLR
#define _PPC_SPEFSCR_FOVFH 0x01000000
#define CLASS_WIDTH 0x1
#define VXDBG_MEM_SCAN(pBuffer,pPattern,size,status) status = vxdbgMemScan (pBuffer, pPattern, size);
#define _PPC_SPEFSCR_FOVFS 0x00020000
#define _PPC_REG_SIZE 4
#define __GNUC_VA_LIST 
#define EPIC_PERFMON_1_MSK_REG0 (EPIC_CCSROFF + 0x01370)
#define EPIC_PERFMON_1_MSK_REG1 (EPIC_CCSROFF + 0x01380)
#define S_ioLib_NO_FILENAME ENOENT
#define _IFORM_A_2 51
#define M_pgPoolLib (181 << 16)
#define DBG_INST_ALIGN 4
#define SCRIPT_DEFAULT ""
#define PCI3_DEV_ID 0x826210E3
#define EVENT_WINDUNDELAY CLASS2_EVENT(10)
#define VM_MAX_PHYS_BITS_GET() ((vmLibInfo.pVmMaxPhysBitsGetRtn == NULL) ? (ERROR) : ((*vmLibInfo.pVmMaxPhysBitsGetRtn) ()))
#define S_ioLib_UNKNOWN_REQUEST ENOTSUP
#define INCLUDE_IPNET_USE_LOOPBACK 
#define EVENT_TASKROTATE CLASS3_EVENT(108)
#define S_selectLib_WIDTH_OUT_OF_RANGE (M_selectLib | 3)
#define _ARCH_CHAR_MAX 127
#define CACHE_BURST_ENABLE 0x40
#define VM_STATE_WRITABLE_NOT (MMU_ATTR_PROT_SUP_READ | MMU_ATTR_PROT_SUP_EXE)
#define DDR_ERR_DISABLE 0xe44
#define _PPC_HID0_SLEEP_U 0x0020
#define CACHE_DISABLED 0x00
#define _WRS_VXWORKS_MINOR 8
#define TASK_CPU_LOCK() TASK_CPU_LOCK_TASK(taskIdCurrent)
#define INCLUDE_TFFS 
#define F_GETLK 7
#define VX_NO_STACK_PROTECT 0x4000
#define BOOT_LINE_ADRS ((char *) (LOCAL_MEM_LOCAL_ADRS+BOOT_LINE_OFFSET))
#define EISDIR 21
#define EPIC_IPIDR_P1 EPIC_BIT(1)
#define VXB_REG_MEM 0x00000002
#define REG_TYPE_MASK 0xff000000
#define HID1_ABE 0x00001000
#define REG_SET_PC (REG_SET_CTR + _PPC_REG_SIZE)
#define PCIEX_CFG_DATA_REG (CCSBAR + 0xA004)
#define _PPC_MAS0_ESEL_BIT 16
#define _PPC_HID1_ABE 0x00001000
#define _PPC_TCR_FP_U 0x0300
#define M_spinLockLib (201 << 16)
#define CONSOLE_TTY 0
#define VM_STATE_BUFFERABLE (MMU_ATTR_SPL_0)
#define VX_TASK_NOACTIVATE 0x2000
#define M_nfs3Stat (142 << 16)
#define RIO_FEATURES_MEMORY 0x0002
#define PCI_ERROR_EXT_ADRS_CAPTURE_REG 0x8e14
#define EPIC_IN_INT38_DES_REG (EPIC_CCSROFF + 0x106d0)
#define _IFORM_X_13 23
#define MPC85XX_I2C_STATUS_REG_MAL 0x10
#define _IFIELD_TBR(x) ((0x001ff800 & x) >> 11)
#define MII_PHY_FLAGS_GET(setBits) (pPhyInfo->phyFlags)
#define EVENTS_WAIT_ALL 0x00
#define VME_AM_EXT_SUP_DATA 0x0d
#define HIGH32(x) _VX_HIGH32(x)
#define I2C_ERROR_CYCLE_READ 3
#define reg_pc pc
#define FASYNC _FASYNC
#define EPIC_I2C_INT_VEC (EPIC_I2C_INT_NUM + EPIC_VEC_IN_IRQ0)
#define _IFIELD_SIMM_S(x) ((0x00008000 & x) ? (0xffff0000 | x) : (0x0000ffff & x))
#define RIO_EXTENDED_FEATURES_BASE 0x0100
#define MIPSI64R2 _VX_MIPSI64R2
#define VXB_REG_BASE_1 "regBase1"
#define VXB_REG_BASE_2 "regBase2"
#define VXB_REG_BASE_3 "regBase3"
#define VXB_REG_BASE_4 "regBase4"
#define VXB_REG_BASE_5 "regBase5"
#define VXB_REG_BASE_6 "regBase6"
#define VXB_REG_BASE_8 "regBase8"
#define VXB_REG_BASE_9 "regBase9"
#define ULONG_MAX (LONG_MAX * 2UL + 1)
#define TASK_USER_EXC_STACK_OVERFLOW_SIZE 4096
#define EPIC_IPI_DPATCH0_REG0 (EPIC_CCSROFF + 0x20040)
#define EPIC_IPI_DPATCH0_REG1 (EPIC_CCSROFF + 0x20050)
#define EPIC_IPI_DPATCH0_REG3 (EPIC_CCSROFF + 0x20070)
#define MMU_STATE_CACHEABLE_WRITETHROUGH 0x00000010
#define MII_AN_EXP_REG 0x6
#define EVENTS_WAIT_ANY 0x01
#define EPIC_DMA3_INT_VEC (EPIC_DMA3_INT_NUM + EPIC_VEC_IN_IRQ0)
#define _DBCR0_TRAP 0x01000000
#define EVENTS_WAIT_MASK 0x01
#define PCI_SNOOP_ENABLE 0x40000000
#define EPIC_IPI_2_VEC_REG (EPIC_CCSROFF + 0x010c0)
#define __DBL_HAS_DENORM__ 1
#define VXB_REG_BASE_7 "regBase7"
#define VXB_ITERATE_INSTANCES 1
#define BOOT_WARM_NO_AUTOBOOT BOOT_NO_AUTOBOOT
#define ERF_MAX_USR_CATEGORIES 16
#define SEM_PENDED_TASK 0x1
#define EPIC_RES42_INT_VEC (EPIC_RES42_INT_NUM + EPIC_VEC_IN_IRQ0)
#define _WRS_KERNEL_LOCK_OFFSET_tkt_ctr (0x00)
#define INCLUDE_IPNET_PACKET_POOL_5 
#define LAWAR_SIZE_256KB 0x00000011
#define EVT_TASK_0(evtId) do { if ( ACTION_IS_SET ) eventPointSwHandle(evtId, NULL, 0); } while ((0))
#define _PARM_FILENAME_MAX 20
#define reg_sp spReg
#define STACK_SAVE 0x1000
#define CHAR_BIT 8
#define FIOPROTOARG 23
#define MAX_SYSCALL_ID 21999
#define RIO_CHANNEL_SM 2
#define MAX_SEM_TYPE SEM_TYPE_MAX
#define VXB_ACCESS_PROBE 0x00000001
#define M85XX_PORPLLSR_E500_RATIO(base) ((*M85XX_PORPLLSR(base) & M85XX_PORPLLSR_E500_RATIO_MASK)>>16)
#define DIV_FACT_1 0
#define VXB_BUSID_USB_HUB 14
#define SYM_GLOBAL 0x1
#define VX_SEMAPHORE(name) _WRS_DATA_ALIGN_BYTES(VX_OBJ_ALIGN_SIZE) char name [VX_SEMAPHORE_SIZE]
#define PCIEX_OUTBOUND_TRANS_EXT_ADRS_REG2(base) CVPUINT32(base, 0xac44)
#define _VX_STRONGARM 129
#define VME_AM_EXT_USR_DATA 0x09
#define Q_PRI_BMAP qPriBMapClassId
#define M_usbPeriphLib (132 << 16)
#define TFFS_DRIVE_NUMBER 0
#define VALID_INDEX_TO_STATE(index) ((UINT)index << MMU_ATTR_VALID_INDEX_SHIFT)
#define _DBCR0_ICMP 0x08000000
#define PCIEX_OUTBOUND_TRANS_EXT_ADRS_REG3(base) CVPUINT32(base, 0xac64)
#define LAWAR_SIZE_256MB 0x0000001B
#define __NO_INLINE__ 1
#define S_intLib_VEC_TABLE_WP_UNAVAILABLE (M_intLib | 2)
#define S_memLib_NOT_ENOUGH_MEMORY (M_memLib | 1)
#define EPIC_EIVPR_INTR_ACTIVE EPIC_BIT(30)
#define MCSR 572
#define PCI_AUTO_CONFIG_ADRS 0x4c00
#define _WRS_MMU_CLASS_PID_REG 1
#define M85XX_LTEDR(base) (CAST(VUINT32 *)((base) + 0x50B4))
#define NV_RAM_ADRS (FLASH1_BASE_ADRS)
#define VXB_ACCESS_VMEMREGION_ALLOC 0x00000014
#define M85XXRIO_SPICAR(base) (CAST(VUINT32 *)(((char*)base) + 0x0014))
#define _DBCR1_IAC12M 0x00c00000
#define EPIC_EIVPR_VECTOR(vec) ((vec) & EPIC_EIVPR_VECTOR_MSK)
#define WDB_RTP_PRIORITY 200
#define EPIC_RES43_INT_NUM 43
#define _SIZE_T 
#define EPIC_IN_INT0_VEC_REG (EPIC_CCSROFF + 0x10200)
#define MAX_CANON _POSIX_MAX_CANON
#define MMU_TRANS_TBL_DELETE (*(mmuLibFuncs.mmuTransTblDelete))
#define M85XX_L2SRBAR_ADDR_BIT 14
#define WIND_TCB_R17 (WIND_TCB_REGS + REG_SET_GR(17))
#define EPIC_EX_INT4_DES_REG (EPIC_CCSROFF + 0x10090)
#define PIC_OFFSET 0x40000
#define CPU_FAMILY _VX_CPU_FAMILY
#define errno (*__errno())
#define RIO_MAX_CHANNELS 15
#define PCIEX_OUTBOUND_TRANS_ADRS_REG3(base) CVPUINT32(base, 0xac60)
#define __INCesfh 
#define INCLUDE_PIPES 
#define CORE_DUMP_CKSUM_ENABLE FALSE
#define M85XXRIO_RIWAR_LOCAL_R_SNOOP_CORE 5
#define PCIEX_OUTBOUND_TRANS_ADRS_REG4(base) CVPUINT32(base, 0xac80)
#define FD_ZERO(p) _VX_FD_ZERO (p)
#define _PPC_ESF_R10 _PPC_ESF_R(10)
#define _PTRDIFF_T_ 
#define STATE_TO_PROT_INDEX(state) ((MMU_ATTR_PROT_GET(state)) >> MMU_ATTR_PROT_INDEX_SHIFT)
#define _PPC_ESF_R15 _PPC_ESF_R(15)
#define _PPC_ESF_R16 _PPC_ESF_R(16)
#define _WRS_VXWORKS_MAJOR 6
#define _PPC_ESF_R18 _PPC_ESF_R(18)
#define _PPC_ESF_R19 _PPC_ESF_R(19)
#define EPIC_IN_INT45_DES_REG (EPIC_CCSROFF + 0x107b0)
#define VXWORKS_SMP_VERSION RUNTIME_NAME " " RUNTIME_VERSION " " RUNTIME_SMP_NAME
#define VM_TEXT_PROTECT(addr,protect) ((vmLibInfo.pVmTextProtectRtn == NULL) ? (ERROR) : ((*vmLibInfo.pVmTextProtectRtn) (addr, protect)))
#define _IFORM_X_35 80
#define _WRS_CONFIG_FEATURE_IPNET_GEN_DEPEND 1
#define BOOT_QUICK_AUTOBOOT 0x04
#define _PARM_UTS_VERSION_MAX 64
#define STACK_NAME_V4_V6 2
#define MII_BP_FAULT 0x2000
#define _PPC_ESF_R21 _PPC_ESF_R(21)
#define _PPC_ESF_R23 _PPC_ESF_R(23)
#define _PPC_ESF_R24 _PPC_ESF_R(24)
#define _PPC_ESF_R25 _PPC_ESF_R(25)
#define _PPC_ESF_R26 _PPC_ESF_R(26)
#define _PPC_ESF_R27 _PPC_ESF_R(27)
#define _PPC_ESF_R28 _PPC_ESF_R(28)
#define _PPC_ESF_R29 _PPC_ESF_R(29)
#define MMU_ATTR_CACHE_INDEX_SHIFT 7
#define _WRS_CONFIG_TASK_SWITCH_HOOKS_D 1
#define FIODIRENTRY 9
#define _ARCH_MOVE_SIZE 4
#define O_TEXT _FTEXT
#define _PPC_ESF_R30 _PPC_ESF_R(30)
#define _PPC_ESF_R31 _PPC_ESF_R(31)
#define EVENT_SPINLOCK_ERROR CLASS3_EVENT(238)
#define DEVMETHOD_END { 0, NULL }
#define CACHE_DMA_IS_READ_COHERENT() CACHE_DRV_IS_READ_COHERENT (&cacheDmaFuncs)
#define _PPC_REG_SET_SIZE (_PPC_REG_SIZE * (GREG_NUM + 9))
#define FIONFREE 30
#define CLASS1_EVENT(id) (MIN_CLASS1_ID + id)
#define _MMU_TLB_TS_0 0x00000000
#define Q_PRI_DELTA qPriDeltaClassId
#define UIO_MAXIOV 1024
#define M_pgMgrLib (185 << 16)
#define FIOTRUNC 42
#define S_eventLib_NULL_TASKID_AT_INT_LEVEL (M_eventLib | 0x0007)
#define S_eventLib_NOT_ALL_EVENTS (M_eventLib | 0x0002)
#define PCI_CFG_DATA_REG (CCSBAR + 0x8004)
#define BUS_TYPE_MULTIBUS 2
#define SM_OBJ_MAX_TASK 40
#define INCLUDE_WATCHDOGS_CREATE_DELETE 
#define EVENT_OBJ_MSGCACKSEND CLASS2_EVENT(40)
#define OSCILLATOR_FREQ FREQ_66_MHZ
#define MII_SR_REMOTE_FAULT 0x0010
#define SEMBM_IS_FREE(semId) (semId->semOwner == NULL)
#define S_taskLib_ILLEGAL_OPERATION (M_taskLib | 112)
#define CACHE_CMD_DISABLE 0x04000000
#define _CACHE_ALIGN_SIZE _ppcCacheLineSize
#define ERROR (-1)
#define _PPC_L1CFG_PA_V(x) (x >> 16)
#define _DBCR0_FT 0x00000001
#define _VX_UPDATE 2
#define __STRING(x) #x
#define NGROUPS_MAX _POSIX_NGROUPS_MAX
#define EHOSTUNREACH 65
#define M85XXRIO_AICAR(base) (CAST(VUINT32 *)(((char*)base) + 0x000C))
#define EPIC_SR_OUT_DB1_INT_NUM 33
#define __INCvxParamsh 
#define __INCioLibh 
#define PCI2_OUTBOUND_ATTR_REG3(base) CVPUINT32(base, 0x9c70)
#define _WRS_CONFIG_SUPPORTS_SMP 1
#define M85XXRIO_MSR(base) (CAST(VUINT32 *)(((char*)base) + 0x0040 ))
#define PCI2_OUTBOUND_TRANS_ADRS_REG2(base) CVPUINT32(base, 0x9c40)
#define _MMU_TLB_PERM_UW 0x00020000
#define I2C_IOCTL_RMW_AND 3
#define S29GL_FLASH_NUM 1
#define PCI2_OUTBOUND_TRANS_ADRS_REG3(base) CVPUINT32(base, 0x9c60)
#define atomic32Cas_inline atomic32Cas
#define M_smNameLib (89 << 16)
#define EPIC_IN_DEST_REG(irq) (EPIC_IN_VEC_REG(irq) + EPIC_IN_DEST_REG_VECREGOFF)
#define EVENT_OBJ_EVENTRECEIVE CLASS2_EVENT(36)
#define REG_SET_MSR (REG_SET_GR(GREG_NUM))
#define RLIMIT_CPU 0
#define EPIC_EX_DFT_SENSE EPIC_SENSE_LVL
#define MMU_ASID_GLOBAL MMU_ASID_MIN
#define _FD_SET_DEFINED 
#define INCLUDE_EDR_SYSDBG_FLAG 
#define MII_MASSLA_CTRL_REG 0x9
#define VXB_ACCESS_REG_WRITE8 0x00000006
#define MMU_STATE_SUP_RW (_MMU_SR|_MMU_SW)
#define MMU_STATE_SUP_RX (_MMU_SR| _MMU_SX)
#define EVENT_ISR_DISPATCHER_INVOKE CLASS3_EVENT(60)
#define _IFORM_XFL_1 46
#define M_selectLib (57 << 16)
#define SM_CPU_NOT_ATTACHED 0
#define VXB_LOCK_IMPORT(x) IMPORT struct vxbLock x
#define MMU_ATTR_NOT_GLOBAL 0xffffffff
#define IPCOM_USE_NATIVE_SOCK_API 
#define LOCAL_MEM_LOCAL_ADRS2 0xf0000000
#define IPCOM_RELEASE 60704
#define I2C_ERROR_CYCLE_ACKIN 5
#define _VX_AM29200 52
#define RIO_BUS_CONFIG_DONE 4
#define INCLUDE_MEM_MGR_INFO 
#define TASK_USER_EXC_STACK_SIZE 8192
#define EVENT_RTPSIGPENDING CLASS3_EVENT(95)
#define FIOCONTIG 36
#define _PPC_EXC_VEC_BASE_LOW 0x00000000
#define _ARCH_SUPPORTS_GCC 
#define IMPORT extern
#define _PPC_TCR_WP_U 0xc000
#define _OFF_T 
#define INCLUDE_NET_DAEMON 
#define IPCOM_SPINLOCK_BUSY_PERSIST (1024)
#define INCLUDE_SEM_MUTEX_CREATE 
#define IPCOM_USE_KEY_DB_CMD 
#define VXB_BUSID_VIRTUAL 9
#define DOSFS_DEFAULT_FAT_CACHE_SIZE 0x100000
#define _PPC_ESF_CTR _PPC_ESF_R(GREG_NUM + 2)
#define EVENT_WINDPRIORITYSETRAISE CLASS2_EVENT(4)
#define PPC_WD_INT_ID 598
#define PCIEX_XINT1_LVL 0x0
#define EVENT_IODELETE CLASS3_EVENT(54)
#define RIO_DIRECTION 2
#define EPIC_EX_INT3_DES_REG (EPIC_CCSROFF + 0x10070)
#define VXEVENTS_OPTIONS EVENTS_NONINTERRUPTIBLE
#define _VX_PPCEC603 98
#define WIND_OBJ_CORE_CLASS_ID 0x30
#define _WRS_CONFIG_COMPONENT_USR_IPNET 1
#define EPIC_IN_INT41_VEC_REG (EPIC_CCSROFF + 0x10720)
#define M_hrfsLib (195 << 16)
#define SIO_KYBD_LED_CAP 2
#define EVENT_WDCANCEL CLASS3_EVENT(19)
#define _VX_ARMARCH3 126
#define _VX_ARMARCH4 127
#define _VX_ARMARCH5 1121
#define _VX_ARMARCH6 1123
#define _VX_ARMARCH7 1125
#define SPIN_LOCK_EMPTY 0
#define MII_CR_RES_MASK 0x003f
#define _EXC_INFO_VEC 0x001
#define MII_PHY_INIT 0x8000
#define _WRS_CONFIG_SUPPORTS_MIPC 1
#define VM_MMUSOFT_ENABLED (vmLibInfo.mmuSoftCfgEnabled)
#define __FBSDID(s) __IDSTRING(__CONCAT(__rcsid_,__LINE__),s)
#define VX_SUPERVISOR_MODE 0x0001
#define OBJ_HANDLE_INDEX_MASK 0xffff
#define EPIC_L2CACHE_INT_NUM 0
#define EPIC_MSG_INT3_DES_REG (EPIC_CCSROFF + 0x11670)
#define FNOCTTY _FNOCTTY
#define PCI_IN_ATTR_RTT_LM_WRITE_ALLOC_LOCK_L2_CACHE_LINE 0x00007000
#define M85XX_LAWBAR4(base) (CAST(VUINT32 *)((base) + 0xc88))
#define EPIC_IN_INT17_VEC_REG (EPIC_CCSROFF + 0x10420)
#define VM_STATE_GET(context,pageAddr,pState) ((vmLibInfo.pVmStateGetRtn == NULL) ? (ERROR) : ((*vmLibInfo.pVmStateGetRtn) (context, (VIRT_ADDR) pageAddr, pState)))
#define _VX_MCF5200 161
#define WV_CLASS_1_ON 0x10000001
#define S_taskLib_ILLEGAL_PRIORITY (M_taskLib | 109)
#define _WRS_CONFIG_FP_hard 1
#define EPIC_MSG_INT3_VEC_REG (EPIC_CCSROFF + 0x11660)
#define FS_NAMES_ATA_PRIMARY_SLAVE ""
#define INCLUDE_IPNET_IFCONFIG_1 
#define M85XX_LAWBAR7(base) (CAST(VUINT32 *)((base) + 0xce8))
#define LAWAR_SIZE_16KB 0x0000000D
#define AM29030 _VX_AM29030
#define _WRS_IOSHORT UINT16
#define M85XX_L2CTL_L2MEXTDIS_MSK 0x00100000
#define OBJ_MASTER_TBL_SIZE (0x10000 / OBJ_HANDLE_TBL_SIZE)
#define M_nfsStat (48 << 16)
#define FIOWHERE64 54
#define FIOMKDIR 31
#define MEM_ALLOC_ERROR_RETURN 0
#define EPIC_IN_INT41_DES_REG (EPIC_CCSROFF + 0x10730)
#define M_kernel (1 << 16)
#define M85XX_L2CEWCR_SIZMASK_BIT 0
#define IPCOM_PROC_STACK_MAX IPCOM_STACK_ADJUST(21845)
#define SM_ANCHOR_OFFSET 0x4100
#define CLOCK_REALTIME 0x0
#define EVENT_SALRUN_CONNECT CLASS3_EVENT(106)
#define INCLUDE_SEM_MUTEX 
#define FSTAT_CHR 0020000
#define SIO_MODEM_CTS 0x04
#define STD_BUS_ACCESS_METHOD_END 0x00000015
#define LAWAR_SIZE_16MB 0x00000017
#define MII_CTRL_REG 0x0
#define EPIC_PCI2_INT_NUM 9
#define M85XXRIO_PEFCAR_OFFSET 0x10
#define INT_CPU_LOCK() intCpuLock()
#define _WRS_CONFIG_COMPONENT_IPTCP 1
#define VX_ADA_DEBUG 0x0020
#define RIO_CHANNEL_TAS_CLEAR 4
#define M_pcmciaLib (105 << 16)
#define __INCrngLibh 
#define VXB_LOCK_READER TRUE
#define _DEFINED_struct__Sched_param 
#define MMU_INST 0x01
#define _VX_SH7410 135
#define Q_NEXT(pQHead,pQNode) ((Q_NODE *)((*(((Q_HEAD *)(pQHead))->pQClass->nextRtn)) (((Q_HEAD *)(pQHead)), ((Q_NODE *)(pQNode)))))
#define EPIC_IN_INT22_VEC_REG (EPIC_CCSROFF + 0x104c0)
#define S_semLib_INVALID_OPTION (M_semLib | 102)
#define _POSIX_OPEN_MAX 16
#define MII_PHY_PWR_DOWN 0x0800
#define _MMU_URWX (_MMU_UR | _MMU_UW | _MMU_UX)
#define WIND_TCB_R20 (WIND_TCB_REGS + REG_SET_GR(20))
#define EVENT_CPC_ENTER CLASS3_EVENT(232)
#define __va_copy(d,s) __builtin_va_copy(d,s)
#define EVENT_MSGQDELETE CLASS3_EVENT(21)
#define WIND_TCB_R22 (WIND_TCB_REGS + REG_SET_GR(22))
#define VXB_ASSERT(cond,errVal) 
#define BOOT_WARM_AUTOBOOT BOOT_NORMAL
#define _WRS_ARCH_USER_STACK_FRAME_EXTENSION(sp) do { (sp) = (char *) STACK_ROUND_DOWN ((sp) - 2*sizeof(int *)); *((int *)(sp)) = (int)0; *((int *)((sp)+4)) = (int)0; } while ((0))
#define _VX_NFDBITS (sizeof(_Vx_fd_mask) * _VX_NBBY)
#define MSG_PRI_URGENT 1
#define MPC85XX_I2C_DIG_FILTER_REG (0x00014)
#define ENET_DEFAULT2 WR_ENET2
#define EVENT_MSGQSEND CLASS3_EVENT(23)
#define _STACK_GROWS_UP 1
#define RIO_CAR_DEVVEND_ID 0x00
#define _IFIELD_SIMM(x) ((0x0000ffff & x))
#define VM_CONTEXT_CREATE() ((vmLibInfo.pVmCtxCreateRtn == NULL) ? (ERROR) : ((*vmLibInfo.pVmCtxCreateRtn) ()))
#define _DBCR1_IAC1ER 0x30000000
#define F_OK 0
#define WDB_END_DEVICE_ADDRESS NULL
#define MEMORY_SPACE_ACCESS_ENABLE_BIT 0x2
#define _PC_PATH_MAX 11
#define _FNONBLOCK 0x4000
#define IPCOM_SYSLOG_PRIO_DEFAULT 3
#define MII_MF_DATA_LEN 0x10
#define EPIC_IN_INT22_DES_REG (EPIC_CCSROFF + 0x104d0)
#define __SAPP 0x0100
#define IPCOM_HOST_FROM_LOCALTBL 
#define USHRT_MAX 65535
#define BOOT_USR_LEN 20
#define VM_STATE_CACHEABLE_MINICACHE 0x30
#define VXBAF_BYTE_ORDER_BE_16 0x00010000
#define _POSIX_MAX_INPUT 255
#define EPIC_IN_INT15_VEC_REG (EPIC_CCSROFF + 0x103e0)
#define IPCOM_USE_MUX_DRV 
#define _IFIELD_D_S(x) ((0x00008000 & x) ? (0xffff0000 | x) : (0x0000ffff & x))
#define _PC_LINK_MAX 6
#define EPIC_MSIVPR_VECTOR_MSK (0xffff)
#define FIT_DIVIDER_TAP_10 10
#define FIT_DIVIDER_TAP_11 11
#define FIT_DIVIDER_TAP_12 12
#define FIT_DIVIDER_TAP_13 13
#define FIT_DIVIDER_TAP_15 15
#define ESHUTDOWN 58
#define FIT_DIVIDER_TAP_17 17
#define FIT_DIVIDER_TAP_19 19
#define BRIDGE_BAR0_WIDTH 0x4
#define RLIM_NLIMITS 9
#define M85XXRIO_RIWAR_TGINT(val) (val << 20)
#define EPIC_MIDR_CRIT_INT EPIC_BIT(30)
#define S_semLib_COUNT_OVERFLOW (M_semLib | 106)
#define I2C_ERROR_CYCLE_START 1
#define _VX_howmany(x,y) ((unsigned int)(((x)+((y)-1)))/(unsigned int)(y))
#define ERRNO_PX_FLAG (1<<15)
#define WV_ACTION_SET { vxAtomicOr ((atomic_t*)&evtAction, 0x0100); }
#define MII_TECH_PAUSE 0x0400
#define VXB_HANDLE_OP_WRITE 0x10
#define FIT_DIVIDER_TAP_20 20
#define FIT_DIVIDER_TAP_21 21
#define DLL_REMOVE(list,node) { if (((DL_NODE *)(node))->previous == NULL) ((DL_LIST *)(list))->head = ((DL_NODE *)(node))->next; else ((DL_NODE *)(node))->previous->next = ((DL_NODE *)(node))->next; if (((DL_NODE *)(node))->next == NULL) ((DL_LIST *)(list))->tail = ((DL_NODE *)(node))->previous; else ((DL_NODE *)(node))->next->previous = ((DL_NODE *)(node))->previous; }
#define CLASSID_INVALIDATE(classId) ((CLASS_ID) ((int)classId | 1))
#define SEM_INVERSION_SAFE 0x08
#define MII_EXT_STAT_1000X_FD 0x8000
#define _SIZE_T_DECLARED 
#define WDB_PROXY_INIT_STRING NULL
#define _ARCH_LDBL_MAX_10_EXP 308
#define MMU_GLOBAL_PAGE_MAP (*(mmuLibFuncs.mmuGlobalPageMap))
#define VXBAF_BYTE_ORDER_BE_32 0x001a0000
#define _BYTE_ORDER _BIG_ENDIAN
#define S_mmuLib_VIRT_ADDR_OUT_OF_BOUNDS (M_mmuLib | 6)
#define CORE_DUMP_STACK_SIZE 8192
#define F_SETOWN 6
#define EPIC_IN_INT14_DES_REG (EPIC_CCSROFF + 0x103d0)
#define M85XX_MCMR(base) (CAST(VUINT32 *)((base) + 0x5078))
#define MSG_PRI_NORMAL 0
#define SIO_BAUD_SET 0x1003
#define IPCOM_PROC_STACK_MIN IPCOM_STACK_ADJUST(1024)
#define ARMARCH4_T _VX_ARMARCH4_T
#define PCI_WINDOW_ENABLE_BIT 0x80000000
#define DRV_TIMER_M85XX 
#define EPIC_TSEC4TX_INT_NUM 21
#define PCIEX_INBOUND_ATTR_REG2(base) CVPUINT32(base, 0xaDD0)
#define _IFIELD_D(x) ((0x0000ffff & x))
#define _IFIELD_L(x) ((0x00200000 & x) >> 21)
#define M85XX_L2CTL_L2LFRID_MSK 0x00000300
#define CORE_DUMP_RTP_FS_PATH "/tgtsvr"
#define _WRS_INLINE static __inline__
#define FIONREAD 1
#define PCIEX_INBOUND_ATTR_REG3(base) CVPUINT32(base, 0xaDB0)
#define EPIC_IN_INT8_DES_REG (EPIC_CCSROFF + 0x10310)
#define EPIC_IN_INT2_VEC_REG (EPIC_CCSROFF + 0x10240)
#define _VX_PPC8260 2012
#define _PPC_L1CSR_SLC_V(x) (x >> 11)
#define INCLUDE_IPAIP_GLOBAL_CONFIGS 
#define MII_EXT_STAT_1000X_HD 0x4000
#define EPIC_MIDR_CRIT0_INT EPIC_BIT(30)
#define WIND_TCB_R4 (WIND_TCB_REGS + REG_SET_GR(4))
#define __ELF__ 1
#define TBU_W 285
#define _ARCH_FLT_MAX 3.40282347e+38F
#define _VX_CPU_FAMILY _VX_PPC
#define RIO_IMPLEMENTATION_SPACE_BASE 0x010000
#define DELETE_ERROR ERROR
#define INCLUDE_REMLIB 
#define _DBSR_IAC1 0x00800000
#define _DBSR_IAC2 0x00400000
#define WIND_TCB_R7 (WIND_TCB_REGS + REG_SET_GR(7))
#define VXBAF_BYTE_ORDER_BE_64 0x1a1a0000
#define __INCvxAtomicArchLibh 
#define PPC7400 _VX_PPC7400
#define _WRS_CONFIG_EDR_POLICY_HOOKS 1
#define IPCOM_USE_KEY_DB 
#define MMU_STATE_GUARDED_NOT 0x00000000
#define _VX_PPC7400 2011
#define SEMM_PENDED_TASK SEM_PENDED_TASK
#define CSIZE 0xc
#define EPIC_PCI_EXPRESS_INT_VEC (EPIC_PCI_EXPRESS_INT_NUM + EPIC_VEC_IN_IRQ0)
#define SPARClite _VX_SPARClite
#define EVENT_SALCREATE CLASS3_EVENT(99)
#define RIO_OP_SUPPORTED_AINC 0x01000000
#define MII_NP_TOGGLE 0x0800
#define _DBCR0_DAC1R_U 0x0008
#define SM_OBJ_MAX_SEM 60
#define _PARM_PATH_MAX 1024
#define IS_CONTROL_EVENT(event) ((event >= MIN_CONTROL_ID) && (event <= MAX_CONTROL_ID))
#define PPCACR_PRKM_MASK 0XF0
#define S_taskLib_TASK_UNDELAYED (M_taskLib | 108)
#define FIOSEEK 7
#define WV_CLASS_TASKNAMES_PRESERVE 0x00001000
#define M85XXRIO_PLMRESPCSR(base) (CAST(VUINT32 *)(((char*)base) + 0x00144 ))
#define ZERO 0
#define __INCvxTypesOldh 
#define _IFORM_M_1 54
#define S_ioLib_UNFORMATED EIO
#define IPCOM_USE_SYSLOG 
#define FNBIO _FNBIO
#define _IFORM_M_3 78
#define IPCOM_USE_SA_LEN 1
#define SEMRW_MAX_READERS(semId) ( ((SEM_RW_EXT *) ((UINT) semId + sizeof (SEMAPHORE)))->maxReaders )
#define FIOLABELSET 34
#define _VX_SPARC 10
#define EPIC_IPIVPR_PRIORITY(p) (((p) << 16) & EPIC_IPIVPR_PRIORITY_MSK)
#define M_memLogLib (140 << 16)
#define FIOSEEK64 53
#define SYS_MODEL "Wind River SBC"
#define SRIO_STATUS_CHECK 0x2
#define IPCOM_USE_HW_CAPS 
#define _DBCR0_IRPT 0x02000000
#define _VX_PPC405F 2002
#define __INCselectLibP 
#define _POSIX_ARG_MAX 4096
#define M_ipsLib (165 << 16)
#define INCLUDE_SEM_BINARY 
#define IVOR12 412
#define M85XXRIO_RxWAR_TYPE_READ(val) (val << 16)
#define M_pppSecretLib (101 << 16)
#define OBJ_RESOLVE(pObj) ((OBJ_CORE *)(pObj))
#define LAWAR_TGTIF_RAPIDIO 0x00C00000
#define NUM_PCI2_SLOTS 0x0
#define MIN_CONTROL_ID 0
#define EVENT_SEMMCREATE CLASS3_EVENT(13)
#define IVOR14 414
#define SEM_M_PRI_RESORT 0x4
#define M_mmsLib (162 << 16)
#define __INCmmuE500Libh 
#define INST_BCCTR _OP(19, 528)
#define SEM_RW_EXT_SIZE 0x18
#define MEM_BLOCK_ERROR_LOG_MSG 0x04
#define M85XXRIO_ROWS3R18_OFFSET(n) (0x10C1C + ((n)*0x20))
#define IPCOM_USE_HW_CHECKSUM_RX 
#define CCB_FREQ 396000000
#define OPT_MON_TRAP 0x10
#define IPCOM_FILE_ROOT IPCOM_FILE_NATIVE_ROOT
#define M_arpLib (71 << 16)
#define _PARM_MB_CUR_MAX 1
#define EVENT_MEMALLOC CLASS3_EVENT(30)
#define _WRS_CONFIG_COMPONENT_VXMUX 1
#define _WRS_PHYS_ADDR_IS_64_BITS 
#define CACHE_WRITETHROUGH 0x01
#define M85XXRIO_ROWAR_RDTYPE_ATOMIC_INC 0xc
#define SEM_RW_MAX_CONCURRENT_READERS 32
#define NV_BOOT_OFFSET 0
#define EPIC_IN_INT5_VEC_REG (EPIC_CCSROFF + 0x102a0)
#define FOREVER for (;;)
#define WDB_POOL_SIZE ((unsigned int) (sysMemTop() - FREE_RAM_ADRS)/16)
#define O_CREAT _FCREAT
#define EOVERFLOW 85
#define _WRS_CONFIG_OBJECT_CLASS_LIST 1
#define PCIEX_INBOUND_TRANS_ADRS_REG1(base) CVPUINT32(base, 0xaDE0)
#define _ARCH_FLT_MIN 1.17549435e-38F
#define __sgetc(p) ((HANDLE_VERIFY(p, handleTypeFile) != OK) ? (EOF) : ((--(p)->_r < 0) ? (__srget(p)) : ((int)(*(p)->_p++))))
#define FILESIZEBITS 63
#define UCHAR_MAX 255
#define IPCOM_USE_HW_CHECKSUM_TX 
#define INCLUDE_WDB_MEM 
#define SEEK_SET 0
#define RLIMIT_CORE 4
#define INCLUDE_IPTCP 
#define Q_CLASS_VERIFY(pQClass) ( (((Q_CLASS *)(pQClass))->valid == (Q_CLASS *) pQClass) ? OK : ERROR )
#define VM_STATE_MASK_WRITABLE MMU_ATTR_PROT_MSK
#define CUST_ENET3_0 0xA0
#define CUST_ENET3_1 0xA1
#define CUST_ENET3_3 0xA3
#define VM_DEFAULT_CACHE_COHERENCY_ATTR 0x0
#define SHELL_TASK_NAME_BASE "tShell"
#define PCI2_DEV_ID 0x826110E3
#define _IFIELD_RB(x) ((0x0000f800 & x) >> 11)
#define MMU_STATE_SUP_RW_USR_R (MMU_STATE_SUP_RW | _MMU_UR)
#define EPIC_RES42_INT_NUM 42
#define MII_ANAR_10TX_FD 0x0040
#define MMU_STATE_SUP_RW_USR_W (MMU_STATE_SUP_RW | _MMU_UW)
#define MMU_STATE_SUP_RW_USR_X (MMU_STATE_SUP_RW | _MMU_UX)
#define M85XX_LSRT(base) (CAST(VUINT32 *)((base) + 0x50A4))
#define __INCb_uid_th 
#define I2C_DEVICE_TYPE_TEMP_SENSOR_AD7417 1
#define MII_AN_PRTN_REG 0x5
#define _WRS_CONFIG_SUPPORTS_PROFILE_SMALL_FOOTPRINT 1
#define VXDBG_MEM_READ(pSrc,pDest,size) VXDBG_MEM_WIDTH_READ(pSrc, pDest, size, 0)
#define M85XX_L2CTL_L2LO_MSK 0x00002000
#define OBJ_HANDLE_ENTRY_MASK (OBJ_HANDLE_TBL_SIZE - 1)
#define IVOR0 400
#define WDB_STACK_SIZE 0x2000
#define _PPC_MSR_WE_U 0x0004
#define I2C_IOCTL_RD 1
#define MMU_REGION_TBL_ENTRIES (0x1 << MMU_REGION_INDEX_BITS)
#define EPIC_IN_INT6_DES_REG (EPIC_CCSROFF + 0x102d0)
#define vxAtomicSet_inline vxAtomicSet
#define S_msgQLib_INVALID_QUEUE_TYPE (M_msgQLib | 3)
#define PCI_IN_ATTR_TGI_RIO 0x00c00000
#define SHELL_TASK_PRIORITY 1
#define _VX_READ 0
#define MII_ANAR_10TX_HD 0x0020
#define _WRS_VX_NO_GLOBAL_ERRNO 
#define S_vxCpuLib_INVALID_ARGUMENT (M_vxCpuLib | 1)
#define _GCC_LIMITS_H_ 
#define PHY_10BASE_T_FDX 0x01
#define _IFLAG_4XTLB (_IFLAG_405_SPEC | _IFLAG_440_SPEC)
#define MMU_STATE_MASK_CACHEABLE 0x00000018
#define M85XX_L2CEWAR_ADDR_MSK 0xFFFFFF00
#define WDB_TASK_OPTIONS VX_UNBREAKABLE | VX_FP_TASK
#define WDB_COMM_ULIP 3
#define W_OK 2
#define INCLUDE_APPL_LOG_UTIL 
#define SIMSPARCSOLARIS _VX_SIMSPARCSOLARIS
#define _SIZE_T_ 
#define FREQ_33_MHZ 33000000
#define __size_t 
#define RLIMIT_RSS 5
#define BP_ACTIONS_ALL -1
#define VXB_BYTE_ORDER_CONVERT_64(flags,data,mask) { if ((flags & VXBAF_ENDIAN_MASK) != mask) { VXBAF_BYTE_SWAP_64(data); flags &= ~(VXBAF_ENDIAN_MASK); flags |= mask; flags ^= (VXBAF_CONVERT_BYTE_ORDER | VXBAF_CONVERT_SHORT_ORDER | VXBAF_CONVERT_LONG_ORDER); } }
#define JAVA_C_SYM_PREFIX ""
#define EPIC_SMSG_INT1_DES_REG (EPIC_CCSROFF + 0x11c30)
#define IPCOM_USE_ETHERNET 
#define EPIC_GT_B_VEC_REG(irq) (EPIC_TM_B0_VEC_REG + ((irq) * EPIC_GT_VEC_REG_INTERVAL))
#define PCI_OUTBOUND_BASE_ADRS_REG2(base) CVPUINT32(base, 0x8c48)
#define M85XXRIO_RIWAR_IO_TYPE_R 4
#define _WCHAR_T_H 
#define M85XXRIO_RIWAR_IO_TYPE_W 4
#define EPROTO 76
#define EPIC_MIVPR_INTR_MSK EPIC_BIT(31)
#define EPIC_IPI_DPATCH1_REG0 (EPIC_CCSROFF + 0x21040)
#define ENODEV 19
#define _WRS_INLINE_vxCas 
#define IPCOM_NETIF_IPCOM 1
#define EPIC_VEC_IPI_IRQ0 (255 - EPIC_MAX_IPI_IRQS)
#define _IFIELD_SPR(x) (((0x001f0000 & x) >> 16) | ((0x0000f800 & x) >> 6))
#define __INCvxdbgPpcLibPh 
#define M_msgQLib (65 << 16)
#define TASK_ID_VERIFY(tid) ( (objVerify (&((WIND_TCB *)(tid))->objCore, taskClassId)) )
#define _ARCH_LDBL_MIN_10_EXP (-307)
#define _IFIELD_RS(x) ((0x03e00000 & x) >> 21)
#define USER_RESERVED_MEM 0x000000
#define INT_MAX __INT_MAX__
#define PPC750 _VX_PPC750
#define IPCOM_PROC_PRIO_1 254
#define IPCOM_PROC_PRIO_3 80
#define IPCOM_PROC_PRIO_6 30
#define IPCOM_PROC_PRIO_7 20
#define VM_TEXT_PAGE_PROTECT(addr,protect) VM_TEXT_PROTECT(addr, protect)
#define FSTAT_REG 0100000
#define _WRS_ALIGN_CHECK(ptr,type) (((int)(ptr) & ( _WRS_ALIGNOF(type) - 1)) == 0 ? TRUE : FALSE)
#define CPU32 _VX_CPU32
#define _PPC_MAS0_ESEL_MASK 0x03ff0000
#define __INCmsgQLibCommonh 
#define PHY_10BASE_T 0x00
#define OBJ_IS_DELETE_ON_LAST_CLOSE(objId) ( (((OBJ_CORE *)(objId))->handle.attributes & WIND_OBJ_DELETE_ON_LAST_CLOSE) != 0 )
#define INT_RESTRICT() ( intContext() ? errno = S_intLib_NOT_ISR_CALLABLE, ERROR : OK )
#define _WRS_OSM_INIT 
#define CACHE_CMD_ENABLE 0x02000000
#define INCLUDE_TIMER_STUB 
#define EPIC_MAX_EXT_IRQS 12
#define TRG_CLASS_1_ON 0x10000001
#define I2C_IOCTL_WR 0
#define _SYS_CDEFS_H_ 
#define TLB0CFG 688
#define DLL_FIRST(pList) ( (((DL_LIST *)(pList))->head) )
#define SIO_MCTRL_BITS_CLR 0x100E
#define M85XXRIO_DICAR(base) (CAST(VUINT32 *)(((char*)base) + 0x0004 ))
#define MII_SR_AUTO_SEL 0x0008
#define FRAMEBASESZ 16
#define M_qLib (59 << 16)
#define VXDBG_EVT_MAX_NUM 4
#define _VX_FUNCPTR_DEFINED 
#define __FLT_HAS_QUIET_NAN__ 1
#define S_mmuLib_MARKED_ISR_CALLABLE (M_mmuLib | 13)
#define __INCobsolete_typesh 
#define EVT_CTX_0_BH(evtId) eventPointSwHandle (evtId, NULL, 0)
#define WV_EVT_PROTO_REV_6_3_FCS 2
#define Q_ADVANCE(pQHead) (*(((Q_HEAD *)(pQHead))->pQClass->advanceRtn)) (((Q_HEAD *)(pQHead)))
#define EPIC_TSEC1ERR_INT_NUM 18
#define M_sdLib (190 << 16)
#define SYM_IS_DATA(symType) ((symType) & SYM_DATA)
#define _VX_ARMARCH5_T 1122
#define BREAK_ESF ESFPPC
#define EPIC_VEC_HAS_NO_IDR 26
#define _PC_SYNC_IO 19
#define SIO_MODEM_RTS 0x02
#define MMU_STATE_SUP_R (_MMU_SR)
#define M85XXRIO_ROWAR_RDTYPE_NREAD 0x4
#define __FLT_HAS_INFINITY__ 1
#define M85XXRIO_IDSR(base) (CAST(VUINT32 *)(((char*)base) + 0x13464 ))
#define FRSYNC _FRSYNC
#define S_miiLib_PHY_AN_FAIL (M_miiLib | 4)
#define PCIEX_OUTBOUND_ATTR_REG0(base) CVPUINT32(base, 0xac10)
#define PCIEX_OUTBOUND_ATTR_REG1(base) CVPUINT32(base, 0xac30)
#define PCIEX_OUTBOUND_ATTR_REG3(base) CVPUINT32(base, 0xac70)
#define PCIEX_OUTBOUND_ATTR_REG4(base) CVPUINT32(base, 0xac90)
#define TASK_UNLOCK() TASK_CPU_UNLOCK()
#define VXBUS_VERSION_1 1
#define VXBUS_VERSION_2 2
#define VXBUS_VERSION_3 3
#define VXBUS_VERSION_4 VXB_VER_4_0_0
#define _BSD_PTRDIFF_T_ 
#define EVENT_CPU_ID CONTROL_EVENT(10)
#define _PPC_TCR_WRC_U 0x3000
#define MMU_ATTR_VALID_MSK 0x00000040
#define _MMU_TLB_SZ_64M 0x00000800
#define M_nfsDrv (45 << 16)
#define EXT_VEC_IRQ0 56
#define INCsysMpc85xxI2ch 
#define DDR_DATA_INIT 0x128
#define XTSEC_NAME "motetsec"
#define _WRS_ABSOLUTE(name,value) _WRS_ABSOLUTE_(name,value)
#define EPIC_IN_INT16_VEC_REG (EPIC_CCSROFF + 0x10400)
#define IS_CLASS3_EVENT(event) ((event >= MIN_CLASS3_ID) && (event <= MAX_CLASS3_ID))
#define NULL ((void *)0)
#define VM_MMU_TRANS_TBL_GET(vmCtxId) (vmCtxId->mmuTransTbl)
#define DEAR 61
#define SPRG4_R 260
#define MEM_ALLOC_ERROR_LOG_FLAG 0x20
#define EVENT_TASKSAFE CLASS3_EVENT(6)
#define E2BIG 7
#define EVENT_SYSCALL_BASE CLASS3_EVENT(65)
#define HID1_RUN_NORM 
#define FIOCONTIG64 49
#define VM_TRANSLATE(context,virtualAddr,pPhysicalAddr) ((vmLibInfo.pVmTranslateRtn == NULL) ? (ERROR) : ((*vmLibInfo.pVmTranslateRtn) (context, (VIRT_ADDR) virtualAddr, pPhysicalAddr)))
#define SYS_MODEL_E500 "Freescale E500 : Unknown system version"
#define _DBSR_UDE_U 0x4000
#define _VX_ARMARCH4_T 128
#define _VX_FD_FUNC_DEFINED 
#define Q_RESTORE(pQHead,pQNode,key) (*(((Q_HEAD *)(pQHead))->pQClass->restoreRtn)) (((Q_HEAD *)(pQHead)), ((Q_NODE *)(pQNode)), (key))
#define I2C_KNOWN_STATE(x) i2cCycleMpc85xxKnownState(x)
#define FIOTIMESET 44
#define IPCOM_DRV_PPP_BAUDRATE 38400
#define TBU_R 269
#define _PPC_TCR_DIE (_PPC_TCR_DIE_U << 16)
#define VX_COUNTING_SEMAPHORE VX_SEMAPHORE
#define VX_MAX_TASK_DELETE_RTNS 20
#define OBJ_EACH(list,pNode,routine,arg,objId) { DL_NODE * pNextNode; pNode = DLL_FIRST (&list); while (pNode != NULL) { objId = (OBJ_ID)((int)pNode - OFFSET (OBJ_CORE, classNode)); pNextNode = DLL_NEXT (pNode); if ((* routine) (objId, arg) == FALSE) break; pNode = pNextNode; } }
#define Q_PRI_LIST_FROM_TAIL qPriListFromTailClassId
#define M_iosLib (13 << 16)
#define VX_MAX_TASK_CREATE_RTNS 20
#define FIOFSTATFSGET 46
#define EPIC_WHO_AM_I0_REG (EPIC_CCSROFF + 0x20090)
#define _PC_REC_XFER_ALIGN 17
#define STATE_TO_CACHE_INDEX(state) ((MMU_ATTR_CACHE_GET(state)) >> MMU_ATTR_CACHE_INDEX_SHIFT)
#define EPIC_IN_INT16_DES_REG (EPIC_CCSROFF + 0x10410)
#define EPIC_IRQSR0_MSG_INT_MSK 0xf000
#define M85XX_L2CEWCR_LOCK_MSK 0x40000000
#define IPCOM_SOCK_IPLITE 1
#define MPC85XX_I2C_CONTROLLER 0
#define _WRS_CONFIG_SHELL 1
#define EVT_OBJ_EVENT_2(evtId,ARG1,ARG2) do { if ( ACTION_IS_SET ) { EVT_OBJ_EVENT_2_T evt_obj_event_2; evt_obj_event_2.args [0] = (int)ARG1; evt_obj_event_2.args [1] = (int)ARG2; eventPointSwHandle(evtId, &evt_obj_event_2, sizeof evt_obj_event_2); } } while ((0))
#define EVT_OBJ_EVENT_3(evtId,ARG1,ARG2,ARG3) do { if ( ACTION_IS_SET ) { EVT_OBJ_EVENT_3_T evt_obj_event_3; evt_obj_event_3.args [0] = (int)ARG1; evt_obj_event_3.args [1] = (int)ARG2; evt_obj_event_3.args [2] = (int)ARG3; eventPointSwHandle(evtId, &evt_obj_event_3, sizeof evt_obj_event_3); } } while ((0))
#define PROT_INDEX_TO_STATE(index) (((UINT)(index) << MMU_ATTR_PROT_INDEX_SHIFT) | MMU_ATTR_PROT_SUP_READ)
#define _VX_ARM 120
#define M_ospfLib (111 << 16)
#define EVENTS_SYSFLAGS_UNUSED 0xfc
#define MEM_BLOCK_ERROR_SUSPEND_FLAG 0x100
#define VX_TASK_INSTANTIATE(name,prio,options,stackSz,entryPt,arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10) (((VX_TASK_INITIALIZE(name,prio,options,stackSz,entryPt,arg1,arg2,arg3, arg4,arg5,arg6,arg7,arg8,arg9,arg10) == (int) NULL) || (taskActivate ((int)&name ##Tcb) != OK)) ? (ERROR) : ((int) &name ##Tcb))
#define EVENT_INT_ENT(k) ((k) + MIN_INT_ID)
#define _IFIELD_FRB(x) ((0x0000f800 & x) >> 11)
#define _IFIELD_FRC(x) ((0x000007c0 & x) >> 6)
#define _IFIELD_FRD(x) ((0x03e00000 & x) >> 21)
#define __XSTRING(x) __STRING(x)
#define _IFIELD_FRS(x) ((0x03e00000 & x) >> 21)
#define TRG_CONTROL_INDEX 6
#define RIO_CAR_SWITCH_PORT 0x14
#define NOT_PAGE_ALIGNED(addr) (((UINT)(addr)) & ((UINT)vmPageSize - 1))
#define ENOTDIR 20
#define LBC_SDRAM_LOCAL_ADRS LOCAL_MEM_LOCAL_ADRS2
#define DEBUG_KWRITE_USR_RTN NULL
#define TIMER_ABSTIME 0x1
#define M_mbufLib (98 << 16)
#define MMU_STATE_SUP_RW_USR_RWX (MMU_STATE_SUP_RW | _MMU_URWX)
#define EPIC_REG_NO_OFFSET_WRITE(regAdrs,value) *(volatile UINT32 *)(regAdrs) = value
#define WIND_TCB_XER (WIND_TCB_REGS + REG_SET_XER)
#define FIOCHMOD 63
#define __INCnetVersionh 
#define INST_SC_MASK 0xfc000002
#define USER_I_MMU_ENABLE 
#define DDR_IO_OVCR 0x90000000
#define ECONNRESET 54
#define _MMU_TLB_SZ_1G 0x00000a00
#define _MMU_TLB_SZ_1M 0x00000500
#define VXB_BUSID_USB_HOST_OHCI 12
#define VXB_VER_PATCH(x) ((x)&0x0ff)
#define VX_WRITE 1
#define INCLUDE_NETWORK 
#define _WRS_INLINE_ffsMsb 
#define PENTIUM _VX_PENTIUM
#define END_OF_TABLE 0
#define EVENT_SEMBCREATE CLASS3_EVENT(8)
#define M_cdromFsLib (116 << 16)
#define ENXIO 6
#define __INCb_dev_th 
#define PPC85XX_ERRATA_CPU29 1
#define M_errnoLib (49 << 16)
#define CLOCK_MONOTONIC 0x1
#define _WRS_SDA_BSS __attribute__ ((__section__ (".sbss")))
#define __INCobjLibh 
#define SYS_CLK_RATE 60
#define L2SIZ_0KB 0
#define IPCOM_VXWORKS_DRV_NULLPOOL 
#define _VX_PENTIUM2 84
#define EVT_OBJ_SIG_0(evtId) EVT_OBJ_SIG_N(evtId, 0, 0, 0, 0, 0, 0)
#define EVT_OBJ_SIG_1(evtId,ARG1) do { if (ACTION_IS_SET) { EVT_OBJ_SIG_1_T evt_obj_sig_1; evt_obj_sig_1.args [0] = (int)ARG1; eventPointSwHandle (evtId, &evt_obj_sig_1, sizeof evt_obj_sig_1); } } while ((0))
#define EVT_OBJ_SIG_2(evtId,ARG1,ARG2) do { if (ACTION_IS_SET) { EVT_OBJ_SIG_2_T evt_obj_sig_2; evt_obj_sig_2.args [0] = (int)ARG1; evt_obj_sig_2.args [1] = (int)ARG2; eventPointSwHandle (evtId, &evt_obj_sig_2, sizeof evt_obj_sig_2); } } while ((0))
#define EVT_OBJ_SIG_3(evtId,ARG1,ARG2,ARG3) do { if (ACTION_IS_SET) { EVT_OBJ_SIG_3_T evt_obj_sig_3; evt_obj_sig_3.args [0] = (int)ARG1; evt_obj_sig_3.args [1] = (int)ARG2; evt_obj_sig_3.args [2] = (int)ARG3; eventPointSwHandle (evtId, &evt_obj_sig_3, sizeof evt_obj_sig_3); } } while ((0))
#define EVT_OBJ_SIG_4(evtId,ARG1,ARG2,ARG3,ARG4) do { if (ACTION_IS_SET) { EVT_OBJ_SIG_4_T evt_obj_sig_4; evt_obj_sig_4.args [0] = (int)ARG1; evt_obj_sig_4.args [1] = (int)ARG2; evt_obj_sig_4.args [2] = (int)ARG3; evt_obj_sig_4.args [3] = (int)ARG4; eventPointSwHandle (evtId, &evt_obj_sig_4, sizeof evt_obj_sig_4); } } while ((0))
#define MAX_CLASS3_ID 19999
#define SIO_ERROR_CONNECT 4
#define TOOL_HDR_STRINGIFY(x) #x
#define VXBAF_CONVERT_OTHER 0x00000400
#define MII_STAT_FAIL 0x20
#define _VX_PENTIUM4 86
#define MII_PHY_NO_ABLE 0x40
#define EPIC_PRIORITY_DEFAULT 3
#define S_spinLockLib_LOCK_TIMEOUT (M_spinLockLib | 5)
#define _WRS_CONFIG_COMPONENT_IPFREESCALE_FLAG 1
#define FSYNC _FSYNC
#define EPIC_TSEC4TX_INT_VEC (EPIC_TSEC4TX_INT_NUM + EPIC_VEC_IN_IRQ0)
#define _WRS_KERNEL_LOCK_OFFSET_cpuIndex (0x00 + _WRS_KERNEL_LOCK_ALIGN_tkt_ctr)
#define _PPC_USE_SDA 
#define _MMU_TLB_SZ_4M 0x00000600
#define _PPC_TEXT_SEG_ALIGN 4
#define EPIC_MSIVPR_VECTOR(vec) ((vec) & EPIC_MSIVPR_VECTOR_MSK)
#define L_XTND SEEK_END
#define EVENT_RTPTASKKILL CLASS3_EVENT(87)
#define WDB_GOPHER_TAPE_LEN 1400
#define WV_ACTION_IS_SET ( (evtAction&0xff00) == 0x0100)
#define L1CFG0 515
#define L1CFG1 516
#define INCLUDE_NET_DRV 
#define __INClogLibh 
#define __INCkernelLockLibPh 
#define VM_STATE_MASK_BUFFERABLE (MMU_ATTR_CACHE_MSK | MMU_ATTR_SPL_MSK)
#define LOCAL_MEM_SIZE 0x10000000
#define _FUNCPTR_DEFINED 
#define FAPPEND _FAPPEND
#define IPCOM_PROC_PRIO_2 90
#define __INCvxCpuLibh 
#define ARCH_HEADER(file) ARCH_HDR(_VX_ARCH_DIR,file)
#define IS_INT_ENT_EVENT(event) ((event >= MIN_INT_ID) && (event <= MAX_INT_ID))
#define MMU_ATTR_SUP_IO_RO (MMU_ATTR_SUP_RO | MMU_ATTR_CACHE_IO)
#define _DEFINED_mode_t 
#define MII_HDX_STR "half duplex"
#define _WRS_E500_FIXED_POINT_SUPPORT 1
#define DEFAULT_SYSCLKFREQ FREQ_400_MHZ
#define EPIC_MSIVPR_PRIORITY(p) (((p) << 16) & EPIC_MSIVPR_PRIORITY_MSK)
#define PHY_AN_ENABLE 0x05
#define MII_MASSLA_CTRL_CONFIG_VAL 0x800
#define _DBCR0_RET 0x00008000
#define IPCOM_PROC_PRIO_4 50
#define PCI_OUTBOUND_TRANS_EXT_ADRS_REG2(base) CVPUINT32(base, 0x8c44)
#define _IFIELD_SR(x) ((0x000f0000 & x) >> 16)
#define __INCb_off_th 
#define EPIC_SR_OUT_MU1_INT_NUM 37
#define __BEGIN_DECLS 
#define VM_STATE_CACHEABLE_NOT MMU_ATTR_CACHE_OFF
#define IPCOM_PROC_PRIO_5 40
#define __LDBL_MANT_DIG__ 53
#define IPCOM_CONFIG_H 
#define PORDEVSR_PCIX_MODE 0
#define CACHE_USER_IS_WRITE_COHERENT() CACHE_DRV_IS_WRITE_COHERENT (&cacheUserFuncs)
#define Q_FIFO qFifoClassId
#define _INC_VXBUS_H 
#define M_tapeFsLib (103 << 16)
#define ECM_OFFSET 0x1000
#define EPIC_SR_OUT_MU2_INT_VEC (EPIC_SR_OUT_MU2_INT_NUM + EPIC_VEC_IN_IRQ0)
#define __SRD 0x0004
#define EVENT_OBJ_WINDROTATE CLASS2_EVENT(46)
#define M85XXRIO_ODDATR(base) (CAST(VUINT32 *)(((char*)base) + 0x1341C))
#define _FPOS_T 
#define EPIC_TM_A0_VEC_REG (EPIC_CCSROFF + 0x01120)
#define _TOOL_HEADER(file) _TOOL_HDR(TOOL_FAMILY,file)
#define EPIC_IN_DEST_REG_VECREGOFF 0x10
#define MII_SR_EXT_CAP 0x0001
#define EVENT_KILL CLASS3_EVENT(27)
#define __INCcachePpcLibh 
#define _WRS_CONFIG_COMPONENT_IPDHCPR 1
#define _WRS_CONFIG_COMPONENT_IPDHCPS 1
#define RLIMIT_NOFILE 8
#define _PPC_ESF_DAR (_PPC_ESF_ERRNO + SIZ_UINT32)
#define MII_SR_SPEED_SEL_MASK 0xf800
#define EPIC_DMA3_INT_NUM 7
#define OBJ_UNRESOLVE(pObj) ((OBJ_ID)(pObj))
#define _IFORM_D_2 4
#define _IFORM_D_3 5
#define _IFORM_D_4 6
#define _IFORM_D_5 7
#define _IFORM_D_6 8
#define _IFORM_D_7 9
#define _IFORM_D_9 56
#define EVENT_ISR_CREATE CLASS3_EVENT(62)
#define EPIC_MAX_ALL_IRQS 255
#define PGCCSR_HOST 0x80000000
#define _PPC_HID0_SLEEP 0x00200000
#define RIO_WORKING 5
#define PCI2_CFG_ADR_REG (CCSBAR + 0x9000)
#define SEM_Q_MASK 0x03
#define FILENAME_MAX _PARM_FILENAME_MAX
#define VME_AM_IS_STD(addr) ((addr & 0xf0) == 0x30)
#define WIND_TCB_T3 WIND_TCB_R17
#define FS_COMMIT_POLICY_PERIODIC 3
#define LSB(x) ((x) & 0xff)
#define WIND_TCB_T4 WIND_TCB_R18
#define EPIC_SMSG_INT3_DES_REG (EPIC_CCSROFF + 0x11c70)
#define INCLUDE_MBUF_UTIL1 
#define EPIC_EX_INT3_VEC_REG (EPIC_CCSROFF + 0x10060)
#define ERF_MAX_USR_TYPES 16
#define WIND_TCB_T6 WIND_TCB_R20
#define _WRS_FUNC_ALIAS(func,aliasToFunc,retType) retType aliasToFunc () __attribute__ ((alias (#func)));
#define MII_HDX_LEN sizeof (MII_HDX_STR)
#define _PPC_ESF_VEC_OFF_H (_PPC_ESF_VEC_OFF + SIZ_UINT16)
#define M_setLib (125 << 16)
#define FALSE (0)
#define EVT_OBJ_SAL_STR_2(EVTID,NAME,FD) do { if (ACTION_IS_SET) { EVT_OBJ_SAL_STR_2_T evt_obj_sal_str_2; evt_obj_sal_str_2.args [0] = (int)FD; evt_obj_sal_str_2.length = strlen (name); evt_obj_sal_str_2.pData = name; eventPointSwHandle (EVTID, &evt_obj_sal_str_2, sizeof(evt_obj_sal_str_2)); } } while ((0))
#define PCI_CFG_FORCE 0
#define _IFORM_VXR_1 76
#define M_edrLib (138 << 16)
#define SEMM_NO_OWNER NULL
#define M85XX_L2SRBAREA0(x) (CAST(VUINT32 *)((x + 0x20104)))
#define EPIC_INV_INTER_SOURCE 22
#define _PPC_L1CSR_LO 0x00000200
#define EPIC_IIVPR_INTR_POLARITY EPIC_BIT(23)
#define VXB_BUSID_PCI 3
#define __INCdsmLibh 
#define EPIC_CISR0_MSG_INT(n) (EPIC_BIT(15-(n)) & EPIC_CISR0_MSG_INT_MSK)
#define VME_AM_STD_SUP_ASCENDING 0x3f
#define EVENT_OBJ_MSGSSEND CLASS2_EVENT(45)
#define PCI2_OUTBOUND_TRANS_EXT_ADRS_REG3(base) CVPUINT32(base, 0x9c64)
#define ROUND_UP(x,align) (((int) (x) + (align - 1)) & ~(align - 1))
#define _PPC_L1CSR_UL_V(x) (x >> 10)
#define __volatile volatile
#define IS_KERNEL_TASK(tid) ( (((tid) == 0 ? (WIND_TCB *)taskIdCurrent:(WIND_TCB *)(tid))->rtpId == kernelId) )
#define SLL_PUT_AT_HEAD(list,node) { if ((((SL_NODE *)(node))->next = ((SL_LIST *)(list))->head) == NULL) { ((SL_LIST *)(list))->head = ((SL_NODE *)(node)); ((SL_LIST *)(list))->tail = ((SL_NODE *)(node)); } else ((SL_LIST *)(list))->head = (node); }
#define S_mmuLib_LOCK_NO_MORE_TLB_RESOURCES (M_mmuLib | 9)
#define INCLUDE_NET_HOST_SETUP 
#define WRITE _VX_WRITE
#define _CLOCK_T 
#define EVENTS_RETURN_ALL 0x02
#define PCI2_OUTBOUND_TRANS_EXT_ADRS_REG4(base) CVPUINT32(base, 0x9c84)
#define MCSRR0 570
#define vxAtomicXor_inline vxAtomicXor
#define __CONCAT(x,y) __CONCAT1(x,y)
#define WRS_ASM(x) _WRS_ASM(x)
#define _PPC_MSR_MMU_RI_FP_EXTRACT(src,dst) lis dst, _PPC_MSR_SPE_U ; ori dst, dst, _PPC_MSR_IS | _PPC_MSR_DS ; and dst, dst, src
#define _EXTENSION_WRS 1
#define ETIME 79
#define MC68020 _VX_MC68020
#define VM_STATE_MASK_CACHEABLE MMU_ATTR_CACHE_MSK
#define MII_PHY_ISO 0x0400
#define __FLT_DIG__ 6
#define EPIC_GCR_MODE_EPF (EPIC_BIT(29) | EPIC_BIT(30))
#define _DBSR_MRR 0x30000000
#define VXB_BUSID_I2C 20
#define S_msgQLib_INVALID_MSG_LENGTH (M_msgQLib | 1)
#define VM_CONTEXT_MASK(context,startAddr,endAddr,options) ((vmLibInfo.pVmCtxMaskRtn == NULL) ? (ERROR) : ((*vmLibInfo.pVmCtxMaskRtn) (context, startAddr, endAddr, options)))
#define atomic32Get_inline atomic32Get
#define S_spinLockLib_NOT_SPIN_LOCK_CALLABLE (M_spinLockLib | 1)
#define TASK_SAFE() do { VX_CODE_BARRIER(); EVT_OBJ_2 (taskIdCurrent, taskClassId, EVENT_TASKSAFE, taskIdCurrent, taskIdCurrent->safeCnt); taskIdCurrent->safeCnt++; VX_CODE_BARRIER(); } while ((0))
#define SYM_IS_COMMON(symType) ((symType) & SYM_COMM)
#define EVENT_SEMRWCREATE CLASS3_EVENT(204)
#define M_dsmLib (7 << 16)
#define LOCAL static
#define VX_CLASS_LIST_UNLOCK(lock) semMGiveScalable (lock, CLASS_LIST_SEM_INLINE_OPTIONS)
#define __INT_MAX__ 2147483647
#define M85XXRIO_DIDCAR(base) (CAST(VUINT32 *)(((char*)base) + 0x0000 ))
#define _PPC_MMUCSR0_DL1MMU_FI_V(x) (x >> 3)
#define HWMEM_POOL_SIZE 50000
#define DDR_SDRAM_LOCAL_SIZE LOCAL_MEM_SIZE
#define MII_BP_NP 0x8000
#define VM_PAGE_LOCK(context,virtAddr,len,option) ((vmLibInfo.pVmPageLockRtn == NULL) ? (ERROR) : ((*vmLibInfo.pVmPageLockRtn) (context, virtAddr, len, option)))
#define EPIC_IN_INT29_VEC_REG (EPIC_CCSROFF + 0x105a0)
#define MII_MASSLA_CTRL_PORT_TYPE 0x400
#define VX_OBJ_ALIGN_SIZE 8
#define _FWRITE 0x0002
#define EPIC_EIVPR_PRIORITY_MSK (EPIC_BIT(19) | EPIC_BIT(18) | EPIC_BIT(17) | EPIC_BIT(16))
#define EPIC_IRQSR1_IN_INT(n) EPIC_BIT(31-(n))
#define F_RSETLKW 13
#define _PARM_UTS_NODENAME_MAX 64
#define FIOACCESS 60
#define atomic32Add_inline atomic32Add
#define DBCR0 308
#define DBCR1 309
#define EPIC_TM_A0_DES_REG (EPIC_CCSROFF + 0x01130)
#define EVENT_MSGSDELETE CLASS3_EVENT(42)
#define WV_CLASS_2_ON 0x10000003
#define __INCvxTypesh 
#define EPIC_IIDR_P1_INT EPIC_BIT(1)
#define EPIC_IN_INT6_VEC_REG (EPIC_CCSROFF + 0x102c0)
#define VXB_ACCESS_INT_ACKNOWLEDGE 0x00000011
#define M8260_DPPC_MASK 0x0C000000
#define WDB_TIPC_PORT_TYPE 70
#define SEM_OWNER(semId) (semId->semOwner)
#define INST_BCLRL 0x4c000021
#define S_vmLib_KERNEL_TEXT_NOT_ALIGNED (M_vmLib | 6)
#define VXB_HANDLE_ORDERED 24
#define EIO 5
#define WIND_OBJ_DEALLOC_MEM 0x02
#define _PPC_ESR_ST_U 0x0080
#define CLOCK_PROCESS_CPUTIME_ID 0x2
#define MMU_STATE_SUP_R_USR_RWX (MMU_STATE_SUP_R | _MMU_URWX)
#define PCI_OUTBOUND_TRANS_ADRS_REG0(base) CVPUINT32(base, 0x8c00)
#define SYSFLG_QUICK_AUTOBOOT 0x08
#define ENETUNREACH 51
#define EXDEV 18
#define FOPEN _FOPEN
#define EPIC_IN_INT29_DES_REG (EPIC_CCSROFF + 0x105b0)
#define VXB_BUSID_PLB 1
#define EVT_CTX_BUF(evtId,ADDR,BUFFSIZE,BUFFADDR) do { if (ACTION_IS_SET) { EVT_CTX_BUF_T evt_ctx_buf; evt_ctx_buf.pData = BUFFADDR; evt_ctx_buf.length = BUFFSIZE; evt_ctx_buf.pc = (void *)ADDR; eventPointSwHandle (evtId, &evt_ctx_buf, sizeof evt_ctx_buf); } } while ((0))
#define __INCblkIoh 
#define RESERVED 0x4400
#define PCI_OUTBOUND_TRANS_ADRS_REG2(base) CVPUINT32(base, 0x8c40)
#define __strong_reference(sym,aliassym) extern __typeof (sym) aliassym __attribute__ ((__alias__ (#sym)));
#define HID1_RXFE 0x00020000
#define _WRS_CONFIG_DEFAULT_IPV4 1
#define STRONGARM _VX_STRONGARM
#define MPC85XX_I2C_CONTROL_REG_MASK 0xFD
#define _TYPE_VIRT_ADDR typedef _Vx_VIRT_ADDR VIRT_ADDR
#define _WRS_LIKELY(x) __builtin_expect(!!(x), 1)
#define _EXC_INFO_DEFAULT (_EXC_INFO_VEC|_EXC_INFO_CIA|_EXC_INFO_MSR| _EXC_INFO_CR)
#define VM_PAGE_SIZE_GET() ((vmLibInfo.pVmPageSizeGetRtn == NULL) ? (ERROR) : ((*vmLibInfo.pVmPageSizeGetRtn) ()))
#define MCORE200 _VX_MCORE200
#define M85XX_DDRDLLCR(base) (CAST(VUINT32 *)((base) + 0xE0E10))
#define BLOB_PADDED_LENGTH(dataLength,alignment) ((dataLength + (1<<alignment) - 1) & ~((1<<alignment)-1))
#define _TYPE_sig_atomic_t typedef unsigned int sig_atomic_t
#define WV_REV_ID_CURRENT WV_REV_ID_VXWORKS_6_7
#define M_strmLib (100 << 16)
#define VXB_ASSERT_NONNULL_V(pVar) 
#define M_fastUdpLib (137 << 16)
#define ROM_TEXT_ADRS 0xFFF00100
#define EPIC_GT_A_VEC_REG(irq) (EPIC_TM_A0_VEC_REG + ((irq) * EPIC_GT_VEC_REG_INTERVAL))
#define _ARCH_FLT_ROUNDS 1
#define M85XX_DEVDISR(base) (CAST(VUINT32 *)((base) + 0xE0070))
#define IPCOM_IPC_MAX_NAME 64
#define __WINT_TYPE__ short unsigned int
#define EDQUOT 83
#define _CPU_CACHE_ALIGN_SIZE 32
#define MII_SR_TX_FULL_DPX 0x4000
#define MMU_STATE_MASK_ENDIAN 0x00000001
#define EXC_VEC_HIGH 0x02fff
#define EPIC_IN_INT40_VEC_REG (EPIC_CCSROFF + 0x10700)
#define _WRS_CONFIG_COMPONENT_VXTESTV2_D 1
#define MC68000 _VX_MC68000
#define PCI_IN_ATTR_RTT_LM_WRITE_ALLOC_L2_CACHE_LINE 0x00006000
#define VXB_INTR_TRIG_ACTIVE_LOW (VXB_INTR_TRIG_NEG | VXB_INTR_TRIG_LEVEL)
#define M85XXRIO_ODMR(base) (CAST(VUINT32 *)(((char*)base) + 0x13400))
#define _ARCH_DBL_DIG 15
#define VXB_ACCESS_REG_READ16 0x00000003
#define SH32 _VX_SH32
#define EVENT_OBJ_MSGSDELETE CLASS2_EVENT(42)
#define MII_MF_ADDR_LEN 0x5
#define _TYPE_VX_VIRT_ADDR typedef _Vx_UINT32 _Vx_VIRT_ADDR
#define _VX_CHAR_FROM_CONST(x) (char *)(x)
#define FIOSQUEEZE 15
#define FIORFLUSH 26
#define HID0 1008
#define _WRS_ARCH_HAS_NEW_KERNEL_LOCK 
#define EVENT_RTPPAUSE CLASS3_EVENT(86)
#define EVT_CTX_RTPINFO(evtId,OPTIONS,OWNERID,RTPID,NAME) do { if (ACTION_IS_SET) { EVENT_RTPNAME_T evt_ctx_rtpinfo; evt_ctx_rtpinfo.options = OPTIONS; evt_ctx_rtpinfo.ownerId = OWNERID; evt_ctx_rtpinfo.rtpId = RTPID; evt_ctx_rtpinfo.pRtpName = NAME; eventPointSwHandle (evtId, &evt_ctx_rtpinfo, sizeof evt_ctx_rtpinfo); } } while ((0))
#define SEM_NO_SYSTEM_VIEWER 0x200
#define VXB_PARAM_END_OF_LIST 0x0000
#define ENOEXEC 8
#define __INCttyLibh 
#define DLL_INIT(list) { ((DL_LIST *)(list))->head = NULL; ((DL_LIST *)(list))->tail = NULL; }
#define VM_PAGE_BLOCK_SIZE_GET() ((vmLibInfo.pVmBlockSizeGetRtn == NULL) ? (ERROR) : ((*vmLibInfo.pVmBlockSizeGetRtn) ()))
#define L1CSR1 1011
#define EOF (-1)
#define DELAYTIMER_MAX _POSIX_DELAYTIMER_MAX
#define RIO_CHANNEL_UNRESERVED 0
#define EPIC_RES45_INT_VEC (EPIC_RES45_INT_NUM + EPIC_VEC_IN_IRQ0)
#define M85XX_L2CTL_L2DO_BIT 22
#define _DEFINED_BOOL 
#define _PPC_TCR_ARE_U 0x0040
#define SEM_M_Q_GET 0x1
#define EPIC_IN_INT40_DES_REG (EPIC_CCSROFF + 0x10710)
#define M85XXRIO_RIWTARn(base,n) (CAST(VUINT32 *)(((char*)base) + 0x10D60 + (0x80 - (n*0x20))))
#define VX_COPROC4_TASK 0x08000000
#define MC68030 _VX_MC68030
#define INST_HIGH_MASK 0xffff0000
#define VXBAF_NON_OPTIMIZED_FLAGS (VXBAF_PREVENT_OPTIMIZATION | VXBAF_BYTE_ORDER_KNOWN | VXBAF_NOT_FIRST_BUS)
#define EVT_CTX_DISP_NOTEST(ARG1,PRI,NORMAL_PRI) do { EVENT_WIND_EXIT_DISPATCH_T evt_ctx_disp; evt_ctx_disp.taskIdNew = ARG1; evt_ctx_disp.priority = PRI; eventPointSwHandle ( (NORMAL_PRI > PRI ? EVENT_WIND_EXIT_DISPATCH_PI : EVENT_WIND_EXIT_DISPATCH), &evt_ctx_disp, sizeof evt_ctx_disp); } while ((0))
#define S_msgQLib_ILLEGAL_OPTIONS (M_msgQLib | 4)
#define VXB_MODE "mode"
#define M85XX_L2CTL_L2SLC_BIT 12
#define EPIC_SMSG_INT3_VEC_REG (EPIC_CCSROFF + 0x11c60)
#define WDB_REGS_SIZE 512
#define CACHE_CMD_LOAD_LOCK 0x06000000
#define __INCvxAtomicLibh 
#define MC68040 _VX_MC68040
#define TASK_QNODE_TO_PSCHEDINFO(node) ( taskSchedInfoGet(node) )
#define __LDBL_MAX_10_EXP__ 308
#define S_vxdbgLib_HOOK_ALREADY_EXISTS VXDBG_ERROR_TO_ERRNO(VXDBG_ERR_HOOK_ALREADY_EXISTS)
#define FIOFCNTL 62
#define VX_SEMAPHORE_SIZE 104
#define PCI1_DEV_ID 0x826010E3
#define __DBL_EPSILON__ 2.2204460492503131e-16
#define EVENT_BEGIN CONTROL_EVENT(0)
#define EPIC_DMA2_INT_NUM 6
#define EPIC_MSG_INT2_DES_REG (EPIC_CCSROFF + 0x11650)
#define SYM_LOCAL 0x40
#define _PPC_ESR_ST 0x00800000
#define NUM_RAWFS_FILES 5
#define EPIC_IN_INT21_VEC_REG (EPIC_CCSROFF + 0x104a0)
#define le16toh(x) bswap16((x))
#define _BSD_CLOCK_T_DEFINED_ 
#define M85XX_L2ERRADDR(x) (CAST(VUINT32 *)((x + 0x20E50)))
#define TRG_ACTION_SET { vxAtomicOr ((atomic_t*)&evtAction, 0x0001); }
#define _MMU_TLB_ATTR_E 0x00000001
#define _MMU_TLB_ATTR_G 0x00000002
#define _MMU_TLB_ATTR_I 0x00000008
#define _MMU_TLB_ATTR_M 0x00000004
#define MEDR_EXTENDED_ENABLE FALSE
#define _MMU_TLB_ATTR_W 0x00000010
#define VM_PAGE_UNLOCK(context,virtAddr) ((vmLibInfo.pVmPageUnlockRtn == NULL) ? (ERROR) : ((*vmLibInfo.pVmPageUnlockRtn) (context, virtAddr)))
#define ESR 62
#define SLL_FIRST(pList) ( (((SL_LIST *)pList)->head) )
#define M_dhcpsLib (112 << 16)
#define TOOL_FAMILY gnu
#define FIOCOMMITPOLICYSETFS 67
#define FREAD _FREAD
#define BSP_SERIAL_CHAN_GET bspSerialChanGet
#define ESRCH 3
#define EVENT_OBJ_MSGCSEND CLASS2_EVENT(38)
#define CACHE_USER_INVALIDATE(adrs,bytes) CACHE_DRV_INVALIDATE (&cacheUserFuncs, (adrs), (bytes))
#define EPIC_IRQSR0_MSG_INT(n) (EPIC_BIT(15-(n)) & EPIC_IRQSR0_MSG_INT_MSK)
#define _WRS_CONFIG_COMPONENT_WRLOAD 1
#define MII_CR_POWER_DOWN 0x0800
#define __wchar_t__ 
#define BOOT_NO_AUTOBOOT 0x01
#define SIO_MODEM_DSR 0x20
#define IPCOM_ENV_NATIVE 3
#define SHELL_MAX_SESSIONS -1
#define ERANGE 38
#define SEEK_END 2
#define M_nfsLib (46 << 16)
#define EPIC_SPUR_VEC_REG (EPIC_CCSROFF + 0x010e0)
#define TASK_KERNEL_EXEC_STACK_OVERFLOW_SIZE 4096
#define TRG_ACTION_IS_SET ( (evtAction&0x00ff) == 0x0001)
#define EVEC_TO_ENUM(excVec) ((int)(excVec))
#define EPIC_IN_INT21_DES_REG (EPIC_CCSROFF + 0x104b0)
#define _IFORM_XO_1 47
#define _PPC_ESF_PG_TBL_PTR (_PPC_ESF_XER + 4)
#define EPIC_MIVPR_VECTOR(vec) ((vec) & EPIC_MIVPR_VECTOR_MSK)
#define S_vmLib_NOALIAS_SUPPORT_NOT_INCLUDED (M_vmLib | 9)
#define SIO_MODEM_DTR 0x01
#define __INCtimerDevh 
#define ENOLCK 34
#define vxAtomicInc_inline vxAtomicInc
#define ENFILE 23
#define PPC_MAX_ARG_REGS 8
#define BOOT_USB_OPEN_ATTEMPTS 10
#define INCLUDE_SEM_LIB 
#define EPIC_OPT_CRIT_OFF (0x00000000 >> 16)
#define taskExit(exitCode) exit((exitCode))
#define EPIC_SMSG_INT5_DES_REG (EPIC_CCSROFF + 0x11cb0)
#define FSTAT_DIR 0040000
#define EPIC_RES11_INT_NUM 11
#define M85XXRIO_RIWAR_LOCAL_R_NO_SNOOP 4
#define SPIN_LOCK_ISR_DECL(x,flag) spinlockIsr_t x = { {-1, 0, 0, NULL, {{0}}}, flag}
#define _STDDEF_H_ 
#define EPIC_EX_INT2_VEC_REG (EPIC_CCSROFF + 0x10040)
#define Q_ATTRIBUTE_GET(qHead) (((Q_HEAD *)(qHead))->qPriv2)
#define WDB_ULIP_DEV "/dev/ulip14"
#define _VX_MIPSI64R2 48
#define VXB_EPICINTCTLR_DISABLE_INTS _VXB_EPICINTCTLR_DISABLE_INTS
#define be64toh(x) ((UINT64)(x))
#define PCI_OUTBOUND_TRANS_ADRS_REG3(base) CVPUINT32(base, 0x8c60)
#define ENOSYS 71
#define _WRS_CONFIG_OBJECT_MANAGEMENT 1
#define IVOR1 401
#define IVOR2 402
#define IVOR3 403
#define IVOR4 404
#define IVOR5 405
#define IVOR6 406
#define IVOR7 407
#define IVOR8 408
#define IVOR9 409
#define _PPC_MSR_BIT_CE 14
#define M85XX_L2CTL_L2IO_MSK 0x00200000
#define M85XXRIO_ROWAR_RDTYPE_ATOMIC_SET 0xe
#define M_rarpLib (127 << 16)
#define MMU_I_ADDR_TRANS 0
#define PCI_REQUEST_LEVEL 0x3
#define _PARM_UTS_RELEASE_MAX 64
#define _PPC_L1CFG_CARCH_V(x) (x >> 30)
#define _MMU_TLB_SZ_16K 0x00000200
#define _MMU_TLB_SZ_16M 0x00000700
#define SYM_ABS 0x2
#define MII_AN_FAIL 0x10
#define _WRS_CPU_INDEX_GET() 0
#define VXB_DEVID_DEVICE 0
#define _PARM_STACK_GROWS_UP 1
#define DDR_SDRAM_INTERVAL 0x124
#define MMU_STATE_WRITABLE_NOT 0x00000000
#define EPIC_MAX_SMSG_SHARED_IRQS 32
#define _PPC_MSR_BIT_DE 22
#define VXB_BUSID_USB_HOST_UHCI 13
#define _DBCR1_IAC2ER 0x03000000
#define _PPC_MSR_BIT_DS 27
#define M85XXRIO_ROWAR_RDTYPE_ATOMIC_DEC 0xd
#define M_alarmLib (153 << 16)
#define EVT_OBJ_STR_2(OBJ,CLASS,evtId,ARG1,ARG2,LENGTH,STRING) do { if (ACTION_IS_SET) { EVT_OBJ_STR_ARGS_2_T evt_obj_str_args_2; evt_obj_str_args_2.evt_obj_str.objId = OBJ; evt_obj_str_args_2.evt_obj_str.classId = CLASS; evt_obj_str_args_2.evt_obj_str.pData = STRING; evt_obj_str_args_2.evt_obj_str.length = LENGTH; evt_obj_str_args_2.args [0] = (int)ARG1; evt_obj_str_args_2.args [1] = (int)ARG2; eventPointSwHandle (evtId, &evt_obj_str_args_2, sizeof evt_obj_str_args_2); } } while ((0))
#define EVENT_SALCALL_SENDREQ CLASS3_EVENT(97)
#define DEFAULT_BEATS_TO_WAIT 5
#define CACHE_FLUSH_LOAD_INIT (CACHE_FLUSH_LOAD_ADRS + _CPU_CACHE_ALIGN_SIZE)
#define M85XXRIO_RxWAR_SIZE_16MB 25
#define _INCmot85xxPcih 
#define SHELL_STACK_SIZE (0x10000)
#define va_arg(v,l) __builtin_va_arg(v,l)
#define STORE_ABS_SYMBOLS FALSE
#define INCLUDE_JOB_TASK 
#define MMU_ATTR_SUP_IO (MMU_ATTR_SUP_RW | MMU_ATTR_CACHE_IO)
#define EPIC_CISR1_IN_INT(n) EPIC_BIT(31-(n))
#define SEM_MUT_OPTIONS_MASK (SEM_BIN_OPTIONS_MASK | SEM_DELETE_SAFE | SEM_INVERSION_SAFE)
#define WIND_TCB_PG_TBL_PTR (WIND_TCB_REGS + REG_SET_PG_TBL_PTR)
#define MIPSI32R2 _VX_MIPSI32R2
#define HUPCL 0x10
#define CACHE_DRV_INVALIDATE(pFuncs,adrs,bytes) (((pFuncs)->invalidateRtn == NULL) ? OK : ((pFuncs)->invalidateRtn) (DATA_CACHE, (adrs), (bytes)))
#define USER_I_CACHE_ENABLE 
#define _ARCH_va_list typedef char *va_list
#define SIO_ERROR_DISCONNECT 5
#define INCLUDE_L2_CACHE 
#define Q_PRI_HEAP qPriHeapClassId
#define SYS_MODEL_UNKNOWN "Freescale Unknown processor"
#define MMU_STATE_MASK_MEM_COHERENCY 0x00000004
#define VX_FP_TASK VX_COPROC1_TASK
#define PPC32 _VX_PPC32
#define INCLUDE_IPNET 
#define MMU_RPN_SHIFT 12
#define VXB_INTR_PRIO_FORCE 0x8000
#define ENOTSUP 35
#define S_mmulib_LOCK_REQUIRED (M_mmuLib | 16)
#define _IFORM_X_3 13
#define PCI_MEM2LOCAL(x) (((UINT32)x - PCI_MEM_ADRS) + CPU_PCI_MEM_ADRS)
#define R_OK 4
#define BOOT_TARGET_ADDR_LEN 50
#define _EXC_INFO_CR 0x020
#define OK 0
#define RLIMIT_FSIZE 1
#define PPC555 _VX_PPC555
#define STACK_ADRS _romInit
#define _DBCR0_IAC1_U 0x0080
#define WIND_OBJ_INSTRUMENTED 0x04
#define CLOCKS_PER_SEC sysClkRateGet()
#define I80386 _VX_I80386
#define MIN_SYSCALL_ID 21000
#define EVT_OBJ_TASKSPAWN(evtId,TID,PRI,STACKSIZE,ENTRYPT,OPT) do { if ( ACTION_IS_SET ) { EVENT_TASKSPAWN_T evt_obj_taskspawn; evt_obj_taskspawn.taskId = (TASK_ID)TID; evt_obj_taskspawn.priority = PRI; evt_obj_taskspawn.stackSize = STACKSIZE; evt_obj_taskspawn.entryPoint = ENTRYPT; evt_obj_taskspawn.options = OPT; eventPointSwHandle (evtId, &evt_obj_taskspawn, sizeof evt_obj_taskspawn); } } while ((0))
#define _PPC_L1CFG_PA_MASK 0x00100000
#define _FNBIO 0x1000
#define VXB_ACCESS_INT_CONNECT 0x0000000c
#define _VX_AM29030 51
#define PCI2_OUTBOUND_TRANS_ADRS_REG0(base) CVPUINT32(base, 0x9c00)
#define _EXC_OFF_INTR 0x00500
#define PCI2_OUTBOUND_TRANS_ADRS_REG4(base) CVPUINT32(base, 0x9c80)
#define MII_MASSLA_CTRL_1000T_FD 0x200
#define M85XX_RAPIDIO_ROWS3R18n(base,n) (CAST(VUINT32 *)(((char*)base) + 0x10C1C + ((n)*0x20)))
#define CACHE_BURST_DISABLE 0x80
#define M_umsLib (160 << 16)
#define TCR 340
#define SPRG5_R 261
#define EPIC_TSEC3TX_INT_NUM 15
#define SPRG5_W 277
#define _PPC_MSR_BIT_IS 26
#define FOPEN_MAX _PARM_FOPEN_MAX
#define MII_TECH_100BASE_TX_FD 0x0100
#define MAS0 624
#define MAS1 625
#define MAS2 626
#define MAS3 627
#define MAS4 628
#define MAS6 630
#define VME_AM_USR_SHORT_IO 0x29
#define AM29035 _VX_AM29035
#define INCLUDE_TYLIB 
#define MEM_PART_DEFAULT_OPTIONS (MEM_ALLOC_ERROR_LOG_FLAG | MEM_ALLOC_ERROR_EDR_WARN_FLAG | MEM_BLOCK_ERROR_LOG_FLAG | MEM_BLOCK_ERROR_EDR_WARN_FLAG | MEM_BLOCK_ERROR_SUSPEND_FLAG | MEM_BLOCK_CHECK)
#define MII_MASSLA_CTRL_1000T_HD 0x100
#define MPC85XX_I2C_CONTROL_REG_BCST 0x01
#define M85XXRIO_RxWAR_EN 0x80000000
#define MMU_PAGE_UNLOCK (*(mmuLibFuncs.mmuPageUnlock))
#define MMU_STATE_VALID_NOT 0x00000000
#define M85XXRIO_IFQDPAR(base) (CAST(VUINT32 *)(((char*)base) + 0x0106C))
#define PCI_ERROR_DATA_HIGH_CAPTURE_REG 0x8e1c
#define S_memLib_NO_PARTITION_DESTROY (M_memLib | 4)
#define MMU_ASID_MAX 255
#define EPIC_INT_ACT_HIGH 1
#define WDB_MAX_RESTARTS 5
#define _IFORM_VX_6 69
#define EPIC_RES31_INT_NUM 31
#define INCLUDE_SIO_UTILS 
#define INCLUDE_AIM_MMU_MEM_POOL_CONFIG 
#define EPIC_GTVPR_PRIORITY(p) (((p) << 16) & EPIC_GTVPR_PRIORITY_MSK)
#define SH _VX_SH
#define SHELL_FIRST_CONFIG NULL
#define _GCC_SIZE_T 
#define _IFLAG_604_SPEC 0x0040
#define _FDSYNC 0x10000
#define EVENTS_SEND_ONCE 0x01
#define EVENT_WIND_EXIT_DISPATCH_PI CLASS1_EVENT(4)
#define __INCb_struct__Timespech 
#define DBG_HARDWARE_BP 0
#define MAC_ADRS_LEN 6
#define L_SET SEEK_SET
#define MMU_STATE_SUP_R_USR_RW (MMU_STATE_SUP_R | _MMU_UR | _MMU_UW)
#define MMU_STATE_SUP_R_USR_RX (MMU_STATE_SUP_R | _MMU_UR | _MMU_UX)
#define _DEFINED_ssize_t 
#define EPIC_IN_INT44_VEC_REG (EPIC_CCSROFF + 0x10780)
#define DATAKEYS_MAX _PARM_DATAKEYS_MAX
#define VXB_ACCESS_REG_READ32 0x00000004
#define RIO_DIRECTION_OUTBOUND 0
#define L2SIZ_256KB 1
#define __INTMAX_MAX__ 9223372036854775807LL
#define M_hostLib (50 << 16)
#define VXDBG_BP_FUNCS_ARE_INSTALLED() (_func_vxdbgFuncs[VXDBG_BP_DELETE] != NULL)
#define EVENT_SALRUN_READREQ CLASS3_EVENT(102)
#define __size_t__ 
#define MPC85XX_I2C_STATUS_REG_MAAS 0x40
#define _WRS_UNLIKELY(x) __builtin_expect(!!(x), 0)
#define PCIEX_OUTBOUND_BASE_ADRS_REG1(base) CVPUINT32(base, 0xac28)
#define PCIEX_OUTBOUND_BASE_ADRS_REG3(base) CVPUINT32(base, 0xac68)
#define PCIEX_OUTBOUND_BASE_ADRS_REG4(base) CVPUINT32(base, 0xac88)
#define INCLUDE_VXMEMPROBE_INIT 
#define __FLT_DENORM_MIN__ 1.40129846e-45F
#define _WRS_CONFIG_TTY_DEV 1
#define MMU_ATTR_SUP_RO (MMU_ATTR_PROT_SUP_READ)
#define VXB_HANDLE_SWAP(x) ((x) + 48)
#define MMU_ATTR_SUP_RW (MMU_ATTR_PROT_SUP_READ | MMU_ATTR_PROT_SUP_WRITE)
#define _PPC_TSR_WRS_U 0x3000
#define EPIC_RES41_INT_NUM 41
#define _PC_CHOWN_RESTRICTED 4
#define IPCOM_SHELL_MAX_PATH 256
#define EPIC_GTVPR_VECTOR(vec) ((vec) & EPIC_GTVPR_VECTOR_MSK)
#define M_classLib (66 << 16)
#define _PPC_SPEFSCR_FRMC_RND_NR 0x00000000
#define EPIC_IN_INT4_DES_REG (EPIC_CCSROFF + 0x10290)
#define _PPC_TSR_WIS_U 0x4000
#define EVT_STR_CLASS_0(CLASS,evtId,LENGTH,STRING) do { if (ACTION_IS_SET) { EVT_STR_CLASS_0_T evt_str_class_0; evt_str_class_0.length = LENGTH; evt_str_class_0.string = STRING; evt_str_class_0.classId = CLASS; eventPointSwHandle (evtId, &evt_str_class_0, sizeof evt_str_class_0); } } while ((0))
#define _DBSR_UDE 0x40000000
#define HRFS_DEFAULT_COMMIT_PERIOD 5000
#define vxAtomicDec_inline vxAtomicDec
#define EPIC_VEC_OPTION_INV 28
#define FS_COMMIT_POLICY_AUTO 1
#define OPT_REG_READ8 0x01
#define EVENT_WINDTICKUNDELAY CLASS2_EVENT(18)
#define S_selectLib_NO_SELECT_CONTEXT (M_selectLib | 2)
#define MMU_STATE_MASK_PROTECTION 0x00003f00
#define EVT_OBJ_SIG(evtId,nParam,arg1,arg2) EVT_OBJ_SIG_N(evtId, nParam, arg1, arg2, 0, 0, 0)
#define M85XXRIO_ROWS2R18_OFFSET(n) (0x10C18 + ((n)*0x20))
#define VX_ALTIVEC_TASK VX_COPROC2_TASK
#define EPIC_MIVPR_PRIORITY(p) (((p) << 16) & EPIC_MIVPR_PRIORITY_MSK)
#define INT_WE_MASK(src,des) rlwinm des, src, 0, _PPC_MSR_BIT_WE+1, _PPC_MSR_BIT_WE-1
#define _IFORM_XFX_2 43
#define EPFNOSUPPORT 46
#define __INCarchPpch 
#define ENOPROTOOPT 42
#define INCLUDE_BOOT_FILESYSTEMS 
#define MII_TECH_ASM_PAUSE 0x0800
#define FIORMDIR 32
#define MMU_STATE_SUP_R_USR_WX (MMU_STATE_SUP_R | _MMU_UW | _MMU_UX)
#define EPIC_EIVPR_POLARITY(p) ((p) << 23)
#define __INCvxCpuh 
#define __INCtoolMacrosh 
#define EPIC_EIVPR_INTR_MSK EPIC_BIT(31)
#define _WRS_SPE_SUPPORT 1
#define SPINLOCK_TAKE_RECOVERY -2
#define PCIEX_OUTBOUND_BASE_ADRS_REG0(base) CVPUINT32(base, 0xac08)
#define _PPC_L1CFG_LA_MASK 0x00200000
#define HID1_RUN_UNDEF 
#define SIMNT _VX_SIMNT
#define VXBAF_BYTE_ORDER_KNOWN 0x00000200
#define MII_SR_AUTO_NEG 0x0020
#define MEDR_POOL_SIZE 0x100000
#define _DBCR2_DAC1ER 0x30000000
#define MMU_TRANS_TBL_CREATE (*(mmuLibFuncs.mmuTransTblCreate))
#define VXB_ACCESS_VOLREG_READ 0x0000000b
#define SHM_DEV_NAME "/shm"
#define PHYS_64BIT_ADDR(h,l) (((PHYS_ADDR)(h) << 32) + (l))
#define MMU_STATE_SUP_RWX_USR_RWX (MMU_STATE_SUP_RWX | _MMU_URWX)
#define PCICMD_VAL 0x00000006
#define _IFLAG_601_SPEC 0x0010
#define VXBAF_BYTE_SWAP_16(data) ((data) = ((((data) & 0xFF) << 8) | (((data) >> 8) & 0xFF)))
#define MPC85XX_I2C_DATA_REG (0x00010)
#define __INCtaskDefsh 
#define EPIC_IN_INT12_VEC_REG (EPIC_CCSROFF + 0x10380)
#define INCLUDE_WDB_EVENTPOINTS 
#define EPIC_CTASK_PRI0_REG (EPIC_CCSROFF + 0x20080)
#define RIO_OP_SUPPORTED_SWRITE 0x00040000
#define INST_BCLR _OP(19, 16)
#define _DBCR0_IDM_U 0x4000
#define FIOREADDIR 37
#define CACHE_USER_IS_READ_COHERENT() CACHE_DRV_IS_READ_COHERENT (&cacheUserFuncs)
#define INCLUDE_IPNET_USE_SOCK_COMPAT 
#define AUX_CLK_RATE ((CCB_FREQ / 16) / (1 << FIT_DIVIDER_TAP_18))
#define EPIC_IN_INT34_VEC_REG (EPIC_CCSROFF + 0x10640)
#define _DBCR1_IAC2US 0x0c000000
#define M85XX_L2CTL_L2BLKSIZ_BIT 26
#define EPIC_EX_INT9_DES_REG (EPIC_CCSROFF + 0x10130)
#define M85XXRIO_RIWBAR_BADDR(adrs) (adrs >> 12)
#define INCLUDE_WATCHDOGS 
#define _WRS_KERNEL_LOCK_OFFSET_flags (0x08 + _WRS_KERNEL_LOCK_ALIGN_tkt_ctr)
#define INCLUDE_MUX_COMMON 
#define _PPC_SPEFSCR_FRMC_RND_ZERO 0x00000001
#define _PARM_EXIT_FAILURE 1
#define ENOBUFS 55
#define TRG_CLASS2_INDEX 1
#define INCLUDE_FORMATTED_OUT_BASIC 
#define M_sigLib (51 << 16)
#define __FLT_MIN_10_EXP__ (-37)
#define PCI_ATTR_WS_512K 0x00000012
#define VXDBG_MEM_WRITE(pSrc,pDest,size) VXDBG_MEM_WIDTH_WRITE(pSrc, pDest, size, 0)
#define S_symLib_INVALID_SYMTAB_ID (M_symLib | 12)
#define _DBSR_DAC1W_U 0x0004
#define _WRS_KERNEL 1
#define _IFORM_EVX_1 91
#define _IFORM_EVX_2 92
#define _IFORM_EVX_4 94
#define _IFORM_EVX_5 95
#define _IFORM_EVX_7 97
#define _IFORM_EVX_8 98
#define _IFORM_EVX_9 99
#define _T_SIZE_ 
#define __INTMAX_TYPE__ long long int
#define SEM_EVENTSEND_ERR_NOTIFY 0x10
#define VME_AM_IS_EXT(addr) ((addr & 0xf0) == 0x00)
#define _WRS_CONFIG_RTP 1
#define EFAULT 14
#define EVENT_RTPKILL CLASS3_EVENT(83)
#define EVENT_MSGQCREATE CLASS3_EVENT(20)
#define _DEFINED_ino_t 
#define INCLUDE_ENV_VARS 
#define BOOT_DISABLE_MMU_BEFORE_ENTRY TRUE
#define _ARCH_LDBL_MAX_EXP 1024
#define EVENT_TASKNAME CONTROL_EVENT(3)
#define M85XXRIO_PLASCSR(base) (CAST(VUINT32 *)(((char*)base) + 0x00148 ))
#define M85XXRIO_HBDIDLCSR(base) (CAST(VUINT32 *)(((char*)base) + 0x00068 ))
#define _PPC_MSR_BIT_WE 13
#define _WRS_CONFIG_COMPONENT_IPNET 1
#define EPIC_IN_INT34_DES_REG (EPIC_CCSROFF + 0x10650)
#define MMU_TRANS_TBL_UNION (*(mmuLibFuncs.mmuTransTblUnion))
#define M85XX_L2CEWCR_E_MSK 0x80000000
#define S_mmuLib_TLB_LOCKED_PAGE (M_mmuLib | 7)
#define EPIC_CRIT_SUMM_REG0 (EPIC_CCSROFF + 0x01330)
#define S_mmuLib_NOT_CONTIGUOUS_ADDR (M_mmuLib | 10)
#define MMU_ATTR_PROT_SUP_READ 0x00000001
#define EWOULDBLOCK 70
#define _IFIELD_VA(x) ((0x001f0000 & x) >> 16)
#define __INCvmLibh 
#define ENOMEM 12
#define RIO_WPCSR_BUSY 0x08000000
#define SPE_OFFSET(x) (4*x)
#define MMU_ATTR_PROT_SUP_TO_USR(attr) (((attr) & MMU_ATTR_PROT_SUP_MSK) << 3)
#define _IFIELD_VB(x) ((0x0000f800 & x) >> 11)
#define IPCOM_USE_HW_CHECKSUM 
#define IPCOM_USE_JOB_QUEUE 
#define LAWAR_SIZE_4MB 0x00000015
#define EPIC_SMSG_INT7_DES_REG (EPIC_CCSROFF + 0x11cf0)
#define WDB_SPAWN_STACK_SIZE 0x5000
#define WIND_OBJ_NAME_DYNAMIC 0x01
#define INCLUDE_IO_REMOVABLE 
#define MII_PHY_FLAGS_ARE_SET(setBits) (pPhyInfo->phyFlags & (setBits))
#define RIO_OP_SUPPORTED_PWRITE 0x20000000
#define MEMBER_SIZE(structure,member) (sizeof (((structure *) 0) -> member))
#define __GNUC_MINOR__ 1
#define PPC860 _VX_PPC860
#define SPIN_LOCK_RESTRICT() spinLockRestrict()
#define INT_CONTEXT() ( intContext() )
#define EPIC_EX_INT4_VEC_REG (EPIC_CCSROFF + 0x10080)
#define TSR 336
#define SIO_KYBD_LED_SCR 4
#define MMU_ATTR_VALID_NOT 0x00000000
#define SIO_KYBD_MODE_UNICODE 3
#define __INCmsgQLibPh 
#define INCLUDE_AIM_MMU_PT_PROTECTION 
#define INCLUDE_ANSI_STDIO 
#define WV_INSTRUMENTATION _WRS_CONFIG_SV_INSTRUMENTATION
#define vxAtomicOr_inline vxAtomicOr
#define EPIC_MIVPR_INTR_ACTIVE EPIC_BIT(30)
#define M85XXRIO_PEFCAR(base) (CAST(VUINT32 *)(((char*)base) + 0x0010))
#define RIO_CHANNEL_RESERVED (UINT32)-1
#define PCI2_OUTBOUND_ATTR_REG1(base) CVPUINT32(base, 0x9c30)
#define M85XX_RAPIDIO_ROWS2R18n(base,n) (CAST(VUINT32 *)(((char*)base) + 0x10C18 + ((n)*0x20)))
#define _IFORM_A_3 52
#define _IFLAG_VRC 0x0200
#define EVENT_ISR_INFO CONTROL_EVENT(9)
#define tsecVxbEnd1Num NELEMENTS(tsecVxbEnd1Resources)
#define EPIC_PCI1_INT_VEC (EPIC_PCI1_INT_NUM + EPIC_VEC_IN_IRQ0)
#define MAP _VX_MAP
#define FLASH_WIDTH 2
#define SIO_KYBD_LED_SET 0x1013
#define SPIN_LOCK_TASK_GIVE(x) (spinLockTaskGive (x) )
#define OBJ_TABLE_INDEX_GET(objHdl) (((objHdl) & OBJ_HANDLE_TABLE_MASK) >> 8)
#define MMU_ATTR_USR_TEXT_W (MMU_ATTR_USR_RWX | MMU_ATTR_SUP_TEXT_W)
#define __INCsemLibCommonh 
#define EPIC_IN_INT43_VEC_REG (EPIC_CCSROFF + 0x10760)
#define INCLUDE_WDB 
#define _WRS_CONSTRUCTOR(rtn,lvl) __attribute__((constructor(lvl))) void _STI__ ##lvl ##__ ##rtn (void)
#define INCLUDE_ANSI_TIME 
#define MEM_ROUND_UP(x) ROUND_UP(x, _ALLOC_ALIGN_SIZE)
#define MII_1000MBS 1000000000
#define EPIC_IN_INT15_DES_REG (EPIC_CCSROFF + 0x103f0)
#define MEM_BLOCK_ERROR_LOG_AND_SUSPEND 0x08
#define WDB_TASK_PRIORITY 3
#define M85XXRIO_RIWAR_LOCAL_W_ALLOC_L2 6
#define INET 1
#define PCIEX_OUTBOUND_BASE_ADRS_REG2(base) CVPUINT32(base, 0xac48)
#define VX_TASK_PRIORITY_MAX 255
#define PCI2_OUTBOUND_ATTR_REG4(base) CVPUINT32(base, 0x9c90)
#define PCI_CFG_AUTO 1
#define LNLSB(x) (((x) >> 8) & 0xff)
#define _TIMESPEC_DEFINED 
#define PCI_PREFETCHABLE 0x20000000
#define VME_AM_STD_USR_ASCENDING 0x3b
#define M85XX_L2CTL_L2I_MSK 0x40000000
#define _VX_STACK_DIR _ARCH_STACK_DIR
#define INCLUDE_DDR_SDRAM 
#define CORE_DUMP_RTP_ZLIB_COMPRESSION_LEVEL 9
#define EPIC_SMSG_INT0_VEC_REG (EPIC_CCSROFF + 0x11c00)
#define M85XX_L2CTL_L2INTDIS_BIT 19
#define DBCR2 310
#define S_vxdbgLib_NO_HW_REGS VXDBG_ERROR_TO_ERRNO(VXDBG_ERR_NO_HW_REGS)
#define CACHE_NO_WRITEALLOCATE 0x08
#define MII_CR_RESTART 0x0200
#define _PPC_ESR_PTR 0x02000000
#define V7 1
#define _WRS_CONFIG_ENABLE_TOOL2 1
#define INST_B _OP(18, 0)
#define _EXC_PROG_SRR1_TRAP 0x00020000
#define RIO_FEATURES_EXTADDR_MASK 0xe000
#define SYSFLG_SYS_MODE_DEBUG 0x400
#define AIM_MMU_INIT_PT_NUM 0x40
#define RIO_OP_SUPPORTED_ACLEAR 0x08000000
#define I2C_ERROR_CYCLE_ACKOUT 6
#define MPC85XX_I2C_STATUS_REG_MASK 0xFF
#define _DBCR0_DAC2R_U 0x0002
#define _PPC_L1CSR_PIE 0x00008000
#define PPCEC603 _VX_PPCEC603
#define _PPC_ESR_DLK_U 0x0020
#define LNMSB(x) (((x) >> 16) & 0xff)
#define ENOENT 2
#define SPY_TASKS_MAX 200
#define M_pspLib (163 << 16)
#define MC680X0 _VX_MC680X0
#define _IFLAG_AV_SPEC 0x0400
#define __INCexcPcLibh 
#define M85XX_LTEAR(base) (CAST(VUINT32 *)((base) + 0x50C0))
#define M85XXRIO_ROWBARn(base,n) (CAST(VUINT32 *)(((char*)base) + 0x10C08 + ((n)*0x20)))
#define reg_fp fpReg
#define VXBAF_OPERATION_MASK 0x0000FFFF
#define EXC_VEC_LOW 0x00000
#define FLASH1_ADRS_MASK 0xfc000000
#define EPIC_EIDR_CRIT_INT EPIC_BIT(30)
#define BOOT_NORMAL 0x00
#define M85XXRIO_LCSBA1CSR(base) (CAST(VUINT32 *)(((char*)base) + 0x0005C ))
#define N_SIO_CHANNELS 2
#define FIORBUFSET 24
#define _PPC_SPEFSCR_FOVFE 0x00000004
#define IPCOM_WV_INSTRUMENTATION 
#define EVENT_WIND_EXIT_DISPATCH CLASS1_EVENT(2)
#define SHELL_REMOTE_CONFIG NULL
#define ETIMEDOUT 60
#define INCLUDE_STDIO 
#define _VX_PPC405 2001
#define RTP_ID_TO_PID(rtpId) (((RTP_ID)rtpId)->rtpHandleId)
#define M_shlLib (191 << 16)
#define EPIC_IPI_VEC_REG_INTERVAL 0x10
#define MAX_TASK_ARGS 10
#define FREQ_533_MHZ 533333333
#define M85XX_L2ERRCTL(x) (CAST(VUINT32 *)((x + 0x20E58)))
#define _WRS_CONFIG_TASK_SWITCH_HOOKS 1
#define RIO_CHANNEL_DOORBELL 5
#define _FSYNC 0x2000
#define M_tlsLib (192 << 16)
#define M85XXRIO_ROWAR_RDTYPE_ATOMIC_CLR 0xf
#define MPC85XX_I2C_STATUS_REG_RXAK 0x01
#define DRV_SIO_NS16550 
#define Q_REMOVE(pQHead,pQNode) (*(((Q_HEAD *)(pQHead))->pQClass->removeRtn)) (((Q_HEAD *)(pQHead)), ((Q_NODE *)(pQNode)))
#define MSG_Q_PRIORITY 0x01
#define EPIC_GT_VEC_REG_INTERVAL 0x40
#define S_memLib_INVALID_ADDRESS (M_memLib | 7)
#define WIND_TCB_R10 (WIND_TCB_REGS + REG_SET_GR(10))
#define WIND_TCB_R12 (WIND_TCB_REGS + REG_SET_GR(12))
#define WIND_TCB_R13 (WIND_TCB_REGS + REG_SET_GR(13))
#define MPC85XX_I2C_CONTROL_REG_RSTA 0x04
#define WIND_TCB_R16 (WIND_TCB_REGS + REG_SET_GR(16))
#define MMU_ATTR_VALID_GET(attr) ((attr) & MMU_ATTR_VALID_MSK)
#define WIND_TCB_R19 (WIND_TCB_REGS + REG_SET_GR(19))
#define SYMLINK_MAX 0
#define _VX_TRON 30
#define _EXC_OFF_RES2 0x00b00
#define WV_EVT_PROTO_REV_1_0_FCS 1
#define _WRS_IOCHAR UCHAR
#define EVENT_RTPSUSPEND CLASS3_EVENT(85)
#define _MMU_TLB_SZ_4K 0x00000100
#define EVENTS_INTERRUPTIBLE 0x01
#define SIO_OPEN 0x100A
#define WIND_TCB_R21 (WIND_TCB_REGS + REG_SET_GR(21))
#define WIND_TCB_R23 (WIND_TCB_REGS + REG_SET_GR(23))
#define WIND_TCB_R24 (WIND_TCB_REGS + REG_SET_GR(24))
#define WIND_TCB_R25 (WIND_TCB_REGS + REG_SET_GR(25))
#define WIND_TCB_R26 (WIND_TCB_REGS + REG_SET_GR(26))
#define WIND_TCB_R27 (WIND_TCB_REGS + REG_SET_GR(27))
#define WIND_TCB_R28 (WIND_TCB_REGS + REG_SET_GR(28))
#define WIND_TCB_R29 (WIND_TCB_REGS + REG_SET_GR(29))
#define _GCC_PTRDIFF_T 
#define PCI2_XINT1_LVL 0xb
#define TIP_CONFIG_STRING ""
#define _EXC_INFO_DSISR 0x080
#define _PARM_UTS_MACHINE_MAX 64
#define SHELL_SECURE FALSE
#define M85XXRIO_PWDCSR(base) (CAST(VUINT32 *)(((char*)base) + 0x00044 ))
#define SERIAL_RAPIDIO 
#define FIOUNMOUNT 39
#define _VX__FLTFUNCPTR_DEFINED 
#define S_mmuLib_NOT_GLOBAL_PAGE (M_mmuLib | 15)
#define MPC85XX_I2C_CONTROL_REG_TXAK 0x08
#define M_vxCpuLib (202 << 16)
#define WIND_TCB_R30 (WIND_TCB_REGS + REG_SET_GR(30))
#define WIND_TCB_R31 (WIND_TCB_REGS + REG_SET_GR(31))
#define MMU_D_ADDR_TRANS 1
#define SIO_ERROR_UNKNWN 7
#define OPT_REG_WRITE_READ_BACK_8 0x09
#define _VX_PPC440 2003
#define BOOT_PASSWORD_LEN 20
#define _WRS_CONFIG_USR_INET4_ONLY 1
#define MII_ANAR_100T_4 0x0200
#define IPCOM_ENV_IPCOM 2
#define EVENT_MEMFREE CLASS3_EVENT(31)
#define S_vxdbgLib_ERR_INIT VXDBG_ERROR_TO_ERRNO(VXDBG_ERR_INIT)
#define S_eventLib_ALREADY_REGISTERED (M_eventLib | 0x0003)
#define ___int_ptrdiff_t_h 
#define EVENT_RTP_NORMAL_STATE VXEV25
#define RFI_OPCODE 0x4c000064
#define FIOISATTY 20
#define PCI_ERROR_ENABLE_REG 0x8e08
#define EPIC_IPI_0_VEC_REG (EPIC_CCSROFF + 0x010a0)
#define EPIC_SR_OUT_DB1_INT_VEC (EPIC_SR_OUT_DB1_INT_NUM + EPIC_VEC_IN_IRQ0)
#define __INCmmuLibh 
#define _WRS_VXWORKS_5_X 
#define EPIC_TSEC4RX_INT_VEC (EPIC_TSEC4RX_INT_NUM + EPIC_VEC_IN_IRQ0)
#define VX_USER_MODE 0x0000
#define S_objLib_OBJ_OPERATION_UNSUPPORTED (M_objLib _WRS_BIT_OR 11)
#define SPIN_LOCK_BUSY 1
#define VXB_ACCESS_VOLREG_WRITE 0x0000000a
#define STATEMASK_TO_INDEX(statemask) ((MMU_ATTR_MSK_ID_GET(statemask)) >> MMU_ATTR_MSK_INDEX_SHIFT)
#define M85XX_L2CTL_L2SRAM_BIT 16
#define EVT_TASK_1(evtId,ARG) do { if ( ACTION_IS_SET ) { EVT_TASK_1_T evt_task_1; evt_task_1.args [0] = (int)ARG; eventPointSwHandle(evtId, &evt_task_1, sizeof evt_task_1); } } while ((0))
#define EVT_TASK_2(evtId,ARG1,ARG2) do { if ( ACTION_IS_SET ) { EVT_TASK_2_T evt_task_2; evt_task_2.args [0] = (int)ARG1; evt_task_2.args [1] = (int)ARG2; eventPointSwHandle(evtId, &evt_task_2, sizeof evt_task_2); } } while ((0))
#define EVT_TASK_3(evtId,ARG1,ARG2,ARG3) do { if ( ACTION_IS_SET ) { EVT_TASK_3_T evt_task_3; evt_task_3.args [0] = (int)ARG1; evt_task_3.args [1] = (int)ARG2; evt_task_3.args [2] = (int)ARG3; eventPointSwHandle(evtId, &evt_task_3, sizeof evt_task_3); } } while ((0))
#define EPIC_TSEC3TX_INT_VEC (EPIC_TSEC3TX_INT_NUM + EPIC_VEC_IN_IRQ0)
#define WDB_COMM_MIPC 10
#define _PPC_SPEFSCR_FUNF 0x00000200
#define M85XX_LTEIR(base) (CAST(VUINT32 *)((base) + 0x50B8))
#define INCLUDE_SECONDARY_TSEC_END 
#define I2C_ERROR_CYCLE_STOP 2
#define VM_STATE_MEM_COHERENCY MMU_ATTR_CACHE_COHERENCY
#define _ARCH_STACK_DIR _PARM_STACK_GROWS_DOWN
#define _PPC_MSR_CE 0x00020000
#define EPIC_IN_INT35_VEC_REG (EPIC_CCSROFF + 0x10660)
#define __INCobjLibCommonh 
#define VXDBG_BP_DELETE(bpInfo,retVal) retVal = _func_vxdbgFuncs[VXDBG_BP_DELETE] (bpInfo)
#define __WCHAR_T 
#define _WRS_ADJUST_PC_AFTER_SW_BP(pRegs) 
#define O_DSYNC _FDSYNC
#define MII_MF_PREAMBLE 0xffffffff
#define MPC85XX_I2C_STATUS_REG (0x0000c)
#define I80X86 _VX_I80X86
#define X_OK 1
#define EVENT_ANY_EVENT CONTROL_EVENT(48)
#define _VX_SIMLINUX 190
#define _WRS_CONFIG_SM_OBJ 1
rm D:/WindRiver6.8/sbc8548-t9/SBC8548M-S9_Prj/ipcom_ipdomain
In file included from sysLib.c:477:
hwconf.c:142:2: error: #error our tsec network driver must use TSEC_MDIO
D:\WindRiver6.8\utilities-1.0\x86-win32\bin\make.exe: *** [headerMacros] Error 1
"make headerMacros BSP2PRJ=TRUE TOOL_OPTIONS_FILES_DIR=D:/WindRiver6.8/sbc8548-t9/SBC8548M-S9_Prj TOOL=e500v2gnu VSB_DIR=D:/WindRiver6.8/vxworks-6.8/target/lib" failed

!STACK 0
com.windriver.osconfig.tcl.JTclException: Can not create project file D:\WindRiver6.8\sbc8548-t9\SBC8548M-S9_Prj\SBC8548M-S9_Prj.wpj
	at com.windriver.ide.osconfig.core.model.tcl.TclProjectManagement.createNewProject(TclProjectManagement.java:236)
	at com.windriver.ide.osconfig.ui.screen.BIPWizard$1CreateProjectRunnable.run(BIPWizard.java:446)
	at org.eclipse.jface.operation.ModalContext$ModalContextThread.run(ModalContext.java:121)

!ENTRY org.eclipse.cdt.core 1 0 2016-07-26 08:51:13.005
!MESSAGE Indexed 'SBC8548M-S9_vxWorks' (0 sources, 13 headers) in 0.10 sec: 125 declarations; 290 references; 0 unresolved inclusions; 0 syntax errors; 0 unresolved names (0.00%)

!ENTRY com.windriver.ide.osconfig.core 4 0 2016-07-26 08:51:13.362
!MESSAGE Can not create project file D:\WindRiver6.8\sbc8548-t9\SBC8548M-S9_vxWorks\SBC8548M-S9_vxWorks.wpj
!STACK 0
com.windriver.osconfig.tcl.JTclException: Can not create project file D:\WindRiver6.8\sbc8548-t9\SBC8548M-S9_vxWorks\SBC8548M-S9_vxWorks.wpj
	at com.windriver.ide.osconfig.core.model.tcl.TclProjectManagement.createNewProject(TclProjectManagement.java:236)
	at com.windriver.ide.osconfig.ui.screen.BIPWizard$1CreateProjectRunnable.run(BIPWizard.java:446)
	at org.eclipse.jface.operation.ModalContext$ModalContextThread.run(ModalContext.java:121)

!ENTRY com.windriver.ide.osconfig.core 4 0 2016-07-26 08:51:13.363
!MESSAGE Output of D:\WindRiver6.8\vxworks-6.8\host\x86-win32\bin\vxprj.bat create D:/WindRiver6.8/sbc8548-t9/SB8548M-s9_boot/wrSbc8548 e500v2gnu D:/WindRiver6.8/sbc8548-t9/SBC8548M-S9_vxWorks/SBC8548M-S9_vxWorks.wpj:

Creating Project ...
{parsing the BSP Makefile...}
{extract user defined rules from BSP Makefile...}
{creating the project file...}
{creating a default build spec for PPC32 e500v2gnu ...}
{creating a component configuration...}
In file included from sysLib.c:477:
hwconf.c:142:2: error: #error our tsec network driver must use TSEC_MDIO
D:\WindRiver6.8\utilities-1.0\x86-win32\bin\make.exe: *** [headerMacros] Error 1
Project creation failed : #define EPIC_INT_ACK0_REG (EPIC_CCSROFF + 0x200a0)
#define M_objLib (61 << 16)
#define RIO_FEATURES_SWITCH 0x0008
#define S_objLib_OBJ_UNAVAILABLE (M_objLib _WRS_BIT_OR 2)
#define EPIC_IN_INT47_VEC_REG (EPIC_CCSROFF + 0x107e0)
#define __DBL_MIN_EXP__ (-1021)
#define M85XXRIO_ODRETCR(base) (CAST(VUINT32 *)(((char*)base) + 0x1342C))
#define EMULTIHOP 86
#define EVENT_INT_EXIT (MIN_INT_ID - 1)
#define S_memLib_INVALID_NBYTES (M_memLib | 2)
#define INCLUDE_HOOKS 
#define WIND_TCB_CTR (WIND_TCB_REGS + REG_SET_CTR)
#define MEM_BLOCK_ERROR_EDR_FATAL_FLAG 0x1000
#define EVENT_IOCLOSE CLASS3_EVENT(52)
#define TASK_KERNEL_EXEC_STACK_UNDERFLOW_SIZE 4096
#define EPIC_EX_INT2_DES_REG (EPIC_CCSROFF + 0x10050)
#define _ARCH_SUPPORTS_PROTECT_INTERRUPT_STACK 
#define CLASS_LIST_ADD(list,node) dllAdd (list, node)
#define VX_SMP_INTLOCKED 0x0001
#define M85XX_RAPIDIO_ROWS1R18n(base,n) (CAST(VUINT32 *)(((char*)base) + 0x10C14 + ((n)*0x20)))
#define INST_STWU_SP 0x94210000
#define VME_AM_CSR 0x2f
#define VXB_LOCK_DECL(x) struct vxbLock x = { FALSE, NULL, 0 }
#define MSB(x) (((x) >> 8) & 0xff)
#define VXB_INTR_TRIG_RISING_EDGE (VXB_INTR_TRIG_POS | VXB_INTR_TRIG_EDGE)
#define VXEV_RESERVED 0xff000000
#define _DBCR0_ICMP_U 0x0800
#define EVENT_SEMDELETE CLASS3_EVENT(10)
#define M_hashLib (58 << 16)
#define MSW(x) (((x) >> 16) & 0xffff)
#define vxAtomicClear_inline vxAtomicClear
#define TRG_CLASS_2_ON 0x10000010
#define I2C_CYCLE_STOP(x) i2cCycleMpc85xxStop(x)
#define TLB1CFG 689
#define _WRS_CONFIG_TASK_CREATE_HOOKS 1
#define _WRS_CONFIG_USRSOURCE 1
#define M_netBufLib (115 << 16)
#define WR_ENET1 0xA0
#define M85XXRIO_ODPR(base) (CAST(VUINT32 *)(((char*)base) + 0x11018))
#define EPIC_IN_INT47_DES_REG (EPIC_CCSROFF + 0x107f0)
#define _VX_ARMARCH6_T 1124
#define WR_ENET2 0x1E
#define SIO_ERROR_UFLOW 3
#define _EXC_OFF_DATA 0x00300
#define INCLUDE_ANSI_MATH 
#define PHY_100BASE_TX_FDX 0x03
#define VXB_BUSID_LOCAL 1
#define INCLUDE_WDB_EVENTS 
#define EVENT_MSGSREPLY CLASS3_EVENT(40)
#define _T_WCHAR_ 
#define IPCOM_FILE_IPCOM 2
#define EPIC_MIDR_P1_INT EPIC_BIT(1)
#define INCLUDE_FS_MONITOR 
#define INCLUDE_ANSI_ASSERT 
#define _PPC_ESF_DSISR (_PPC_ESF_DAR + _PPC_REG_SIZE)
#define S_taskLib_ILLEGAL_STACK_INFO (M_taskLib | 113)
#define EPIC_IN_VEC_REG_INTERVAL 0x20
#define FIOUPDATE 65
#define F_CNVT 12
#define VX_COPROC6_TASK 0x20000000
#define WIND_TCB_P2 WIND_TCB_R5
#define EPIC_IN_INT28_VEC_REG (EPIC_CCSROFF + 0x10580)
#define _ARCH_FLT_MANT_DIG 24
#define M_qPriMaskLib (130 << 16)
#define COLDFIRE _VX_COLDFIRE
#define EPIC_TM_B2_VEC_REG (EPIC_CCSROFF + 0x021a0)
#define _WRS_CONFIG_COMPONENT_VXTESTV2 1
#define CORE_DUMP_MAX_HOOKS 10
#define _IFORM_SC_1 2
#define CSRR0 58
#define CSRR1 59
#define ALIGN_STACK _VX_ALIGN_STACK
#define _BSD_SIZE_T_DEFINED_ 
#define _DATA_CACHE 1
#define MMU_ATTR_SUP_DATA (MMU_ATTR_SUP_RW)
#define INCLUDE_IPAIP 
#define PCI_ERROR_ADRS_CAPTURE_REG 0x8e10
#define S_iosLib_INVALID_FILE_DESCRIPTOR EBADF
#define EPIC_RES35_INT_NUM 35
#define __INCb_ino_th 
#define PVR_VALUE 0x80210030
#define __CHAR_BIT__ 8
#define _VOP(opcd,xo) ((opcd << 26) + xo)
#define SYM_MASK_ALL 0xff
#define Q_PRI_LIST qPriListClassId
#define INST_STW_SP 0x90010000
#define MMU_STATE_MASK_VALID 0x80000000
#define M85XXRIO_IDQEPAR(base) (CAST(VUINT32 *)(((char*)base) + 0x13474 ))
#define _POSIX_TIMER_MAX 32
#define _VX_ALIGN_MEMORY _ARCH_ALIGN_MEMORY
#define METHOD_DECL(NAME) IMPORT char NAME ##_desc[];
#define SHRT_MAX 32767
#define MIN_INT_ID 102
#define VXB_REG_IO 0x00000001
#define _VX_ARM810 123
#define VM_STATE_WBACK MMU_ATTR_CACHE_COPYBACK
#define ROOT_STACK_SIZE (24000)
#define EPIC_IN_INT28_DES_REG (EPIC_CCSROFF + 0x10590)
#define TOOL_HEADER(file) TOOL_HDR(_VX_TOOL_FAMILY,file)
#define _FOPEN (-1)
#define VXB_ACCESS_REG_READ8 0x00000002
#define _WRS_ALIGNOF(x) __alignof__(x)
#define EACCES 13
#define VME_AM_EXT_SUP_PGM 0x0e
#define EVENT_RTPSIGWRAPPER CLASS3_EVENT(92)
#define MII_MF_OP_LEN 0x2
#define MII_SR_EXT_STS 0x0100
#define NONE (-1)
#define EPIC_L2CACHE_INT_VEC (EPIC_L2CACHE_INT_NUM + EPIC_VEC_IN_IRQ0)
#define VM_CTX_MASK_DELETE 0x2
#define EVT_CTX_NODISP(TASKID,PRI,PRI_NORMAL) do { if (ACTION_IS_SET) { EVENT_WIND_EXIT_NODISPATCH_T evt_ctx_nodisp; evt_ctx_nodisp.taskId = TASKID; eventPointSwHandle((PRI_NORMAL > PRI ? EVENT_WIND_EXIT_NODISPATCH_PI : EVENT_WIND_EXIT_NODISPATCH), &evt_ctx_nodisp, sizeof evt_ctx_nodisp); } } while ((0))
#define S_objLib_OBJ_INVALID_ARGUMENT (M_objLib _WRS_BIT_OR 17)
#define _PPC_MMUCSR0_IL1MMU_FI 0x00000010
#define _PPC_MSR_WE 0x00040000
#define _STACK_ALIGN_SIZE _CPU_STACK_ALIGN_SIZE
#define EDESTADDRREQ 40
#define _PPC_MAS0_TLBSEL_MASK 0x30000000
#define M85XXRIO_OMR(base) (CAST(VUINT32 *)(((char*)base) + 0x11000))
#define INCLUDE_IO_POSIX 
#define EVENT_SIGNAL CLASS3_EVENT(24)
#define __sputc(c,p) ((HANDLE_VERIFY(p, handleTypeFile) != OK) ? (EOF) : (--(p)->_w < 0 ? (p)->_w >= (p)->_lbfsize ? (*(p)->_p = (c)), *(p)->_p != '\n' ? (int)*(p)->_p++ : __swbuf('\n', p) : __swbuf((int)(c), p) : (*(p)->_p = (c), (int)*(p)->_p++)))
#define MMU_PAGE_MAP (*(mmuLibFuncs.mmuPageMap))
#define PARENB 0x40
#define FIOCOMMITPERIODSETFS 69
#define EVT_OBJ_SM_MSGQ(EVTID,ARG1,ARG2,ARG3,ARG4,ARG5,NPARAMS) do { if ( ACTION_IS_SET ) { EVT_SM_MSGQ_T evt_sm_msgq; evt_sm_msgq.args [0] = (int)ARG1; evt_sm_msgq.args [1] = (int)ARG2; evt_sm_msgq.args [2] = (int)ARG3; evt_sm_msgq.args [3] = (int)ARG4; evt_sm_msgq.args [4] = (int)ARG5; evt_sm_msgq.nParams = NPARAMS; eventPointSwHandle(EVTID, &evt_sm_msgq, sizeof evt_sm_msgq); } } while ((0))
#define KERNEL_LOCK_OBJ_UNLOCK(classId,lockLevel) do { KERNEL_LOCK(); OBJ_UNLOCK(classId,lockLevel); } while ((0))
#define INCLUDE_GENERICPHY 
#define KERNEL_LOCK_OWNED_BY_ME() (kernelLockOwnedByMe())
#define L2SRAM_ADDR 0x7FF80000
#define S_objLib_OBJ_NOT_FOUND (M_objLib _WRS_BIT_OR 16)
#define MMU_ATTR_MSK_INDEX_SHIFT 5
#define MIPS _VX_MIPS
#define stderr (*__stderr())
#define _PPC_ESF_T10 _PPC_ESF_R24
#define _PPC_ESF_T11 _PPC_ESF_R25
#define _PPC_ESF_T12 _PPC_ESF_R26
#define _PPC_ESF_T13 _PPC_ESF_R27
#define _PPC_ESF_T14 _PPC_ESF_R28
#define _PPC_ESF_T15 _PPC_ESF_R29
#define _PPC_ESF_T16 _PPC_ESF_R30
#define _PPC_ESF_T17 _PPC_ESF_R31
#define STD_IN 0
#define _VX_ARM710A 121
#define SM_OBJ_TASK_PRIORITY 40
#define PCISTAT_ADRS (PCI_CFG_BASE + 0x06)
#define EPIC_MAX_GT_A_IRQS 4
#define M85XX_L2CTL_L2INTDIS_MSK 0x00080000
#define va_start(v,l) __builtin_va_start(v,l)
#define S_vxdbgLib_INVALID_PARAMS VXDBG_ERROR_TO_ERRNO(VXDBG_ERR_INVALID_PARAMS)
#define FIOPATHCONF 61
#define EPIC_IIDR_EX_PIN EPIC_BIT(31)
#define MMU_PAGE_SIZE_GET (*(mmuLibFuncs.mmuPageSizeGet))
#define EVENT_EDR_ERROR_INJECT CLASS3_EVENT(82)
#define EVT_TIMER_ROLLOVER(evtId) EVT_CTX_0(evtId)
#define ppcIntCtlr0Num NELEMENTS(ppcIntCtlr0Resources)
#define INST_MTSPR_MASK 0xfc1fffff
#define STACK_NAME STACK_NAME_V4_V6
#define EMLINK 31
#define VM_CONTEXT_BUFFER_WRITE(context,fromAddr,toAddr,nbBytes) ((vmLibInfo.pVmBufferWriteRtn == NULL) ? (memcpy((void *)toAddr, (void *)fromAddr, nbBytes), OK) : ((*vmLibInfo.pVmBufferWriteRtn) (context, (VIRT_ADDR) fromAddr, (VIRT_ADDR) toAddr, nbBytes)))
#define TRG_ANY_EVENT_INDEX 5
#define FIOWHERE 8
#define LAWAR_SIZE_8KB 0x0000000C
#define EVENT_IOOPEN CLASS3_EVENT(48)
#define FIOUNSELECT 29
#define EPIC_MSG_INT1_VEC_REG (EPIC_CCSROFF + 0x11620)
#define _WRS_SUP_STACK_RELOC(p) p
#define INCsysMotI2ch 
#define EVENT_SEMMGIVEFORCE CLASS3_EVENT(14)
#define Q_CALIBRATE(pQHead,keyDelta) (*(((Q_HEAD *)(pQHead))->pQClass->calibrateRtn)) (((Q_HEAD *)(pQHead)), ((int)(keyDelta)))
#define TLB_LOCK_BIT 26
#define MCORE300 _VX_MCORE300
#define M85XX_OR2(base) (CAST(VUINT32 *)((base) + 0x5014))
#define _FCREAT 0x0200
#define M85XX_OR3(base) (CAST(VUINT32 *)((base) + 0x501c))
#define __DBL_DENORM_MIN__ 4.9406564584124654e-324
#define MMU_STATE_SUP_RWX (_MMU_SR|_MMU_SW|_MMU_SX)
#define ALIGNED(x,align) (((int)(x) & (align - 1)) == 0)
#define M85XX_OR5(base) (CAST(VUINT32 *)((base) + 0x502C))
#define _WRS_CHECK_MACHINE_TYPE if (pHdr->e_machine != EM_ARCH_MACHINE && pHdr->e_machine != EM_ARCH_MACH_ALT) return (ERROR)
#define _PPC_TCR_FIE_U 0x0080
#define _PARM_EXIT_SUCCESS 0
#define EPIC_SMSG_INT2_VEC_REG (EPIC_CCSROFF + 0x11c40)
#define M_pgPoolVirtLib (183 << 16)
#define M85XX_OR6(base) (CAST(VUINT32 *)((base) + 0x5034))
#define REG_SET_GRBASE 0x00
#define LAWAR_SIZE_8MB 0x00000016
#define F_RDLCK 1
#define S_vmLib_ADDR_IN_GLOBAL_SPACE (M_vmLib | 4)
#define _ARCH_FLT_EPSILON 1.19209290e-07F
#define M_qPriHeapLib (62 << 16)
#define EPIC_IPI_1_VEC_REG (EPIC_CCSROFF + 0x010b0)
#define INCLUDE_IO_BASIC 
#define _PPC_ESF_RES_OFF_H (_PPC_ESF_VEC_OFF + 0)
#define SHRT_MIN (-32767-1)
#define ALIGN_MEMORY _VX_ALIGN_MEMORY
#define M85XXRIO_ROWAR_WRTYPE_SWRITE 0x3
#define __sfeof(p) ((HANDLE_VERIFY(p, handleTypeFile) != OK) ? (FALSE) : (((p)->_flags & __SEOF) != 0))
#define MII_SR_TX_HALF_DPX 0x2000
#define EPIC_VENDOR_ID_REG (EPIC_CCSROFF + 0x01080)
#define EPIC_MSG_INT1_DES_REG (EPIC_CCSROFF + 0x11630)
#define _VSB_CONFIG_FILE "D:/WindRiver6.8/vxworks-6.8/target/lib/h/config/vsbConfig.h"
#define SIO_HW_OPTS_SET 0x1005
#define MMU_ATTR_SUP_TEXT_W (MMU_ATTR_SUP_RWX)
#define INTERRUPT_STACK_OVERFLOW_SIZE 4096
#define EPIC_IN_INT20_VEC_REG (EPIC_CCSROFF + 0x10480)
#define EXC_MSG_OFFSET 0x4300
#define SYM_COMM 0x20
#define INCLUDE_NETMASK_GET 
#define S_objLib_OBJ_DESTROY_ERROR (M_objLib _WRS_BIT_OR 14)
#define _VOIDFUNCPTR_DEFINED 
#define INCLUDE_ANSI_LOCALE 
#define SEM_NO_ID_VALIDATE 0x40
#define M85XXRIO_ROWAR_WRTYPE_NWRITE 0x4
#define OPT_CRMOD 0x02
#define EPIC_SMSG_INT2_DES_REG (EPIC_CCSROFF + 0x11c50)
#define MII_MF_OP_WR 0x1
#define OPT_7_BIT 0x08
#define SYSFLG_NO_SYS_CONTROLLER 0x01
#define VXB_INST_CONNECT_DONE 0x00000004
#define _FREAD 0x0001
#define CACHE_CMD_UNLOCK_ALL 0x0a000000
#define __signed signed
#define _FEXLOCK 0x0100
#define OPT_REG_WRITE16 0x06
#define INCLUDE_DEVICE_MANAGER 
#define _PPC_ESF_CR _PPC_ESF_R(GREG_NUM + 4)
#define AM29200 _VX_AM29200
#define EPIC_IN_INT20_DES_REG (EPIC_CCSROFF + 0x10490)
#define _MMU_TLB_PERM_UR 0x00010000
#define _FNDELAY 0x0004
#define VME_BUS BUS_TYPE_VME
#define VXB_ACCESS_CFG_WRITE 0x00000013
#define FD_ISSET(n,p) _VX_FD_ISSET (n, p)
#define IPCOM_USE_FILE IPCOM_FILE_NATIVE
#define S_objLib_OBJ_ID_ERROR (M_objLib _WRS_BIT_OR 1)
#define EPIC_PRIORITY_MIN 0
#define EVENT_WINDDELETE CLASS2_EVENT(1)
#define S_objLib_OBJ_RENAME_NOT_ALLOWED (M_objLib _WRS_BIT_OR 13)
#define OPT_REG_WRITE32 0x07
#define _EXC_INFO_XER 0x010
#define _PPC_TSR_ENW_U 0x8000
#define LAWAR_TGTIF_PCIEX 0x00200000
#define EPIPE 32
#define FRV _VX_FRV
#define _PPC_SPEFSCR_FDBZE 0x00000010
#define S_iosLib_DRIVER_GLUT ENOMEM
#define __DBL_MIN_10_EXP__ (-307)
#define RIO_DIRECTION_INBOUND 1
#define SM_OBJ_TASK_OPTIONS 0
#define M85XXRIO_PRTOCCSR(base) (CAST(VUINT32 *)(((char*)base) + 0x00124 ))
#define ENOTTY 25
#define EPIC_IIVPR_POLARITY(p) ((p) << 23)
#define _VX_MCF5400 162
#define _IFORM_400_2 58
#define PCI2_INBOUND_ATTR_REG1(base) CVPUINT32(base, 0x9DF0)
#define EPIC_MIDR_P0_INT EPIC_BIT(0)
#define L2SRAM_WINDOW_SIZE 0x80000
#define S_taskLib_TASK_VAR_NOT_FOUND (M_taskLib | 107)
#define _FASYNC 0x0040
#define OFFSET(structure,member) ((int) &(((structure *) 0) -> member))
#define L_cuserid _PARM_L_cuserid
#define DOSFS_DEFAULT_MAX_FILES 20
#define Q_RESORT(pQHead,pQNode,newKey) (*(((Q_HEAD *)(pQHead))->pQClass->resortRtn)) (((Q_HEAD *)(pQHead)), ((Q_NODE *)(pQNode)), ((ULONG)(newKey)))
#define _PPC_ESR_PTR_U 0x0200
#define EVENT_IOREAD CLASS3_EVENT(49)
#define VXB_INTR_TRIG_EDGE 0x10
#define atomic32Set_inline atomic32Set
#define VXBAF_CPU_PIPE_FLUSH 0x00000010
#define _IFLAG_603_SPEC 0x0020
#define _VX_FD_CLR(n,p) ((p)->fds_bits[(n)/_VX_NFDBITS] &= ~(1 << ((n) % _VX_NFDBITS)))
#define MCF5200 _VX_MCF5200
#define __GNUC_PATCHLEVEL__ 2
#define OPT_REG_WRITE64 0x08
#define S_spinLockLib_INVALID_OPERATION (M_spinLockLib | 2)
#define M_netDrv (41 << 16)
#define _VX_SH7600 132
#define M_devCfgLib (129 << 16)
#define M_loadFileLib (193 << 16)
#define _VX_AM29XXX 50
#define _ARCH_DBL_MAX_10_EXP 308
#define MII_100MBS 100000000
#define M_dhcpcLib (106 << 16)
#define __INCb_struct_timespech 
#define FLASH_SECTOR_MASK 0xfffe0000
#define M85XXRIO_ROWTAR_OFFSET(n) (0x10C00 + ((n)*0x20))
#define EVENT_MEMPARTCREATE CLASS3_EVENT(32)
#define _LIMITS_H___ 
#define DS_1D_5 7
#define DS_1D_8 3
#define MMU_STATE_EXECUTE 0x00003000
#define _WRS_CONFIG_COMPONENT_USR_APPS 1
#define _EXC_OFF_RES0 0x00000
#define _EXC_OFF_RES1 0x00a00
#define MEM_ALLOC_ERROR_EDR_FATAL_FLAG 0x400
#define _EXC_OFF_RES3 0x00e00
#define PENTIUM2 _VX_PENTIUM2
#define PENTIUM3 _VX_PENTIUM3
#define PENTIUM4 _VX_PENTIUM4
#define _DEFINED_nlink_t 
#define _WRS_SDA_DATA __attribute__ ((__section__ (".sdata")))
#define _WCHAR_T_DEFINED 
#define EPIC_MIVPR_VECTOR_MSK (0xffff)
#define O_ACCMODE (O_RDONLY|O_WRONLY|O_RDWR)
#define MMU_STATE_WRITABLE 0x00000c00
#define SPIN_LOCK_ISR_INIT(x,y) (spinLockIsrInit(x, y))
#define PCI_ERROR_GASKET_TIMER_REG 0x8e20
#define INCLUDE_DOSFS 
#define TASK_UNSAFE() ( taskUnsafe () )
#define M_rpmLib (159 << 16)
#define PCI_ATTR_WS_128K 0x00000010
#define M_intLib (67 << 16)
#define FS_NAMES_ATA_SECONDARY_SLAVE ""
#define EPIC_DMA2_INT_VEC (EPIC_DMA2_INT_NUM + EPIC_VEC_IN_IRQ0)
#define _PPC_SPEFSCR_FDBZH 0x04000000
#define VXB_PARAM_FUNCPTR 0x0005
#define BUS 0
#define VX_USR_TASK_OPTIONS (VX_USR_TASK_OPTIONS_BASE | VX_COPROC1_TASK | VX_COPROC2_TASK | VX_COPROC3_TASK | VX_COPROC4_TASK | VX_COPROC5_TASK | VX_COPROC6_TASK | VX_COPROC7_TASK | VX_COPROC8_TASK)
#define _PPC_SPEFSCR_FDBZS 0x00080000
#define FREE_RAM_ADRS (end)
#define S_semLib_INVALID_INITIAL_COUNT (M_semLib | 105)
#define M85XX_L2ERRINJHI(x) (CAST(VUINT32 *)((x + 0x20E00)))
#define M_rtpLib (178 << 16)
#define CONTROL_EVENT(id) (MIN_CONTROL_ID + id)
#define OPT_TERMINAL (OPT_ECHO | OPT_CRMOD | OPT_TANDEM | OPT_MON_TRAP | OPT_7_BIT | OPT_ABORT | OPT_LINE)
#define MMU_STATE_GET (*(mmuLibFuncs.mmuStateGet))
#define _PPC_ESF_LR _PPC_ESF_R(GREG_NUM + 1)
#define M_coreDumpLib (197 << 16)
#define VM_CTX_MASK_L2_FREE 0x4
#define M_errno (0 << 16)
#define __vxworks 1
#define M85XXRIO_IFQEPAR(base) (CAST(VUINT32 *)(((char*)base) + 0x11074))
#define M_xcomLib (164 << 16)
#define VM_PAGE_UNMAP(context,virtAddr,len) ((vmLibInfo.pVmPageUnMapRtn == NULL) ? (ERROR) : ((*vmLibInfo.pVmPageUnMapRtn) (context, virtAddr, len)))
#define VXB_HANDLE_OP_READ 0x00
#define LAWAR_SIZE_1GB 0x0000001D
#define NUM_PCI1_SLOTS 0x1
#define M_hsmsLib (157 << 16)
#define MSG_PRI_DONT_CARE MSG_PRI_URGENT
#define DDR_SDRAM_MODE_CFG_2 0x11c
#define _DEFINED_blksize_t 
#define PCIEX_INBOUND_BASE_ADRS_REG3(base) CVPUINT32(base, 0xaDA8)
#define EVENT_WIND_EXIT_NODISPATCH_PI CLASS1_EVENT(5)
#define _IFLAG_SPEC (_IFLAG_4XX_SPEC | _IFLAG_6XX_SPEC | _IFLAG_AV_SPEC | _IFLAG_E500_SPEC | _IFLAG_FP_SPEC)
#define VM_CONTEXT_UNION(context1,context2) ((vmLibInfo.pVmCtxUnionRtn == NULL) ? (ERROR) : ((*vmLibInfo.pVmCtxUnionRtn) (context1, context2)))
#define MMU_ATTR_CACHE_WRITETHRU 0x00000180
#define I960 _VX_I960
#define REG_SET_PG_TBL_PTR (REG_SET_XER + 4)
#define _VX_FD_MASK_DEFINED 
#define IPCOM_USE_RAM_DISK 
#define EPIC_RES35_INT_VEC (EPIC_RES35_INT_NUM + EPIC_VEC_IN_IRQ0)
#define _WRS_CONFIG_FORMATTED_OUT 1
#define _VX_FD_ISSET(n,p) ((p)->fds_bits[(n)/_VX_NFDBITS] & (1 << ((n) % _VX_NFDBITS)))
#define PGCCSR_MASTER 0x40000000
#define _WRS_CONFIG_COMPONENT_VXCOREIP 1
#define WIND_CLASS_RENAME_NOT_ALLOWED 0x02
#define AIM_MMU_INIT_RT_INCR 0x10
#define EPIC_DDR_INT_NUM 2
#define MII_CR_LOOPBACK 0x4000
#define DDR_ECC_ERR_INJECT 0xe08
#define MAX_RESERVE_ID 39999
#define INCLUDE_VX_TRADITIONAL_SCHEDULER 
#define STAT_TBL_HASH_SIZE_LOG2 6
#define OBJ_INSTRUMENTATION_DISABLE(objId) ( ((OBJ_CORE *)(objId))->handle.attributes &= ~WIND_OBJ_INSTRUMENTED )
#define EPIC_IN_INT3_VEC_REG (EPIC_CCSROFF + 0x10260)
#define S_vxdbgLib_INVALID_ALIGNMENT VXDBG_ERROR_TO_ERRNO(VXDBG_ERR_INVALID_ALIGNMENT)
#define WV_CLASS_3_ON 0x10000007
#define ARMARCH6_T _VX_ARMARCH6_T
#define INUM_TO_IVEC(intNum) ((VOIDFUNCPTR *) (intNum))
#define MII_MF_ST_LEN 0x2
#define _WRS_BLIB_ALIGNMENT 3
#define _PPC_ESF_P0 _PPC_ESF_R3
#define _PPC_ESF_P1 _PPC_ESF_R4
#define _PPC_ESF_P2 _PPC_ESF_R5
#define _PPC_ESF_P3 _PPC_ESF_R6
#define _PPC_ESF_P4 _PPC_ESF_R7
#define _PPC_ESF_P5 _PPC_ESF_R8
#define _PPC_ESF_P6 _PPC_ESF_R9
#define I80486 _VX_I80486
#define M85XX_L2ERRINJLO(x) (CAST(VUINT32 *)((x + 0x20E04)))
#define EVENT_OBJ_SEMFLUSH CLASS2_EVENT(22)
#define BOOT_FLASH ON_BOARD_FLASH
#define howmany(x,y) _VX_howmany (x,y)
#define _ARCH_LDBL_DIG 15
#define _PPC_ESF_PC _PPC_ESF_R(GREG_NUM + 3)
#define NAME_MAX _PARM_NAME_MAX
#define __INClimitsh 
#define SIO_MODE_POLL 1
#define SCHAR_MAX 127
#define PCI_ATTR_WS_256M 0x0000001b
#define VXB_BUSID_NEXUS 1
#define _ARCH_PPC 1
#define SPRG6_R 262
#define LBC_SDRAM_LOCAL_SIZE_MASK 0xfc000000
#define VXBAF_BIT_REVERSE_IN_BYTE 0x00000040
#define SPRG6_W 278
#define M_routeLib (44 << 16)
#define MEM_BLOCK_ERROR_LOG_FLAG 0x80
#define __UINTMAX_TYPE__ long long unsigned int
#define EPIC_PRIORITY_MAX 15
#define WDB_PROXY_TASK_STACK_SIZE 10000
#define EPIC_LBC_INT_VEC (EPIC_LBC_INT_NUM + EPIC_VEC_IN_IRQ0)
#define EPIC_TM_A3_DES_REG (EPIC_CCSROFF + 0x011f0)
#define SEM_M_SEND_EVENTS 0x8
#define EPIC_TSEC3ERR_INT_NUM 17
#define __INCdllLibh 
#define SIO_HUP 0x100B
#define M85XXRIO_RIWAR_LOCAL_W_NO_SNOOP 4
#define EPIC_TSEC3RX_INT_NUM 16
#define RIO_OP_SUPPORTED_ATSWAP 0x00800000
#define _PPC_ESF_R1 _PPC_ESF_R(1)
#define _PPC_ESF_R2 _PPC_ESF_R(2)
#define _PPC_ESF_R5 _PPC_ESF_R(5)
#define _PPC_ESF_R6 _PPC_ESF_R(6)
#define _PPC_ESF_R9 _PPC_ESF_R(9)
#define EPIC_TSEC2TX_INT_NUM 19
#define __INCexcLibh 
#define M_remLib (37 << 16)
#define INCLUDE_FTP 
#define EPIC_IN_INT3_DES_REG (EPIC_CCSROFF + 0x10270)
#define _PPC_L1CFG_BSIZE_V(x) (x >> 19)
#define S_classLib_NO_CLASS_DESTROY (M_classLib | 2)
#define sioPollOutput(pSioChan,thisChar) ((pSioChan)->pDrvFuncs->pollOutput (pSioChan, thisChar))
#define LAWAR_SIZE_1MB 0x00000013
#define __INCb_pid_th 
#define CORE_DUMP_REGION_SIZE pmFreeSpace(pmDefaultArena)
#define __CHAR_UNSIGNED__ 1
#define _PPC_ESF_SP _PPC_ESF_R1
#define AIM_MMU_INIT_RT_NUM 0x10
#define PCI_DEV_ID_82XX 0x00031057
#define _VX_FD_SET_DEFINED 
#define _PPC_ESF_T0 _PPC_ESF_R14
#define _PPC_ESF_T1 _PPC_ESF_R15
#define _PPC_ESF_T2 _PPC_ESF_R16
#define _PPC_ESF_T3 _PPC_ESF_R17
#define _PPC_ESF_T4 _PPC_ESF_R18
#define _PPC_ESF_T5 _PPC_ESF_R19
#define _PPC_ESF_T6 _PPC_ESF_R20
#define _PPC_ESF_T7 _PPC_ESF_R21
#define _PPC_ESF_T8 _PPC_ESF_R22
#define _PPC_ESF_T9 _PPC_ESF_R23
#define VXBAF_RETRIEVE_UPSTREAM_BUS_PTR(pDevInfo,pUpstreamDevInfo) { if (pDevInfo->pParentBus != NULL) { pUpstreamDevInfo = pDevInfo->pParentBus->pCtlr; } else pUpstreamDevInfo = NULL; }
#define MMUCSR0 1012
#define EPIC_MSR_ST_MSK 0xf
#define _WRS_CONFIG_COMPONENT_IPSNTP 1
#define MII_PHY_TBL 0x0020
#define OPT_RAW 0
#define MII_EXT_STAT_1000T_FD 0x2000
#define __SIZE_T 
#define EVENT_OBJ_MSGRECEIVE CLASS2_EVENT(24)
#define _POSIX_PIPE_BUF 512
#define IPCOM_GETLINE_HISTORY_FILENAME ".ipcom_getline_history"
#define CS3_CONFIG 0x08C
#define CLASS_LIST_INFO(list,max,element) { DL_NODE * pNode ; pNode = DLL_FIRST (&list); while ((pNode != NULL) && (--max >= 0)) { *(element++) = (OBJ_ID)((int)pNode - OFFSET (OBJ_CORE, classNode)); pNode = DLL_NEXT (pNode); } }
#define SW_MMU_ENABLE FALSE
#define PCI_ATTR_WS_8M 0x00000016
#define __INCvxWorksh 
#define _DEFINED_off_t 
#define M_tftpLib (75 << 16)
#define _WRS_ABSOLUTE_END return OK; }
#define S_cacheLib_UNSUPPORTED (M_cacheLib | 2)
#define PHY_100BASE_TX 0x02
#define INCLUDE_SEM_COUNTING_CREATE 
#define _WRS_CONFIG_MMU_BASIC 1
#define _WRS_CONFIG_COMPONENT_IPMCRYPTO 1
#define _VX_G100 31
#define INCLUDE_ANSI_ALL 
#define WDB_TTY_DEV_NAME "/tyCo/1"
#define MMU_ATTR_PROT_USR_WRITE 0x00000010
#define MII_EXT_STAT_1000T_HD 0x1000
#define _WRS_ABSOLUTE_(name,value) __asm__ (".globl\t"#name "\n\t.equ\t"#name",%0" "\n\t.type\t"#name",@object" :: "n"(value))
#define MAX_RTI_RESERVE_ID 39999
#define _IFORM_405_SX 61
#define RIO_IMPLEMENTATION_SPACE_TOP 0xfffffc
#define MEM_ROUND_DOWN(x) ROUND_DOWN(x, _ALLOC_ALIGN_SIZE)
#define MII_PHY_ID2_REG 0x3
#define EPIC_IN_INT33_VEC_REG (EPIC_CCSROFF + 0x10620)
#define PPC405F _VX_PPC405F
#define _PPC_SPEFSCR_SOV 0x00008000
#define M85XX_MAR(base) (CAST(VUINT32 *)((base) + 0x5068))
#define MMU_STATE_EXECUTE_NOT 0x00000000
#define Q_INFO(pQHead,nodeArray,maxNodes) (*(((Q_HEAD *)(pQHead))->pQClass->infoRtn)) (((Q_HEAD *)(pQHead)),((int *)(nodeArray)),((int)(maxNodes)))
#define PCI_ATTR_WS_64K 0x0000000F
#define PCI_ATTR_WS_64M 0x00000019
#define SCHAR_MIN (-128)
#define ENOMSG 80
#define _PC_PRIO_IO 13
#define EXIT_FAILURE _PARM_EXIT_FAILURE
#define epic0Num NELEMENTS(epic0Resources)
#define WDB_SPAWN_PRI 100
#define _DEFINED_timer_t 
#define M85XXRIO_RIWAR_LOCAL_W_SNOOP_CORE 5
#define _SIZE_T_DEFINED_ 
#define __eventPointStubLibPh 
#define __INCvxbSysEpich 
#define VXDBG_MEM_FUNCS_ARE_INSTALLED() (_func_vxdbgFuncs[VXDBG_READ] != NULL)
#define __SCHAR_MAX__ 127
#define SYM_IS_UNDF(symType) (!(symType))
#define MII_NP_ACK1 0x4000
#define MII_NP_ACK2 0x1000
#define MAX_REBOOT_HOOKS 8
#define MII_ANAR_PAUSE 0x0400
#define _DBSR_TRAP 0x01000000
#define _PPC_ESR_PIL 0x08000000
#define M85XXRIO_ROWS1R18_OFFSET(n) (0x10C14 + ((n)*0x20))
#define _STACK_GROWS_DOWN (-1)
#define NFDBITS _VX_NFDBITS
#define EPIC_SMSG_INT4_DES_REG (EPIC_CCSROFF + 0x11c90)
#define SYM_UNDF 0x0
#define _DEFINED_off_t64 
#define GREG_NUM 32
#define M85XX_MRTPR(base) (CAST(VUINT32 *)((base) + 0x5084))
#define CACHE_SNOOP_ENABLE 0x10
#define M85XXRIO_HBDIDLCSR_OFFSET 0x68
#define M85XX_MDR(base) (CAST(VUINT32 *)((base) + 0x5088))
#define EPIC_IN_INT33_DES_REG (EPIC_CCSROFF + 0x10630)
#define STD_ERR 2
#define _ARCH_MULTIPLE_CACHELIB FALSE
#define M_rngLib (19 << 16)
#define _VX_I960 20
#define IPCOM_PROC_STACK_LARGE IPCOM_STACK_ADJUST(8192)
#define M85XXRIO_IDMR(base) (CAST(VUINT32 *)(((char*)base) + 0x13460 ))
#define VM_STATE_WRITABLE MMU_ATTR_SUP_RWX
#define SEM_BIN_OPTIONS_MASK (SEM_Q_FIFO | SEM_Q_PRIORITY | SEM_EVENTSEND_ERR_NOTIFY | SEM_INTERRUPTIBLE)
#define JOB_TASK_STACK_SIZE 8000
#define EPIC_OPT_POLAR_MSK EPIC_EIVPR_INTR_POLARITY
#define _DBSR_BRT_U 0x0400
#define IVPR 63
#define _DEFINED_blkcnt_t 
#define EPIC_GTVPR_VECTOR_MSK (0xffff)
#define FIOCHKDSK 48
#define EPIC_GCR_MODE_MIXED EPIC_BIT(29)
#define WDB_PROXY_PORT 0x4444
#define S29GL_FLASH_BIT 1
#define EVENT_DPRINTF_LOG CLASS3_EVENT(239)
#define IPCOM_FILE_NONE 1
#define _WRS_ENABLE_IDLE_INTS {intUnlock (taskMsrDefault);}
#define _DBSR_ICMP 0x08000000
#define WIND_OBJ_NAMED 0x80
#define _DBSR_DAC2R 0x00020000
#define PCI_OUTBOUND_BASE_ADRS_REG0(base) CVPUINT32(base, 0x8c08)
#define PCI_OUTBOUND_BASE_ADRS_REG1(base) CVPUINT32(base, 0x8c28)
#define SEM_DELETE_SAFE 0x04
#define PCI_OUTBOUND_BASE_ADRS_REG3(base) CVPUINT32(base, 0x8c68)
#define PCI_OUTBOUND_BASE_ADRS_REG4(base) CVPUINT32(base, 0x8c88)
#define SYM_BSS 0x10
#define MPC85XX_I2C_CONTROL_REG_MSTA 0x20
#define EVENT_TASKPRIORITYSET CLASS3_EVENT(3)
#define TOOL e500v2gnu
#define SEM_CNT_OPTIONS_MASK SEM_BIN_OPTIONS_MASK
#define EVT_OBJ_1(OBJ,CLASS,evtId,ARG1) do { if ( ACTION_IS_SET ) { EVT_OBJ_1_T evt_obj_1; evt_obj_1.objId = OBJ; evt_obj_1.classId = CLASS; evt_obj_1.args [0] = (int)ARG1; eventPointSwHandle(evtId, &evt_obj_1, sizeof evt_obj_1); } } while ((0))
#define EVT_OBJ_2(OBJ,CLASS,evtId,ARG1,ARG2) do { if ( ACTION_IS_SET ) { EVT_OBJ_2_T evt_obj_2; evt_obj_2.objId = OBJ; evt_obj_2.classId = CLASS; evt_obj_2.args [0] = (int)ARG1; evt_obj_2.args [1] = (int)ARG2; eventPointSwHandle(evtId, &evt_obj_2, sizeof evt_obj_2); } } while ((0))
#define EVT_OBJ_3(OBJ,CLASS,evtId,ARG1,ARG2,ARG3) do { if ( ACTION_IS_SET ) { EVT_OBJ_3_T evt_obj_3; evt_obj_3.objId = OBJ; evt_obj_3.classId = CLASS; evt_obj_3.args [0] = (int)ARG1; evt_obj_3.args [1] = (int)ARG2; evt_obj_3.args [2] = (int)ARG3; eventPointSwHandle(evtId, &evt_obj_3, sizeof evt_obj_3); } } while ((0))
#define EVT_OBJ_4(OBJ,CLASS,evtId,ARG1,ARG2,ARG3,ARG4) do { if ( ACTION_IS_SET ) { EVT_OBJ_4_T evt_obj_4; evt_obj_4.objId = OBJ; evt_obj_4.classId = CLASS; evt_obj_4.args [0] = (int)ARG1; evt_obj_4.args [1] = (int)ARG2; evt_obj_4.args [2] = (int)ARG3; evt_obj_4.args [3] = (int)ARG4; eventPointSwHandle(evtId, &evt_obj_4, sizeof evt_obj_4); } } while ((0))
#define EVT_OBJ_5(OBJ,CLASS,evtId,ARG1,ARG2,ARG3,ARG4,ARG5) do { if ( ACTION_IS_SET ) { EVT_OBJ_5_T evt_obj_5; evt_obj_5.objId = OBJ; evt_obj_5.classId = CLASS; evt_obj_5.args [0] = (int)ARG1; evt_obj_5.args [1] = (int)ARG2; evt_obj_5.args [2] = (int)ARG3; evt_obj_5.args [3] = (int)ARG4; evt_obj_5.args [4] = (int)ARG5; eventPointSwHandle(evtId, &evt_obj_5, sizeof evt_obj_5); } } while ((0))
#define _FD_MASK_DEFINED 
#define WIND_TCB_T12 WIND_TCB_R26
#define EPIC_MSG_INTERRUPT 24
#define MEDR_FILL_FREE_ENABLE FALSE
#define EVENT_OS_REVISION CONTROL_EVENT(18)
#define EPIC_CCSROFF 0x40000
#define MII_ADS_TECH_MASK 0x1fe0
#define _DBSR_DAC2W 0x00010000
#define EPIC_TM_B_FREQ_REG (EPIC_CCSROFF + 0x020f0)
#define M_csLib (138 << 16)
#define RIO_OP_SUPPORTED_ADEC 0x02000000
#define NUM_DRIVERS 20
#define EVENT_SEMTAKE CLASS3_EVENT(15)
#define INCLUDE_FLOATING_POINT 
#define PCIEX_OUTBOUND_TRANS_ADRS_REG0(base) CVPUINT32(base, 0xac00)
#define PCIEX_OUTBOUND_TRANS_ADRS_REG2(base) CVPUINT32(base, 0xac40)
#define clearerr(p) __sclearerr(p)
#define VX_COPROC8_TASK 0x80000000
#define TFFS_REMOVABLE FALSE
#define VXEV_USER_MASK 0x00ffffff
#define M_usrLib (35 << 16)
#define M85XX_PORPLLSR_PLAT_RATIO_MASK 0x0000003e
#define MII_PHY_DEF_DELAY 300
#define M85XX_LAWBAR0(base) (CAST(VUINT32 *)((base) + 0xc08))
#define M85XX_LAWBAR1(base) (CAST(VUINT32 *)((base) + 0xc28))
#define M85XX_LAWBAR2(base) (CAST(VUINT32 *)((base) + 0xc48))
#define M85XX_LAWBAR3(base) (CAST(VUINT32 *)((base) + 0xc68))
#define M85XX_LAWBAR5(base) (CAST(VUINT32 *)((base) + 0xcA8))
#define M85XX_LAWBAR6(base) (CAST(VUINT32 *)((base) + 0xcc8))
#define _VX_XSCALE 1120
#define SM_CPUS_MAX DEFAULT_CPUS_MAX
#define EVENT_OBJ_SEMGIVE CLASS2_EVENT(20)
#define M_loginLib (54 << 16)
#define _TIMER_T 
#define PCI2_INBOUND_TRANS_EXT_ADRS_REG3(base) CVPUINT32(base, 0x9DA4)
#define __INCb_key_th 
#define _TYPE_timer_t typedef struct __timer *timer_t
#define CACHE_DRV_IS_READ_COHERENT(pFuncs) ((pFuncs)->invalidateRtn == NULL)
#define PCI2_INBOUND_BASE_ADRS_REG1(base) CVPUINT32(base, 0x9DE8)
#define _IFORM_M_2 55
#define M_vxdbgLib (5 << 16)
#define RIO_CHANNEL_MAINT 1
#define __USER_LABEL_PREFIX__ 
#define IPCOM_PROC_PRIO_BACKGROUND 255
#define __INCspeLibh 
#define _WRS_CONFIG_OBJECT_CLASS_LIST_D 1
#define PRIO_STATUS_CHECK 0xa
#define EPIC_OPT_POLAR_ACT_LOW 0x00000000
#define IPCOM_RAM_DISK_NO_BLOCK 64
#define _PPC_ESR_PPR 0x04000000
#define _IFORM_EFX_2 88
#define _IFORM_EFX_3 89
#define _IFORM_EFX_4 90
#define S_memLib_FUNC_NOT_AVAILABLE (M_memLib | 9)
#define __INChwConfigh 
#define I2C_ERROR_KNOWN_STATE 7
#define __INCeventLibCommonh 
#define INCLUDE_XBD 
#define PCI_OUT_ATTR_WTT_IO 0x00008000
#define WDB_COMM_VTMD 8
#define PPC970 _VX_PPC970
#define _PC_REC_MAX_XFER_SIZE 15
#define VXB_PARAM_STRING 0x0003
#define EPIC_MSIR_INTX_OFFSET 0x10
#define _VX_CPU32 8
#define EVENT_SAFE_PEND CLASS3_EVENT(28)
#define _VX_TOOL_FAMILY TOOL_FAMILY
#define VX_DEALLOC_EXC_STACK 0x1000
#define WV_OBJ_CLASS_INSTRUMENTATION_DISABLE(classId) (classId->handle.attributes &= ~WIND_CLASS_INSTRUMENTED)
#define WDB_SPAWN_OPTS VX_FP_TASK
#define DRV_INTCTLR_EPIC 
#define HID1 1009
#define EVENT_OBJ_MSGSEND CLASS2_EVENT(23)
#define M85XXRIO_RIWAR_LOCAL_R_UNLOCK_L2 7
#define VXB_INTR_TRIG_ACTIVE_HIGH (VXB_INTR_TRIG_POS | VXB_INTR_TRIG_LEVEL)
#define __clock_t_defined 
#define __dataCollectorLibh 
#define SYS_CLK_RATE_MAX 8000
#define EVENTS_SYSFLAGS_DEL_RSRC 0x02
#define __LDBL_HAS_INFINITY__ 1
#define atomic32Xor_inline atomic32Xor
#define FIOSCSICOMMAND 40
#define MII_SR_LINK_STATUS 0x0004
#define MMU_DATA 0x02
#define M85XX_L2CTL_L2LFR_BIT 10
#define SIO_DEV_UNLOCK 0x1016
#define EVENT_EVENTRECEIVE CLASS3_EVENT(58)
#define INCLUDE_ANSI_STDLIB 
#define __INCsymbolh 
#define _ARCH_USHRT_MAX 65535
#define EPIC_MSG_REG3 (EPIC_CCSROFF + 0x01430)
#define FIOGETFL 43
#define RES_INT 2
#define EPIC_MSIVPR_PRIORITY_MSK (EPIC_BIT(19) | EPIC_BIT(18) | EPIC_BIT(17) | EPIC_BIT(16))
#define EVENT_WIND_EXIT_NODISPATCH CLASS1_EVENT(3)
#define TOOL_HDR(tc,file) TOOL_HDR_STRINGIFY(tool/tc/file)
#define _PPC_MAS0_ESEL_V(x) (x >> _PPC_MAS0_ESEL_BIT)
#define _ARCH_va_end(list) 
#define SYM_DATA 0x8
#define SYSFLG_NO_STARTUP_SCRIPT 0x10
#define EVT_OBJ_SAL_1(evtId,ARG1) do { if (ACTION_IS_SET) { EVT_OBJ_SAL_1_T evt_obj_sal_1; evt_obj_sal_1.args [0] = (int)ARG1; eventPointSwHandle (evtId, &evt_obj_sal_1, sizeof evt_obj_sal_1); } } while ((0))
#define EVT_OBJ_SAL_2(evtId,ARG1,ARG2) do { if (ACTION_IS_SET) { EVT_OBJ_SAL_2_T evt_obj_sal_2; evt_obj_sal_2.args [0] = (int)ARG1; evt_obj_sal_2.args [1] = (int)ARG2; eventPointSwHandle (evtId, &evt_obj_sal_2, sizeof evt_obj_sal_2); } } while ((0))
#define EVT_OBJ_SAL_3(evtId,ARG1,ARG2,ARG3) do { if (ACTION_IS_SET) { EVT_OBJ_SAL_3_T evt_obj_sal_3; evt_obj_sal_3.args [0] = (int)ARG1; evt_obj_sal_3.args [1] = (int)ARG2; evt_obj_sal_3.args [2] = (int)ARG3; eventPointSwHandle (evtId, &evt_obj_sal_3, sizeof evt_obj_sal_3); } } while ((0))
#define EPIC_RES41_INT_VEC (EPIC_RES41_INT_NUM + EPIC_VEC_IN_IRQ0)
#define S_qLib_Q_CLASS_ID_ERROR (M_qLib | 1)
#define MMU_ATTR_CACHE_COHERENCY 0x00000200
#define VXBAF_CONVERT_LONG_ORDER 0x00000004
#define EPIC_MSIDR_CRIT_INT EPIC_BIT(30)
#define FIOTRUNC64 55
#define MII_TECH_100BASE_T4 0x0200
#define EPIC_PCI1_INT_NUM 8
#define Q_GET(pQHead) ((Q_NODE *)((*(((Q_HEAD *)(pQHead))->pQClass->getRtn)) ((Q_HEAD *)(pQHead))))
#define RUNTIME_VERSION "6.8"
#define CACHE_USER_FLUSH(adrs,bytes) CACHE_DRV_FLUSH (&cacheUserFuncs, (adrs), (bytes))
#define NV_RAM_SIZE 0X100000
#define _ARCH_LDBL_MANT_DIG 53
#define MSG_Q_RESTRICT_UNPEND 0x80000000
#define VX_MEM_BARRIER_RW() _WRS_BARRIER("sync");
#define IPCOM_USE_ENV IPCOM_ENV_NATIVE
#define MII_TECH_100BASE_TX 0x0080
#define __FLT_EPSILON__ 1.19209290e-7F
#define _PPC_ESF_PAD0 (_PPC_ESF_REG_BASE + _PPC_REG_SET_SIZE)
#define _PPC_ESF_PAD1 (_PPC_ESF_PAD0 + SIZ_UINT32)
#define _PPC_ESF_PAD2 (_PPC_ESF_PAD1 + SIZ_UINT32)
#define EPIC_VEC_IN_IRQ0 (EPIC_VEC_EXT_IRQ0 + EPIC_MAX_EXT_IRQS)
#define ENOLINK 87
#define DEFAULT_DIR_PERM 0000750
#define _WRS_TASK_MSR_DEFAULT 
#define _ARCH_DBL_MAX 1.7976931348623157e+308
#define EPIC_OPT_PRI_MSK EPIC_EIVPR_PRIORITY_MSK
#define _VX_CPU CPU
#define FIOGETOPTIONS 19
#define EVENT_WINDCONT CLASS2_EVENT(30)
#define _WRS_CONFIG_TASK_SWAP_HOOKS 1
#define INCLUDE_VXB_CMDLINE 
#define S_objLib_OBJ_NOT_NAMED (M_objLib _WRS_BIT_OR 9)
#define VXB_CLK_FREQ "clkFreq"
#define M85XX_I2C2_BASE 0x3100
#define FIOLINK 58
#define _PPC_L1CFG_BSIZE_MASK 0x01800000
#define _PPC_ESF_R20 _PPC_ESF_R(20)
#define EVENT_OBJ_SEMWTAKE CLASS2_EVENT(48)
#define __INCsysLibh 
#define SM_TAS_HARD 1
#define SIO_KYBD_MODE_RAW 1
#define M85XXRIO_RxWAR_SIZE_MSK 0x3f
#define M85XXRIO_ODATR(base) (CAST(VUINT32 *)(((char*)base) + 0x1101C))
#define INCLUDE_WDB_CTXT 
#define EVENT_WDDELETE CLASS3_EVENT(17)
#define _IFLAG_FP_SPEC 0x1000
#define MMU_ATTR_SPL_0 0x00001000
#define _VX_PPC505 96
#define PCIEX_INBOUND_BASE_ADRS_REG1(base) CVPUINT32(base, 0xaDE8)
#define _VX_PPC509 2000
#define INCLUDE_WDB_VIO 
#define M85XX_L2CTL_L2E_MSK 0x80000000
#define S_objLib_OBJ_NO_ACCESS_RIGHTS (M_objLib _WRS_BIT_OR 6)
#define MII_ETH_MAX_PCK_SZ (ETHERMTU + SIZEOF_ETHERHEADER + MII_CRC_LEN)
#define __INCobjLibPh 
#define FIOFSTATGET_OLD 38
#define INCLUDE_HWMEM_ALLOC 
#define le32toh(x) bswap32((x))
#define _DBSR_DAC2W_U 0x0001
#define M_ftnLib (52 << 16)
#define SIO_ERROR_OFLOW 2
#define _DEFINED_uid_t 
#define LSDMR_OP_SHIFT(x) ((x << 27) & LSDMR_OP_MASK)
#define TYLIB_XON_PCNT 50
#define S_dsmLib_UNKNOWN_INSTRUCTION (M_dsmLib | 1)
#define _DBCR2_DAC2US 0x0c000000
#define EVENT_SD_UNMAP CLASS3_EVENT(203)
#define PCIEX_INBOUND_ATTR_REG1(base) CVPUINT32(base, 0xaDF0)
#define VXDBG_BP_BY_CTX_REMOVE(pClient,retVal,pContext) VXDBG_BP_BY_ADDR_AND_CTX_REMOVE(pClient, retVal, NULL, pContext)
#define _POSIX_NAME_MAX 14
#define SIMHPPA _VX_SIMHPPA
#define EPIC_DMA1_INT_NUM 5
#define INST_BL_MASK 0xfc000001
#define SYS_CLK_RATE_MIN 1
#define OPT_LINE 0x40
#define _ANSI_STDDEF_H 
#define EPIC_IIVPR_PRIORITY(p) (((p) << 16) & EPIC_IIVPR_PRIORITY_MSK)
#define SPE_CONTEXT_SET(pTcb,X) (pTcb->pCoprocCtx=(int)(X))
#define I2C_CYCLE_WRITE(x,wd) i2cCycleMpc85xxWrite(x,wd)
#define M_m2Lib (91 << 16)
#define _IFIELD_BD(x) ((0x00008000 & x) ? (0xffff0000 | (x & ~3)) : (0x0000fffc & x))
#define MMU_ATTR_PROT_SUP_EXE 0x00000004
#define _IFIELD_BI(x) ((0x001f0000 & x) >> 16)
#define _VX_SH 130
#define TASK_CPU_LOCK_TASK(_pTcb__) do { if (ACTION_IS_SET) { VX_CODE_BARRIER(); _pTcb__->lockCnt++; VX_CODE_BARRIER(); EVT_CTX_0_BH (EVENT_TASKLOCK); } else { VX_CODE_BARRIER(); _pTcb__->lockCnt++; VX_CODE_BARRIER(); } } while ((0))
#define _CPU_STACK_ALIGN_SHIFT 4
#define VX_USR_TASK_OPTIONS_BASE (VX_PRIVATE_ENV | VX_NO_STACK_FILL | VX_TASK_NOACTIVATE | VX_NO_STACK_PROTECT)
#define _DBCR2_DAC2ER_U 0x0300
#define S_eventLib_ZERO_EVENTS (M_eventLib | 0x0005)
#define WDB_PROXY_TASK_PRIORITY 55
#define EPIC_EX_INT1_VEC_REG (EPIC_CCSROFF + 0x10020)
#define ARM7TDMI_T _VX_ARM7TDMI_T
#define MIN_USER_ID 40000
#define EPIC_TM_B2_DES_REG (EPIC_CCSROFF + 0x021b0)
#define TFFS_MOUNT_POINT "/tffs0"
#define S_iosLib_DEVICE_NOT_FOUND ENODEV
#define SEMB_PENDED_TASK SEM_PENDED_TASK
#define MAX_INT_ID 599
#define MMU_ATTR_CACHE_GET(attr) ((attr) & MMU_ATTR_CACHE_MSK)
#define EPIC_CTASK_PRI1_REG (EPIC_CCSROFF + 0x21080)
#define MMU_TRANSLATE (*(mmuLibFuncs.mmuTranslate))
#define _ARCH_INT_MAX 2147483647
#define _PPC_ESR_AP_U 0x0008
#define sioTxStartup(pSioChan) ((pSioChan)->pDrvFuncs->txStartup (pSioChan))
#define EPIC_DDR_INT_VEC (EPIC_DDR_INT_NUM + EPIC_VEC_IN_IRQ0)
#define EPIC_CISR0_EX_INT_MSK 0xfff
#define EVENT_TICKANNOUNCE CLASS1_EVENT(9)
#define _WRS_SYS_IO 
#define SPIN_LOCK_INTERESTED 2
#define _VX_PPC555 99
#define EPIC_IN_INT46_VEC_REG (EPIC_CCSROFF + 0x107c0)
#define MMU_STATE_MASK_LOCK 0x00800000
#define I2C_DRV_TYPE MPC85XX_I2C_CONTROLLER
#define EVENT_SIGWRAPPER CLASS3_EVENT(29)
#define VX_MAX_TASK_SWAP_RTNS 16
#define RES_STRING 1
#define _ARCH_DBL_MIN 2.2250738585072014e-308
#define EMFILE 24
#define _PPC_SPEFSCR_FGH 0x20000000
#define EPIC_IN_INT27_DES_REG (EPIC_CCSROFF + 0x10570)
#define IS_USER_EVENT(event) ((event >= MIN_USER_ID) && (event <= MAX_USER_ID))
#define SS_2D_8 2
#define EPIC_IPI_DPATCH1_REG1 (EPIC_CCSROFF + 0x21050)
#define TIP_ESCAPE_CHARACTER "~"
#define EPIC_EX_INT1_DES_REG (EPIC_CCSROFF + 0x10030)
#define S_ioLib_NO_DEVICE_NAME_IN_PATH ENODEV
#define __DECIMAL_DIG__ 17
#define EPIC_LBC_INT_NUM 3
#define INCLUDE_IPNET_USE_ROUTESOCK 
#define EPIC_TSEC3ERR_INT_VEC (EPIC_TSEC3ERR_INT_NUM + EPIC_VEC_IN_IRQ0)
#define REG_SET_GR(n) (REG_SET_GRBASE + _PPC_REG_SIZE*(n))
#define FIOMOVE 47
#define EPIC_TSEC3RX_INT_VEC (EPIC_TSEC3RX_INT_NUM + EPIC_VEC_IN_IRQ0)
#define M85XX_LURT(base) (CAST(VUINT32 *)((base) + 0x50A0))
#define _PPC_ESR_ILK 0x00100000
#define EVT_EDR_ERR_INJECT(EVTID,KIND,FILENAME,LINE,ADDRESS,MSG) do { if ( ACTION_IS_SET ) { EVENT_EDR_ERR_INJECT_T evt_edr_err_inject; evt_edr_err_inject.kind = KIND; evt_edr_err_inject.filename = FILENAME; evt_edr_err_inject.linenumber = LINE; evt_edr_err_inject.address = ADDRESS; evt_edr_err_inject.message = MSG; eventPointSwHandle (EVTID, &evt_edr_err_inject, sizeof (evt_edr_err_inject)); } } while ((0))
#define EPIC_ECM_INT_NUM 1
#define _DBSR_ICMP_U 0x0800
#define EVENT_SALOPEN CLASS3_EVENT(96)
#define S_vxdbgLib_INVALID_BP_DELETE_CLASS VXDBG_ERROR_TO_ERRNO(VXDBG_ERR_INVALID_BP_DELETE_CLASS)
#define _INC_VXBUSLIB_H 
#define PID_MASK 0x0FF
#define IPCOM_SOCK_IPCOM 3
#define MAX_INPUT _POSIX_MAX_INPUT
#define MAP1000A _VX_MAP1000A
#define ENETDOWN 62
#define EPIC_IN_INT46_DES_REG (EPIC_CCSROFF + 0x107d0)
#define ESTALE 88
#define EPIC_GLOBAL_REG (EPIC_CCSROFF + 0x01020)
#define CLASS_LIST_REMOVE(list,node) dllRemove (list, node)
#define __INCtypesh 
#define IPCOM_FORWARDER_TRUE_CACHE_WAYS (1 << IPCOM_FORWARDER_TRUE_CACHE_WAYS_SHIFT)
#define M85XXRIO_RIWAR_PCI2 0x01
#define _IFIELD_CRBD(x) ((0x03e00000 & x) >> 21)
#define M85XXRIO_PCR(base) (CAST(VUINT32 *)(((char*)base) + 0x10010 ))
#define _IFLAG_6XX_SPEC (_IFLAG_601_SPEC | _IFLAG_603_SPEC | _IFLAG_604_SPEC)
#define __INCb_gid_th 
#define M85XX_L2ERRDIS(x) (CAST(VUINT32 *)((x + 0x20E44)))
#define I2C_DEVICE_TYPE_IOPORT_PCA9555 2
#define MII_SYS_DELAY(delay) if (pPhyInfo->phyDelayRtn != NULL) ((* (pPhyInfo->phyDelayRtn)) (delay))
#define CS1_BNDS 0x008
#define _VX_SPARCV9 110
#define __INCspinLockLibh 
#define _IFORM_XL_1 38
#define _IFORM_XL_2 39
#define _IFORM_XL_3 40
#define _IFORM_XL_4 41
#define DDR_CAPTURE_ECC 0xe28
#define __LDBL_HAS_QUIET_NAN__ 1
#define M85XX_L2CTL_L2SIZ_BIT 28
#define M85XXRIO_ODCR(base) (CAST(VUINT32 *)(((char*)base) + 0x11020))
#define M_dirLib (68 << 16)
#define CACHE_DMA_VIRT_TO_PHYS(adrs) CACHE_DRV_VIRT_TO_PHYS (&cacheDmaFuncs, (adrs))
#define MPC85XX_I2C_FREQ_DIV_REG (0x00004)
#define _IFIELD_UIMM(x) ((0x0000ffff & x) >> 0)
#define WV_OBJ_CLASS_INSTRUMENTATION_ENABLE(classId) (classId->handle.attributes |= WIND_CLASS_INSTRUMENTED)
#define M85XX_PORDEVSR(base) (CAST(VUINT32 *)((base) + 0xE000C))
#define EPIC_INT_ACT_LOW 0
#define RIO_SWITCH_PORT_MASK 0x00ff0000
#define INCLUDE_MUXTK 
#define atomic32Dec_inline atomic32Dec
#define MII_STAT_REG 0x1
#define CORE_DUMP_COMPRESSION_LEVEL 9
#define __INCvxInlineArchh 
#define CACHE_FLUSH_LOAD_ADRS 0x10000
#define _WRS_CONFIG_SUPPORTS_WRLOAD 1
#define _PPC_BUCSR_FI 0x200
#define _ARCH_INT_MIN (-2147483647-1)
#define MAX_VALUE_E500_RATIO 10
#define _EXC_INFO_CIA 0x002
#define REG_SET_LR (REG_SET_MSR + _PPC_REG_SIZE)
#define IPCOM_USE_SYSVAR 
#define EPIC_SENSE_LVL 1
#define _WRS_CONFIG_WIND_IPNET 1
#define fpReg gpr[31]
#define VX_MSG_Q(name,max_msgs,max_msg_len) _WRS_DATA_ALIGN_BYTES(VX_OBJ_ALIGN_SIZE) char name [VX_MSG_Q_SIZE + ((max_msgs)*(MSG_NODE_SIZE(max_msg_len)))];
#define _IFIELD_LK(x) ((0x00000001 & x) >> 0)
#define EPIC_EX_INT8_VEC_REG (EPIC_CCSROFF + 0x10100)
#define EVENTS_ALLOW_OVERWRITE 0x02
#define L_tmpnam _PARM_L_tmpnam
#define VM_BASE_INSTALLED (vmLibInfo.vmBaseLibInstalled)
#define ___int_wchar_t_h 
#define VX_DEALLOC_STACK 0x0004
#define PCI_IN_ATTR_RTT_LM_WRITE_SNOOP 0x00005000
#define INT_MIN (-INT_MAX-1)
#define _IFIELD_CRFD(x) ((0x03800000 & x) >> 23)
#define _IFIELD_CRFE(x) ((0x00000007 & x))
#define __GNUC__ 4
#define _IFIELD_MB(x) ((0x000007c0 & x) >> 6)
#define FIONMSGS 17
#define VX_FORTRAN 0x0040
#define S_vxCpuLib_NO_CPU_AVAILABLE (M_vxCpuLib | 2)
#define _IFIELD_MO(x) ((0x03e00000 & x) >> 21)
#define EVENTS_KEEP_UNWANTED 0x04
#define MIN_RTI_RESERVE_ID 39000
#define SHELL_TASK_OPTIONS (VX_FP_TASK | VX_UNBREAKABLE | COPROCS_ALL | VX_PRIVATE_ENV)
#define offsetof(TYPE,MEMBER) __builtin_offsetof (TYPE, MEMBER)
#define VX_INSTR_BARRIER() _WRS_BARRIER("isync")
#define _DBCR0_TRAP_U 0x0100
#define EVENTS_SYSFLAGS_WAITING 0x01
#define __INC_vxbRapidIOH 
#define _ARCH_DBL_MIN_EXP (-1021)
#define STACK_VERSION_MINOR 1
#define _IFIELD_NB(x) ((0x0000f800 & x) >> 11)
#define SIO_BAUD_GET 0x1004
#define CAST(x) (x)
#define _FLTFUNCPTR_DEFINED 
#define OBJ_HANDLE_TABLE_MASK (OBJ_HANDLE_INDEX_MASK - OBJ_HANDLE_ENTRY_MASK)
#define CACHE_CMD_UNLOCK_LINE 0x08000000
#define EVENT_WINDRESUME CLASS2_EVENT(3)
#define __INCvmLibCommonh 
#define EBADMSG 77
#define _IFIELD_OE(x) ((0x00000400 & x) >> 10)
#define EVENT_SALRUN_ACCEPT CLASS3_EVENT(105)
#define __INCfcntlh 
#define RIO_OP_SUPPORTED_ASET 0x04000000
#define INCLUDE_IPNET_PACKET_POOL_3 
#define VM_PAGE_MAP(context,virtAddr,physAddr,len) ((vmLibInfo.pVmPageMapRtn == NULL) ? (ERROR) : ((*vmLibInfo.pVmPageMapRtn) (context, virtAddr, physAddr, len)))
#define atomic32Nand_inline atomic32Nand
#define INCLUDE_IPNET_PACKET_POOL_6 
#define FIODISKCHANGE 13
#define OBJ_LIBRARY_OPTIONS 0
#define __INChandleLibPh 
#define __NO_LWSYNC__ 1
#define PCI2_OUTBOUND_ATTR_REG0(base) CVPUINT32(base, 0x9c10)
#define _VX_WRITE 1
#define EPIC_PERFMON_2_MSK_REG0 (EPIC_CCSROFF + 0x01390)
#define EPIC_PERFMON_2_MSK_REG1 (EPIC_CCSROFF + 0x013a0)
#define SEMRW_READER_ENTRY_PTR(semId,index) ( ((SEM_RW_LIST_ENTRY *)((UINT) semId + sizeof (SEMAPHORE) + sizeof (SEM_RW_EXT) + (index * sizeof (SEM_RW_LIST_ENTRY)))) )
#define DDR_SDRAM_CLK_CTRL 0x130
#define _DBSR_IRPT 0x02000000
#define S_intLib_NOT_ISR_CALLABLE (M_intLib | 1)
#define EVENT_OBJ_MSGSREPLY CLASS2_EVENT(44)
#define MII_MF_PREAMBLE_LEN 0x20
#define EPIC_SR_ERR_INT_VEC (EPIC_SR_ERR_INT_NUM + EPIC_VEC_IN_IRQ0)
#define F_RGETLK 10
#define HCF_RES_INT 2
#define OBJ_INDEX_GET(objHdl) ((objHdl) & OBJ_HANDLE_INDEX_MASK)
#define LONG_MAX __LONG_MAX__
#define __INCregh 
#define _VX_I960CA 21
#define __sfileno(p) ((HANDLE_VERIFY(p, handleTypeFile) != OK) ? (-1) : ((p)->_file))
#define NUM_PCIEX_SLOTS 0x1
#define M85XX_DEVDISR_DDR 0x00010000
#define SM_TAS_SOFT 0
#define SIO_ERROR_NO_CLK 6
#define EPIC_MSG_VEC_REG(irq) (EPIC_MSG_INT0_VEC_REG + ((irq) * EPIC_MSG_VEC_REG_INTERVAL))
#define _IFIELD_RA(x) ((0x001f0000 & x) >> 16)
#define _IFIELD_RC(x) ((0x00000001 & x) >> 0)
#define _IFIELD_RD(x) ((0x03e00000 & x) >> 21)
#define EPIC_MSG_INT0_VEC_REG (EPIC_CCSROFF + 0x11600)
#define SYSFLG_AUTOFILE 0x800
#define INCLUDE_BRANCH_PREDICTION 
#define _EXC_OFF_SYSTIMER _EXC_OFF_DECR
#define _WRS_CHANGE_INSN_SET(p) {}
#define MMU_ATTR_SUP_RWX (MMU_ATTR_SUP_RW | MMU_ATTR_PROT_SUP_EXE)
#define MMU_ATTR_CACHE_GUARDED 0x00000400
#define RAPIDIO_BA 0xC0000
#define REG_SET_SP (REG_SET_GR(1))
#define _IFIELD_SH(x) ((0x0000f800 & x) >> 11)
#define RNG_ELEM_GET(ringId,pCh,fromP) ( fromP = (ringId)->pFromBuf, ((ringId)->pToBuf == fromP) ? 0 : ( *pCh = (ringId)->buf[fromP], (ringId)->pFromBuf = ((++fromP == (ringId)->bufSize) ? 0 : fromP), 1 ) )
#define MMU_ATTR_SPL_MSK 0x000FF000
#define IPCOM_SHELL_NATIVE 4
#define _CPU_STACK_ALIGN_SIZE 16
#define FUNCREF(func) func
#define VXB_EPICINTCTLR_ENABLE_INTS _VXB_EPICINTCTLR_ENABLE_INTS
#define S_ioLib_DISK_NOT_PRESENT ENXIO
#define CACHE_CMD_INVALIDATE 0x0c000000
#define EPIC_SMSG_INT1_VEC_REG (EPIC_CCSROFF + 0x11c20)
#define EXIT_SUCCESS _PARM_EXIT_SUCCESS
#define _INC_vxbParamSysH 
#define WV_EVT_PROTO_REV_CURRENT WV_EVT_PROTO_REV_6_7
#define EPIC_IN_INT35_DES_REG (EPIC_CCSROFF + 0x10670)
#define OBJ_INSTRUMENTED(objId) ((((OBJ_CORE *)(objId))->handle.attributes) & WIND_OBJ_INSTRUMENTED)
#define SM_MAX_WAIT 3000
#define EPIC_EX_DEST_REG(irq) (EPIC_EX_VEC_REG(irq) + EPIC_EX_DEST_REG_VECREGOFF)
#define __INCppc85xxh 
#define _IFIELD_TO(x) ((0x03e00000 & x) >> 21)
#define _PPC_ESR_PIL_U 0x0800
#define VX_TRAD_SCHED_CONSTANT_RDY_Q TRUE
#define AIO_TASK_STACK_SIZE 0
#define EVENT_OBJ_MSGDELETE CLASS2_EVENT(25)
#define INCLUDE_EXC_HANDLING 
#define M_ioLib (12 << 16)
#define _VX_PPC32 90
#define EPIC_EIDR_P0_INT EPIC_BIT(0)
#define __INCeventph 
#define INCLUDE_TASK_RESTART 
#define EPIC_MSG_INT0_DES_REG (EPIC_CCSROFF + 0x11610)
#define RIO_CAR_ASSEMBLY_INFO 0x0c
#define _STD_USING_INT_TYPES 
#define EVENT_MSGCSEND CLASS3_EVENT(36)
#define CACHE_COPYBACK 0x02
#define PCI_ID_I82559 0x12298086
#define semOwner state.owner
#define _IFIELD_VC(x) ((0x000007c0 & x) >> 6)
#define _IFIELD_VD(x) ((0x03e00000 & x) >> 21)
#define _IFIELD_VS(x) ((0x03e00000 & x) >> 21)
#define M85XX_PORDEVSR_PCI_MODE(base) ((*M85XX_PORDEVSR(base) & M85XX_PORDEVSR_PCI_MODE_MASK)>>23)
#define VXB_BAUD_RATE "baudRate"
#define OPT_TANDEM 0x04
#define _VX_I960HX 25
#define _IFIELD_WS(x) ((0x0000f800 & x) >> 11)
#define _VX_MIPS32 41
#define M_shellInterpCmdLib (174 << 16)
#define VXB_INTR_ENTSZ 32
#define EPIC_SR_ERR_INT_NUM 32
#define EXTENDED_REF_REC 0x100
#define IPCOM_USE_SOCK IPCOM_SOCK_NATIVE
#define FD_1_TYPE -1
#define RUNTIME_SMP_NAME "SMP"
#define CS2_CONFIG 0x088
#define M85XX_SVR(base) (CAST(VUINT32 *)((base) + 0xE00A4))
#define _PPC_ESR_BO_U 0x0002
#define PCIEX_INBOUND_TRANS_ADRS_REG2(base) CVPUINT32(base, 0xaDC0)
#define PCIEX_INBOUND_TRANS_ADRS_REG3(base) CVPUINT32(base, 0xaDA0)
#define _MACH_MACHLIMITS_H_ 
#define EPIC_EIVPR_SENS(s) ((s) << 22)
#define VX_SPE_TASK VX_COPROC3_TASK
#define _VX_I960JX 24
#define LOW24_INSERT(buf,value) INSERT ((buf), (value), 0x03fffffc)
#define EPIC_FRR_NCPU_SHIFT 8
#define IPCOM_USE_BITARRAY 
#define REG_TYPE_SHIFT 24
#define _DBCR1_IAC12AT_U 0x0001
#define VXB_SPIN_LOCK_TAKE(x) (*pVxbSpinLockTake)(x)
#define LONG_MIN (-LONG_MAX-1)
#define S_symLib_SYMBOL_NOT_FOUND (M_symLib | 1)
#define EVT_SYSCALL_ENTRY(RTPID,NPARAMS,PSTATE) do { if (ACTION_IS_SET) { EVENT_SYSCALL_ENTER_T evt_syscall_entry; evt_syscall_entry.rtpId = RTPID; evt_syscall_entry.nParams = NPARAMS; evt_syscall_entry.pState = PSTATE; eventPointSwHandle(EVENT_SYSCALL_ENTER, &evt_syscall_entry, sizeof evt_syscall_entry); } } while ((0))
#define MCAR 573
#define EVENT_TIMESTAMP_CONFIG CONTROL_EVENT(8)
#define getc(p) __sgetc(p)
#define _VX_I960KA 22
#define _VX_I960KB 23
#define M85XXRIO_SOCAR(base) (CAST(VUINT32 *)(((char*)base) + 0x0018))
#define MMU_PAGE_LOCK (*(mmuLibFuncs.mmuPageLock))
#define INCLUDE_IO_SYSTEM 
#define M_bootLoadLib (82 << 16)
#define INCLUDE_SEM_COUNTING 
#define RIO_SWITCH_PORT_ACCESS(x) ((x) & RIO_SWITCH_PORT_SRC_MASK) >> 24)
#define __INCppc32h 
#define M_dmsLib (126 << 16)
#define PHY_100BASE_T4 0x04
#define OBJ_LOCK(classId,lockLevel) do { lockLevel = INT_CPU_MICRO_LOCK(); } while ((0))
#define INCconfigAllNetworkh 
#define VX_READ 0
#define DDR_CAPTURE_ADDRESS 0xe50
#define M85XXRIO_ODSR(base) (CAST(VUINT32 *)(((char*)base) + 0x13404))
#define MII_MASSLA_CTRL_CONFIG_EN 0x1000
#define __STRICT_ANSI__ 1
#define M85XXRIO_BDIDCSR(base) (CAST(VUINT32 *)(((char*)base) + 0x00060 ))
#define VXB_BUSID_USB_HOST_EHCI 11
#define SYM_THUMB 0x80
#define _VX_MIPS64 42
#define RIO_MAX_OUTBOUND_CHANNELS 9
#define VXB_INST_INIT2_DONE 0x00000002
#define NUM_FILES 50
#define WV_EVT_PROTO_REV_2_0_FCS 2
#define __INCqLibh 
#define S_mmuLib_NO_DESCRIPTOR (M_mmuLib | 2)
#define S29GL_FLASH_SIZE 0x04000000
#define DDR_ERR_DETECT 0xe40
#define M85XXRIO_ATMU_CHANNELS 15
#define M85XXRIO_PCCSR(base) (CAST(VUINT32 *)(((char*)base) + 0x0015C ))
#define _DBSR_IAC1_U 0x0080
#define EPIC_RES47_INT_NUM 47
#define VXB_ITERATE_VERBOSE 8
#define __LDBL_HAS_DENORM__ 1
#define MII_EXP_LOC_NP 0x0004
#define IPCOM_RAM_DISK_BLOCK_SIZE 512
#define LBC_CS3_SIZE 0x0100000
#define DBG_SYSCALL_SIZE (sizeof (INSTR) / sizeof (INSTR))
#define BOOT_LINE_SIZE 255
#define I2C_BYTE_NUM_MASK 0x700
#define PCIEX_INBOUND_BASE_ADRS_REG2(base) CVPUINT32(base, 0xaDC8)
#define MMU_STATE_UNLOCK 0x00000000
#define PCI2_OUTBOUND_BASE_ADRS_REG0(base) CVPUINT32(base, 0x9c08)
#define PCI2_OUTBOUND_BASE_ADRS_REG1(base) CVPUINT32(base, 0x9c28)
#define PCI2_OUTBOUND_BASE_ADRS_REG3(base) CVPUINT32(base, 0x9c68)
#define PCI_INT_ACK (CCSBAR + 0x8008)
#define __INCarchPpcCommonh 
#define M_if_sl (53 << 16)
#define _WRS_INLINE_QorIQdcbf 
#define __DELETE_FUNC FALSE
#define EDR_RECORD_SIZE 4096
#define MII_ANAR_100TX_FD 0x0100
#define UPDATE _VX_UPDATE
#define M_rdsLib (166 << 16)
#define _ALLOC_ALIGN_SIZE _ppcAllocationQuantumSize
#define __ISO_C_VISIBLE 1999
#define S_iosLib_CONTROLLER_NOT_PRESENT ENXIO
#define _VX_VOIDFUNCPTR_DEFINED 
#define ARMSA110 _VX_ARMSA110
#define _PPC_L1CFG_NWAY_V(x) (x >> 12)
#define EVENT_MSGSRECEIVE CLASS3_EVENT(41)
#define _DBCR0_DAC1R 0x00080000
#define _VX_VOID_FROM_CONST(x) (void *)(x)
#define _DBCR0_DAC1W 0x00040000
#define _PPC_ESR_BO 0x00020000
#define _PPC_TCR_WPEXT_U 0x0040
#define M_if_ul (122 << 16)
#define LOCAL_MEM_LOCAL_ADRS 0x00000000
#define FIONFREE64 51
#define __DBL_MAX_EXP__ 1024
#define IPCOM_DRV_ETH_MAX_MULTIADDR 32
#define PCI_IN_ATTR_RTT_LM_READ_NO_SNOOP 0x00040000
#define VX_NATIVE_SCHED_CONSTANT_RDY_Q VX_TRAD_SCHED_CONSTANT_RDY_Q
#define MMUCFG 1015
#define VX_GLOBAL_NO_STACK_FILL FALSE
#define _WRS_CONFIG_KSOURCE 1
#define _WRS_HAS_GCC_ASM_SYNTAX 
#define VXB_REG_WIDTH "regWidth"
#define _DBCR0_DAC2R 0x00020000
#define _DBCR0_DAC2W 0x00010000
#define MII_ANAR_100TX_HD 0x0080
#define EPIC_TM_B1_VEC_REG (EPIC_CCSROFF + 0x02160)
#define MII_PHY_ID1_REG 0x2
#define MMU_PAGE_TBL_ENTRIES_MAX (0x1 << MMU_PAGE_INDEX_BITS_MAX)
#define __INCiosLibh 
#define VXB_BYTE_ORDER_CONVERT_16(flags,data,mask) { if ((flags & VXBAF_ENDIAN_MASK) != mask) { VXBAF_BYTE_SWAP_16(data); flags &= ~(VXBAF_ENDIAN_MASK); flags |= mask; flags ^= (VXBAF_CONVERT_BYTE_ORDER); } }
#define __BSD_VISIBLE 1
#define M_loadRtpLib (186 << 16)
#define SEM_Q_PRIORITY 0x01
#define EPIC_DMA1_INT_VEC (EPIC_DMA1_INT_NUM + EPIC_VEC_IN_IRQ0)
#define CLASS_LIST_SEM_INIT_OPTIONS (SEM_Q_PRIORITY | SEM_DELETE_SAFE | SEM_INVERSION_SAFE)
#define MAX_DRV_NAME_LEN 31
#define _PPC_TCR_DIE_U 0x0400
#define IAC1 312
#define IAC2 313
#define EPIC_EX_INT11_DES_REG (EPIC_CCSROFF + 0x10170)
#define INT_CPU_UNLOCK(key) intCpuUnlock(key)
#define _VA_LIST_ 
#define _PPC_MMUCSR0_IL1MMU_FI_V(x) (x >> 4)
#define MIN_CLASS1_ID 50
#define __eventdefsPh 
#define AIO_LISTIO_MAX 10
#define EPIC_OPT_EXPIN_MSK (EPIC_EIDR_EX_PIN >> 16)
#define _WRS_CONFIG_DEFAULT_GPP 1
#define SM_BASE_ADRS LOCAL_MEM_LOCAL_ADRS
#define STACK_ROUND_DOWN(x) ROUND_DOWN(x, _STACK_ALIGN_SIZE)
#define IPCOM_USE_MD5 
#define _POSIX_TZNAME_MAX 3
#define _POSIX_SSIZE_MAX 32767
#define __INCmemLibh 
#define _VX_SH7700 134
#define VXB_BYTE_ORDER_CONVERT_32(flags,data,mask) { if ((flags & VXBAF_ENDIAN_MASK) != mask) { VXBAF_BYTE_SWAP_32(data); flags &= ~(VXBAF_ENDIAN_MASK); flags |= mask; flags ^= (VXBAF_CONVERT_BYTE_ORDER | VXBAF_CONVERT_SHORT_ORDER); } }
#define _IFLAG_403_SPEC 0x0080
#define TRG_ACTION_UNSET { vxAtomicAnd ((atomic_t*)&evtAction, ~(0x0001)); }
#define S_taskLib_TASK_HOOK_NOT_FOUND (M_taskLib | 103)
#define EPIC_BITS_M2N(x,y) (( 1 << ((y)-(x)+1) ) - 1) << (x)
#define _EXC_OFF_ALIGN 0x00600
#define MC68010 _VX_MC68010
#define _PPC_SPEFSCR_FOVF 0x00000100
#define EPIC_TM_B1_DES_REG (EPIC_CCSROFF + 0x02170)
#define CPU_PWR_TASK_P_STATE (cpuPwrP0State)
#define WV_REV_ID_BASE6 0xb1b10000
#define _STD_USING_CLOCK_T 
#define M85XXRIO_OSAR(base) (CAST(VUINT32 *)(((char*)base) + 0x11014))
#define SEM_INTERRUPTIBLE 0x20
#define __INCvxWorksCommonh 
#define WIND_OBJ_CORE_HANDLE_ATTRIBUTES 0x8
#define M85XXRIO_ROWTAR0(base) (CAST(VUINT32 *)(((char*)base) + 0x10C00 ))
#define MEM_ALLOC_ERROR_EDR_WARN_FLAG 0x200
#define BSP_REV "/6"
#define FIT_DIVIDER_TAP_14 14
#define IPCOM_FILE_NATIVE 3
#define STOPB 0x20
#define _IFORM_EVX_10 100
#define _IFORM_EVX_11 101
#define _IFORM_EVX_12 102
#define _IFORM_EVX_13 103
#define STACK_NAME_V4 1
#define VX_DEALLOC_TCB 0x8000
#define FIT_DIVIDER_TAP_16 16
#define EVENT_IDLE_TASK_ID CONTROL_EVENT(19)
#define _STDARG_H 
#define M85XXRIO_ROWTARn(base,n) (CAST(VUINT32 *)(((char*)base) + 0x10C00 + ((n)*0x20)))
#define TRG_ON 0x10000000
#define M85XX_DCR0(base) (CAST(VUINT32 *)((base) + 0xe0f1c))
#define M85XX_DCR1(base) (CAST(VUINT32 *)((base) + 0xe0f20))
#define PCI_ID_I82559ER 0x12098086
#define _PC_PIPE_BUF 12
#define S_memLib_WRONG_PART_ID (M_memLib | 6)
#define __INCb_mode_th 
#define LAWAR_TGTIF_PCI2 0x00100000
#define _PC_VDISABLE 20
#define FIT_DIVIDER_TAP_18 18
#define __LONG_LONG_MAX__ 9223372036854775807LL
#define __INCselectLibh 
#define M85XX_L2SRBAR_ADDR_EA_MSK 0x0000000F
#define CACHE_DRV_PHYS_TO_VIRT(pFuncs,adrs) (((pFuncs)->physToVirtRtn == NULL) ? (void *) (adrs) : ((void *) ((pFuncs)->physToVirtRtn) (adrs)))
#define INCLUDE_SELECT 
#define KERNEL_LOCK_OWNER_GET() (kernelLockOwnerGet())
#define _MMU_TLB_PERM_UX 0x00040000
#define EPIC_SR_OUT_MU2_INT_NUM 39
#define FEXCL _FEXCL
#define EVENT_CONFIG CONTROL_EVENT(4)
#define EPIC_ECM_INT_VEC (EPIC_ECM_INT_NUM + EPIC_VEC_IN_IRQ0)
#define O_CNTRL _FCNTRL
#define INCLUDE_WDB_DIRECT_CALL 
#define __INCstdlibh 
#define LAWAR_SIZE_2GB 0x0000001E
#define BOOT_HOST_LEN 20
#define EXT_MAX_IRQS 200
#define ENOTEMPTY 15
#define _VX_SH7750 137
#define FLASH_WINDOW_SIZE 0x00800000
#define M_smObjLib (88 << 16)
#define PASSFS_CACHE TRUE
#define EVENT_TASKUNSAFE CLASS3_EVENT(7)
#define INCLUDE_MEM_MGR_FULL 
#define MPC85XX_I2C_STATUS_REG_MBB 0x20
#define INCLUDE_WDB_BP 
#define EPIC_IN_INT2_DES_REG (EPIC_CCSROFF + 0x10250)
#define BOOT_ADDR_LEN 30
#define WDB_COMM_TYCODRV_5_2 2
#define EVENT_RTP_LOAD CLASS3_EVENT(81)
#define MMU_STATE_SUP_RWX_USR_R (MMU_STATE_SUP_RWX | _MMU_UR)
#define __INCb_time_th 
#define MMU_STATE_SUP_RWX_USR_W (MMU_STATE_SUP_RWX | _MMU_UW)
#define MMU_STATE_SUP_RWX_USR_X (MMU_STATE_SUP_RWX | _MMU_UX)
#define SH7410 _VX_SH7410
#define INCLUDE_MSG_Q_CREATE_DELETE 
#define PCI2_INBOUND_TRANS_ADRS_REG1(base) CVPUINT32(base, 0x9DE0)
#define S_smLib_INVALID_CPU_NUMBER (M_smLib | 2)
#define __INCvxPpcLibh 
#define MII_ADS_SEL_MASK 0x001f
#define MAX_VALUE_PLAT_RATIO 32
#define VX_TASK_NAME_LENGTH 31
#define EVENT_CPC_INVOKE CLASS3_EVENT(231)
#define FD_DEV_NAME "/fd"
#define ENV_VAR_USE_HOOKS TRUE
#define MMU_ATTR_PROT_INDEX_SHIFT 1
#define M85XXRIO_RIWAR_PCIEX 0x02
#define S_symLib_INVALID_SYMBOL_NAME (M_symLib | 5)
#define EPIC_OPT_POLAR_ACT_HIGH 0x00800000
#define ARMARCH7_T _VX_ARMARCH7_T
#define ENOSPC 28
#define _MMU_TLB_SZ_MASK 0x00000f00
#define M_smPktLib (78 << 16)
#define MMU_STATE_MASK_WRITETHROUGH 0x00000010
#define SIO_DEV_LOCK 0x1015
#define RLIMIT_OFILE RLIMIT_NOFILE
#define sioIoctl(pSioChan,cmd,arg) ((pSioChan)->pDrvFuncs->ioctl (pSioChan, cmd, arg))
#define SYM_MASK_EXACT 0x1ff
#define _VX_SIMHPPA 70
#define __INCmsgQLibh 
#define PCI2_OUTBOUND_BASE_ADRS_REG2(base) CVPUINT32(base, 0x9c48)
#define CLASSID_RESTORE(classId) ((CLASS_ID) ((int)classId & ~1))
#define _VX_PPC8560 2013
#define _PTRDIFF_T 
#define M_omsLib (158 << 16)
#define _DBCR0_IAC2_U 0x0040
#define EVENT_OBJ_SIGKILL CLASS2_EVENT(28)
#define _ARCH_jmp_buf_len 8
#define SPRG7_W 279
#define M_bootpLib (73 << 16)
#define INCLUDE_TIMEX 
#define __IDSTRING(name,string) __asm__(".ident\t\"" string "\"")
#define INCLUDE_ANSI_STRING 
#define EVENT_TASKSPAWN CLASS3_EVENT(0)
#define VXBAF_PREVENT_OPTIMIZATION 0x00000100
#define INCLUDE_NETBUFPOOL 
#define M85XXRIO_PELLCCSR(base) (CAST(VUINT32 *)(((char*)base) + 0x0004C ))
#define STATE_TO_VALID_INDEX(state) ((MMU_ATTR_VALID_GET(state)) >> MMU_ATTR_VALID_INDEX_SHIFT)
#define EPIC_IPI_DPATCH_REG0 (EPIC_CCSROFF + 0x00040)
#define _WRS_EVTLOGT1_NOTS 
#define EPIC_IPI_DPATCH_REG2 (EPIC_CCSROFF + 0x00060)
#define EPIC_IPI_DPATCH_REG3 (EPIC_CCSROFF + 0x00070)
#define EVENT_OBJ_MSGCREPLYGET CLASS2_EVENT(39)
#define KERNEL_LOCK_TRY() (kernelLockTry())
#define S_vxdbgLib_CPU_NOT_SUSPENDED VXDBG_ERROR_TO_ERRNO(VXDBG_ERR_CPU_NOT_SUSPENDED)
#define _VX_ALIGN_STACK _ARCH_ALIGN_STACK
#define _WRS_INITDATA __attribute__ ((__section__ (".data.init")))
#define __FLT_MIN_EXP__ (-125)
#define INCLUDE_LBC_CS3 
#define INCLUDE_PRIMARY_TSEC_END 
#define _BRANCH_CACHE 2
#define BLOB_PADDING(dataLength,alignment) (BLOB_PADDED_LENGTH(dataLength,alignment) - dataLength)
#define MMU_ATTR_PROT_SUP_MSK 0x00000007
#define FS_NAMES_ATA_SECONDARY_MASTER ""
#define EPIC_WHO_AM_I1_REG (EPIC_CCSROFF + 0x21090)
#define INT_LOCK_LEVEL 0x0
#define _WRS_REV_INSN_SET_CHANGE(p) (p)
#define EPIC_TSEC2RX_INT_NUM 20
#define F_GETOWN 5
#define EPIC_IN_INT32_VEC_REG (EPIC_CCSROFF + 0x10600)
#define LAWAR_SIZE_2MB 0x00000014
#define SIO_MODE_GET 0x1008
#define _VX_MIPSI32 45
#define EPIC_TSEC1TX_INT_NUM 13
#define EPIC_PERFMON_INT_NUM 28
#define M85XXRIO_ISR(base) (CAST(VUINT32 *)(((char*)base) + 0x11064))
#define _PPC_L1CSR_CPE 0x00010000
#define TRG_CLASS1_INDEX 0
#define KERNEL_APPL_CORE_DUMP_ENABLE FALSE
#define __printf0like(fmtarg,firstvararg) 
#define OM_EXCL 0x20000000
#define SIO_CALLBACK_GET_TX_CHAR 1
#define MMU_STATE_LOCK 0x00800000
#define _WRS_CONFIG_BUILD_MODE_speed 1
#define _VX_MIPSI2 43
#define _VX_MIPSI3 44
#define AIO_TASK_PRIORITY 0
#define __INCvxSmpPh 
#define DEFAULT_VM_MAP_ATTR (MMU_ATTR_VALID | MMU_ATTR_SUP_RWX | MMU_ATTR_CACHE_DEFAULT)
#define VXBAF_BYTE_SWAP_32(data) ((data) = ((((data) & 0xFF) << 24) | (((data) & 0xFF00) << 8) | (((data) & 0xFF0000) >>8) | (((data) >> 24) & 0xFF)))
#define INCLUDE_DOSFS_MAIN 
#define INCLUDE_NET_REM_IO 
#define I2C_ERROR_CYCLE_TIMEOUT (1<<16)
#define NBBY _VX_NBBY
#define FLASH_BASE_ADRS 0xfff00000
#define M85XXRIO_RxWAR_TYPE_WRITE(val) (val << 12)
#define _BSD_SIZE_T_ 
#define LOGIN_PASSWORD "RcQbRbzRyc"
#define FLASH_SPACE_SIZE TOTAL_FLASH_SIZE
#define S_ioLib_MEDIA_CHANGED (M_ioLib | 1)
#define MMU_ATTR_PROT_STATE_NUM 32
#define EVENT_RTPSIGQUEUE CLASS3_EVENT(88)
#define EPIC_VEC_SMSG_IRQ0 (EPIC_VEC_MSG_IRQ0 + EPIC_MAX_MSG_IRQS)
#define EPIC_CISR0_EX_INT(n) (EPIC_BIT(11-(n)) & EPIC_CISR0_EX_INT_MSK)
#define MMU_STATE_MASK_WRITABLE 0x00000c00
#define PCI_OUTBOUND_TRANS_ADRS_REG4(base) CVPUINT32(base, 0x8c80)
#define MII_EXP_PR 0x0002
#define IS_Q_ATTRIBUTE_OK(value) ((value) == QUEUE_INTERRUPTIBLE || (value) == QUEUE_NONINTERRUPTIBLE)
#define INCconfigAllh 
#define _WRS_CONFIG_PPC32_APP_TOOL "diab"
#define __INCvxTypesBaseh 
#define _VX_G200 32
#define M_erfLib (196 << 16)
#define _VX_MIPSI64 47
#define SEMRW_READ_CNT(semId) ( ((SEM_RW_EXT *) ((UINT) semId + sizeof (SEMAPHORE)))->readCount )
#define MAX_NUMBER_RIO_TARGETS 10
#define EPIC_MSISR_REG (EPIC_CCSROFF + 0x01720)
#define M85XXRIO_PGCCSR_OFFSET 0x13c
#define O_RSYNC _FRSYNC
#define VM_STATE_CACHEABLE_WRITETHROUGH MMU_ATTR_CACHE_WRITETHRU
#define DLL_INSERT(list,previousNode,node) { DL_NODE *temp; if ((previousNode) == NULL) { temp = ((DL_LIST *)(list))->head; ((DL_LIST *)(list))->head = (DL_NODE *)(node); } else { temp = ((DL_NODE *)(previousNode))->next; ((DL_NODE *)(previousNode))->next = (DL_NODE *)(node); } if (temp == NULL) ((DL_LIST *)(list))->tail = (DL_NODE *)(node); else temp->previous = (DL_NODE *)(node); ((DL_NODE *)(node))->next = temp; ((DL_NODE *)(node))->previous = (DL_NODE *)(previousNode); }
#define VX_TASK_INITIALIZE(name,prio,options,stackSz,entryPt,arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10) ((taskInitExcStk (&name ##Tcb, #name, (prio), (options), &name ##Stk[STACK_ROUND_UP((stackSz))], STACK_ROUND_UP((stackSz)), &name ##ExcStk [STACK_ROUND_UP((KERNEL_TASK_EXC_STACK_SIZE))], STACK_ROUND_UP((KERNEL_TASK_EXC_STACK_SIZE)), ((FUNCPTR) (entryPt)), (arg1), (arg2), (arg3), (arg4), (arg5), (arg6), (arg7), (arg8), (arg9), (arg10)) == OK) ? ((int) &name ##Tcb) : ((int) NULL))
#define EVENT_SYSCALL_0 CLASS3_EVENT(65)
#define EVENT_SYSCALL_1 CLASS3_EVENT(66)
#define EVENT_SYSCALL_2 CLASS3_EVENT(67)
#define EVENT_SYSCALL_3 CLASS3_EVENT(68)
#define EVENT_SYSCALL_4 CLASS3_EVENT(69)
#define EVENT_SYSCALL_5 CLASS3_EVENT(70)
#define EVENT_SYSCALL_6 CLASS3_EVENT(71)
#define EVENT_SYSCALL_7 CLASS3_EVENT(72)
#define EVENT_SYSCALL_8 CLASS3_EVENT(73)
#define VM_STATE_VALID_NOT MMU_ATTR_VALID_NOT
#define IPCOM_SOCK_NATIVE 4
#define SLL_NEXT(pNode) ( (((SL_NODE *)pNode)->next) )
#define __SMBF 0x0080
#define FIONWRITE 12
#define __INCcoprocPpch 
#define VXBAF_BYTE_SWAP_64(data) 
#define VXB_BUSID_PCIEXPRESS 5
#define EPIC_IN_INT13_VEC_REG (EPIC_CCSROFF + 0x103a0)
#define MMUE500_NUM_STATIC_TLB_ENTIRES 0x10
#define _VX_ARM7TDMI_T 125
#define SPEREG_SET SPE_CONTEXT
#define M_endLib (108 << 16)
#define VXB_ACCESS_REG_WRITE16 0x00000007
#define PCIEX_OUTBOUND_ATTR_REG2(base) CVPUINT32(base, 0xac50)
#define SPRG7_R 263
#define OBJ_VERIFY(objId,classId) objVerify (objId, classId)
#define N_TLB_ENTRIES_BITS 8
#define PC_OFFSET REG_SET_PC
#define M_symLib (28 << 16)
#define atomic32Or_inline atomic32Or
#define HOST_NAME_DEFAULT "bootHost"
#define MMU_ATTR_CACHE_OFF 0x00000080
#define PCI_IN_ATTR_TGI_LM 0x00f00000
#define MMU_ATTR_CACHE_STATE_NUM 16
#define tsecVxbEnd0Num NELEMENTS(tsecVxbEnd0Resources)
#define _PPC_ESF_VEC_OFF (_PPC_ESF_SP_OFF + _PPC_REG_SIZE)
#define FREQ_133_MHZ 133333333
#define _WRS_ARCH_HAS_VXDBG_CPU_CTRL_SUPPORT 
#define ENETRESET 52
#define FDEFER _FDEFER
#define DOSFS_DEFAULT_DATA_DIR_CACHE_SIZE 0x800000
#define VXB_ACCESS_REG_WRITE32 0x00000008
#define _VX_MCORE10 151
#define _VX_MCORE15 152
#define RIO_OP_SUPPORTED_RWRITE 0x00080000
#define MEM_ALIGNED(x) ALIGNED(x, _ALLOC_ALIGN_SIZE)
#define PCI_ATTR_WS_512M 0x0000001c
#define LAWAR_TGTIF_PCI 0x00000000
#define EPIC_IN_INT13_DES_REG (EPIC_CCSROFF + 0x103b0)
#define _VX_FD_SET(n,p) ((p)->fds_bits[(n)/_VX_NFDBITS] |= (1 << ((n) % _VX_NFDBITS)))
#define MSG_Q_INTERRUPTIBLE 0x04
#define SS_1D_5 5
#define INCLUDE_BOOT_LINE_INIT 
#define SS_1D_8 1
#define DDR_SDRAM_CFG 0x110
#define _VX_SIMNT 100
#define EPIC_GCR_RESET EPIC_BIT(31)
#define MII_AN_ADS_REG 0x4
#define _VX_SH7000 131
#define _PARM_BIG_ENDIAN 1234
#define VXB_REMOVAL_INSTANCE 0x00001000
#define G200 _VX_G200
#define VM_STATE_GUARDED MMU_ATTR_CACHE_GUARDED
#define RIO_CHANNEL_GENERIC 0x00000001
#define CHAR_MAX 255
#define _IFIELD_FRA(x) ((0x001f0000 & x) >> 16)
#define PCI_IN_ATTR_RTT_LM_READ_SNOOP 0x00050000
#define _WRS_VA_ADDR(x) ((va_list *)x)
#define _PPC_WORD_SIZE 32
#define INCLUDE_MOT_TSEC_END 
#define VXB_ACCESS_REG_WRITE64 0x00000009
#define CONSOLE_BAUD_RATE 115200
#define DS_2D_5 8
#define DS_2D_8 4
#define _PPC_ESR_PPR_U 0x0400
#define _IFIELD_BO(x) ((0x03e00000 & x) >> 21)
#define EPIC_IN_INT0_DES_REG (EPIC_CCSROFF + 0x10210)
#define PCI2_OUTBOUND_BASE_ADRS_REG4(base) CVPUINT32(base, 0x9c88)
#define INCLUDE_END_COMMON 
#define FLASH_SECTOR_SIZE 0x00020000
#define _VX_LOW32(x) (long) (((long long)(x)) & (unsigned long) 0xffffffff)
#define EOS '\0'
#define DELETE_DONE OK
#define _ARCH_FLT_RADIX 2
#define M85XX_PORDEVSR_PCI_MODE_MASK 0x00800000
#define _PARM_BUFSIZ 1024
#define SM_INT_USER_1 8
#define SM_INT_USER_2 9
#define _PPC_TCR_FPEXT_U 0x0040
#define SYSFLG_WDB 0x200
#define VXB_ACCESS_REG_READ64 0x00000005
#define CS3_BNDS 0x018
#define _MMU_TLB_SZ_256M 0x00000900
#define S_vxdbgLib_INVALID_EVENT_TYPE VXDBG_ERROR_TO_ERRNO(VXDBG_ERR_INVALID_EVENT_TYPE)
#define __REGISTER_PREFIX__ 
#define M85XXRIO_AIDCAR(base) (CAST(VUINT32 *)(((char*)base) + 0x0008))
#define _VX_SH7040 133
#define VXB_PARAM_INT32 0x0001
#define S_iosLib_DUPLICATE_DEVICE_NAME EINVAL
#define VXB_INTR_TRIG_LEVEL 0x20
#define _WRS_USAGE_WARNING(x) _WRS_DEPRECATED(x)
#define S_vmLib_NOT_PAGE_ALIGNED (M_vmLib | 1)
#define EIDRM 84
#define EPIC_RES47_INT_VEC (EPIC_RES47_INT_NUM + EPIC_VEC_IN_IRQ0)
#define VXDBG_MEM_WIDTH_WRITE vxdbgMemWrite
#define REG_SET_XER (REG_SET_CR + 4)
#define MPC85XX_I2C_STATUS_REG_MCF 0x80
#define _PC_NAME_MAX 9
#define __INCmiiLibh 
#define _DBCR0_RST 0x30000000
#define _PPC_ESF_SIZE (9 * _PPC_REG_SIZE + _PPC_REG_SET_SIZE)
#define SM_INT_MAILBOX_R1 5
#define __INCivPpch 
#define SM_INT_MAILBOX_R4 7
#define RIO_CFG_INDEX 5
#define MPC85XX_I2C_STATUS_REG_BCSTM 0x08
#define MII_CR_AUTO_EN 0x1000
#define HOST_USER_DEFAULT "target"
#define _WRS_CONFIG_OBJECT_VERIFICATION 1
#define INCLUDE_VXMUX_NULLBUFPOOL 
#define REV2_SILICON 
#define _PC_MAX_CANON 7
#define IPCOM_USE_KEY_DB_CMD_VERIFY 
#define M8260_DPPC_VALUE 0x08000000
#define PCI2_INT_ACK (CCSBAR + 0x9008)
#define MAX_MAC_DEVS 4
#define EVENT_TASK_CPU_AFFINITY_SET CLASS3_EVENT(230)
#define EPIC_MAX_MSG_IRQS 4
#define ALIGN_REGS _VX_ALIGN_REGS
#define _PPC_ESR_AP 0x00080000
#define SPIN_LOCK_ISR_TAKE(x) (spinLockIsrTake (x) )
#define EVENTS_FETCH 0x80
#define INCLUDE_SEM_DELETE 
#define TLB_GLOBAL_BIT 25
#define EPIC_IN_INT25_DES_REG (EPIC_CCSROFF + 0x10530)
#define TIMING_CFG_0 0x104
#define TIMING_CFG_1 0x108
#define TIMING_CFG_2 0x10C
#define DDR_OFFSET 0x2000
#define _DBCR2_DAC12M_U 0x00c0
#define MII_PHY_100 0x0040
#define VXB_PARAM_INT64 0x0002
#define FIOBAUDRATE 4
#define __INCsllLibh 
#define CLASS3_EVENT(id) (MIN_CLASS3_ID + id)
#define M85XX_I2C1_BASE 0x3000
#define WDB_COMM_TIPC 9
#define PCI_IN_ATTR_RTT_LM_READ_UNLOCK_L2_CACHE_LINE 0x00070000
#define SYM_IS_TEXT(symType) ((symType) & SYM_TEXT)
#define _WRS_CONFIG_BUILD_KERNEL 1
#define _PPC_MSR_CE_U 0x0002
#define _PPC_MMUCSR0_L2TLB1_FI_V(x) (x >> 1)
#define VXB_PCI_BUS_CFG_WRITE(pDev,byteOffset,transactionSize,data) ((_func_vxbPciDevCfgWrite == NULL) ? ERROR : _func_vxbPciDevCfgWrite (pDev, byteOffset, transactionSize, (UINT32) data))
#define M85XX_L2CTL_L2MEXTDIS_BIT 20
#define ns165500Num NELEMENTS(ns165500Resources)
#define MEM_BLOCK_ERROR_MASK 0x0c
#define EVENT_OBJ_SIGWAIT CLASS2_EVENT(32)
#define FNONBIO _FNONBLOCK
#define _IFIELD_IMM(x) ((0x0000f000 & x) >> 12)
#define CHAR_MIN 0
#define __INCvxAtomicArchLibCommonh 
#define EVENT_TASKSUSPEND CLASS3_EVENT(4)
#define VM_STATE_GUARDED_NOT 0
#define CHAR_FROM_CONST(x) _VX_CHAR_FROM_CONST(x)
#define __VERSION__ "4.1.2"
#define _VX_MC68LC040 6
#define EVENT_ISR_DISPATCHER_DONE CLASS3_EVENT(61)
#define PCIEX_OUTBOUND_TRANS_EXT_ADRS_REG0(base) CVPUINT32(base, 0xac04)
#define PCIEX_OUTBOUND_TRANS_EXT_ADRS_REG1(base) CVPUINT32(base, 0xac24)
#define RIO_SWITCH_PORT_SRC_MASK 0xff000000
#define PCIEX_OUTBOUND_TRANS_EXT_ADRS_REG4(base) CVPUINT32(base, 0xac84)
#define EPIC_DMA0_INT_NUM 4
#define DEFAULT_ALIVE_TIMEOUT 600
#define VME_AM_STD_SUP_DATA 0x3d
#define MMU_STATE_CACHEABLE 0x00000000
#define CLASS_OFFSET 0xB
#define SLL_REMOVE(list,deleteNode,previousNode) { if (((SL_NODE *)(previousNode)) == NULL) { ((SL_LIST *)(list))->head = ((SL_NODE *)(deleteNode))->next; if (((SL_LIST *)(list))->tail == ((SL_NODE *)(deleteNode))) ((SL_LIST *)(list))->tail = NULL; } else { ((SL_NODE *)(previousNode))->next = ((SL_NODE *)(deleteNode))->next; if (((SL_LIST *)(list))->tail == ((SL_NODE *)(deleteNode))) ((SL_LIST *)(list))->tail = ((SL_NODE *)(previousNode)); } }
#define SYSFLG_PROXY 0x100
#define EPIC_PERFMON_0_MSK_REG1 (EPIC_CCSROFF + 0x01360)
#define M85XX_L2CEWCRn(x,n) (CAST(VUINT32 *)((x + 0x20018) + (n * 0x10)))
#define IPCOM_KEY_DB_KEY_ENCRYPTING_KEY "donald duck"
#define _WRS_CONFIG_FEATURE_IPNET_BUILD "speed"
#define EVENT_RTP_DELETE_STATE VXEV26
#define S_semLib_INVALID_STATE (M_semLib | 101)
#define EPIC_EX_INT0_VEC_REG (EPIC_CCSROFF + 0x10000)
#define _IFORM_EVX_3 93
#define PCI_ATTR_BS_BIT 0x40000000
#define EVENT_TASKDELAY CLASS3_EVENT(2)
#define MII_AN_PRTN_NEXT_REG 0x8
#define MII_EXP_FAULT 0x0010
#define WV_REV_ID_CURRENT_SMP WV_REV_ID_VXWORKS_6_7_SMP
#define __INT_WCHAR_T_H 
#define VXWORKS_VERSION RUNTIME_NAME " " RUNTIME_VERSION
#define __BIG_ENDIAN__ 1
#define IS_CLASS2_EVENT(event) ((event >= MIN_CLASS2_ID) && (event <= MAX_CLASS2_ID))
#define MII_PHY_LINK_UNKNOWN 0x0
#define S_memLib_PAGE_SIZE_UNAVAILABLE (M_memLib | 5)
#define _VX_PPC601 91
#define _VX_PPC602 92
#define _VX_PPC603 93
#define _VX_PPC604 94
#define SPD_SIZE 256
#define _PC_REC_INCR_XFER_SIZE 14
#define SPIN_LOCK_TASK_INIT(x,y) ( spinLockTaskInit(x, y))
#define _DBSR_DAC1R_U 0x0008
#define _WRS_IS_SUPV_EXC() (((excInfo.msr & _PPC_MSR_PR) == _PPC_MSR_PR) ? FALSE : TRUE)
#define S_msgQLib_NON_ZERO_TIMEOUT_AT_INT_LEVEL (M_msgQLib | 2)
#define _WRS_CONFIG_COMPONENT_IPPPP 1
#define WIND_CLASS_INST_RTN 0x1c
#define EPIC_EX_INT8_DES_REG (EPIC_CCSROFF + 0x10110)
#define USER_B_CACHE_ENABLE 
#define O_RDWR 2
#define VX_COPROC1_TASK 0x01000000
#define _PPC_ESF_R11 _PPC_ESF_R(11)
#define _T_PTRDIFF_ 
#define EPERM 1
#define ARM7TDMI _VX_ARM7TDMI
#define FIOSELECT 28
#define M_m2RipLib (110 << 16)
#define TPR 0x0000
#define _WRS_CONFIG_APP_TOOL_diab 1
#define _PPC_ESF_R12 _PPC_ESF_R(12)
#define VM_STATE_WBACK_NOT MMU_ATTR_CACHE_WRITETHRU
#define EPIC_EX_INT0_DES_REG (EPIC_CCSROFF + 0x10010)
#define WIND_TCB_T10 WIND_TCB_R24
#define WIND_TCB_T11 WIND_TCB_R25
#define WIND_TCB_T13 WIND_TCB_R27
#define WIND_TCB_T14 WIND_TCB_R28
#define WIND_TCB_T15 WIND_TCB_R29
#define WIND_TCB_T16 WIND_TCB_R30
#define WIND_TCB_T17 WIND_TCB_R31
#define S_objLib_OBJ_DELETED (M_objLib _WRS_BIT_OR 3)
#define MMU_ATTR_VALID_STATE_NUM 2
#define __SSTR 0x0200
#define EVENT_WINDWDCANCEL CLASS2_EVENT(12)
#define EPIC_IPI_DPATCH0_REG2 (EPIC_CCSROFF + 0x20060)
#define CS1_CONFIG 0x084
#define BUS_TYPE_NONE NONE
#define BOOT_FIELD_LEN 160
#define VX_TASK_PRIORITY_MIN 0
#define LLSB(x) ((x) & 0xff)
#define RIO_CSR_LCS_HIGHBAR 0x58
#define WIND_TCB_R11 (WIND_TCB_REGS + REG_SET_GR(11))
#define EPIC_EOI_REG (EPIC_CCSROFF + 0x000b0)
#define EPIC_EIVPR_VECTOR_MSK (0xffff)
#define S_objLib_OBJ_INVALID_OWNER (M_objLib _WRS_BIT_OR 12)
#define M85XX_L2ERRINJCTL(x) (CAST(VUINT32 *)((x + 0x20E08)))
#define EPIC_GT_B_INTERRUPT 30
#define __hardfp 1
#define SIO_KYBD_MODE_SET 0x1011
#define MMU_STATE_CACHEABLE_NOT 0x00000008
#define __INCclassLibPh 
#define _WRS_DEPRECATED(x) __attribute__((deprecated))
#define __SLBF 0x0001
#define _ARCH_LDBL_MIN 2.2250738585072014e-308L
#define _POSIX_STREAM_MAX 8
#define EPIC_VEC_EXT_IRQ0 0
#define EPIC_TM_A_FREQ_REG (EPIC_CCSROFF + 0x010f0)
#define _ARCH_SHRT_MAX 32767
#define INCLUDE_POOL 
#define WIND_CLASS_TYPE 0x38
#define EPIC_CTPR_TASKPRI_MSK (EPIC_BIT(3) | EPIC_BIT(2) | EPIC_BIT(1) | EPIC_BIT(0))
#define _SYS_SIZE_T_H 
#define USPRG0 256
#define RLIMIT_NPROC 7
#define VM_STATE_GLOBAL_NOT 0
#define M85XX_L2CTL_L2LFRID_BIT 8
#define INCLUDE_IPCOM_USE_ETHERNET 
#define EPIC_GTVPR_INTR_ACTIVE EPIC_BIT(30)
#define DDRBA (CCSBAR | DDR_OFFSET)
#define SIO_MCTRL_ISIG_MASK 0x100F
#define SEM_NO_RECURSE 0x400
#define EPIC_IN_INT26_VEC_REG (EPIC_CCSROFF + 0x10540)
#define _BIG_ENDIAN 1234
#define __SIZE_T__ 
#define MII_EXP_PRT_AN 0x0001
#define MII_PHY_LINK_AUTO 0x1
#define CACHE_DMA_INVALIDATE(adrs,bytes) CACHE_DRV_INVALIDATE (&cacheDmaFuncs, (adrs), (bytes))
#define M_fmsLib (155 << 16)
#define M85XXRIO_RxWAR_SIZE_1MB 21
#define TASK_PRIORITY_SELF -1
#define _EXC_NEW_OFF_SYSTIMER _EXC_OFF_DECR
#define __SRW 0x0010
#define EPIC_SMSG_VEC_REG_INTERVAL 0x20
#define MCSRR1 571
#define PCI_IN_ATTR_RTT_RIO_READ 0x00040000
#define _EXC_OFF_INST 0x00400
#define _ARCH_va_start(list,last_arg) (list = (va_list)(&last_arg + 1))
#define S_symLib_TABLE_NOT_EMPTY (M_symLib | 3)
#define WRS_DATA_ALIGN_BYTES(x) _WRS_DATA_ALIGN_BYTES(x)
#define WDB_POST_KERNEL_INIT 0
#define MMU_PAGE_OPTIMIZE (*(mmuLibFuncs.mmuPageOptimize))
#define EPIC_GT_A_INTERRUPT 23
#define EPIC_INT_ACK_REG (EPIC_CCSROFF + 0x000a0)
#define WIND_TCB_R18 (WIND_TCB_REGS + REG_SET_GR(18))
#define MMU_ATTR_CACHE_DEFAULT 0x00000800
#define _IFORM_EVS_1 86
#define EPIC_TSEC1TX_INT_VEC (EPIC_TSEC1TX_INT_NUM + EPIC_VEC_IN_IRQ0)
#define _VX_MCORE200 153
#define EPIC_PERFMON_INT_VEC (EPIC_PERFMON_INT_NUM + EPIC_VEC_IN_IRQ0)
#define MMU_MAX_PHYS_BITS_GET (*(mmuLibFuncs.mmuMaxPhysBitsGet))
#define INCLUDE_TASK_CREATE_DELETE 
#define EPIC_IN_INT26_DES_REG (EPIC_CCSROFF + 0x10550)
#define EVENT_OBJ_SIGSUSPEND CLASS2_EVENT(27)
#define M85XX_L2SRBAR_ADDR_MSK 0xFFFFC000
#define INT_MASK(src,des) rlwinm des, src, 0, _PPC_MSR_BIT_EE+1, _PPC_MSR_BIT_EE-1; rlwinm des, des, 0, _PPC_MSR_BIT_CE+1, _PPC_MSR_BIT_CE-1
#define INCLUDE_INTCTLR_LIB 
#define CACHE_TEXT_LOCAL_UPDATE(adrs,bytes) CACHE_TEXT_UPDATE(adrs, bytes)
#define ELOOP 64
#define _IFORM_VA_1 62
#define _IFORM_VA_2 63
#define IVEC_TO_INUM(intVec) ((int) (intVec))
#define _VX_PPC85XX 2004
#define LOCAL_MEM_SIZE2 0x4000000
#define LBC_CS3_LOCAL_SIZE_MASK 0xfff00000
#define _WRS_CHANGE_INSN_SET_PTR(p) (p)
#define F_SETFD 2
#define INCLUDE_SIGNALS 
#define F_SETFL 4
#define __INCconfigh 
#define MII_TECH_MASK MII_ADS_TECH_MASK
#define _EXC_PROG_SRR1_PRIV 0x00040000
#define _VX_DBLFUNCPTR_DEFINED 
#define _DBCR2_DAC2US_U 0x0c00
#define _POSIX_SYNC_IO 0
#define EPIC_TSEC4RX_INT_NUM 22
#define MMU_PAGE_INDEX_BITS_MAX 10
#define FWRITE _FWRITE
#define _DBSR_IDE_U 0x8000
#define EPIC_MSG_EN_REG (EPIC_CCSROFF + 0x01500)
#define SIO_MODEM_CD 0x08
#define _ARCH_SHRT_MIN (-32767-1)
#define __SWR 0x0008
#define SEM_M_SAFE_Q_FLUSH 0x2
#define _PARM_L_ctermid 64
#define _TOOL_HDR_STRINGIFY(x) #x
#define EVENT_SEMGIVE CLASS3_EVENT(12)
#define __INCivh 
#define SPEFSCR 512
#define _PPC_ESF_R0 _PPC_ESF_R(0)
#define PCI_OUTBOUND_TRANS_EXT_ADRS_REG0(base) CVPUINT32(base, 0x8c04)
#define SIO_ERROR_PARITY 1
#define WV_EVT_PROTO_REV_1_EAR 1
#define EVT_OBJ_6(OBJ,CLASS,evtId,ARG1,ARG2,ARG3,ARG4,ARG5,ARG6) do { if ( ACTION_IS_SET ) { EVT_OBJ_6_T evt_obj_6; evt_obj_6.objId = OBJ; evt_obj_6.classId = CLASS; evt_obj_6.args [0] = (int)ARG1; evt_obj_6.args [1] = (int)ARG2; evt_obj_6.args [2] = (int)ARG3; evt_obj_6.args [3] = (int)ARG4; evt_obj_6.args [4] = (int)ARG5; evt_obj_6.args [5] = (int)ARG6; eventPointSwHandle(evtId, &evt_obj_6, sizeof evt_obj_6); } } while ((0))
#define _PPC_ESF_R3 _PPC_ESF_R(3)
#define MII_CR_DEF_0_MASK 0xca7f
#define _WRS_FASTDATA __attribute__ ((__section__ (".data.fast")))
#define FIOSETOPTIONS FIOOPTIONS
#define _PPC_ESF_R4 _PPC_ESF_R(4)
#define _EXC_INFO_NIA 0x8000
#define VXBAF_ENDIAN_MASK 0xFFFF0000
#define PPC_DECR_INT_ID 599
#define FREQ_266_MHZ 266666666
#define OPT_REG_WRITE8 0x05
#define MSG_Q_TYPE_MASK 0x01
#define O_RDONLY 0
#define EPIC_IPI_DPATCH1_REG2 (EPIC_CCSROFF + 0x21060)
#define EPIC_IPI_DPATCH1_REG3 (EPIC_CCSROFF + 0x21070)
#define EINVAL 22
#define _ANSI_STDARG_H_ 
#define __INCresourceh 
#define RIO_CHANNEL_AVAILABLE NULL
#define MMU_CURRENT_SET (*(mmuLibFuncs.mmuCurrentSet))
#define __INCstringh 
#define _PPC_ESF_R7 _PPC_ESF_R(7)
#define RIO_FEATURES_EXTADDR_34 0x2000
#define RAND_MAX _PARM_RAND_MAX
#define S_selectLib_NO_SELECT_SUPPORT_IN_DRIVER (M_selectLib | 1)
#define _MMU_TLB_SZ_SHIFT 8
#define _DEFINED_atomic_t 
#define _WRS_READ_PREFETCH(ptr) __builtin_prefetch((ptr),0)
#define _SIZET_ 
#define EPIC_MSIDR_EX_PIN EPIC_BIT(31)
#define F_SETLK 8
#define MMU_ATTR_SPL_1 0x00002000
#define MMU_ATTR_SPL_2 0x00004000
#define MMU_ATTR_SPL_3 0x00008000
#define MMU_ATTR_SPL_4 0x00010000
#define MMU_ATTR_SPL_5 0x00020000
#define MMU_ATTR_SPL_6 0x00040000
#define MMU_ATTR_SPL_7 0x00080000
#define ENTIRE_CACHE ULONG_MAX
#define M85XX_L2CTL_L2LO_BIT 13
#define MII_AN_NEXT_REG 0x7
#define RIO_FEATURES_EXTADDR_50 0x4000
#define __SIZE_TYPE__ unsigned int
#define _VX_ALIGN_REGS _ARCH_ALIGN_REGS
#define __INCkernelBaseLibPh 
#define M_dshm (200 << 16)
#define OPT_REG_WRITE_READ_BACK_16 0x0A
#define EPIC_PERFMON_0_MSK_REG0 (EPIC_CCSROFF + 0x01350)
#define RIO_FEATURES_EXTADDR_66 0x8000
#define MMU_STATE_MASK_WIMG 0x0000001F
#define CDS85XX_FLASH_RESERVED_SIZE 0x00100000
#define DAC1 316
#define DAC2 317
#define EPIC_SMSG_INT0_DES_REG (EPIC_CCSROFF + 0x11c10)
#define FREQ_333_MHZ 333333333
#define EPIC_SR_IN_MU2_INT_NUM 40
#define OPT_REG_WRITE_READ_BACK_32 0x0B
#define _IFIELD_OPCD(x) ((0xfc000000 & x) >> 26)
#define CLOCK_THREAD_CPUTIME_ID 0x3
#define MEM_ALLOC_ERROR_SUSPEND_FLAG 0x40
#define EVENT_SALRUN_SOCKCLOSE CLASS3_EVENT(103)
#define EVENT_WDCREATE CLASS3_EVENT(16)
#define M85XXRIO_SEGS_PER_CHANNEL 4
#define INCLUDE_CPU_LIGHT_PWR_MGR 
#define M85XX_LTESR(base) (CAST(VUINT32 *)((base) + 0x50B0))
#define IPCOM_USE_SHELL IPCOM_SHELL_NATIVE
#define LAWAR_ENABLE 0x80000000
#define CORE_DUMP_SKIP_TEXT_SECTION TRUE
#define _PPC_L1CFG_NWAY_MASK 0x000FF000
#define BOOT_DEV_LEN 40
#define M85XXRIO_ROWBAR_OFFSET(n) (0x10C08 + ((n)*0x20))
#define MII_ID2_REVISON_MASK 0x000f
#define O_NOATIME _FNOATIME
#define EVENT_OBJ_SEMRTAKE CLASS2_EVENT(47)
#define REAL_SPD_SIZE 256
#define _VX_FR500 171
#define PPC8260 _VX_PPC8260
#define PCI_IO2LOCAL(x) (((UINT32)x - PCI_IO_ADRS) + CPU_PCI_IO_ADRS)
#define EPIC_SR_IN_MU2_INT_VEC (EPIC_SR_IN_MU2_INT_NUM + EPIC_VEC_IN_IRQ0)
#define _IFIELD_STRM(x) ((0x00600000 & x) >> 21)
#define OPT_REG_WRITE_READ_BACK_64 0x0C
#define EPIC_IPIVPR_INTR_MSK EPIC_BIT(31)
#define MII_10MBS 10000000
#define _DBSR_IDE 0x80000000
#define __LDBL_EPSILON__ 2.2204460492503131e-16L
#define MEM_BLOCK_ERROR_RETURN 0
#define ARM710A _VX_ARM710A
#define FIOLABELGET 33
#define PCI2_OUTBOUND_TRANS_EXT_ADRS_REG1(base) CVPUINT32(base, 0x9c24)
#define PCI2_OUTBOUND_TRANS_EXT_ADRS_REG2(base) CVPUINT32(base, 0x9c44)
#define INST_BCLRL_MASK 0xfc00ffff
#define O_SYNC _FSYNC
#define _FCNTRL 0x40000
#define VXDBG_BP_BY_ADDR_RANGE_REMOVE(pClient,retVal,startAddr,endAddr) { VXDBG_BP_DEL_INFO bpInfo; bpInfo.type = BP_BY_ADDR_RANGE_DELETE; bpInfo.pClnt = pClient; bpInfo.info.addrRange.startAddr = startAddr; bpInfo.info.addrRange.endAddr = endAddr; VXDBG_BP_DELETE(bpInfo, retVal); }
#define EPIC_SMSG_DEST_REG_VECREGOFF 0x10
#define _FSHLOCK 0x0080
#define M85XX_L2CEWCR_SIZMASK_MSK 0x0FFFFFFF
#define FIODISCARDGET 70
#define EPIC_IIVPR_INTR_ACTIVE EPIC_BIT(30)
#define MMU_PAGE_BLOCK_SIZE_GET (*(mmuLibFuncs.mmuBlockSizeGet))
#define EPIC_RES46_INT_NUM 46
#define INCLUDE_CONSTANT_RDY_Q 
#define _DEFINED_pid_t 
#define __INCeventLibPh 
#define PCI2_INBOUND_TRANS_ADRS_REG2(base) CVPUINT32(base, 0x9DC0)
#define __INCb_struct__Sched_paramh 
#define SLL_LAST(pList) ( (((SL_LIST *)pList)->tail) )
#define MMU_STATE_MEM_COHERENCY_NOT 0x00000000
#define PCI_ERROR_CAPTURE_DISABLE_REG 0x8e04
#define EVENT_RTPSIGTIMEDWAIT CLASS3_EVENT(91)
#define SYM_IS_ABS(symType) ((symType) & SYM_ABS)
#define PCI_ATTR_WS_1G 0x0000001d
#define PCI_ATTR_WS_1M 0x00000013
#define USER_D_CACHE_ENABLE 
#define DMA_CHANNEL_0 0
#define DMA_CHANNEL_1 1
#define DMA_CHANNEL_2 2
#define DMA_CHANNEL_3 3
#define S_memLib_INVALID_ALIGNMENT (M_memLib | 8)
#define INCLUDE_LOCK_TEXT_SECTION 
#define IPCOM_USE_MUX2 
#define OBJ_HANDLE_TBL_SIZE 256
#define MII_PHY_NULL 0xff
#define SYS_MODEL_8543E "Wind River SBC8543E - Security Engine"
#define DEFAULT_FILE_PERM 0000640
#define _DBCR0_RST_U 0x3000
#define EPIC_EX_DEST_REG_VECREGOFF 0x10
#define EPIC_VEC_GT_B_IRQ0 (EPIC_VEC_GT_A_IRQ0 + EPIC_MAX_GT_A_IRQS)
#define DLL_EMPTY(pList) ( (((DL_LIST *)pList)->head == NULL) )
#define PCI_ATTR_WS_2M 0x00000014
#define SYSFLG_VENDOR_1 0x2000
#define SYSFLG_VENDOR_2 0x4000
#define SYSFLG_VENDOR_3 0x8000
#define VXB_ITERATE_ORPHANS 2
#define CUST_ENET4 0xAA
#define CUST_ENET5 0xA0
#define _WRS_LOCK_ALIGN_ticket 128
#define RIO_CAR_PE_FEATURES 0x10
#define S_objLib_OBJ_TIMEOUT (M_objLib _WRS_BIT_OR 4)
#define __SWRNBF (__SWR|__SNBF)
#define RIO_CHANNEL_TAS_SET 3
#define INCLUDE_REBOOT_HOOKS 
#define MPC85XX_I2C_DIG_FILTER_REG_MASK 0x3F
#define MSG_NODE_SIZE(msgLength) (MEM_ROUND_UP((VX_MSG_NODE_SIZE + msgLength)))
#define VXB_BUSID_SPI 21
#define EPIC_MSIVPR_INTR_MSK EPIC_BIT(31)
#define MII_MF_TA_LEN 0x2
#define M85XX_L2SRBAREA1(x) (CAST(VUINT32 *)((x + 0x2010C)))
#define SYS_MODEL_8545E "Wind River SBC8545E - Security Engine"
#define SIO_MODEM_RI 0x10
#define _VX_HIGH32(x) (long) ((((long long)(x)) >> 32) & (unsigned long)0xffffffff)
#define PCI_ATTR_WS_4G 0x0000001f
#define PCI_ATTR_WS_4K 0x0000000B
#define SM_OBJ_MAX_TRIES 5000
#define MII_PHY_DEF_SET 0x1000
#define EPIC_TM_B0_VEC_REG (EPIC_CCSROFF + 0x02120)
#define _DBSR_IAC2_U 0x0040
#define RIO_CAR_DEST_OPERATIONS 0x1c
#define MMU_ENABLE (*(mmuLibFuncs.mmuEnable))
#define STACK_VERSION_MAJOR 3
#define EPIC_DMA0_INT_VEC (EPIC_DMA0_INT_NUM + EPIC_VEC_IN_IRQ0)
#define sioPollInput(pSioChan,inChar) ((pSioChan)->pDrvFuncs->pollInput (pSioChan, inChar))
#define SM_MASTER 0
#define INCLUDE_EXC_SHOW 
#define SYS_MODEL_8547E "Wind River SBC8547E - Security Engine"
#define VXBAF_CONVERT_LONG_LONG 0x00000008
#define _DEFINED_dev_t 
#define _DBCR2_DAC1US_U 0xc000
#define EPIC_IN_INT39_VEC_REG (EPIC_CCSROFF + 0x106e0)
#define _PPC_L1CFG_REPL_V(x) (x >> 18)
#define _IFORM_400_1 57
#define _IFORM_400_3 59
#define VXB_ACCESS_INT_VEC_GET 0x0000000e
#define ON_BOARD_FLASH 1
#define I2C_WRITOP 1
#define EVENT_WINDPENDQGET CLASS2_EVENT(13)
#define EVENT_CPC_DONE CLASS3_EVENT(233)
#define _VX_SH7729 136
#define __INCsmLibh 
#define S_miiLib_PHY_NO_ABLE (M_miiLib | 3)
#define SYS_MODEL_8548E "Wind River SBC8548E - Security Engine"
#define LBC_SDRAM_LOCAL_SIZE LOCAL_MEM_SIZE2
#define S_spinLockLib_LOCK_IN_RECOVERY (M_spinLockLib | 3)
#define M85XX_L2CEWCR_LOCK_BIT 30
#define S_mmuLib_NOT_CONTIGUOUS_STATE (M_mmuLib | 11)
#define VXB_REMOVAL_MASK 0x0000f000
#define EVENT_TIMER_ROLLOVER CONTROL_EVENT(2)
#define _WRS_WRITE_PREFETCH(ptr) __builtin_prefetch((ptr),1)
#define EPIC_TM_B0_DES_REG (EPIC_CCSROFF + 0x02130)
#define S_objLib_OBJ_HANDLE_TBL_FULL (M_objLib _WRS_BIT_OR 15)
#define LOGIN_USER_NAME "target"
#define EVENT_SEMFLUSH CLASS3_EVENT(11)
#define _PPC_MSR_SPE_U 0x0200
#define MMU_PHYS_TRANSLATE (*(mmuLibFuncs.mmuPhysTranslate))
#define SPRG4_W 276
#define EPIC_FEATURES_REG (EPIC_CCSROFF + 0x01000)
#define _PPC_SPEFSCR_FXH 0x10000000
#define _WRS_CONFIG_COMPONENT_USR_SRC 1
#define PCI_ATTR_WS_8K 0x0000000c
#define EBUSY 16
#define EPIC_MSIDR_P0_INT EPIC_BIT(0)
#define _WRS_CONFIG_TASK_CREATE_HOOKS_D 1
#define PCI_INBOUND_TRANS_ADRS_REG1(base) CVPUINT32(base, 0x8DE0)
#define PCI_INBOUND_TRANS_ADRS_REG2(base) CVPUINT32(base, 0x8DC0)
#define PCI_INBOUND_TRANS_ADRS_REG3(base) CVPUINT32(base, 0x8DA0)
#define _IFLAG_4XX_SPEC (_IFLAG_403_SPEC | _IFLAG_405_SPEC | _IFLAG_440_SPEC)
#define O_NDELAY _FNDELAY
#define _DBCR2_DAC1ER_U 0x3000
#define _ARCH_UCHAR_MAX 255
#define _VX_MAP1000 180
#define EPIC_IN_INT39_DES_REG (EPIC_CCSROFF + 0x106f0)
#define MII_PHY_1000T_FD 0x10000
#define _PPC_MSR_MMU_RI_EXTRACT(src,dst) rlwinm dst, src, 0, _PPC_MSR_BIT_IS, _PPC_MSR_BIT_DS
#define VXB_REG_BASE "regBase"
#define EPIC_IN_INT1_VEC_REG (EPIC_CCSROFF + 0x10220)
#define BUFSIZE BUFSIZ
#define VXB_ASSERT_V(cond) 
#define EVENT_WDSTART CLASS3_EVENT(18)
#define MII_PHY_AUTO 0x0010
#define EPIC_MSR_ST(n) (EPIC_BIT(n) & EPIC_MER_ST_MSK)
#define _IFIELD_AA(x) ((0x00000002 & x) >> 1)
#define EPIC_SEC_INT_NUM 29
#define INCLUDE_TASK_HOOKS 
#define MII_PHY_PRE_INIT 0x0001
#define _ARCH_FLT_MIN_EXP (-125)
#define S_ioLib_WRITE_PROTECTED EACCES
#define MCF5400 _VX_MCF5400
#define INCLUDE_COMMON_NET 
#define SPINLOCK_OPERATION_OK 0
#define EPIC_IIVPR_INTR_MSK EPIC_BIT(31)
#define EVT_OBJ_STR_0(OBJ,CLASS,evtId,LENGTH,STRING) do { if (ACTION_IS_SET) { EVT_OBJ_STR_0_T evt_obj_str_0; evt_obj_str_args_0.evt_obj_str.objId = OBJ; evt_obj_str_args_0.evt_obj_str.classId = CLASS; evt_obj_str_args_0.evt_obj_str.pData = STRING; evt_obj_str_args_0.evt_obj_str.length = LENGTH; eventPointSwHandle (evtId, &evt_obj_str_0, sizeof evt_obj_str_0); } } while ((0))
#define WDB_GOPHER_TAPE_NB 10
#define EVT_OBJ_STR_3(OBJ,CLASS,evtId,ARG1,ARG2,ARG3,LENGTH,STRING) do { if (ACTION_IS_SET) { EVT_OBJ_STR_ARGS_3_T evt_obj_str_args_3; evt_obj_str_args_3.evt_obj_str.objId = OBJ; evt_obj_str_args_3.evt_obj_str.classId = CLASS; evt_obj_str_args_3.evt_obj_str.pData = STRING; evt_obj_str_args_3.evt_obj_str.length = LENGTH; evt_obj_str_args_3.args [0] = (int)ARG1; evt_obj_str_args_3.args [1] = (int)ARG2; evt_obj_str_args_3.args [2] = (int)ARG3; eventPointSwHandle (evtId, &evt_obj_str_args_3, sizeof evt_obj_str_args_3); } } while ((0))
#define EVT_OBJ_STR_5(OBJ,CLASS,evtId,ARG1,ARG2,ARG3,ARG4,ARG5,LENGTH,STRING) do { if (ACTION_IS_SET) { EVT_OBJ_STR_ARGS_5_T evt_obj_str_args_5; evt_obj_str_args_5.evt_obj_str.objId = OBJ; evt_obj_str_args_5.evt_obj_str.classId = CLASS; evt_obj_str_args_5.evt_obj_str.pData = STRING; evt_obj_str_args_5.evt_obj_str.length = LENGTH; evt_obj_str_args_5.args [0] = (int)ARG1; evt_obj_str_args_5.args [1] = (int)ARG2; evt_obj_str_args_5.args [2] = (int)ARG3; evt_obj_str_args_5.args [3] = (int)ARG4; evt_obj_str_args_5.args [4] = (int)ARG5; eventPointSwHandle (evtId, &evt_obj_str_args_5, sizeof evt_obj_str_args_5); } } while ((0))
#define SIO_KYBD_LED_GET 0x1014
#define INCLUDE_IPNET_PACKET_POOL_4 
#define TRG_INT_ENT_INDEX 4
#define M85XXRIO_PESCSR(base) (CAST(VUINT32 *)(((char*)base) + 0x00158 ))
#define MII_PHY_1000T_HD 0x20000
#define M_loadSomCoffLib (96 << 16)
#define EPIC_IPI_VEC_REG(irq) (EPIC_IPI_0_VEC_REG + ((irq) * EPIC_IPI_VEC_REG_INTERVAL))
#define MMU_ATTR_SPL_GET(attr) ((attr) & MMU_ATTR_SPL_MSK)
#define RIO_FEATURES_EXTADDR_34_50 0x6000
#define MMU_STATE_MASK_WIMG_WRITABLE_EXECUTE 0x00000000
#define _ARCH_ALIGN_REGS 4
#define EPIC_OPT_SENSE_LVL 0x00400000
#define VX_READ_WRITE_SEMAPHORE(name,numReaders) _WRS_DATA_ALIGN_BYTES(VX_OBJ_ALIGN_SIZE) char name [VX_SEMAPHORE_SIZE + SEM_RW_EXT_SIZE + (SEM_RW_LIST_ENTRY_SIZE * numReaders)]
#define M_smmLib (171 << 16)
#define EROFS 30
#define EPIC_IN_INT1_DES_REG (EPIC_CCSROFF + 0x10230)
#define WIND_OBJ_DELETED 0x100
#define DOSFS_DEFAULT_CREATE_OPTIONS 0x04
#define _PPC_MSR_DS 0x0010
#define INST_MFLR 0x7c0802a6
#define PCI_INBOUND_ATTR_REG2(base) CVPUINT32(base, 0x8DD0)
#define _WRS_TLB_MISS_CLASS_SW 1
#define M_vmLib (84 << 16)
#define _IFLAG_AA 0x0004
#define SYM_MASK_NONE 0x00
#define _IFLAG_405_SPEC 0x0100
#define PCI_LAT_TIMER 0x40
#define S29GL_FLASH_OP_DELAY 
#define M_memLib (17 << 16)
#define VXB_LOST_DEVICES 3
#define AM29XXX _VX_AM29XXX
#define CPU_VARIANT _ppc85XX_e500v2
#define S_vmLib_TEXT_PROTECTION_UNAVAILABLE (M_vmLib | 5)
#define M_sntpsLib (114 << 16)
#define WIND_TCB_PC (WIND_TCB_REGS + REG_SET_PC)
#define _PPC_ESF_R22 _PPC_ESF_R(22)
#define VXB_ACCESS_INT_ENABLE 0x0000000f
#define EPIC_OPT_SENSE_EDG 0x00000000
#define __SEOF 0x0020
#define __INCfcntlcomh 
#define EPIC_DUART_INT_NUM 26
#define MMU_PAGE_UNMAP (*(mmuLibFuncs.mmuPageUnMap))
#define __LONG_MAX__ 2147483647L
#define __WCHAR_T__ 
#define S_semLib_INVALID_QUEUE_TYPE (M_semLib | 103)
#define PPC_ARG0_REG 3
#define EVENT_INT_EXIT_K (MIN_INT_ID - 2)
#define MII_ANAR_REMORT_FAULT 0x2000
#define _PPC_MMUCSR0_L2TLB0_FI 0x00000004
#define SPIN_LOCK_ACKNOWLEDGED 3
#define M_loadPecoffLib (117 << 16)
#define L_INCR SEEK_CUR
#define HRFS_DEFAULT_MAX_FILES 10
#define M_syscallLib (184 << 16)
#define TARGET_NAME_DEFAULT "vxTarget"
#define S_mmuLib_OUT_OF_PMEGS (M_mmuLib | 5)
#define __INCerrnoh 
#define __INCvxWindCommonh 
#define IPCOM_FILE_FD_SETSIZE 64
#define SYM_IS_GLOBAL(symType) ((symType) & SYM_GLOBAL)
#define VXDBG_MEM_MOVE(pSrc,pDest,size) vxdbgMemMove (pSrc, pDest, size);
#define _VX_SPARClite 11
#define SM_INT_NONE 0
#define _PPC_ESF_ERRNO (_PPC_ESF_VEC_OFF + SIZ_UINT32)
#define __INCsymLibh 
#define INCLUDE_VXBUS 
#define READ _VX_READ
#define SIMPENTIUM _VX_SIMPENTIUM
#define WDB_COMM_NETROM 4
#define __SERR 0x0040
#define _IFIELD_EE(x) ((0x00008000 & x) >> 15)
#define EPIC_IN_INT31_VEC_REG (EPIC_CCSROFF + 0x105e0)
#define LSDMR_RFEN 0x40000000
#define __INCsioLibCommonh 
#define ISR_STACK_SIZE (5000)
#define va_end(v) __builtin_va_end(v)
#define VME_AM_EXT_USR_PGM 0x0a
#define _WRS_CONFIG_CPU_PWR_MGMT 1
#define _VA_LIST_DEFINED 
#define _EXC_INFO_DAR 0x008
#define EVENT_LOGCOMMENT CONTROL_EVENT(7)
#define EFPOS 81
#define EPIC_EX_INT7_DES_REG (EPIC_CCSROFF + 0x100f0)
#define EPIC_INT_ACK1_REG (EPIC_CCSROFF + 0x210a0)
#define RTP_ID_OF_TASK(tid) ((RTP_ID)(((WIND_TCB *)tid)->rtpId))
#define FIONCONTIG 41
#define EDEADLK 33
#define SHELL_START_AT_BOOT TRUE
#define __INCtimeh 
#define EADDRINUSE 48
#define _EXC_CODE_SIZE 16
#define EVENT_RTPTASKSIGQUEUE CLASS3_EVENT(89)
#define INCLUDE_TTY_DEV 
#define EPIC_IN_INT31_DES_REG (EPIC_CCSROFF + 0x105f0)
#define htole16(x) bswap16((x))
#define MAPCA _VX_MAPCA
#define BOOT_FLASH_TLB_SIZE _MMU_TLB_SZ_1M
#define EVENT_TASKDESTROY CLASS3_EVENT(1)
#define Q_GET_EXPIRED(pQHead) ((Q_NODE *)((*(((Q_HEAD *)(pQHead))->pQClass->getExpiredRtn)) ((Q_HEAD *)(pQHead))))
#define VXBAF_CONVERT_SHORT_ORDER 0x00000002
#define FDSYNC _FDSYNC
#define FLOAT_NORM 
#define VX_TASK(name,stackSz) WIND_TCB name ##Tcb; _WRS_DATA_ALIGN_BYTES(_STACK_ALIGN_SIZE) char name ##Stk [STACK_ROUND_UP((stackSz))]; _WRS_DATA_ALIGN_BYTES(_STACK_ALIGN_SIZE) char name ##ExcStk [STACK_ROUND_UP((KERNEL_TASK_EXC_STACK_SIZE))];
#define LSDMR_BSMA_SHIFT(x) ((x << 23) & LSDMR_BSMA_MASK)
#define _WRS_CONFIG_VM_MULTIPLE_CONTEXT 1
#define IS_CLASS1_EVENT(event) ((event >= MIN_CLASS1_ID) && (event <= MAX_CLASS1_ID))
#define EDOM 37
#define VXDBG_MEM_WIDTH_ACCESS(mode,pSrc,pDest,size,width) if (mode == VX_READ) vxdbgMemRead (pSrc, pDest, size, width); else vxdbgMemWrite (pSrc, pDest, size, width);
#define EPIC_BITS(x,y) EPIC_BITS_M2N(x-y+1, x)
#define Q_KEY(pQHead,pQNode,keyType) (*(((Q_HEAD *)(pQHead))->pQClass->keyRtn)) (((Q_NODE *)(pQNode)), ((int)(keyType)))
#define INT_UNMASK(reg) mfmsr reg ; ori reg, reg, _PPC_MSR_EE ; mtmsr reg ; isync
#define FIODISKINIT 6
#define htole32(x) bswap32((x))
#define PCI2_INBOUND_BASE_ADRS_REG2(base) CVPUINT32(base, 0x9DC8)
#define PCI2_INBOUND_BASE_ADRS_REG3(base) CVPUINT32(base, 0x9DA8)
#define MII_CR_NORM_EN 0x0000
#define _PPC_VX_SVR_GET ((_func_vxSvrGet == NULL) ? 0 : (_func_vxSvrGet) ())
#define F_WRLCK 2
#define EPIC_TSEC1RX_INT_NUM 14
#define _WRS_USE_ELF_LOAD_FORMAT 
#define PORDEVSR_PCI_MODE 1
#define FIOCOMMITPOLICYGETFS 66
#define MMU_ATTR_SUP_DATA_RO (MMU_ATTR_SUP_RO)
#define _WRS_CONFIG_PPC32_FP "hard"
#define _IFORM_D_1 3
#define MPC85XX_I2C_ADR_REG (0x00000)
#define S_eventLib_TIMEOUT (M_eventLib | 0x0001)
#define CS0_CONFIG 0x080
#define _IFLAG_LK 0x0008
#define _PPC_SPEFSCR_FINV 0x00000800
#define M_distNameLib (119 << 16)
#define _PPC_SPEFSCR_FRMC_RND_NINF 0x00000003
#define VM_STATE_CACHEABLE MMU_ATTR_CACHE_DEFAULT
#define VM_PHYS_TRANSLATE(context,physicalAddr,pVirtualAddr) ((vmLibInfo.pVmPhysTranslateRtn == NULL) ? (ERROR) : ((*vmLibInfo.pVmPhysTranslateRtn) (context, physicalAddr, pVirtualAddr)))
#define VXB_INST_INIT_DONE 0x00000001
#define _ARCH_SUPPORTS_DCC 
#define _IOLBF 1
#define S_semLib_INVALID_OPERATION (M_semLib | 104)
#define htole64(x) bswap64((x))
#define EVENT_MSGCDELETE CLASS3_EVENT(38)
#define _DBCR1_IAC12M_U 0x00c0
#define EPIC_EOI0_REG (EPIC_CCSROFF + 0x200b0)
#define DEVICE_MANAGER_MAX_NUM_DEVICES 255
#define F_SETLKW 9
#define MII_MASSLA_STAT_LP1000T_FD 0x800
#define VXB_VER_4_0_0 0x00040000
#define OPT_REG_READ16 0x02
#define FREQ_66_MHZ 66000000
#define M_pingLib (99 << 16)
#define EIEIO _WRS_ASM (" eieio")
#define _PPC_ESF_P7 _PPC_ESF_R10
#define EVENT_SEMCCREATE CLASS3_EVENT(9)
#define _WRS_CONFIG_OBJECT_LIB 1
#define WDB_COMM_PORT 0x4321
#define EDR_ERRLOG_SIZE (pmFreeSpace(EDR_PM_ARENA)/2)
#define EPIC_EX_INT7_VEC_REG (EPIC_CCSROFF + 0x100e0)
#define _IFLAG_OE 0x0001
#define M85XXRIO_DICAR_OFFSET 0x4
#define ENOSTR 75
#define MMU_ATTR_PROT_SUP_GET(attr) ((attr) & MMU_ATTR_PROT_SUP_MSK)
#define RIO_CAR_ASSEMBLY_ID 0x08
#define SYSFLG_NO_SECURITY 0x20
#define ARM _VX_ARM
#define INCLUDE_AIM_MMU_SHOW 
#define M8260ABBREVIATIONS 
#define OPT_REG_READ32 0x03
#define MII_MASSLA_STAT_LP1000T_HD 0x400
#define PCI_OUT_ATTR_RTT_IO 0x00080000
#define M_unldLib (87 << 16)
#define EPIC_WHO_AM_I_REG (EPIC_CCSROFF + 0x00090)
#define M_hsiLib (156 << 16)
#define _PC_REC_MIN_XFER_SIZE 16
#define FIOCOMMITFS 56
#define VXB_SPIN_LOCK_GIVE(x) (*pVxbSpinLockGive)(x)
#define __INCregsh 
#define INCLUDE_WDB_FUNC_CALL 
#define ENAMETOOLONG 26
#define EPIC_OPT_EN_Y 0x00000000
#define S_spinLockLib_LOCK_UNAVAILABLE (M_spinLockLib | 4)
#define EPIC_WHOAMI_ID_MSK (EPIC_BIT(4) | EPIC_BIT(3) | EPIC_BIT(2) | EPIC_BIT(1) | EPIC_BIT(0))
#define DEFAULT_CPUS_MAX 10
#define MMU_TRANS_TBL_MASK (*(mmuLibFuncs.mmuTransTblMask))
#define I2C_DELAY(d) i2cCycleMpc85xxDelay(d)
#define __DBL_HAS_QUIET_NAN__ 1
#define TRG_CLASS_4_ON 0x10001000
#define PCI2_OUTBOUND_ATTR_REG2(base) CVPUINT32(base, 0x9c50)
#define MMU_STATE_GUARDED 0x00000002
#define INCLUDE_HOST_TBL 
#define INST_BC _OP(16, 0)
#define INST_BL (_OP(18, 0) | 1)
#define MIN_CLASS2_ID 600
#define BSP_VER_1_1 1
#define BSP_VER_1_2 1
#define M_hookLib (187 << 16)
#define EPIC_SR_IN_MU1_INT_NUM 38
#define EPIC_RES46_INT_VEC (EPIC_RES46_INT_NUM + EPIC_VEC_IN_IRQ0)
#define M85XXRIO_IDQDPAR(base) (CAST(VUINT32 *)(((char*)base) + 0x1346C ))
#define ECMBA (CCSBAR | ECM_OFFSET)
#define OPT_REG_READ64 0x04
#define VXB_BUSID_HYPERTRANSPORT 6
#define _ARCH_BYTE_ORDER _PARM_BIG_ENDIAN
#define LAWAR_SIZE_512KB 0x00000012
#define FLASH_CHIP_WIDTH 2
#define S_excLib_EXCEPTION_STACK_OVERFLOW (M_excLib | 1)
#define le64toh(x) bswap64((x))
#define OPT_ECHO 0x01
#define M_proxyArpLib (76 << 16)
#define __INCsemLibh 
#define EVENT_SEMWTAKE CLASS3_EVENT(206)
#define EPIC_TSEC4ERR_INT_VEC (EPIC_TSEC4ERR_INT_NUM + EPIC_VEC_IN_IRQ0)
#define _PARM_LITTLE_ENDIAN 4321
#define ESOCKTNOSUPPORT 44
#define __WCHAR_TYPE__ short unsigned int
#define _EXC_OFF_MACH 0x00200
#define PCI_INBOUND_TRANS_EXT_ADRS_REG3(base) CVPUINT32(base, 0x8DA4)
#define MMU_ATTR_USR_TEXT (MMU_ATTR_USR_EXE | MMU_ATTR_SUP_TEXT)
#define MII_FDX_STR "full duplex"
#define SEMRW_IS_FREE(semId) ( (((semId)->semOwner == NULL) && (((SEM_RW_EXT *) ((UINT) semId + sizeof (SEMAPHORE)))->readCount == 0)) )
#define EPIC_OPT_CRIT_ON (0x40000000 >> 16)
#define _WRS_ABSOLUTE_BEGIN(x) STATUS absSymbols_ ##x (void) {
#define S_objLib_OBJ_NAME_CLASH (M_objLib _WRS_BIT_OR 8)
#define WDB_MIPC_BUS_NAME "main"
#define VM_STATE_MASK_MEM_COHERENCY MMU_ATTR_CACHE_MSK
#define EVT_WVEVENT(USR_EVENT,DATA,LENGTH) do { if (ACTION_IS_SET) { EVENT_WVEVENT_T event; event.userEventId = USR_EVENT; event.data = DATA; event.length = LENGTH; event.pc = NULL; eventPointSwHandle (MIN_USER_ID, &event, sizeof (event)); } } while ((0))
#define PARODD 0x80
#define _DBSR_BRT 0x04000000
#define HANDLE_VERIFY(handle,handleType) ( ( (((HANDLE_ID) (handle))->magic == (unsigned)(handle)) && (((HANDLE_ID) (handle))->type == (handleType)) ) ? OK : ERROR )
#define VXB_REG_NONE 0x00000000
#define MMU_ATTR_PROT_MSK 0x0000003f
#define __INCstdioh 
#define EVENT_RTPSIGNAL CLASS3_EVENT(84)
#define __INCb_timer_th 
#define VXBAF_NOT_FIRST_BUS 0x00000080
#define EVENT_WINDPRIORITYSETLOWER CLASS2_EVENT(5)
#define CPU_PWR_ISR_P_STATE (0)
#define MII_PHY_RX_FLOW_CTRL 0x80000
#define MC68060 _VX_MC68060
#define CREAD 0x2
#define INST_ADDI_SP 0x38210000
#define VXB_REMOVAL_ORPHAN 0x00002000
#define EVENT_SD_MAP CLASS3_EVENT(202)
#define S_smLib_MEMORY_ERROR (M_smLib | 1)
#define putc(c,p) __sputc(c, p)
#define KERNEL_LOCK_GIVE() (kernelLockGive())
#define EPIC_EIVPR_INTR_POLARITY EPIC_BIT(23)
#define MII_PHY_FLAGS_SET(setBits) (pPhyInfo->phyFlags |= (setBits))
#define CAM_DRAM_CACHE_MODE _MMU_TLB_ATTR_M
#define MII_PHY_10 0x0080
#define HID1_ASTME 0x00002000
#define POSIX_PTHREAD_RR_TIMESLICE 10
#define vxAtomicAnd_inline vxAtomicAnd
#define FOLLOW_LINK -2
#define WDB_MIPC_PORT 2
#define Q_PUT(pQHead,pQNode,key) (*(((Q_HEAD *)(pQHead))->pQClass->putRtn)) (((Q_HEAD *)(pQHead)), ((Q_NODE *)(pQNode)), (key))
#define BUFSIZ _PARM_BUFSIZ
#define VEC_BASE_ADRS ((char *) 0x0)
#define MMU_ATTR_SUP_EXE (MMU_ATTR_PROT_SUP_READ | MMU_ATTR_PROT_SUP_EXE)
#define WDB_PRE_KERNEL_INIT 1
#define VXB_PCI_BUS_CFG_READ(pDev,byteOffset,transactionSize,data) ((_func_vxbPciDevCfgRead == NULL) ? ERROR : _func_vxbPciDevCfgRead (pDev, byteOffset, transactionSize, (void *) &data))
#define S_smLib_NO_REGIONS (M_smLib | 4)
#define _INSTRUCTION_CACHE 0
#define __FLT_MAX_10_EXP__ 38
#define _PPC_L1CSR_E 0x00000001
#define _IFIELD_FM(x) ((0x01fe0000 & x) >> 17)
#define WIND_OBJ_NO_RECLAIM 0x20
#define _VX_SH32 130
#define _WCHAR_T_DECLARED 
#define INCLUDE_BOOTXSYS 
#define MII_FDX_LEN sizeof (MII_FDX_STR)
#define VXB_INTR_DYNAMIC 0x00000F7F
#define __INCvmLibPh 
#define MCORE _VX_MCORE
#define LONGSWAP(x) ((LLSB(x) << 24) | (LNLSB(x) << 16)| (LNMSB(x) << 8) | (LMSB(x)))
#define S_vxdbgLib_INVALID_BP VXDBG_ERROR_TO_ERRNO(VXDBG_ERR_INVALID_BP)
#define SYM_MASK_ANY_TYPE SYM_MASK_NONE
#define WV_EVT_PROTO_REV_6_6 3
#define WV_EVT_PROTO_REV_6_7 3
#define EVENT_ISR_DESTROY CLASS3_EVENT(64)
#define FIONREAD64 52
#define _FEXCL 0x0800
#define M85XXRIO_RIWTAR_TRAD(adrs) (adrs >> 12)
#define __INCb_nlink_th 
#define M85XX_L2ERRCAPTDATAHI(x) (CAST(VUINT32 *)((x + 0x20E20)))
#define VXB_REG_SPEC 0x00000003
#define TASK_LOCK() TASK_CPU_LOCK()
#define LSDMR_BSMA_MASK 0x00E00000
#define _WRS_FUNC_NORETURN __attribute__((noreturn))
#define __weak_reference(sym,alias) __asm__(".weak " #alias); __asm__(".equ " #alias ", " #sym)
#define EPIC_IIDR_CRIT_INT EPIC_BIT(30)
#define OBJ_INSTRUMENTATION_ENABLE(objId) ( ((OBJ_CORE *)(objId))->handle.attributes |= WIND_OBJ_INSTRUMENTED )
#define I2C_ERROR_CYCLE_WRITE 4
#define _VX_SIMPENTIUM 191
#define EPIC_REG_WRITE(offset,value) *(volatile UINT32 *)((UINT32)pEpicRegBase + (offset & REG_ADRS_MASK)) = value
#define MII_PHY_FLAGS_CLEAR(clearBits) (pPhyInfo->phyFlags &= ~(clearBits))
#define MMU_ATTR_PROT_USR_READ 0x00000008
#define MII_AN_TBL_MAX 20
#define QUEUE_NONINTERRUPTIBLE 0
#define EPROTONOSUPPORT 43
#define UINT_MAX (INT_MAX * 2U + 1)
#define EVENT_WINDWDSTART CLASS2_EVENT(11)
#define EFBIG 27
#define RIO_WPCSR_ERROR 0x20000000
#define VXB_INTR_TRIG_NEG 0x01
#define SIO_MODE_SET 0x1007
#define feof(p) __sfeof(p)
#define EPIC_GTVPR_INTR_MSK EPIC_BIT(31)
#define PCI_CFG_ADR_REG (CCSBAR + 0x8000)
#define RIO_WPCSR_AVAILABLE 0x01000000
#define ARMARCH3 _VX_ARMARCH3
#define ARMARCH4 _VX_ARMARCH4
#define ARMARCH5 _VX_ARMARCH5
#define ARMARCH6 _VX_ARMARCH6
#define ARMARCH7 _VX_ARMARCH7
#define SEM_TYPE_MASK 0xf
#define SLL_EMPTY(pList) ( (((SL_LIST *)pList)->head == NULL) )
#define DECAR 54
#define _PPC_MAS0_NV 0x00000000
#define __FLT_MAX_EXP__ 128
#define P_PID 0
#define INCLUDE_EDR_STUB 
#define M85XX_OR0(base) (CAST(VUINT32 *)((base) + 0x5004))
#define M85XX_OR1(base) (CAST(VUINT32 *)((base) + 0x500c))
#define _DBCR1_IAC2US_U 0x0c00
#define M85XX_OR4(base) (CAST(VUINT32 *)((base) + 0x5024))
#define _DEFINED_struct_timespec 
#define __INCtimesh 
#define M85XX_OR7(base) (CAST(VUINT32 *)((base) + 0x503C))
#define _PARM_NAME_MAX 255
#define SM_INT_MAILBOX_1 1
#define SM_INT_MAILBOX_2 2
#define SM_INT_MAILBOX_4 3
#define MMU_ATTR_VALID_INDEX_SHIFT 6
#define SIO_HW_OPTS_GET 0x1006
#define VME_AM_STD_SUP_PGM 0x3e
#define _DBSR_HWBP_MSK ( _DBSR_IAC1 | _DBSR_IAC2 | _DBSR_DAC1R | _DBSR_DAC1W | _DBSR_DAC2R | _DBSR_DAC2W )
#define EPIC_IN_INT44_DES_REG (EPIC_CCSROFF + 0x10790)
#define MII_MASSLA_STAT_CONF_RES 0x4000
#define PCI_ATTR_WS_128M 0x0000001a
#define __INCe_vxTypesOldh 
#define REG_ADRS_MASK 0x00ffffff
#define LAWAR_SIZE_64KB 0x0000000F
#define EPIC_SMSG_INT7_VEC_REG (EPIC_CCSROFF + 0x11ce0)
#define REG_SET_CTR (REG_SET_LR + _PPC_REG_SIZE)
#define BUSAF_VERBOSE 0x01000000
#define __DBL_MANT_DIG__ 53
#define ___int_size_t_h 
#define bswap16(x) ((LSB(x) << 8) | MSB(x))
#define REG_SET_CR (REG_SET_PC + _PPC_REG_SIZE)
#define VXB_MAXBARS 10
#define FEXLOCK _FEXLOCK
#define __INCvxdbgLibPh 
#define _VX_COLDFIRE 160
#define EPIC_IIVPR_VECTOR(vec) ((vec) & EPIC_IIVPR_VECTOR_MSK)
#define M85XXRIO_LCSBA1CSR_OFFSET 0x5C
#define EPIC_CTASK_PRI_REG (EPIC_CCSROFF + 0x00080)
#define HID1_RUN_MODE(x) (((x)&0x70000000)>>28)
#define VXB_DEVID_BUSCTRL 1
#define _PPC_L1CSR_SLC 0x00000800
#define VM_STATE_VALID MMU_ATTR_VALID
#define VXB_INTR_TABSZ 124
#define M85XXRIO_PGCCSR(base) (CAST(VUINT32 *)(((char*)base) + 0x0013C ))
#define EVENT_NUM_CPU CONTROL_EVENT(17)
#define INST_B_MASK 0xfc000000
#define EPIC_IN_INT25_VEC_REG (EPIC_CCSROFF + 0x10520)
#define PID 48
#define ACTION_IS_SET _WRS_UNLIKELY(evtAction != 0)
#define PIR 286
#define FNDELAY _FNDELAY
#define _DBCR1_IAC2ER_U 0x0300
#define LAWAR_SIZE_64MB 0x00000019
#define EPIC_IN_INT45_VEC_REG (EPIC_CCSROFF + 0x107a0)
#define WDB_TTY_CHANNEL 1
#define M_fastPathLib (135 << 16)
#define __LDBL_MIN_EXP__ (-1021)
#define EPIC_OPT_PRI_VALUE(p) EPIC_EIVPR_PRIORITY(p)
#define SIO_MSTAT_GET 0x100C
#define BRIDGE_CLASS_TYPE 0x6
#define EPIC_MSG_REG2 (EPIC_CCSROFF + 0x01420)
#define HOST_PASSWORD_DEFAULT ""
#define _EXC_OFF_SYSCALL 0x00c00
#define MAX_DIRNAMES 148
#define EVENT_WINDSEMDELETE CLASS2_EVENT(6)
#define PCIEX_OUTBOUND_TRANS_ADRS_REG1(base) CVPUINT32(base, 0xac20)
#define VXB_HANDLE_WIDTH(x) ((x) & 0x0F)
#define LMSB(x) (((x) >> 24) & 0xff)
#define MMU_STATE_MEM_COHERENCY 0x00000004
#define EPIC_INT_EDG_NEG 0
#define _POSIX_MAX_CANON 255
#define EPIC_MSIDR_CRIT1_INT EPIC_BIT(29)
#define SM_INT_MAILBOX_R2 6
#define INST_SC _OP(17, 1)
#define S_ioLib_DEVICE_ERROR EIO
#define stdout (*__stdout())
#define TRG_CLASS_1 0x00000001
#define TRG_CLASS_2 0x00000010
#define TRG_CLASS_3 0x00000100
#define TRG_CLASS_4 0x00001000
#define TRG_CLASS_5 0x00010000
#define TRG_CLASS_6 0x01111111
#define INCLUDE_OBJ_LIB 
#define MSG_Q_EVENTSEND_ERR_NOTIFY 0x02
#define MAX_USER_ID 65535
#define NUM_DOSFS_FILES 20
#define LSDMR_RFCR_MASK 0x00038000
#define MAP_ERRNO_2_POSIX(errno) (((errno) & ERRNO_PX_FLAG)? (errno) &= 0x7fff : (errno) )
#define __EABI__ 1
#define VM_ENABLE(enable) ((vmLibInfo.pVmEnableRtn == NULL) ? (ERROR) : ((*vmLibInfo.pVmEnableRtn) (enable)))
#define EVENT_RTPNAME CONTROL_EVENT(16)
#define _ARCH_LONG_MAX 2147483647
#define MMU_STATE_SUP_R_USR_X (MMU_STATE_SUP_R | _MMU_UX)
#define M_qPriBMapLib (63 << 16)
#define RIO_EXTENDED_FEATURES_TOP 0xfffC
#define M85XXRIO_RIWAR_TGINT_MSK 0xf
#define FIRST_CUSTOM_BUS_ACCESS_METHOD 0x00000100
#define PLAT_RATIO_400_MHZ 6
#define SHELL_COMPATIBLE FALSE
#define I2C_CYCLE_READ(x,ad,y) i2cCycleMpc85xxRead(x,ad,y)
#define S_symLib_INVALID_SYM_ID_PTR (M_symLib | 13)
#define RLIMIT_DATA 2
#define PCI_ATTR_WS_16K 0x0000000D
#define PCI_ATTR_WS_16M 0x00000017
#define CACHE_DMA_FLUSH(adrs,bytes) CACHE_DRV_FLUSH (&cacheDmaFuncs, (adrs), (bytes))
#define INST_BCR_MASK 0xfc00fffe
#define WIND_TCB_CR (WIND_TCB_REGS + REG_SET_CR)
#define M85XXRIO_RIWBAR_BEXAD(adrs) (adrs << 22)
#define _PPC_SPEFSCR_MODE 0x00010000
#define _VX_PPC750 2010
#define MII_SR_10T_FULL_DPX 0x1000
#define EPIC_MSIR_INT0_STATE_REG (EPIC_CCSROFF + 0x01600)
#define S_mmuLib_INVALID_DESCRIPTOR (M_mmuLib | 3)
#define FSTAT_LNK 0120000
#define PPC403 _VX_PPC403
#define MMU_STATE_MASK_EXECUTE 0x00003000
#define PPC405 _VX_PPC405
#define _ARCH_ULONG_MAX 4294967295u
#define M85XXRIO_ROWAR_OFFSET(n) (0x10C10 + ((n)*0x20))
#define S_vmLib_BAD_MASK_PARAM (M_vmLib | 3)
#define MII_BP_ACK 0x4000
#define WDB_PROXY_TASK_OPTIONS VX_UNBREAKABLE
#define _PARM_TMP_MAX 64
#define PCI2_INBOUND_TRANS_ADRS_REG3(base) CVPUINT32(base, 0x9DA0)
#define MPC85XX_I2C_CONTROL_REG_MEN 0x80
#define SS_2D_5 6
#define _IFORM_XFX_1 42
#define WDB_TIPC_PORT_INSTANCE 71
#define _IFORM_XFX_3 44
#define _IFORM_XFX_4 45
#define _IFORM_XFX_5 84
#define _IFORM_XFX_6 85
#define MEM_ALLOC_ERROR_LOG_AND_SUSPEND 0x02
#define IPCOM_SOCK_NONE 5
#define EMSGSIZE 36
#define M_loadEcoffLib (79 << 16)
#define S_iosLib_INVALID_ETHERNET_ADDRESS EINVAL
#define PCI_OUT_ATTR_WTT_MEM 0x00004000
#define ARM810 _VX_ARM810
#define _VX_MAPCA 182
#define DEVMETHOD_CALL(METHOD) ((UINT32)(&METHOD ##_desc[0]))
#define EPIC_MER_EN_MSK 0xf
#define INST_LWZU_SP 0x84010000
#define _PC_ALLOC_SIZE_MIN 2
#define EPIC_TSEC2ERR_INT_NUM 24
#define OBJ_IS_DELETED(objId) ( (((OBJ_CORE *)(objId))->handle.attributes & WIND_OBJ_DELETED) != 0 )
#define I2C_CHCKOP 3
#define RIO_CAR_SRC_OPERATIONS 0x18
#define __INCvsbConfig_h 
#define VXDBG_CTX_FUNCS_ARE_INSTALLED() (_func_vxdbgFuncs[VXDBG_STOP] != NULL)
#define PPC _VX_PPC
#define __INCtoolPpch 
#define EVENT_OBJ_MSGSRECEIVE CLASS2_EVENT(43)
#define EPIC_OPT_CRIT_MSK (EPIC_EIDR_CRIT_INT >> 16)
#define _VX_MCORE300 154
#define VM_STATE_GLOBAL MMU_ATTR_SPL_0
#define _TOOL_HDR(tc,file) _TOOL_HDR_STRINGIFY(tool/tc/file)
#define VX_TASK_OBJ_OWNER 0x0800
#define EVENT_MEMREALLOC CLASS3_EVENT(33)
#define EPIC_IN_INT7_VEC_REG (EPIC_CCSROFF + 0x102e0)
#define _IFIELD_VSH(x) ((0x000003c0 & x) >> 6)
#define WDT_RATE_MAX (sysTimerClkFreq / (1 << 21))
#define PPC440 _VX_PPC440
#define MAX_LINKHDR_CFG 32
#define EVENT_RTPSIGPROCMASK CLASS3_EVENT(94)
#define PCI_ERROR_DETECT_REG 0x8e00
#define EVENT_RTP_DELETE CLASS3_EVENT(79)
#define EPIC_RES30_INT_NUM 30
#define TIMER_RELTIME (~TIMER_ABSTIME)
#define Q_FIRST(pQHead) ((Q_NODE *)(((Q_HEAD *)(pQHead))->pFirstNode))
#define I2C_IOCTL_RMW_OR 2
#define _DBSR_MRR_U 0x3000
#define SIO_MCTRL_OSIG_MASK 0x1010
#define NELEMENTS(array) (sizeof (array) / sizeof ((array) [0]))
#define WAIT_FOREVER (-1)
#define M_rpcClntStat (47 << 16)
#define _WRS_CONFIG_FEATURE_IPNET_INET4_ONLY 1
#define __INCunistdh 
#define VXB_OPTIONS "options"
#define VM_STATE_SET(context,virtualAddr,len,stateMask,state) ((vmLibInfo.pVmStateSetRtn == NULL) ? (ERROR) : ((*vmLibInfo.pVmStateSetRtn) (context, (VIRT_ADDR) virtualAddr, len, stateMask, state)))
#define RIO_CSR_WRITE_PORT 0x44
#define OBJ_SET_DELETED(objId) ( ((OBJ_CORE *)(objId))->handle.attributes |= WIND_OBJ_DELETED )
#define _TYPE_PHYS_ADDR typedef UINT64 PHYS_ADDR
#define _WRS_SUP_STACK_UNRELOC(p) p
#define _PPC_ESF_SP_OFF (0)
#define VXEV01 0x00000001
#define VXEV02 0x00000002
#define VXEV03 0x00000004
#define VXEV04 0x00000008
#define VXEV05 0x00000010
#define VXEV06 0x00000020
#define VXEV07 0x00000040
#define VXEV08 0x00000080
#define VXEV09 0x00000100
#define EHOSTDOWN 67
#define EVENT_IOWRITE CLASS3_EVENT(50)
#define IPTELNETS 
#define M_loadAoutLib (80 << 16)
#define _FNOCTTY 0x8000
#define SM_OFFSET_TO_LOCAL(offset,baseAddr,typeCast) ((typeCast) ((char *) offset + baseAddr))
#define EVENT_SYSCALL_BAD_ID CLASS3_EVENT(76)
#define MB_CUR_MAX _PARM_MB_CUR_MAX
#define vxAtomicSub_inline vxAtomicSub
#define O_TRUNC _FTRUNC
#define VXEV11 0x00000400
#define VXEV12 0x00000800
#define VXEV13 0x00001000
#define VXEV14 0x00002000
#define VXEV15 0x00004000
#define VXEV16 0x00008000
#define VXEV17 0x00010000
#define VXEV18 0x00020000
#define VXEV19 0x00040000
#define max(x,y) (((x) < (y)) ? (y) : (x))
#define _PPC_MAS0_TLBSEL1 0x10000000
#define F_DUPFD 0
#define KERNEL_TASK_EXC_STACK_SIZE (4096)
#define MII_PHY_FD 0x0100
#define _WRS_KERNEL_LOCK_OFFSET_line (0x10 + _WRS_KERNEL_LOCK_ALIGN_tkt_ctr)
#define M_pppHookLib (102 << 16)
#define SYM_MASK_EXACT_TYPE SYM_MASK_ALL
#define VXEV20 0x00080000
#define VXEV21 0x00100000
#define VXEV22 0x00200000
#define VXEV23 0x00400000
#define VXEV24 0x00800000
#define VXEV25 0x01000000
#define WDB_TTY_ECHO FALSE
#define VXEV27 0x04000000
#define VXEV28 0x08000000
#define VXEV29 0x10000000
#define WIND_TCB_LR (WIND_TCB_REGS + REG_SET_LR)
#define SM_LOCAL_TO_OFFSET(localAdrs,baseAddr) ((int) ((char *) localAdrs - baseAddr))
#define SYSFLG_NO_AUTOBOOT 0x04
#define MII_MAX_PHY_NUM 0x20
#define MMU_STATE_PROTECTION_BIT_SHIFT 8
#define RIO_TGTID_GENERIC 0
#define _ARCH_LDBL_EPSILON 2.2204460492503131e-16L
#define SEMRW_RQHEAD(semId) ( ((SEM_RW_EXT *) ((UINT) semId + sizeof (SEMAPHORE)))->readQHead )
#define M85XX_L2ERRINTEN(x) (CAST(VUINT32 *)((x + 0x20E48)))
#define VXEV31 0x40000000
#define VXEV32 0x80000000
#define EVT_CTX_DISP(ARG1,PRI,NORMAL_PRI) do { if ( ACTION_IS_SET ) EVT_CTX_DISP_NOTEST(ARG1, PRI, NORMAL_PRI); } while ((0))
#define __INCqClassh 
#define M_moduleLib (86 << 16)
#define HID0_MCP 0x80000000
#define _DBCR0_IRPT_U 0x0200
#define M85XX_L2CTL_L2LFR_MSK 0x00000400
#define RNG_ELEM_PUT(ringId,ch,toP) ( toP = (ringId)->pToBuf, (toP == (ringId)->pFromBuf - 1) ? 0 : ( (toP == (ringId)->bufSize - 1) ? ( ((ringId)->pFromBuf == 0) ? 0 : ( (ringId)->buf[toP] = ch, (ringId)->pToBuf = 0, 1 ) ) : ( (ringId)->buf[toP] = ch, (ringId)->pToBuf++, 1 ) ) )
#define EPIC_INTER_IN_SERVICE 2
#define I2C_IOCTL_RMW_AND_OR 4
#define MMU_ATTR_MSK_ID_GET(mask) ((mask) & MMU_ATTR_MSK_ID_MSK)
#define MSG_NODE_DATA(pNode) (((char *) pNode) + sizeof (MSG_NODE))
#define MII_PHY_HD 0x0200
#define INCLUDE_VXMUX_MBLK 
#define M_mountLib (94 << 16)
#define EVENT_RTPCHILDWAIT CLASS3_EVENT(90)
#define VXBAF_BYTE_ORDER_LE_32 0x00e40000
#define ns165501Num NELEMENTS(ns165501Resources)
#define EPIC_TSEC2TX_INT_VEC (EPIC_TSEC2TX_INT_NUM + EPIC_VEC_IN_IRQ0)
#define __INCtyLibh 
#define _FRSYNC 0x20000
#define S_miiLib_PHY_NULL (M_miiLib | 2)
#define VX_COPROC3_TASK 0x04000000
#define _IFORM_VX_1 64
#define _IFORM_VX_2 65
#define _IFORM_VX_3 66
#define _IFORM_VX_4 67
#define _IFORM_VX_5 68
#define _WRS_SDA_CONST __attribute__ ((__section__ (".sdata2")))
#define _DBCR1_IAC1US_U 0xc000
#define M85XX_L2ERRCAPTDATALO(x) (CAST(VUINT32 *)((x + 0x20E24)))
#define EPIC_TSEC1RX_INT_VEC (EPIC_TSEC1RX_INT_NUM + EPIC_VEC_IN_IRQ0)
#define __SMOD 0x2000
#define EPIC_IPI_DPATCH_REG1 (EPIC_CCSROFF + 0x00050)
#define FIODISKFORMAT 5
#define RIO_HOST_ID_OFFSET 16
#define WDT_RATE_MIN (sysTimerClkFreq / (1 << 29))
#define _DBCR2_DAC12M 0x00c00000
#define INST_BCLR_MASK 0xfc00ffff
#define WIND_TCB_P1 WIND_TCB_R4
#define EISCONN 56
#define WIND_TCB_P3 WIND_TCB_R6
#define WIND_TCB_P4 WIND_TCB_R7
#define WIND_TCB_P5 WIND_TCB_R8
#define WIND_TCB_P6 WIND_TCB_R9
#define WIND_TCB_P7 WIND_TCB_R10
#define MMU_ATTR_SUP_TEXT (MMU_ATTR_SUP_EXE)
#define I2C_READOP 0
#define M85XX_L2CTL_L2DO_MSK 0x00400000
#define S_eventLib_EVENTSEND_FAILED (M_eventLib | 0x0004)
#define _WRS_INLINE_vxAtomicGet 
#define I2C_TSENSOR_SEEKER_ADRS 0
#define ECONNABORTED 53
#define FATAL_SYSTEM_CORE_DUMP_ENABLE TRUE
#define INST_STW_R0_SP INST_STW_SP
#define __INCvxInlineh 
#define VXBAF_BYTE_ORDER_LE_64 0xe4e40000
#define DBG_BREAK_INST 0x7fe00008
#define _TYPE_clock_t typedef unsigned int clock_t
#define EPIC_RES45_INT_NUM 45
#define __INCmmuAttrh 
#define I2C_CYCLE_ACKOUT(x) i2cCycleMpc85xxAckOut(x)
#define EPIC_IN_INT24_VEC_REG (EPIC_CCSROFF + 0x10500)
#define M_dbgLib (4 << 16)
#define WIND_TCB_R0 (WIND_TCB_REGS + REG_SET_GR(0))
#define WIND_TCB_R1 (WIND_TCB_REGS + REG_SET_GR(1))
#define WIND_TCB_R2 (WIND_TCB_REGS + REG_SET_GR(2))
#define WIND_TCB_R3 (WIND_TCB_REGS + REG_SET_GR(3))
#define WIND_TCB_R5 (WIND_TCB_REGS + REG_SET_GR(5))
#define WIND_TCB_R6 (WIND_TCB_REGS + REG_SET_GR(6))
#define WIND_TCB_R8 (WIND_TCB_REGS + REG_SET_GR(8))
#define WIND_TCB_R9 (WIND_TCB_REGS + REG_SET_GR(9))
#define _DBCR1_IAC1ER_U 0x3000
#define __const const
#define MMU_ATTR_MSK_ID_MSK 0x000000e0
#define VX_MUTEX_SEMAPHORE VX_SEMAPHORE
#define M85XX_L2CEWCR_E_BIT 31
#define EVENT_OBJ_SEMTAKE CLASS2_EVENT(21)
#define EPIC_OPT_EXPIN_OFF (0x00000000 >> 16)
#define MII_ANAR_ASM_PAUSE 0x0800
#define CS7 0x8
#define SIO_ERROR_NONE (-1)
#define DDR_ERR_SBE 0xe58
#define STACK_DIR _VX_STACK_DIR
#define M85XXRIO_RIWAR_PCI 0x00
#define INCLUDE_IPCOM_USE_INET 
#define _IFIELD_CRM(x) ((0x000ff000 & x) >> 12)
#define min(x,y) (((x) < (y)) ? (x) : (y))
#define _DBSR_DAC2R_U 0x0002
#define WIND_TCB_SP WIND_TCB_R1
#define S_objLib_OBJ_LIB_NOT_INITIALIZED (M_objLib _WRS_BIT_OR 18)
#define EPIC_MSIDR_CRIT0_INT EPIC_BIT(30)
#define EPIC_PCI2_INT_VEC (EPIC_PCI2_INT_NUM + EPIC_VEC_IN_IRQ0)
#define M_dosFsLib (56 << 16)
#define _VX_PENTIUM3 85
#define _PPC_MMUCSR0_L2TLB0_FI_V(x) (x >> 2)
#define M85XXRIO_PMBH0CSR(base) (CAST(VUINT32 *)(((char*)base) + 0x00100 ))
#define EPIC_SR_IN_DB1_INT_NUM 34
#define MMU_STATE_MASK_WRITABLE_EXECUTE 0x00003c00
#define MII_PHY_MONITOR 0x4000
#define PCI_OUTBOUND_TRANS_EXT_ADRS_REG1(base) CVPUINT32(base, 0x8c24)
#define PCI_OUTBOUND_TRANS_EXT_ADRS_REG3(base) CVPUINT32(base, 0x8c64)
#define PCI_OUTBOUND_TRANS_EXT_ADRS_REG4(base) CVPUINT32(base, 0x8c84)
#define RES_ADDR 3
#define WIND_TCB_T0 WIND_TCB_R14
#define WIND_TCB_T1 WIND_TCB_R15
#define WIND_TCB_T2 WIND_TCB_R16
#define WIND_TCB_T5 WIND_TCB_R19
#define MPC85XX_I2C_CONTROL_REG_MTX 0x10
#define WIND_TCB_T7 WIND_TCB_R21
#define WIND_TCB_T8 WIND_TCB_R22
#define WIND_TCB_T9 WIND_TCB_R23
#define WDB_COMM_TYPE WDB_COMM_END
#define ERRMAX 89
#define LAWAR_TGTIF_DDRSDRAM 0x00F00000
#define SIO_MCTRL_BITS_SET 0x100D
#define __INCb_blkcnt_th 
#define FREQ_100_MHZ 99999999
#define FCREAT _FCREAT
#define M_smLib (72 << 16)
#define S_mmuLib_INVALID_PAGE_SIZE (M_mmuLib | 1)
#define RLIMIT_MEMLOCK 6
#define MMU_ATTR_USR_DATA (MMU_ATTR_USR_RW | MMU_ATTR_SUP_DATA)
#define RIO_CHANNEL_CFG 6
#define EPIC_SMSG_INT6_DES_REG (EPIC_CCSROFF + 0x11cd0)
#define WDB_PROXY_HAS_CONTROL_PORT TRUE
#define WV_EVT_PROTO_REV_3_1_FCS 4
#define PCI2_CFG_DATA_REG (CCSBAR + 0x9004)
#define INT_BANK_DESC_NUM 10
#define EPIC_EX_INT10_VEC_REG (EPIC_CCSROFF + 0x10140)
#define INCLUDE_MII_BUS 
#define TASK_PRIORITY_SET_COMPATIBLE FALSE
#define PCI_INBOUND_BASE_ADRS_REG1(base) CVPUINT32(base, 0x8DE8)
#define INCLUDE_ANSI_CTYPE 
#define WDB_END_DEVICE_NAME NULL
#define VXB_INTR_TRIG_FALLING_EDGE (VXB_INTR_TRIG_NEG | VXB_INTR_TRIG_EDGE)
#define _ARCH_LDBL_MAX 1.7976931348623157e+308L
#define PCI_INBOUND_BASE_ADRS_REG2(base) CVPUINT32(base, 0x8DC8)
#define EPIC_IN_INT38_VEC_REG (EPIC_CCSROFF + 0x106c0)
#define _PPC_L1CSR_UL 0x00000400
#define DDR_SDRAM_LOCAL_ADRS LOCAL_MEM_LOCAL_ADRS
#define MMU_ATTR_PROT_USR_EXE 0x00000020
#define PCI2_OUTBOUND_TRANS_EXT_ADRS_REG0(base) CVPUINT32(base, 0x9c04)
#define RLIMIT_STACK 3
#define _FTEXT 0x200000
#define INST_MTLR 0x7c0803a6
#define _PPC_ESF_MSR _PPC_ESF_R(GREG_NUM)
#define MII_NP_NP 0x8000
#define VME_AM_SUP_SHORT_IO 0x2d
#define _VA_LIST_T_H 
#define LOCAL2PCI_MEMIO(x) ((int)(x) + PCI_MSTR_MEM_BUS)
#define _PPC_HID0_DOZE 0x00800000
#define MII_PHY_LINK_FORCE 0x2
#define M_cbioLib (133 << 16)
#define __INCb_atomic_th 
#define M85XX_L2CTL_L2I_BIT 30
#define VM_INSTALLED (vmLibInfo.vmLibInstalled)
#define INCwrSbc8548h 
#define EPIC_OPT_POLAR_EDG_NEG 0x00000000
#define INCLUDE_SPE 
#define INCLUDE_END 
#define EVENT_OWNERSET CLASS3_EVENT(59)
#define INST_BCL (_OP(16, 0) | 1)
#define FIOGETNAME 18
#define EPIC_EX_INT10_DES_REG (EPIC_CCSROFF + 0x10150)
#define EPIC_MIDR_CRIT1_INT EPIC_BIT(29)
#define MMU_STATE_SUP_RWX_USR_RW (MMU_STATE_SUP_RWX | _MMU_UR | _MMU_UW)
#define MMU_STATE_SUP_RWX_USR_RX (MMU_STATE_SUP_RWX | _MMU_UR | _MMU_UX)
#define __RCSID(s) __IDSTRING(rcsid,s)
#define _DBCR0_IAC1 0x00800000
#define _DBCR0_IAC2 0x00400000
#define L2_CACHE_SIZE L2SIZ_512KB
#define __INCcoprocLibPh 
#define _PPC_L1CSR_FI 0x00000002
#define _PPC_ESR_DLK 0x00200000
#define S_vxdbgLib_ILLEGAL_OPERATION VXDBG_ERROR_TO_ERRNO(VXDBG_ERR_ILLEGAL_OPERATION)
#define __FLT_MAX__ 3.40282347e+38F
#define EVENT_MSGSCREATE CLASS3_EVENT(39)
#define _WRS_ADJUST_PC_FOR_BRANCH_DELAY(pReg) {}
#define EVENT_EVENTSEND CLASS3_EVENT(57)
#define PCI_IN_ATTR_RTT_LM_WRITE_NO_SNOOP 0x00004000
#define MAX_LOG_MSGS 50
#define _WRS_CONFIG_COMPONENT_USR_TEST 1
#define FSTAT_NON 0140000
#define INCLUDE_LINKBUFPOOL 
#define MQ_HASH_SIZE 0
#define OBJ_SET_DELETE_ON_LAST_CLOSE(objId) ( ((OBJ_CORE *)(objId))->handle.attributes |= WIND_OBJ_DELETE_ON_LAST_CLOSE )
#define MMU_ATTR_USR_IO (MMU_ATTR_USR_RW | MMU_ATTR_SUP_IO)
#define SEM_Q_FIFO 0x00
#define M_miiLib (123 << 16)
#define VX_COPROC5_TASK 0x10000000
#define _IFORM_VA_1B 77
#define MULTI_BUS BUS_TYPE_MULTIBUS
#define __va_list__ 
#define _WRS_CONFIG_CPU_PWR_MGMT_D 1
#define JOB_TASK_DONE_EVENT VXEV27
#define __INCclassLibh 
#define EPIC_BIT(x) (1 << (x))
#define M_tickLib (60 << 16)
#define SM_REGIONS_MAX 20
#define RIO_FEATURES_BRIDGE 0x0001
#define EPIC_IN_INT19_VEC_REG (EPIC_CCSROFF + 0x10460)
#define _POSIX_ASYNC_IO 0
#define _VX_MAP 180
#define _WRS_DATA_ALIGN_BYTES(x) __attribute__((aligned(x)))
#define RIO_BRIDGE_ININTIALIZED 2
#define EPIC_SMSG_INTERRUPT 29
#define EVENT_RTP_INIT_TASK CLASS3_EVENT(80)
#define IS_VALID_CACHEABLE(mask,attr) ( ((mask) & MMU_ATTR_VALID_MSK) == MMU_ATTR_VALID_MSK && ((mask) & MMU_ATTR_CACHE_MSK) == MMU_ATTR_CACHE_MSK && ((attr) & MMU_ATTR_VALID) == MMU_ATTR_VALID && ((attr) & (MMU_ATTR_CACHE_COPYBACK | MMU_ATTR_CACHE_DEFAULT)) != 0 )
#define M_adrSpaceLib (180 << 16)
#define M85XX_LBCR(base) (CAST(VUINT32 *)((base) + 0x50D0))
#define _IFORM_A_1 50
#define _IFORM_A_4 53
#define _DBLFUNCPTR_DEFINED 
#define MMU_ATTR_VALID 0x00000040
#define PCIEX_INBOUND_TRANS_EXT_ADRS_REG3(base) CVPUINT32(base, 0xaDA4)
#define VXB_BUSID_PCIX 4
#define M85XXRIO_ROWAR_WRTYPE_FLUSH 0x1
#define S_msgQLib_ILLEGAL_PRIORITY (M_msgQLib | 5)
#define EPIC_CISR0_MSG_INT_MSK 0xf000
#define MMU_STATE_SUP_RWX_USR_WX (MMU_STATE_SUP_RWX | _MMU_UW | _MMU_UX)
#define EVENTS_NONINTERRUPTIBLE 0x00
#define EPIC_OPT_SENSE_MSK EPIC_EIVPR_INTR_SENSE
#define VM_STATE_MEM_COHERENCY_NOT 0
#define be16toh(x) ((UINT16)(x))
#define EVENT_RTP_SPAWN CLASS3_EVENT(78)
#define SEM_NO_ERROR_CHECK 0x80
#define PCI_ERROR_ATTR_CAPTURE_REG 0x8e0c
#define RIO_CSR_LCS_BAR 0x5c
#define INCLUDE_TASK_VARS 
#define PCI_CFG_NONE 2
#define MPC85XX_I2C_STATUS_REG_MIF 0x02
#define EPIC_IN_INT19_DES_REG (EPIC_CCSROFF + 0x10470)
#define DDR_SDRAM_CFG_2 0x114
#define EVENT_TASKSTOP CLASS3_EVENT(43)
#define MAX_NUM_RIO_TARGETS 10
#define M85XX_LAWAR5(base) (CAST(VUINT32 *)((base) + 0xcB0))
#define VXBAF_IO_SPACE_OPERATION 0x00000020
#define M85XXRIO_RxWAR_TYPE_MSK 0xf
#define _T_SIZE 
#define WDB_COMM_SERIAL 1
#define M85XX_LAWAR6(base) (CAST(VUINT32 *)((base) + 0xcd0))
#define sioCallbackInstall(pSioChan,callbackType,callback,callbackArg) ((pSioChan)->pDrvFuncs->callbackInstall (pSioChan, callbackType, callback, callbackArg))
#define _EXC_OFF_TRACE 0x00d00
#define __warn_references(sym,msg) __asm__(".section .gnu.warning." #sym); __asm__(".asciz \"" msg "\""); __asm__(".previous")
#define S_vxdbgLib_INVALID_REGSET VXDBG_ERROR_TO_ERRNO(VXDBG_ERR_INVALID_REGSET)
#define S_msgQLib_UNSUPPORTED_OPERATION (M_msgQLib | 6)
#define M_excLib (194 << 16)
#define M_bufLib (64 << 16)
#define MAX_CONTROL_ID 49
#define EPIC_IPIVPR_VECTOR(vec) ((vec) & EPIC_IPIVPR_VECTOR_MSK)
#define _PC_FILESIZEBITS 5
#define BRIDGE_BAR0_OFFSET 0x10
#define _VX_MIPSI32R2 46
#define _OP(opcd,xo) ((opcd << 26) + (xo << 1))
#define DBSR 304
#define INCLUDE_FORMATTED_IO 
#define EPIC_DUART_INT_VEC (EPIC_DUART_INT_NUM + EPIC_VEC_IN_IRQ0)
#define STD_OUT 1
#define _EXTENSION_POSIX_1003 1
#define WDB_END_DEVICE_UNIT 0
#define M_mmuLib (85 << 16)
#define IS_SYSCALL_EVENT(event) ((event >= EVENT_SYSCALL_0) && (event <= EVENT_SYSCALL_8))
#define EPIC_IN_INT30_VEC_REG (EPIC_CCSROFF + 0x105c0)
#define OBJ_IS_PUBLIC(objId) ( (((OBJ_CORE *)(objId))->handle.attributes & WIND_OBJ_PUBLIC) != 0 )
#define __CONCAT1(x,y) x ## y
#define EPIC_MAX_IPI_IRQS 4
#define CPU_PWR_UTIL_PERIOD1 (300)
#define CPU_PWR_UTIL_PERIOD2 (1000)
#define ECONNREFUSED 61
#define FIOOPTIONS 3
#define WDB_MTU 1500
#define VX_MSG_Q_SIZE 176
#define EPIC_IPIVPR_INTR_ACTIVE EPIC_BIT(30)
#define _PPC_HID0_NAP 0x00400000
#define EAGAIN 11
#define PLAT_RATIO_333_MHZ 4
#define DBG_NO_SINGLE_STEP 1
#define __DBL_MAX_10_EXP__ 308
#define _GNU_TOOL 
#define M85XXRIO_PEIR(base) (CAST(VUINT32 *)(((char*)base) + 0x10014 ))
#define _PARM_L_tmpnam 64
#define M_taskPxLib (198 << 16)
#define __LDBL_DENORM_MIN__ 4.9406564584124654e-324L
#define AUTOCONF_INCLUDED 
#define I2C_DEVICE_TYPE_EEPROM_AT24C256 0
#define BUS_TYPE_VME 1
#define PCI_ARCADIA_BRIDGE_DEV_ID 0x051310E3
#define FLASH_ADRS_MASK 0xfff00000
#define _EXC_OFF_FPU 0x00800
#define WIND_OBJ_DELETE_ON_LAST_CLOSE 0x08
#define MMU_ATTR_USR_RO (MMU_ATTR_PROT_USR_READ)
#define BUCSR 1013
#define MMU_ATTR_USR_RW (MMU_ATTR_PROT_USR_READ | MMU_ATTR_PROT_USR_WRITE)
#define VME_AM_IS_SHORT(addr) ((addr & 0xf0) == 0x20)
#define RIO_CAR_DEVICE_INFO 0x04
#define MII_WRITE(addr,reg,val1,val2) val2 = ((* (pPhyInfo->phyWriteRtn)) ((pPhyInfo->pDrvCtrl), (addr), (reg), (val1)));
#define PCICMD_ADRS (PCI_CFG_BASE + 0x04)
#define MII_TECH_10BASE_T 0x0020
#define MMU_STATE_MASK_GUARDED 0x00000002
#define _VX_SIMSPARCSOLARIS 61
#define _PPC_MSR_SPE 0x02000000
#define INCLUDE_CPU_PWR_MGMT 
#define EPIC_TSEC2ERR_INT_VEC (EPIC_TSEC2ERR_INT_NUM + EPIC_VEC_IN_IRQ0)
#define _WRS_PAL_COPROC_LIB 
#define _VX_FD_ZERO(p) bzero((char *)(p), sizeof(*(p)))
#define ULTRASPARC _VX_ULTRASPARC
#define __STDC__ 1
#define MII_CR_RESET 0x8000
#define _WRS_CONFIG_ISR_OBJECTS 1
#define CACHE_SNOOP_DISABLE 0x20
#define VX_CLASS_LIST_LOCK(lock) semMTakeScalable (lock, WAIT_FOREVER, CLASS_LIST_SEM_INLINE_OPTIONS)
#define SH7600 _VX_SH7600
#define INCLUDE_MMU_BASIC 
#define __sferror(p) ((HANDLE_VERIFY(p, handleTypeFile) != OK) ? (FALSE) : (((p)->_flags & __SERR) != 0))
#define M_sntpcLib (113 << 16)
#define VXB_BUSID_MII 8
#define MII_CR_1000 0x0040
#define INCLUDE_WDB_GOPHER 
#define M_scsiLib (55 << 16)
#define EVENT_MEMADDTOPOOL CLASS3_EVENT(34)
#define HD_1 129
#define HD_2 130
#define _DBSR_TRAP_U 0x0100
#define RIO_WPCSR_EMPTY 0x04000000
#define MAX_LIO_CALLS 0
#define spReg gpr[1]
#define WV_EVT_PROTO_REV_3_0_FCS 3
#define _IFIELD_CRBA(x) ((0x001f0000 & x) >> 16)
#define EPIC_IN_INT11_VEC_REG (EPIC_CCSROFF + 0x10360)
#define SYM_IS_BSS(symType) ((symType) & SYM_BSS)
#define _IFIELD_CRBB(x) ((0x0000f800 & x) >> 11)
#define _PPC_L1CFG_REPL_MASK 0x00400000
#define VXDBG_MEM_WIDTH_READ vxdbgMemRead
#define _SYS_UIO_H_ 
#define WIND_CLASS_ALLOW_DUPLICATE_NAMES 0x01
#define M_ftpLib (136 << 16)
#define INCLUDE_TFFS_MOUNT 
#define EVENT_INT_ENTER EVENT_INT_ENT(0)
#define EPIC_IN_INT12_DES_REG (EPIC_CCSROFF + 0x10390)
#define _IFORM_EVX_14 104
#define MII_MAX_REG_NUM 0x20
#define _PPC_HID0_TBEN 0x00004000
#define BSP_VERSION "2.0"
#define __XSI_VISIBLE 600
#define INCLUDE_MSG_Q 
#define __INCsmpPpcPh 
#define SPE_CONTEXT_GET(pTcb) (SPE_CONTEXT *)(pTcb->pCoprocCtx)
#define LSDMR_RFCR_SHIFT(x) ((x << 15) & LSDMR_RFCR_MASK)
#define DEV_HDR_REMOVABLE 0x0001
#define FD_CLOEXEC 1
#define M85XXRIO_IPWMR(base) (CAST(VUINT32 *)(((char*)base) + 0x134E0 ))
#define LAWAR_SIZE_4KB 0x0000000B
#define M_taskLib (3 << 16)
#define __LDBL_DIG__ 15
#define FIOREADYCHANGE 11
#define EPIC_PCI_EXPRESS_INT_NUM 10
#define _MMU_SR 0x00000100
#define VXDBG_MEM_ACCESS(mode,pSrc,pDest,size) VXDBG_MEM_WIDTH_ACCESS(mode, pSrc, pDest, size, 0)
#define L2_SRAM_SIZE 0
#define EPIC_MAX_SMSG_IRQS 8
#define M85XX_L2CTL_L2BLKSIZ_MSK 0x0C000000
#define EXT_NUM_IRQ0 EXT_VEC_IRQ0
#define EPIC_IN_INT11_DES_REG (EPIC_CCSROFF + 0x10370)
#define PPC8560 _VX_PPC8560
#define __INCeventLibh 
#define __LDBL_MIN_10_EXP__ (-307)
#define FS_COMMIT_POLICY_NONE 0
#define DDR_SDRAM_LOCAL_ADRS_END (DDR_SDRAM_LOCAL_ADRS + DDR_SDRAM_LOCAL_SIZE)
#define RUNTIME_NAME "VxWorks"
#define WV_CLASS_NONE 0x00000000
#define EPIC_EIVPR_INTR_SENSE EPIC_BIT(22)
#define _DBCR0_DAC1W_U 0x0004
#define INCLUDE_SHELL_BANNER 
#define HRFS_DEFAULT_COMMIT_POLICY FS_COMMIT_POLICY_AUTO
#define EPIC_IPIDR_P0 EPIC_BIT(0)
#define MMU_BUFFER_WRITE (*(mmuLibFuncs.mmuBufferWrite))
#define FIOPROTOHOOK 22
#define EPIC_SMSG_DEST_REG(irq) (EPIC_SMSG_VEC_REG(irq) + EPIC_SMSG_DEST_REG_VECREGOFF)
#define MII_EXP_PRTN_NP 0x0008
#define CACHE_DMA_IS_WRITE_COHERENT() CACHE_DRV_IS_WRITE_COHERENT (&cacheDmaFuncs)
#define PCI_DEV_ID_85XX 0x000C1057
#define EPIC_EX_INT6_VEC_REG (EPIC_CCSROFF + 0x100c0)
#define EVENTS_SEND_IF_FREE 0x04
#define SLL_PUT_AT_TAIL(list,node) { ((SL_NODE *)(node))->next = NULL; if (((SL_LIST *)(list))->head == NULL) { ((SL_LIST *)(list))->head = (SL_NODE *)(node); ((SL_LIST *)(list))->tail = (SL_NODE *)(node); } else ((SL_LIST *)(list))->tail->next = (SL_NODE *)(node); ((SL_LIST *)(list))->tail = (SL_NODE *)(node); }
#define __INCb_clock_th 
#define VXBAF_CONVERT_BYTE_ORDER 0x00000001
#define IPCOM_ENV_NONE 1
#define M85XXRIO_ODQEPAR(base) (CAST(VUINT32 *)(((char*)base) + 0x11028))
#define S_smLib_NOT_ATTACHED (M_smLib | 3)
#define _WRS_KERNEL_LOCK_OFFSET_file (0x0c + _WRS_KERNEL_LOCK_ALIGN_tkt_ctr)
#define _CPU_CACHE_ALIGN_SHIFT 5
#define INCLUDE_PARAM_SYS 
#define PPC_NO_REAL_MODE 
#define INCLUDE_IO_FILE_SYSTEM 
#define HCF_RES_ADDR 3
#define VXB_ACCESS_INT_DISABLE 0x00000010
#define CONTIG_MAX -1
#define MAC_OFFSET_MOTTSEC 0
#define RIO_FEATURES_EXTADDR_34_50_66 0xe000
#define MIPSI32 _VX_MIPSI32
#define __RCSID_SOURCE(s) __IDSTRING(rcsid_source,s)
#define MMU_STATE_SUP_RX_USR_RW (MMU_STATE_SUP_RX | _MMU_UR | _MMU_UW)
#define MMU_STATE_SUP_RX_USR_RX (MMU_STATE_SUP_RX | _MMU_UR | _MMU_UX)
#define FIODISCARD 71
#define __INCsioLibh 
#define VX_BINARY_SEMAPHORE VX_SEMAPHORE
#define EPIC_EIVPR_PRIORITY(p) (((p) << 16) & EPIC_EIVPR_PRIORITY_MSK)
#define _VX_ARCH_DIR ppc
#define MII_PHY_ISO_UNAVAIL 0x200000
#define _PPC_TCR_WIE_U 0x0800
#define EPIC_INT_EDG_POS 1
#define MMU_ATTR_CACHE_COPYBACK 0x00000100
#define EPIC_PROC_INIT_REG (EPIC_CCSROFF + 0x01090)
#define MMU_STATE_ENDIAN_LITTLE 0x00000001
#define INST_BC_RL 0x4c000021
#define VM_PAGE_OPTIMIZE(context,virtAddr,len,option) ((vmLibInfo.pVmPageOptimizeRtn == NULL) ? (ERROR) : ((*vmLibInfo.pVmPageOptimizeRtn) (context, virtAddr, len, option)))
#define EPIC_EX_INT6_DES_REG (EPIC_CCSROFF + 0x100d0)
#define MII_SR_T2_FULL_DPX 0x0400
#define M85XXRIO_IPWSR(base) (CAST(VUINT32 *)(((char*)base) + 0x134E4 ))
#define MII_MASSLA_STAT_LOCAL_RCV 0x2000
#define IPCOM_PCONFIG_H 
#define I2C_CYCLE_START(x) i2cCycleMpc85xxStart(x)
#define FD_CLR(n,p) _VX_FD_CLR (n, p)
#define MSG_Q_OPTIONS_MASK (MSG_Q_TYPE_MASK | MSG_Q_EVENTSEND_ERR_NOTIFY | MSG_Q_INTERRUPTIBLE)
#define M85XXRIO_ROWAR0(base) (CAST(VUINT32 *)(((char*)base) + 0x10C10 ))
#define _ARCH_CHAR_MIN (-127-1)
#define INCLUDE_WDB_START_NOTIFY 
#define CDF_OVERRIDE TRUE
#define MB_LEN_MAX 1
#define DRV_INTCTLR_PPC 
#define _FFD_CLOEXEC 0x100000
#define VX_MEM_BARRIER_R() _WRS_BARRIER("sync");
#define __ppc 1
#define VX_MEM_BARRIER_W() _WRS_BARRIER("sync");
#define MIPSI64 _VX_MIPSI64
#define EOPNOTSUPP 45
#define _EXC_OFF_PROG 0x00700
#define M85XXRIO_ROWARn(base,n) (CAST(VUINT32 *)(((char*)base) + 0x10C10 + ((n)*0x20)))
#define SEM_RW_LIST_ENTRY_SIZE 0x0c
#define M_icmpLib (74 << 16)
#define S_objLib_OBJ_NO_METHOD (M_objLib _WRS_BIT_OR 5)
#define _ARCH_DBL_EPSILON 2.2204460492503131e-16
#define S_taskLib_TASK_SWAP_HOOK_SET (M_taskLib | 105)
#define _VX_AM29035 53
#define S_classLib_CLASS_ID_ERROR (M_classLib | 1)
#define __P(protos) protos
#define MEM_ALLOC_ERROR_MASK 0x03
#define CORE_DUMP_MEM_FILTER_MAX 10
#define UIO_SMALLIOV 8
#define __INCvwModNumh 
#define MII_TECH_10BASE_FD 0x0040
#define MAX_CLASS1_ID 599
#define SM_OBJ_MAX_MEM_PART 4
#define EPIC_TM_A3_VEC_REG (EPIC_CCSROFF + 0x011e0)
#define __INCb_cpuset_th 
#define VX_MAX_TASK_SWITCH_RTNS 16
#define RIO_NO_HARDWARE 0
#define _WRS_UNALIGNED_COPY(pSrc,pDest,size) ( __builtin_memcpy ((pDest), (void *)(pSrc), size))
#define BRK_HARDWARE 0
#define MMU_STATE_SUP_RX_USR_WX (MMU_STATE_SUP_RX | _MMU_UW | _MMU_UX)
#define EPIC_SR_IN_DB1_INT_VEC (EPIC_SR_IN_DB1_INT_NUM + EPIC_VEC_IN_IRQ0)
#define EPIC_MIDR_EX_PIN EPIC_BIT(31)
#define _T_WCHAR 
#define CLASS2_EVENT(id) (MIN_CLASS2_ID + id)
#define PCIBA (CCSBAR | PIC_OFFSET)
#define EVENT_SD_DELETE CLASS3_EVENT(201)
#define EVENT_TASKCONT CLASS3_EVENT(44)
#define EPIC_FRR_NCPU_MASK 0x00001f00
#define EVENT_TASKLOCK CLASS1_EVENT(7)
#define MII_MF_OP_RD 0x2
#define __INCregsPpch 
#define _PPC_ESF_R8 _PPC_ESF_R(8)
#define I2C_CYCLE_ACKIN(x) i2cCycleMpc85xxAckIn(x)
#define MMU_ATTR_TRANSLATE (*(mmuLibFuncs.mmuAttrTranslate))
#define SM_ANCHOR_ADRS ((char *) (SM_BASE_ADRS + SM_ANCHOR_OFFSET))
#define F_UNLKSYS 4
#define S_iosLib_TOO_MANY_OPEN_FILES EMFILE
#define SIO_MODE_INT 2
#define M_nfsdLib (95 << 16)
#define INCLUDE_WDB_EXC_NOTIFY 
#define SIO_CALLBACK_PUT_RCV_CHAR 2
#define M_ipcom (199 << 16)
#define M_poolLib (124 << 16)
#define MCORE10 _VX_MCORE10
#define O_NOCTTY _FNOCTTY
#define MCORE15 _VX_MCORE15
#define AIO_PRIO_DELTA_MAX 254
#define VX_CODE_BARRIER() _WRS_BARRIER("")
#define TRON _VX_TRON
#define _WRS_KERNEL_LOCK_ALIGN_tkt_ctr (_WRS_KERNEL_LOCK_VAR_ALIGN)
#define FIONBIO 16
#define FMARK _FMARK
#define _FAPPEND 0x0008
#define _PPC_ESF_R13 _PPC_ESF_R(13)
#define _VX_MIPS 40
#define _PPC_ESF_R14 _PPC_ESF_R(14)
#define WDB_COMM_NETWORK 0
#define M_loadCoffLib (83 << 16)
#define WIND_TCB_R14 (WIND_TCB_REGS + REG_SET_GR(14))
#define EPIC_RES43_INT_VEC (EPIC_RES43_INT_NUM + EPIC_VEC_IN_IRQ0)
#define WIND_JOBS_MAX 64
#define RIO_BUS_CONFIG_IN_PROGRESS 3
#define __INCb_BOOLh 
#define WIND_TCB_R15 (WIND_TCB_REGS + REG_SET_GR(15))
#define _PPC_ESF_R17 _PPC_ESF_R(17)
#define EPIC_IN_INT30_DES_REG (EPIC_CCSROFF + 0x105d0)
#define __FLT_MIN__ 1.17549435e-38F
#define S_vmLib_FUNCTION_UNSUPPORTED (M_vmLib | 7)
#define IPCOM_USE_INET 
#define _VX_I80386 81
#define _WRS_ABSOLUTE_EXTERN(name) extern const char name[]
#define MMU_ASID_MIN 1
#define MEM_ALLOC_ERROR_LOG_MSG 0x01
#define S_taskLib_TASK_SWAP_HOOK_REFERENCED (M_taskLib | 104)
#define EVENT_TASKUNLOCK CLASS1_EVENT(8)
#define _ARCH_LONG_MIN (-2147483647-1)
#define EVENT_WINDPENDQFLUSH CLASS2_EVENT(14)
#define _WRS_CONFIG_COMPONENT_IPAPPL 1
#define EPIC_MIVPR_PRIORITY_MSK (EPIC_BIT(19) | EPIC_BIT(18) | EPIC_BIT(17) | EPIC_BIT(16))
#define __POSIX_VISIBLE 200112
#define SPARCV9 _VX_SPARCV9
#define _PPC_SPEFSCR_SOVH 0x80000000
#define _PPC_ESR_SPE 0x00000080
#define _PPC_MMUCSR0_L2TLB1_FI 0x00000002
#define RIO_CSR_PE_LL_CTRL 0x4c
#define EPIC_PERFMON_3_MSK_REG0 (EPIC_CCSROFF + 0x013b0)
#define MRTPR_PTP_MASK 0xff000000
#define __INCb_blksize_th 
#define IPCOM_FILE_NATIVE_ROOT "/ram/"
#define WDB_DPRINTF_MAX_MSG_LENGTH 100
#define PCI_INBOUND_ATTR_REG1(base) CVPUINT32(base, 0x8DF0)
#define LAWAR_SIZE_128KB 0x00000010
#define MII_PHY_NO_DELAY 0x0
#define EPIC_MSIDR_P1_INT EPIC_BIT(1)
#define PCI2_INBOUND_ATTR_REG2(base) CVPUINT32(base, 0x9DD0)
#define PCI2_INBOUND_ATTR_REG3(base) CVPUINT32(base, 0x9DB0)
#define _VX_SIMSPARCSUNOS 60
#define PCI_INBOUND_ATTR_REG3(base) CVPUINT32(base, 0x8DB0)
#define TRUE (1)
#define M_isrLib (175 << 16)
#define _WRS_CONFIG_COMPONENT_IPRIP 1
#define _VX_MAP1000A 181
#define __INCversionh 
#define M_exEngLib (169 << 16)
#define EAFNOSUPPORT 47
#define EPIC_IIVPR_VECTOR_MSK (0xffff)
#define M85XX_MAMR(base) (CAST(VUINT32 *)((base) + 0x5070))
#define LAWAR_SIZE_128MB 0x0000001A
#define EEXIST 17
#define VX_COPROC2_TASK 0x02000000
#define M85XXRIO_PLMREQCSR(base) (CAST(VUINT32 *)(((char*)base) + 0x00140 ))
#define M_lstLib (15 << 16)
#define _VX_ULTRASPARC 111
#define EPIC_IN_INT43_DES_REG (EPIC_CCSROFF + 0x10770)
#define VME_AM_EXT_SUP_ASCENDING 0x0f
#define SEMRW_EXT_PTR_GET(semId) ( (SEM_RW_EXT *) ((UINT) semId + sizeof (SEMAPHORE) )
#define S_vmLib_BAD_STATE_PARAM (M_vmLib | 2)
#define EPIC_SMSG_INT6_VEC_REG (EPIC_CCSROFF + 0x11cc0)
#define XSCALE _VX_XSCALE
#define INCLUDE_ELF 
#define VM_STATE_MASK_GLOBAL MMU_ATTR_SPL_MSK
#define M85XXRIO_ODDPR(base) (CAST(VUINT32 *)(((char*)base) + 0x13418))
#define M85XX_L2CTL_L2SRAM_MSK 0x00070000
#define MMU_STATE_SUP_R_USR_R (MMU_STATE_SUP_R | _MMU_UR)
#define MMU_ATTR_PROT_GET(attr) ((attr) & MMU_ATTR_PROT_MSK)
#define MMU_STATE_SUP_R_USR_W (MMU_STATE_SUP_R | _MMU_UW)
#define EPIC_OPT_EN_N 0x80000000
#define EPIC_EX_DFT_POLAR EPIC_INT_ACT_HIGH
#define INCLUDE_CACHE_SUPPORT 
#define _WRS_ASM(x) __asm__ volatile (x)
#define _EXC_OFF_DECR 0x00900
#define CORE_DUMP_MEM_POOL_PROTECTION_ENABLE TRUE
#define EPIC_CTPR_TASKPRI(p) ((p) & EPIC_CTPR_TASKPRI_MSK)
#define S_ioLib_CANT_OVERWRITE_DIR EISDIR
#define M_vwModNum (27 << 16)
#define SYM_TEXT 0x4
#define VXB_PARAM_POINTER 0x0004
#define FIOATTRIBSET 35
#define M85XXRIO_ROWAR_RDTYPE_IO_READ_HOME 0x2
#define S_msgQLib_INVALID_MSG_COUNT (M_msgQLib | 7)
#define EVENT_CPC_ACK CLASS3_EVENT(234)
#define MEM_BLOCK_ERROR_EDR_WARN_FLAG 0x800
#define __COPYRIGHT(s) __IDSTRING(copyright,s)
#define EILSEQ 82
#define M85XX_LAWAR0(base) (CAST(VUINT32 *)((base) + 0xc10))
#define M85XX_LAWAR1(base) (CAST(VUINT32 *)((base) + 0xc30))
#define M85XX_LAWAR2(base) (CAST(VUINT32 *)((base) + 0xc50))
#define M85XX_LAWAR3(base) (CAST(VUINT32 *)((base) + 0xc70))
#define M85XX_LAWAR4(base) (CAST(VUINT32 *)((base) + 0xc90))
#define SM_OBJ_MAX_MSG_Q 10
#define M85XX_LAWAR7(base) (CAST(VUINT32 *)((base) + 0xcf0))
#define EPIC_IN_INT27_VEC_REG (EPIC_CCSROFF + 0x10560)
#define ESPIPE 29
#define FIOFSTATFSGET64 70
#define _IFLAG_E500_SPEC 0x2000
#define M85XX_L2SRBAR0(x) (CAST(VUINT32 *)((x + 0x20100)))
#define M85XX_L2SRBAR1(x) (CAST(VUINT32 *)((x + 0x20108)))
#define __PTRDIFF_TYPE__ int
#define FIOFSTATGET 64
#define _VX_STATUS_DEFINED 
#define _ARCH_FLT_MIN_10_EXP (-37)
#define EPIC_TM_A2_VEC_REG (EPIC_CCSROFF + 0x011a0)
#define EVENT_SYSCALL_RETURN_OK CLASS3_EVENT(74)
#define SYS_MODEL_8543 "Wind River SBCC8543"
#define SYS_MODEL_8545 "Wind River SBC8545"
#define _VX_ARMARCH7_T 1126
#define SYS_MODEL_8548 "Wind River SBC8548"
#define M_amsLib (154 << 16)
#define CVPUINT32(base,addr) (CAST(VUINT32 *)((base) + (addr)))
#define EVENT_WINDSPAWN CLASS2_EVENT(0)
#define __WCHAR_MAX__ 65535U
#define M_coprocLib (179 << 16)
#define MMU_ATTR_PROT_USR_MSK 0x00000038
#define SLL_INIT(list) { ((SL_LIST *)(list))->head = NULL; ((SL_LIST *)(list))->tail = NULL; }
#define S_symLib_NAME_CLASH (M_symLib | 2)
#define _VX_FRV 170
#define EPIC_IN_INT24_DES_REG (EPIC_CCSROFF + 0x10510)
#define __INCtaskHookLibh 
#define _WCHAR_T 
#define INCLUDE_TIMER_SYS 
#define _PPC_L1CFG_LA_V(x) (x >> 17)
#define SEM_NO_EVENT_SEND 0x100
#define EVENT_MSGCCREATE CLASS3_EVENT(35)
#define WDB_COMM_PIPE 7
#define M_shellLib (173 << 16)
#define EPIC_MSG_INT2_VEC_REG (EPIC_CCSROFF + 0x11640)
#define _WRS_BARRIER(x) __asm volatile (x ::: "memory")
#define PM_RESERVED_MEM (6 * VM_PAGE_SIZE)
#define VOID_FROM_CONST(x) _VX_VOID_FROM_CONST(x)
#define INT_EVENT(id) (MIN_INT_ID + id)
#define EPIC_IRQSR0_EX_INT_MSK 0xfff
#define IPCOM_SHELL_IPCOM 3
#define _LITTLE_ENDIAN 4321
#define _IOFBF 0
#define INCLUDE_ERF 
#define SEMB_EMPTY_STATE 0x10
#define EPIC_I2C_INT_NUM 27
#define __FLT_EVAL_METHOD__ 0
#define S_vxdbgLib_HW_REGS_FULL VXDBG_ERROR_TO_ERRNO(VXDBG_ERR_HW_REGS_FULL)
#define PID0 48
#define PID1 633
#define PID2 634
#define NUM_SIGNAL_QUEUES 16
#define __INCfuncBindPh 
#define SEM_M_INLINE_PRI_RESORT 0x10
#define _IFIELD_XO_1(x) ((0x000007fe & x) >> 1)
#define _IFIELD_XO_2(x) ((0x000003fe & x) >> 1)
#define _IFIELD_XO_3(x) ((0x0000003e & x) >> 1)
#define PCI_ATTR_WS_2G 0x0000001e
#define M_inetLib (43 << 16)
#define S_ioLib_CANCELLED ECANCELED
#define SSIZE_MAX _POSIX_SSIZE_MAX
#define M85XX_PVR(base) (CAST(VUINT32 *)((base) + 0xE00A0))
#define __INCtaskLibh 
#define _DBSR_RET 0x00008000
#define _POSIX_DELAYTIMER_MAX 32
#define SHELL_DEFAULT_CONFIG "LINE_EDIT_MODE=,LINE_LENGTH=256,STRING_FREE=manual,INTERPRETER=,VXE_PATH=.;/romfs"
#define __SNBF 0x0002
#define COMMAND_REGISTER_WIDTH 0x2
#define VM_CTX_MASK_OUT 0x0
#define _VX_MAP_ERRNO_2_POSIX(errno) (((errno) & ERRNO_PX_FLAG)? (errno) &= 0x7fff : (errno) )
#define LINK_MAX _POSIX_LINK_MAX
#define M_msgQDistLib (121 << 16)
#define ROM_SIZE 0x00100000
#define EPIC_IN_INT9_VEC_REG (EPIC_CCSROFF + 0x10320)
#define HCF_RES_STRING 1
#define _PPC_L1CFG_CARCH_MASK 0xC0000000
#define WIND_OBJ_PUBLIC 0x40
#define _IFORM_405_TLB 60
#define FIORENAME 10
#define SYSFLG_VENDOR_0 0x1000
#define _FNOATIME 0x80000
#define USER_D_MMU_ENABLE 
#define WV_OBJ_CLASS_IS_INSTRUMENTED(classId) (classId->handle.attributes & WIND_CLASS_INSTRUMENTED)
#define M_msgQDistGrpLib (120 << 16)
#define LEADING_UNDERSCORE FALSE
#define ARMARCH5_T _VX_ARMARCH5_T
#define PPC505 _VX_PPC505
#define PPC509 _VX_PPC509
#define _FD_FUNC_DEFINED 
#define MII_SR_10T_HALF_DPX 0x0800
#define EVT_NOOBJ_STR_0(evtId,LENGTH,DATA) do { if (ACTION_IS_SET) { EVT_NOOBJ_STR_0_T evt_noobj_str_0; evt_noobj_str_0.data = DATA; evt_noobj_str_0.length = LENGTH; eventPointSwHandle (evtId, &evt_noobj_str_0, sizeof evt_noobj_str_0); } } while ((0))
#define VXDBG_BP_BY_ID_REMOVE(pClient,retVal,brkptId) { VXDBG_BP_DEL_INFO bpInfo; bpInfo.type = BP_BY_ID_DELETE; bpInfo.pClnt = pClient; bpInfo.info.id.bpId = brkptId; VXDBG_BP_DELETE(bpInfo, retVal); }
#define N_TLB_ENTRIES 256
#define TRG_CLASS_5_ON 0x10010000
#define STACK_ROUND_UP(x) ROUND_UP(x, _STACK_ALIGN_SIZE)
#define _VX_PPC860 97
#define SPIN_LOCK_TASK_DECL(x,flag) spinlockTask_t x = { {{0}}, -1, 0, NULL, flag}
#define VXEV10 0x00000200
#define FIOINODETONAME 45
#define FIOCOMMITPERIODGETFS 68
#define EPIC_SEC_INT_VEC (EPIC_SEC_INT_NUM + EPIC_VEC_IN_IRQ0)
#define M85XX_PORPLLSR_PLAT_RATIO(base) ((*M85XX_PORPLLSR(base) & M85XX_PORPLLSR_PLAT_RATIO_MASK)>>1)
#define MIN_CLASS3_ID 10000
#define M_unLib (188 << 16)
#define S_ioLib_NO_DRIVER ENXIO
#define SM_TAS_TYPE SM_TAS_HARD
#define VXB_BUSID_MF 10
#define M_tyLib (31 << 16)
#define SODIMM_FLASH 2
#define IPCOM_USE_TIME 
#define EVENT_SALRUN_WAIT CLASS3_EVENT(101)
#define PENDED 2
#define __FINITE_MATH_ONLY__ 0
#define _PPC_SPEFSCR_FINVS 0x00100000
#define S_objLib_OBJ_ILLEGAL_CLASS_TYPE (M_objLib _WRS_BIT_OR 10)
#define SYSFLG_TFTP 0x80
#define CACHE_PIPE_FLUSH() ((cacheLib.pipeFlushRtn == NULL) ? OK : (cacheLib.pipeFlushRtn) ())
#define S_ioLib_NAME_TOO_LONG ENAMETOOLONG
#define WIND_OBJ_CORE_SIZE 0x40
#define __INCdsmPpch 
#define EPIC_VEC_OPTION_NA 27
#define _PPC_SPEFSCR_OVH 0x40000000
#define M_pmLib (139 << 16)
#define DEFAULT_VM_MAP_ATTR_MASK (MMU_ATTR_VALID_MSK | MMU_ATTR_PROT_MSK | MMU_ATTR_CACHE_MSK | MMU_ATTR_SPL_MSK)
#define VX_COPROC7_TASK 0x40000000
#define TLB_CACHE_MODE VM_STATE_CACHEABLE | VM_STATE_MEM_COHERENCY
#define STACK_VERSION_PATCH 2
#define EBADF 9
#define S29GL_FLASH_WIDTH 2
#define AUX_CLK_RATE_MAX ((CCB_FREQ / 16) / (1 << FIT_DIVIDER_TAP_10))
#define __INCcacheLibh 
#define __INCesfPpch 
#define __STDDEF_H__ 
#define IPCOM_AUTOCONF_H 
#define LSRT_VALUE 0x20
#define IO_ADRS_EI ((char *) 0x000fff00)
#define MII_EXT_STAT_REG 0xf
#define INT_LEVEL(eventNum) ((eventNum)-MIN_INT_ID)
#define _IFORM_XO_2 48
#define _IFORM_XO_3 49
#define ECANCELED 72
#define S_taskLib_NO_TCB (M_taskLib | 111)
#define _ARCH_CHAR_BIT 8
#define DOSFS_CACHE_BACKGROUND_FLUSH_TASK_ENABLE FALSE
#define SPIN_LOCK_NOBODY -1
#define EVENT_SEMRTAKE CLASS3_EVENT(205)
#define _IFORM_I_1 0
#define M85XXRIO_ODQDPAR(base) (CAST(VUINT32 *)(((char*)base) + 0x1100C))
#define _IFORM_EVX_6 96
#define semCount state.count
#define EPIC_WHOAMI_ID(n) ((n) & EPIC_WHOAMI_ID_MSK)
#define BOOT_CMD_STACK_SIZE (11000)
#define REFCNT_NOT_ZERO 1
#define TFFS_FLASH_TLB_SIZE _MMU_TLB_SZ_64M
#define DDR_SDRAM_MD_CNTL 0x120
#define INCLUDE_IO_RTP 
#define PPC85XX _VX_PPC85XX
#define I2C_BYTE_NUM_SHIFT 7
#define _IFORM_EFX_1 87
#define EVENT_WINDSUSPEND CLASS2_EVENT(2)
#define EVENT_MSGCREPLYGET CLASS3_EVENT(37)
#define MII_READ(addr,reg,val1,val2) val2 = ((* (pPhyInfo->phyReadRtn)) ((pPhyInfo->pDrvCtrl), (addr), (reg), (val1)));
#define ETXTBSY 63
#define S_vxdbgLib_ERR_IPI_EMIT VXDBG_ERROR_TO_ERRNO(VXDBG_ERR_IPI_EMIT)
#define DEFAULT_BOOT_LINE "motetsec(0,0)host:vxWorks h=192.102.10.32 e=192.102.10.15 u=vxworks pw=vxworks f=0x0"
#define XBD_BLK_DEV_TASK_PRIORITY 50
#define M_distLib (118 << 16)
#define _EXC_INFO_FPCSR 0x040
#define _WRS_CONFIG_FAST_MATH 1
#define _WRS_SNOOP_NEEDS_DMA_MALLOC_SUPPORT 
#define _IFLAG_RC 0x0002
#define PCI_XINT4_LVL 0x5
#define _MMU_UW 0x00000800
#define MMU_STATE_VALID 0x80000000
#define _VX_PPC 90
#define FIOFLUSH 2
#define FIOSYNC 21
#define _DBSR_DAC1R 0x00080000
#define EPIC_VEC_GT_A_IRQ0 (EPIC_VEC_IN_IRQ0 + EPIC_MAX_IN_IRQS)
#define NV_MAC_ADRS_OFFSET 0x200
#define _DBSR_DAC1W 0x00040000
#define __INCb_pthread_attr_th 
#define _WRS_CONFIG_DETERMINISTIC 1
#define __INCvxLibh 
#define EPIC_RES44_INT_NUM 44
#define htobe16(x) ((UINT16)(x))
#define _PPC_HID0_DOZE_U 0x0080
#define __restrict 
#define EVENT_SYSCALL_RETURN_ERR CLASS3_EVENT(75)
#define MMU_STATE_SUP_RX_USR_R (MMU_STATE_SUP_RX | _MMU_UR)
#define MMU_STATE_SUP_RX_USR_W (MMU_STATE_SUP_RX | _MMU_UW)
#define MMU_STATE_SUP_RX_USR_X (MMU_STATE_SUP_RX | _MMU_UX)
#define ETOOMANYREFS 59
#define _PPC_SPEFSCR_FINVH 0x08000000
#define __SHRT_MAX__ 32767
#define WDB_MODE WDB_MODE_DUAL
#define EPIC_IN_INT7_DES_REG (EPIC_CCSROFF + 0x102f0)
#define CCSBAR 0xE0000000
#define __LDBL_MAX__ 1.7976931348623157e+308L
#define MAX_MAC_ADRS 4
#define EPIC_TM_A1_VEC_REG (EPIC_CCSROFF + 0x01160)
#define M_ipRouteLib (141 << 16)
#define Q_ATTRIBUTE_SET(qHead,value) (((Q_HEAD *)(qHead))->qPriv2 = (UINT)(value))
#define OBJ_RECLAIM_DISABLE(objId) ( ((OBJ_CORE *)(objId))->handle.attributes |= WIND_OBJ_NO_RECLAIM )
#define CACHE_LIBRARY_MODE (CACHE_COPYBACK | CACHE_SNOOP_ENABLE)
#define S_vxdbgLib_TIMEOUT VXDBG_ERROR_TO_ERRNO(VXDBG_ERR_TIMEOUT)
#define TBL_R 268
#define M_loadElfLib (97 << 16)
#define _VX_ARMSA110 124
#define TBL_W 284
#define M85XXRIO_RIWAR_LOCAL_W_LOCK_L2 7
#define _PARM_UTS_SYSNAME_MAX 64
#define SIMLINUX _VX_SIMLINUX
#define INCLUDE_WDB_REG 
#define htobe32(x) ((UINT32)(x))
#define M_grmLib (167 << 16)
#define EPIC_TSEC2RX_INT_VEC (EPIC_TSEC2RX_INT_NUM + EPIC_VEC_IN_IRQ0)
#define EPIC_IN_DFT_POLAR EPIC_INT_ACT_HIGH
#define EVENT_SYSCALL_ENTER EVENT_SYSCALL_BASE
#define INST_BC_RL_MASK 0xfc00fbff
#define M85XX_L2ERRATTR(x) (CAST(VUINT32 *)((x + 0x20E4C)))
#define SPARC _VX_SPARC
#define MII_MASSLA_STAT_CONF_FAULT 0x8000
#define VM_STATE_BUFFERABLE_NOT 0x00
#define _ARCH_DBL_MAX_EXP 1024
#define PCI_OUTBOUND_TRANS_ADRS_REG1(base) CVPUINT32(base, 0x8c20)
#define _WRS_CONFIG_COMPONENT_MIPC 1
#define _PARM_FOPEN_MAX 20
#define RIO_NOT_INITIALIZED 1
#define VM_PAGE_SIZE 4096
#define _EXC_INFO_MSR 0x004
#define EPIC_EIDR_CRIT1_INT EPIC_BIT(29)
#define USER_D_CACHE_MODE (CACHE_LIBRARY_MODE)
#define USER_I_CACHE_MODE (CACHE_LIBRARY_MODE)
#define S_miiLib_PHY_LINK_DOWN (M_miiLib | 1)
#define _IFLAG_440_SPEC 0x0800
#define __SNPT 0x0800
#define _PPC_TSR_FIS_U 0x0400
#define MMU_ATTR_USR_DATA_RO (MMU_ATTR_USR_RO | MMU_ATTR_SUP_DATA_RO)
#define ETHERNET_MAC_HANDLER 
#define MII_CR_FDX 0x0100
#define __INCb_size_th 
#define L2SIZ_512KB 2
#define INCLUDE_MUX2 
#define LAWBAR_ADRS_SHIFT 12
#define EPIC_SMSG_INT4_VEC_REG (EPIC_CCSROFF + 0x11c80)
#define MII_TECH_PAUSE_MASK 0x0c00
#define htobe64(x) ((UINT64)(x))
#define _ARCH_va_arg(list,type) ((type *)(list += sizeof(type)))[-1]
#define EINPROGRESS 68
#define EPIC_RES25_INT_NUM 25
#define _ARCH_FLT_MAX_EXP 128
#define _PC_ASYNC_IO 3
#define EPIC_IN_INT37_VEC_REG (EPIC_CCSROFF + 0x106a0)
#define INCLUDE_WDB_EXIT_NOTIFY 
#define EPIC_GTVPR_PRIORITY_MSK (EPIC_BIT(19) | EPIC_BIT(18) | EPIC_BIT(17) | EPIC_BIT(16))
#define _POSIX_PRIO_IO 0
#define IPCOM_USE_TCP 
#define _PPC_MSR_DE 0x0200
#define _WRS_CONFIG_SV_INSTRUMENTATION 1
#define putchar(c) (__sputc(c, (stdout)))
#define BSD_4_2 3
#define _VX_PENTIUM 83
#define COMMAND_REGISTER_OFFSET 0x4
#define _WRS_CONFIG_FEATURE_USR 1
#define M_aioPxLib (92 << 16)
#define VX_NO_STACK_FILL 0x0100
#define EPIC_TSEC1ERR_INT_VEC (EPIC_TSEC1ERR_INT_NUM + EPIC_VEC_IN_IRQ0)
#define _PPC_PID_REG PID0
#define EVENT_WINDDELAY CLASS2_EVENT(9)
#define WIND_OBJ_ORPHANED 0x10
#define _VX_TOOL TOOL
#define EPIC_RES31_INT_VEC (EPIC_RES31_INT_NUM + EPIC_VEC_IN_IRQ0)
#define S_vmLib_PHYS_PAGES_ALREADY_MAPPED (M_vmLib | 8)
#define AIM_MMU_INIT_PT_INCR 0x20
#define MEDR_BLOCK_GUARD_ENABLE FALSE
#define INT_CPU_MICRO_LOCK() intCpuMicroLock()
#define EVENT_SALRUN_TERMINATE CLASS3_EVENT(107)
#define RIO_FEATURES_EXTADDR_34_66 0xa000
#define _WRS_ARCH_SUPPORTS_MEM_BARRIER 
#define M_rawFsLib (70 << 16)
#define __INClstLibh 
#define MPC85XX_I2C_DATA_REG_MASK 0xFF
#define _POSIX_AIO_MAX 1
#define I960CA _VX_I960CA
#define _VX_I80X86 80
#define _ARCH_SCHAR_MAX 127
#define EPIC_IN_INT37_DES_REG (EPIC_CCSROFF + 0x106b0)
#define _PPC_SPEFSCR_FDBZ 0x00000400
#define DDR_SDRAM_MODE_CFG 0x118
#define INCLUDE_PLB_BUS 
#define FD_SETSIZE _VX_FD_SETSIZE
#define __LDBL_MAX_EXP__ 1024
#define WDB_DPRINTF_MAX_MSGS 100
#define KERNEL_LOCK_TAKE() (kernelLockTake())
#define __printflike(fmtarg,firstvararg) __attribute__((__format__ (__printf__, fmtarg, firstvararg)))
#define M_smUtilLib (77 << 16)
#define EVENT_OBJ_TASK CLASS2_EVENT(19)
#define MII_ANAR_NEXT_PAGE 0x8000
#define _ARCH_FLT_DIG 7
#define _ARCH_MB_LEN_MAX 1
#define VM_CONTEXT_UNION_INIT(context,startAddr,len) ((vmLibInfo.pVmCtxUnionInitRtn == NULL) ? (ERROR) : ((*vmLibInfo.pVmCtxUnionInitRtn) (context, startAddr, len)))
#define _WRS_IOLONG ULONG
#define RIO_FEATURES_PROCESSOR 0x0004
#define M_pgPoolPhysLib (182 << 16)
#define ENOTBLK 66
#define M_cacheLib (69 << 16)
#define _PPC_ESF_FPCSR (_PPC_ESF_DSISR + SIZ_UINT32)
#define MMU_STATE_SUP_RW_USR_RW (MMU_STATE_SUP_RW | _MMU_UR | _MMU_UW)
#define MMU_STATE_SUP_RW_USR_RX (MMU_STATE_SUP_RW | _MMU_UR | _MMU_UX)
#define MII_MASSLA_STAT_REMOTE_RCV 0x1000
#define MAX_ARGS 10
#define EPROTOTYPE 41
#define M_graLib (172 << 16)
#define bswap32(x) LONGSWAP((UINT32)(x))
#define Q_EACH(pQHead,routine,routineArg) ((Q_NODE *)((*(((Q_HEAD *)(pQHead))->pQClass->eachRtn)) (((Q_HEAD *)(pQHead)),((FUNCPTR)(routine)),((int)(routineArg)))))
#define EPIC_EX_VEC_REG_INTERVAL 0x20
#define EPIC_IN_INT18_VEC_REG (EPIC_CCSROFF + 0x10440)
#define TRG_USER_INDEX 3
#define EVENT_WINDTICKTIMEOUT CLASS2_EVENT(31)
#define VXBAF_BYTE_ORDER_LE_16 0x00040000
#define EPIC_EX_INT9_VEC_REG (EPIC_CCSROFF + 0x10120)
#define _WRS_BIT_OR |
#define SYSFLG_DEBUG 0x02
#define LAWAR_SIZE_32KB 0x0000000E
#define M85XX_PORPLLSR(base) (CAST(VUINT32 *)((base) + 0xE0000))
#define VXEV26 0x02000000
#define MII_ID2_MODE_MASK 0x03f0
#define _PPC_MSR_IS 0x0020
#define EPIC_PERFMON_3_MSK_REG1 (EPIC_CCSROFF + 0x013c0)
#define EPIC_MAX_GT_B_IRQS 4
#define _POSIX_AIO_LISTIO_MAX 2
#define VXB_DRIVER_METHOD(NAME) ((UINT32)&NAME ##_desc[0])
#define M_tplLib (170 << 16)
#define SPINLOCK_OPERATION_ABORTED -1
#define EPIC_REG_READ(offset) *(volatile UINT32 *)((UINT32)pEpicRegBase + (offset & REG_ADRS_MASK))
#define EALREADY 69
#define _PPC_SPEFSCR_FINVE 0x00000020
#define LAWAR_SIZE_32MB 0x00000018
#define PCI2_OUTBOUND_TRANS_ADRS_REG1(base) CVPUINT32(base, 0x9c20)
#define bswap64(x) 
#define SLL_PREVIOUS(list,node,previousNode) { SL_NODE *temp; (SL_NODE *)(previousNode) = NULL; temp = ((SL_LIST *)(list))->head; if (temp != NULL) && (temp != (node)) while (temp->next != NULL) { if (temp->next == (node)) { (SL_NODE *)(previousNode) = temp; break; } temp = temp->next; } }
#define __INCtoolMacrosPh 
#define _POSIX_SYNCHRONIZED_IO 0
#define I960HX _VX_I960HX
#define EPIC_IN_INT18_DES_REG (EPIC_CCSROFF + 0x10450)
#define INCLUDE_MMU_OPTIMIZE 
#define M_salLib (189 << 16)
#define INCLUDE_VXBUS_SHOW 
#define MPC85XX_I2C_STATUS_REG_SRW 0x04
#define M85XXRIO_IMR(base) (CAST(VUINT32 *)(((char*)base) + 0x11060))
#define CACHE_DRV_FLUSH(pFuncs,adrs,bytes) (((pFuncs)->flushRtn == NULL) ? OK : ((pFuncs)->flushRtn) (DATA_CACHE, (adrs), (bytes)))
#define MIPS32 _VX_MIPS32
#define EPIC_TM_A1_DES_REG (EPIC_CCSROFF + 0x01170)
#define FLASH1_BASE_ADRS 0xf8000000
#define EPIC_IN_INT32_DES_REG (EPIC_CCSROFF + 0x10610)
#define MMU_ATTR_CACHE_MSK 0x00000f80
#define MIN_RESERVE_ID 20000
#define _PPC_SPEFSCR_FINXE 0x00000040
#define MMU_STATE_CACHEABLE_COPYBACK 0x00000000
#define MMU_STATE_SUP_RW_USR_WX (MMU_STATE_SUP_RW | _MMU_UW | _MMU_UX)
#define _WRS_ARCH_HAS_CPU_PWR_MGMT 
#define _PPC_SPEFSCR_FINXS 0x00200000
#define O_APPEND _FAPPEND
#define _WRS_CONFIG_FULL_EDR_STUBS 1
#define _MMU_TLB_TS_1 0x00001000
#define I960JX _VX_I960JX
#define VXB_VER_MINOR(x) (((x)>>8)&0x0ff)
#define MII_CRC_LEN 0x4
#define _IFORM_B_1 1
#define _ARCH_SCHAR_MIN (-127-1)
#define I960KA _VX_I960KA
#define I960KB _VX_I960KB
#define _ARCH_HUGH_VAL _ARCH_DBL_MAX
#define _POSIX_LINK_MAX 8
#define INTERRUPT_STACK_UNDERFLOW_SIZE 4096
#define WV_CLASS_1 0x00000001
#define WV_CLASS_2 0x00000003
#define _PPC_L1CFG_SIZE_MASK 0x00000FFF
#define DEC_CLOCK_FREQ OSCILLATOR_FREQ
#define WV_ON 0x10000000
#define WV_EVT_INT_ENT(intNum) EVT_CTX_1(EVENT_INT_ENTER, intNum);
#define STREAM_MAX FOPEN_MAX
#define VXDBG_ALL_TASKS 0
#define PCI_XINT3_LVL 0x4
#define PCI_ATTR_WS_256K 0x00000011
#define EVENT_PAUSE CLASS3_EVENT(26)
#define MIPS64 _VX_MIPS64
#define MMU_ATTR_USR_RWX (MMU_ATTR_USR_RW | MMU_ATTR_PROT_USR_EXE)
#define SEM_RW_OPTIONS_MASK (SEM_MUT_OPTIONS_MASK)
#define M_eventLib (134 << 16)
#define _DBCR2_DAC2ER 0x03000000
#define __sclearerr(p) ((void)((HANDLE_VERIFY(p, handleTypeFile) != OK) ? (0) : (((p)->_flags &= ~(__SERR|__SEOF)))))
#define OBJ_SET_DEALLOC_MEM(objId) ( ((OBJ_CORE *)(objId))->handle.attributes |= WIND_OBJ_DEALLOC_MEM )
#define FIOUNLINK 59
#define QUEUE_INTERRUPTIBLE 1
#define MII_PHY_DEF_ADDR 0x0
#define G100 _VX_G100
#define _IFIELD_LI(x) ((0x02000000 & x) ? ((0xf6000000 | x) & ~3) : ((0x03fffffc & x) & ~3))
#define M85XX_LBCDLLSR(base) (CAST(VUINT32 *)((base) + 0xE0E20))
#define PADDING_SHIFT_COUNT (29)
#define DEVMETHOD_DEF(METHOD,STRING) char METHOD ##_desc[]=STRING;
#define MAP1000 _VX_MAP1000
#define _POSIX_CHILD_MAX 6
#define _WRS_CONFIG_WLAN_ATH 1
#define __INCintLibh 
#define VM_STATE_MASK_GUARDED MMU_ATTR_CACHE_MSK
#define EVT_STORE_UINT16(pBuf,event_id) *pBuf++ = (event_id)
#define BOOT_COLD BOOT_CLEAR
#define VXB_HANDLE_IO 8
#define IVOR10 410
#define IVOR11 411
#define IVOR13 413
#define IVOR15 415
#define _WRS_CONFIG_EDR_POLICY_HOOKS_D 1
#define CDROM_COM_BUF_SIZE 3
#define _DEFINED_cpuset_t 
#define TASK_USER_EXEC_STACK_UNDERFLOW_SIZE 4096
#define VXDBG_CTX_STOP(pClnt,pCtx) _func_vxdbgFuncs[VXDBG_STOP] (pClnt, pCtx)
#define IPCOM_STDIO_BUFSIZE 3000
#define SIO_ERROR_FRAMING 0
#define ENODATA 78
#define _MMU_TLB_SZ_64K 0x00000300
#define _ARCH_ALIGN_MEMORY 4
#define INCLUDE_MUXTK_OVER_END 
#define IPCOM_USE_AUTH 
#define __INCtaskLibCommonh 
#define MMU_ATTR_NO_BLOCK (MMU_ATTR_SPL_7)
#define EPIC_EIDR_CRIT0_INT EPIC_BIT(30)
#define SYM_IS_LOCAL(symType) ((symType) & SYM_LOCAL)
#define __INCbootLibh 
#define __END_DECLS 
#define STACK_RESIDENT RAM_DST_ADRS
#define EVENTS_OPTIONS_NONE 0x00
#define EVT_STORE_UINT32(pBuf,value) do { *((short *) pBuf) = (value) >> 16; *(((short *) pBuf) + 1) = (value); pBuf++; } while ((0))
#define M85XXRIO_IPWQBAR(base) (CAST(VUINT32 *)(((char*)base) + 0x134EC ))
#define INST_LWZ_SP 0x80010000
#define M85XXRIO_BDIDCSR_OFFSET 0x60
#define IVOR32 528
#define IVOR33 529
#define IVOR34 530
#define IVOR35 531
#define M85XXRIO_OSR(base) (CAST(VUINT32 *)(((char*)base) + 0x11004))
#define EPIC_IIDR_P0_INT EPIC_BIT(0)
#define EPIC_IN_INT10_VEC_REG (EPIC_CCSROFF + 0x10340)
#define __STDC_HOSTED__ 1
#define EVENT_WINDPENDQTERMINATE CLASS2_EVENT(17)
#define FIODATASYNC 57
#define VM_CONTEXT_DELETE(context) ((vmLibInfo.pVmCtxDeleteRtn == NULL) ? (ERROR) : ((*vmLibInfo.pVmCtxDeleteRtn) (context)))
#define CACHE_DRV_IS_WRITE_COHERENT(pFuncs) ((pFuncs)->flushRtn == NULL)
#define EPIC_MER_EN(n) (EPIC_BIT(n) & EPIC_MER_EN_MSK)
#define _IFORM_X_1 11
#define _IFORM_X_2 12
#define _IFORM_X_4 14
#define _IFORM_X_5 15
#define _IFORM_X_6 16
#define _IFORM_X_7 17
#define _IFORM_X_8 18
#define _IFORM_X_9 19
#define NO_L2_EXT_WRITE_REGIONS 4
#define VXDBG_ERROR_TO_ERRNO(error) (M_vxdbgLib | error)
#define SIMSPARCSUNOS _VX_SIMSPARCSUNOS
#define atomic32And_inline atomic32And
#define _EXC_PROG_SRR1_ILL 0x00080000
#define M_loadLib (14 << 16)
#define CACHE_TEXT_UPDATE(adrs,bytes) ((cacheLib.textUpdateRtn == NULL) ? OK : (cacheLib.textUpdateRtn) ((adrs), (bytes)))
#define _POSIX_DATAKEYS_MAX 16
#define __INCvxArchh 
#define M85XX_L2CEWAREAn(x,n) (CAST(VUINT32 *)((x + 0x20014) + (n * 0x10)))
#define M85XX_BR0(base) (CAST(VUINT32 *)((base) + 0x5000))
#define M85XX_BR1(base) (CAST(VUINT32 *)((base) + 0x5008))
#define M85XX_BR2(base) (CAST(VUINT32 *)((base) + 0x5010))
#define M85XX_BR3(base) (CAST(VUINT32 *)((base) + 0x5018))
#define M85XX_BR4(base) (CAST(VUINT32 *)((base) + 0x5020))
#define M85XX_BR5(base) (CAST(VUINT32 *)((base) + 0x5028))
#define M85XX_BR6(base) (CAST(VUINT32 *)((base) + 0x5030))
#define M85XX_BR7(base) (CAST(VUINT32 *)((base) + 0x5038))
#define _PARM_RAND_MAX 32767
#define EPIC_IPI_3_VEC_REG (EPIC_CCSROFF + 0x010d0)
#define EPIC_MSG_VEC_REG_INTERVAL 0x20
#define IPCOM_SYSLOG_IPCOM_PRIORITY IPCOM_SYSLOG_PRIO_DEFAULT
#define SH7700 _VX_SH7700
#define EPIC_IN_INT10_DES_REG (EPIC_CCSROFF + 0x10350)
#define _WRS_VXWORKS_MAINT 0
#define RIO_WPCSR_FAILED 0x10000000
#define __DBL_DIG__ 15
#define PCI_ATTR_WS_4M 0x00000015
#define VXB_HANDLE_OP(x) ((x) & 0xF0)
#define INCLUDE_VXBUS_INIT 
#define _IFORM_D_8 10
#define EINTR 4
#define SM_MAX_PKTS 200
#define S_objLib_OBJ_NAME_TRUNCATED (M_objLib _WRS_BIT_OR 7)
#define EPIC_EX_INT5_VEC_REG (EPIC_CCSROFF + 0x100a0)
#define PATH_MAX _PARM_PATH_MAX
#define _PPC_ESF_XER (_PPC_ESF_CR + 4)
#define INST_STW_SP_MASK 0xfc1f0000
#define EPIC_EIDR_EX_PIN EPIC_BIT(31)
#define _IFLAG_MAC (_IFLAG_405_SPEC | _IFLAG_440_SPEC)
#define _WRS_CONFIG_OBJECT_OWNERSHIP 1
#define _PPC_L1CSR_FLR 0x00000100
#define SH7729 _VX_SH7729
#define VXB_VER_MAJOR(x) ((x)>>16)
#define _DYNAMIC_BUS_SIZING FALSE
#define M85XX_L2CEWARn(x,n) (CAST(VUINT32 *)((x + 0x20010) + (n * 0x10)))
#define EXC_MSG_ADRS ((char *) (LOCAL_MEM_LOCAL_ADRS+EXC_MSG_OFFSET))
#define EVT_CTX_IDLE(evtId) EVT_CTX_0(evtId)
#define INCLUDE_CTORS_DTORS 
#define VXEV30 0x20000000
#define _PPC_TSR_DIS (_PPC_TSR_DIS_U << 16)
#define M_resolvLib (107 << 16)
#define TMP_MAX _PARM_TMP_MAX
#define __scanflike(fmtarg,firstvararg) __attribute__((__format__ (__scanf__, fmtarg, firstvararg)))
#define MMU_STATE_ENDIAN_BIG 0x00000000
#define EPIC_IRQ_SUMM_REG0 (EPIC_CCSROFF + 0x01310)
#define atomic32Inc_inline atomic32Inc
#define CPU_PWR_HIGH_THRESHOLD (100)
#define WV_CLASS_TASKNAMES_PRESERVE_ON 0x10001000
#define EPIC_IRQ_SUMM_REG1 (EPIC_CCSROFF + 0x01320)
#define EPIC_EX_INTERRUPT 21
#define _CALL_SYSV 1
#define ENOTCONN 57
#define IPCOM_STACK_ADJUST(x) ((x * 3) / 2)
#define EPIC_OPT_EXPIN_ON (0x80000000 >> 16)
#define SIO_KYBD_MODE_GET 0x1012
#define VME_AM_EXT_USR_ASCENDING 0x0b
#define _WRS_CONFIG_LOADER 1
#define _VX_MC68000 1
#define __LDBL_MIN__ 2.2250738585072014e-308L
#define M85XX_PORPLLSR_E500_RATIO_MASK 0x003f0000
#define EPIC_EOI1_REG (EPIC_CCSROFF + 0x210b0)
#define OBJ_IS_RECLAIM_DISABLE(objId) ( (((OBJ_CORE *)(objId))->handle.attributes & WIND_OBJ_NO_RECLAIM) != 0 )
#define EPIC_MAX_IN_IRQS 48
#define EPIC_EX_INT5_DES_REG (EPIC_CCSROFF + 0x100b0)
#define SPIN_LOCK_TASK_TAKE(x) (spinLockTaskTake (x) )
#define EVENT_SALRUN_SOCKIGNORE CLASS3_EVENT(104)
#define M_semLib (22 << 16)
#define OM_DELETE_ON_LAST_CLOSE 0x40000000
#define SH7750 _VX_SH7750
#define EVENT_SALDELETE CLASS3_EVENT(100)
#define M85XX_LTEATR(base) (CAST(VUINT32 *)((base) + 0x50BC))
#define IPCOM_USE_SYSVAR_EXT 
#define IPCOM_VR_MAX 8
#define _VX_MC68010 2
#define BOOT_FILE_LEN 160
#define _ESOP(opcd,xo) ((opcd << 26) + (xo << 3))
#define IPCOM_SOCK_IPNET 2
#define EPIC_RES44_INT_VEC (EPIC_RES44_INT_NUM + EPIC_VEC_IN_IRQ0)
#define M_usbHostLib (131 << 16)
#define _WRS_INITTEXT __attribute__ ((__section__ (".text.init")))
#define _PPC_MSR_MCE _PPC_MSR_ME
#define VXB_BUSID_RAPIDIO 7
#define INCLUDE_ETSEC_VXB_END 
#define EPIC_MSG_DEST_REG_VECREGOFF 0x10
#define M85XX_LCRR(base) (CAST(VUINT32 *)((base) + 0x50D4))
#define _VX_MC68020 3
#define FTRUNC _FTRUNC
#define __INCvmeh 
#define M_cmsLib (161 << 16)
#define _WCHAR_T_ 
#define S_vxdbgLib_INVALID_MEM_ACCESS VXDBG_ERROR_TO_ERRNO(VXDBG_ERR_INVALID_MEM_ACCESS)
#define EPIC_VEC_CTRL_EXT (EPIC_MAX_ALL_IRQS)
#define vxbintrCtlr_H 
#define _PPC_EXC_VEC_BASE_HIGH 0xfff00000
#define MSG_Q_FIFO 0x00
#define _DBCR0_IDM 0x40000000
#define _VX_FD_SETSIZE 2048
#define _VX_MC68030 4
#define _STDDEF_H 
#define INCLUDE_SEM_BINARY_CREATE 
#define FLASH_ADRS FLASH1_BASE_ADRS
#define VX_PRIVATE_ENV 0x0080
#define _FTRUNC 0x0400
#define PCIEX_XINT4_LVL 0x3
#define TASK_CPU_UNLOCK() ( taskCpuUnlock () )
#define BUS_TYPE_PCI 3
#define MMU_ATTR_PROT_USR_TO_SUP(attr) (((attr) & MMU_ATTR_PROT_USR_MSK) >> 3)
#define S_excLib_INTERRUPT_STACK_OVERFLOW (M_excLib | 2)
#define _VX_MC68040 5
#define M85XX_L2CTL_L2SIZ_MSK 0x30000000
#define EVENT_MSGQRECEIVE CLASS3_EVENT(22)
#define _IONBF 2
#define M85XXRIO_ROWAR_WRTYPE_NWRITE_R 0x5
#define MAX_AIO_SYS_TASKS 0
#define __INCb_ssize_th 
#define CPU PPC32
#define VXB_ACCESS_INT_DISCONN 0x0000000d
#define MII_SR_T4 0x8000
#define INCLUDE_MUX2_OVER_END 
#define EVENT_WINDTICKANNOUNCETMRWD CLASS2_EVENT(8)
#define VXB_REG_INTERVAL "regInterval"
#define PCI_XINT2_LVL 0x3
#define STACK_VERSION_PATCH_MINOR 0
#define EPIC_SR_OUT_MU1_INT_VEC (EPIC_SR_OUT_MU1_INT_NUM + EPIC_VEC_IN_IRQ0)
#define EPIC_SR_IN_MU1_INT_VEC (EPIC_SR_IN_MU1_INT_NUM + EPIC_VEC_IN_IRQ0)
#define EPIC_TM_A2_DES_REG (EPIC_CCSROFF + 0x011b0)
#define _VX_MC68060 7
#define _DBCR1_IAC1US 0xc0000000
#define EVENT_OBJ_MSGCDELETE CLASS2_EVENT(37)
#define M85XX_L2ERRDET(x) (CAST(VUINT32 *)((x + 0x20E40)))
#define CPU_PWR_LOW_THRESHOLD (0)
#define INCLUDE_FS_EVENT_UTIL 
#define OPT_ABORT 0x20
#define _IFIELD_ME(x) ((0x0000003e & x) >> 1)
#define _ARCH_UINT_MAX 4294967295u
#define M85XXRIO_CR(base) (CAST(VUINT32 *)(((char*)base) + 0x10000 ))
#define WDB_BP_MAX 25
#define EPIC_RES25_INT_VEC (EPIC_RES25_INT_NUM + EPIC_VEC_IN_IRQ0)
#define _DEFINED_gid_t 
#define VX_UNBREAKABLE 0x0002
#define _FMARK 0x0010
#define EVENT_WIND_EXIT_IDLE CLASS1_EVENT(6)
#define INCLUDE_EXC_TASK 
#define _IFIELD_CRFS(x) ((0x001c0000 & x) >> 18)
#define CORE_DUMP_MEM_POOL_PAGE_SIZE 0x8000
#define MIPSI2 _VX_MIPSI2
#define MIPSI3 _VX_MIPSI3
#define __INCsemLibPh 
#define O_WRONLY 1
#define WDB_COMM_END 6
#define CS5 0x0
#define CS6 0x4
#define CS8 0xc
#define _ARCH_FLT_MAX_10_EXP 38
#define _IFIELD_VUIMM(x) ((0x001f0000 & x)>> 16)
#define O_EXCL _FEXCL
#define INCLUDE_MUX 
#define _ARCH_DBL_MANT_DIG 53
#define vxCas_inline vxCas
#define _PPC_ESF_STK_SIZE ((_PPC_ESF_SIZE + _STACK_ALIGN_SIZE - 1) & ~(_STACK_ALIGN_SIZE - 1))
#define ENOTSOCK 50
#define EVENT_TASKRESUME CLASS3_EVENT(5)
#define WDB_TTY_BAUD 9600
#define SYSFLG_AUTOCONFIG 0x40
#define S_ioLib_DEVICE_TIMEOUT EIO
#define _MMU_SW 0x00000400
#define _MMU_SX 0x00001000
#define CS0_BNDS 0x000
#define INCLUDE_FLASH 
#define _WRS_CONFIG_FEATURE_IP_GPP_BUILD 1
#define TRG_CLASS_3_ON 0x10000100
#define SIO_CALLBACK_ERROR 3
#define NO_WAIT 0
#define __vsbConfig_INCLUDED 
#define MII_ANAR_PAUSE_MASK 0x0c00
#define EPIC_EX_INT11_VEC_REG (EPIC_CCSROFF + 0x10160)
#define EPIC_REG_NO_OFFSET_READ(regAdrs) *(volatile UINT32 *)(regAdrs)
#define ENOSR 74
#define VXB_DRIVER_METHOD_DECL(NAME) IMPORT char NAME ##_desc[];
#define _PPC_TSR_DIS_U 0x0800
#define _VX_ARM7TDMI 122
#define FIOWFLUSH 27
#define VXB_ACCESS_CFG_READ 0x00000012
#define EPIC_IN_INT42_VEC_REG (EPIC_CCSROFF + 0x10740)
#define M_igmpRouterLib (128 << 16)
#define SIZ_UINT16 2
#define _MMU_UR 0x00000200
#define _MMU_UX 0x00002000
#define MMU_REGION_INDEX_BITS 10
#define EPIC_TSEC4ERR_INT_NUM 23
#define S_eventLib_TASK_NOT_REGISTERED (M_eventLib | 0x0006)
#define NUM_TTY 1
#define _MMU_TLB_PERM_W 0x00000040
#define _MMU_TLB_PERM_X 0x00000020
#define IPCOM_PROC_STACK_DEFAULT IPCOM_STACK_ADJUST(4096)
#define MAX_ISR_JOBS 16
#define HRFS_DEFAULT_MAX_BUFFERS 16
#define EVENT_TASK_STATECHANGE CLASS1_EVENT(11)
#define M85XX_L2CTL_L2IO_BIT 21
#define EPIC_DUART2_INT_NUM 12
#define MMU_ATTACH_INIT (*(mmuLibFuncs.mmuTransTblUnionInit))
#define LBC_CS3_LOCAL_ADRS 0xf0100000
#define _VX_I80486 82
#define SIZ_UINT32 4
#define LSW(x) ((x) & 0xffff)
#define CACHE_DMA_PHYS_TO_VIRT(adrs) CACHE_DRV_PHYS_TO_VIRT (&cacheDmaFuncs, (adrs))
#define _T_PTRDIFF 
#define ARCH_HDR(dir,file) TOOL_HDR_STRINGIFY(arch/dir/file)
#define __INCvxbAccessh 
#define M_snmpdLib (104 << 16)
#define _PPC_SPEFSCR_FG 0x00002000
#define MMU_PAGE_SIZE 0x1000
#define OM_CREATE 0x10000000
#define EPIC_IPIVPR_VECTOR_MSK (0xffff)
#define _PPC_HID0_NAP_U 0x0040
#define CORE_DUMP_SKIP_USER_RESERVED_MEM FALSE
#define _PPC_SPEFSCR_FX 0x00001000
#define EVT_STR_N(evtId,NPARAMS,ARG1,ARG2,ARG3,ARG4,ARG5,ARG6,LENGTH,DATA) do { if (ACTION_IS_SET) { EVT_STR_N_T evt_str_n; evt_str_n.args [0] = ARG1; evt_str_n.args [1] = ARG2; evt_str_n.args [2] = ARG3; evt_str_n.args [3] = ARG4; evt_str_n.args [4] = ARG5; evt_str_n.args [5] = ARG6; evt_str_n.nParams = NPARAMS; evt_str_n.data = DATA; evt_str_n.length = LENGTH; eventPointSwHandle (evtId, &evt_str_n, sizeof evt_str_n); } } while ((0))
#define VX_STDIO 0x0010
#define EPIC_IN_INT4_VEC_REG (EPIC_CCSROFF + 0x10280)
#define EVENT_SIGSUSPEND CLASS3_EVENT(25)
#define INC_VXBPLBLIB_H 
#define _VX_ATOMIC_INIT(i) {(i)}
#define INCLUDE_END_ETHER_HDR 
#define L_ctermid _PARM_L_ctermid
#define FSTAT_BLK 0060000
#define EPIC_SMSG_INT5_VEC_REG (EPIC_CCSROFF + 0x11ca0)
#define _IFORM_X_10 20
#define OBJ_ENTRY_INDEX_GET(objHdl) ((objHdl) & OBJ_HANDLE_ENTRY_MASK)
#define _IFORM_X_12 22
#define _IFORM_X_14 24
#define _IFORM_X_16 26
#define _IFORM_X_17 27
#define _IFORM_X_18 28
#define _IFORM_X_19 29
#define atomic32Sub_inline atomic32Sub
#define MII_CR_100 0x2000
#define _WRS_KERNEL_LOCK_OFFSET_svc_ctr (0x04 + _WRS_KERNEL_LOCK_ALIGN_tkt_ctr)
#define IP_PORT_VXWORKS 68
#define SM_CPU_ATTACHED 1
#define FD_SET(n,p) _VX_FD_SET (n, p)
#define __FLT_HAS_DENORM__ 1
#define vxAtomicGet_inline(target) ((atomicVal_t)(*(volatile atomic_t *)(target)))
#define PCI_OUTBOUND_ATTR_REG0(base) CVPUINT32(base, 0x8c10)
#define PCI_OUTBOUND_ATTR_REG1(base) CVPUINT32(base, 0x8c30)
#define PCI_OUTBOUND_ATTR_REG2(base) CVPUINT32(base, 0x8c50)
#define PCI_OUTBOUND_ATTR_REG4(base) CVPUINT32(base, 0x8c90)
#define _IFORM_X_20 30
#define _IFORM_X_21 31
#define _IFORM_X_22 32
#define _IFORM_X_23 33
#define _IFORM_X_24 34
#define _IFORM_X_25 35
#define _IFORM_X_26 36
#define _IFORM_X_27 37
#define _IFORM_X_28 70
#define _IFORM_X_29 71
#define SH7000 _VX_SH7000
#define IPCOM_SHELL_MINI 2
#define EPIC_IN_INT23_VEC_REG (EPIC_CCSROFF + 0x104e0)
#define IPCOM_SHELL_NONE 1
#define _IFORM_X_30 72
#define _IFORM_X_31 73
#define _IFORM_X_32 74
#define _IFORM_X_33 75
#define _IFORM_X_34 79
#define _IFORM_X_36 81
#define _IFORM_X_37 82
#define _IFORM_X_38 83
#define EPIC_OPT_POLAR_EDG_POS 0x00800000
#define INCLUDE_AUX_CLK 
#define MII_PHY_GMII_TYPE 0x100000
#define CACHE_WRITEALLOCATE 0x04
#define SEEK_CUR 1
#define VXB_ASSERT_NONNULL(pVar,errVal) 
#define EPIC_IPI_INTERRUPT 25
#define CLOCAL 0x1
#define CUST_ENET3_2 0xA2
#define WIND_CLASS_INSTRUMENTED 0x04
#define SM_ALIGN_BOUNDARY 16
#define M85XX_MBMR(base) (CAST(VUINT32 *)((base) + 0x5074))
#define DDR_ERR_INT_EN 0xe48
#define BOOT_OTHER_FIELD_DELIMITER ';'
#define S_cacheLib_INVALID_CACHE (M_cacheLib | 1)
#define ROM_BASE_ADRS 0xFFF00000
#define INCLUDE_VXBUS_ACTIVATE 
#define INCLUDE_WDB_TTY_TEST 
#define OBJ_UNLOCK(classId,lockLevel) INT_CPU_MICRO_UNLOCK (lockLevel)
#define VXDBG_CTX_CONT(pClnt,pCtx) _func_vxdbgFuncs[VXDBG_CONT] (pClnt, pCtx)
#define VM_CONTIG_BLOCK_EACH(context,startAddr,numPages,stateMask,eachRtn,eachArg) ((vmLibInfo.pVmContigBlockEachRtn == NULL) ? (ERROR) : ((*vmLibInfo.pVmContigBlockEachRtn) (context, startAddr, numPages, stateMask, eachRtn, eachArg)))
#define SLL_GET(list,node) { if (((node) = (void *)((SL_LIST *)(list))->head) != NULL) ((SL_LIST *)(list))->head = ((SL_NODE *)(node))->next; }
#define vxAtomicAdd_inline vxAtomicAdd
#define _WRS_ARCH_HAS_IDLE_TASK 
#define FSHLOCK _FSHLOCK
#define EPIC_IN_INT42_DES_REG (EPIC_CCSROFF + 0x10750)
#define MEDR_FREE_QUEUE_LEN 64
#define _TIME_T 
#define IPCOM_PROC_STACK_SMALL IPCOM_STACK_ADJUST(2048)
#define AUX_CLK_RATE_MIN ((CCB_FREQ / 16) / (1 << FIT_DIVIDER_TAP_21))
#define __FLT_RADIX__ 2
#define EPIC_IN_INT23_DES_REG (EPIC_CCSROFF + 0x104f0)
#define DLL_PREVIOUS(pNode) ( (((DL_NODE *)(pNode))->previous) )
#define DLL_ADD(list,node) { DL_NODE *listTail = (list)->tail; DLL_INSERT ((list), listTail, (node)); }
#define _VX_MCORE 150
#define WV_EVT_PROTO_REV_2_2_FCS 5
#define S_taskLib_TASK_HOOK_TABLE_FULL (M_taskLib | 102)
#define VM_CONTEXT_SWITCH(context) ((vmLibInfo.pVmCtxSwitchRtn == NULL) ? (OK) : ((*vmLibInfo.pVmCtxSwitchRtn) (context)))
#define EVENT_WINDSTOP CLASS2_EVENT(29)
#define SYS_CLK_FREQ 400000000
#define SH7040 _VX_SH7040
#define _PPC_MMUCSR0_DL1MMU_FI 0x00000008
#define CACHE_INDEX_TO_STATE(index) ((UINT)index << MMU_ATTR_CACHE_INDEX_SHIFT)
#define EPIC_IN_INTERRUPT 20
#define MII_CR_COLL_TEST 0x0080
#define TYLIB_WRT_THRESHLD 20
#define DELTA(a,b) (abs((int)a - (int)b))
#define __DBL_MAX__ 1.7976931348623157e+308
#define IPCOM_NETIF_NATIVE 2
#define _IFIELD_VSIMM(x) ((0x00100000 & x) ? (0xffffffe0 | (x>>16)) : (0x0000001f & (x>>16)))
#define L1CSR0 1010
#define M85XXRIO_RIWAR_LOCAL 0xf
#define RIO_SWITCH_PORT_COUNT(x) ((x) & RIO_SWITCH_PORT_MASK) >> 16)
#define MRTPR_PTP_WRITE(x) ( (x << 24) & MRTPR_PTP_MASK)
#define RIO_MAX_INBOUND_CHANNELS 5
#define RIO_WPCSR_FULL 0x02000000
#define INCLUDE_BASE_KERNEL 
#define S_vxdbgLib_INVALID_HW_BP VXDBG_ERROR_TO_ERRNO(VXDBG_ERR_INVALID_HW_BP)
#define VM_STATE_MASK_WBACK VM_STATE_MASK_MEM_COHERENCY
#define _WRS_FRAMEP_FROM_JMP_BUF(env) ((char *) (env)[0].reg.spReg)
#define __DBL_HAS_INFINITY__ 1
#define EPIC_IIDR_CRIT1_INT EPIC_BIT(29)
#define EVT_CTX_TASKINFO(evtId,STATE,PRIORITY,LOCKCNT,TID,ENTRYPT,RTP,AFFINITY,NAME) do { if ( ACTION_IS_SET ) { EVENT_TASKNAME_T evt_ctx_taskinfo; evt_ctx_taskinfo.state = STATE; evt_ctx_taskinfo.priority = PRIORITY; evt_ctx_taskinfo.lockCnt = LOCKCNT; evt_ctx_taskinfo.tid = TID; evt_ctx_taskinfo.entryPt = ENTRYPT; evt_ctx_taskinfo.rtp = RTP; evt_ctx_taskinfo.affinity = AFFINITY; evt_ctx_taskinfo.name = NAME; eventPointSwHandle (evtId, &evt_ctx_taskinfo, sizeof evt_ctx_taskinfo); } } while ((0))
#define _WRS_CONFIG_COMPONENT_VXCOMPAT 1
#define FS_COMMIT_POLICY_MANUAL 2
#define _PC_SYMLINK_MAX 18
#define PCIEX_XINT3_LVL 0x2
#define _DBCR0_DAC2W_U 0x0001
#define MII_NP_MSG 0x2000
#define MMU_ATTR_PROT_SUP_WRITE 0x00000002
#define _POSIX_NGROUPS_MAX 0
#define BOOT_WARM_QUICK_AUTOBOOT BOOT_QUICK_AUTOBOOT
#define M85XXRIO_PESCSR_OFFSET 0x0158
#define PCIEX_CFG_ADR_REG (CCSBAR + 0xA000)
#define __INCvxANSIh 
#define EVT_CTX_0(evtId) do { if (ACTION_IS_SET) eventPointSwHandle (evtId, NULL, 0); } while ((0))
#define EVT_CTX_1(evtId,ARG1) do { if ( ACTION_IS_SET ) { EVT_CTX_1_T evt_ctx_1; evt_ctx_1.args [0] = ARG1; eventPointSwHandle (evtId, &evt_ctx_1, sizeof evt_ctx_1); } } while ((0))
#define BOOT_USB_ATTEMPT_DELAY 60
#define PCI_MEMIO2LOCAL(x) (((UINT32)x - PCI_MEMIO_ADRS) + CPU_PCI_MEMIO_ADRS)
#define LOW32(x) _VX_LOW32(x)
#define SYS_V 2
#define SM_READY ((UINT) 0x87654321)
#define stdin (*__stdin())
#define _PPC_SPEFSCR_OV 0x00004000
#define _PC_2_SYMLINKS 1
#define EVENT_SALCALL_REPLY CLASS3_EVENT(98)
#define MII_SR_T2_HALF_DPX 0x0200
#define S_symLib_SYMBOL_STILL_IN_TABLE (M_symLib | 4)
#define VXB_LOCK_WRITER FALSE
#define __FLT_MANT_DIG__ 24
#define M_loadAoutHppaLib (93 << 16)
#define EPIC_SENSE_EDG 0
#define _EXC_PROG_SRR1_NIA 0x00010000
#define MPC85XX_I2C_CONTROL_REG (0x00008)
#define EPIC_RES36_INT_VEC (EPIC_RES36_INT_NUM + EPIC_VEC_IN_IRQ0)
#define PCI_XINT1_LVL 0x2
#define M85XX_L2CTL_L2E_BIT 31
#define MPC85XX_I2C_FREQ_DIV_REG_MASK 0x3F
#define DEVMETHOD(NAME,FUNC) { (UINT32)&NAME ##_desc, (FUNCPTR) FUNC }
#define EVENT_IOCREAT CLASS3_EVENT(53)
#define _POSIX_PATH_MAX 256
#define PCI_ATTR_WS_32K 0x0000000E
#define PCI_ATTR_WS_32M 0x00000018
#define __INCspePpcLibh 
#define RUNTIME_SMP_VERSION RUNTIME_VERSION " " RUNTIME_SMP_NAME
#define _DBSR_IRPT_U 0x0200
#define _WRS_CPU_FAMILY_PREPENDS_UNDERSCORE FALSE
#define FIONCONTIG64 50
#define SYM_TBL_HASH_SIZE_LOG2 8
#define MII_CR_ISOLATE 0x0400
#define ACC_SIZE 2
#define _PPC_ESF_REG_BASE (_PPC_ESF_FPCSR + SIZ_UINT32)
#define WDB_COMM_CUSTOM 5
#define be32toh(x) ((UINT32)(x))
#define RTP_HEAP_INIT_SIZE 0x10000
#define WV_REV_ID_VXWORKS_6_6 0xb1b30000
#define WV_REV_ID_VXWORKS_6_7 0xb1b50000
#define TYLIB_XOFF_PCNT 85
#define EVENT_WINDPENDQPUT CLASS2_EVENT(15)
#define _ARCH_DBL_MIN_10_EXP (-307)
#define RLIM_INFINITY (((UINT64)1 << 63) - 1)
#define RIO_OP_SUPPORTED_WRITE 0x00020000
#define SM_OBJ_MAX_NAME 100
#define _WRS_CONFIG_NETSOURCE 1
#define EPIC_IPIVPR_PRIORITY_MSK (EPIC_BIT(19) | EPIC_BIT(18) | EPIC_BIT(17) | EPIC_BIT(16))
#define _PPC_ESF_R(n) (_PPC_ESF_REG_BASE + (n) * _PPC_REG_SIZE)
#define _SIZE_T_DEFINED 
#define M85XX_L2CTL(x) (CAST(VUINT32 *)((x + 0x20000)))
#define OBJ_IS_NAMED(objId) ( (((OBJ_CORE *)(objId))->handle.attributes & WIND_OBJ_NAMED) != 0 )
#define INT_CPU_MICRO_UNLOCK(key) intCpuMicroUnlock(key)
#define _PPC_BUCSR_E 0x1
#define _WCHAR_T_DEFINED_ 
#define EPIC_MSIIR_REG (EPIC_CCSROFF + 0x01740)
#define _POSIX_NO_TRUNC 0
#define ECHILD 10
#define EVENT_OBJ_SIGPAUSE CLASS2_EVENT(26)
#define _IFORM_X_11 21
#define VME_AM_STD_USR_DATA 0x39
#define EPIC_EIDR_P1_INT EPIC_BIT(1)
#define MAX_CLASS2_ID 9999
#define VX_MSG_NODE_SIZE 12
#define DLL_LAST(pList) ( (((DL_LIST *)(pList))->tail) )
#define _WRS_INLINE_QorIQdcbi 
#define INCLUDE_NET_BOOT 
#define MSR_SPE_BIT_SHIFT 25
#define OTHER_DEFAULT ""
#define _WRS_INLINE_QorIQdcbt 
#define LAWAR_TGTIF_LBC 0x00400000
#define m85xxTimerNum NELEMENTS(m85xxTimerResources)
#define _IFORM_X_15 25
#define INCLUDE_IPPROXYARP 
#define M85XXRIO_ROWAR_RDTYPE_MAINT_READ 0x7
#define EPIC_INV_PRIO_ERROR ((ULONG)(-1))
#define EVENT_IOIOCTL CLASS3_EVENT(51)
#define EVENT_SD_CREATE CLASS3_EVENT(200)
#define WRS_PACK_ALIGN(x) _WRS_PACK_ALIGN(x)
#define PPC601 _VX_PPC601
#define PPC602 _VX_PPC602
#define PPC603 _VX_PPC603
#define PPC604 _VX_PPC604
#define EPIC_IN_INT14_VEC_REG (EPIC_CCSROFF + 0x103c0)
#define SIO_AVAIL_MODES_GET 0x1009
#define WORDSWAP(x) (MSW(x) | (LSW(x) << 16))
#define EPIC_IN_INT9_DES_REG (EPIC_CCSROFF + 0x10330)
#define QUEUE_ATTRIBUTE_MASK 0x1
#define MMU_ATTR_PROT_USR_GET(attr) ((attr) & MMU_ATTR_PROT_USR_MSK)
#define _WRS_RET_PC_FROM_JMP_BUF(env) ((INSTR *) (env)[0].reg.lr)
#define _MMU_TLB_SZ_256K 0x00000400
#define EPIC_OPT_EN_MSK EPIC_EIVPR_INTR_MSK
#define BOOT_OTHER_LEN 80
#define DDR_CAPTURE_DATA_HI 0xe20
#define EPIC_IN_INT8_VEC_REG (EPIC_CCSROFF + 0x10300)
#define M85XXRIO_RxWAR_SIZE_4MB 23
#define _PARM_L_cuserid 64
#define BUS_MASTER_ENABLE_BIT 0x4
#define _VX_PPC970 2005
#define _STACK_DIR _STACK_GROWS_DOWN
#define EVENT_WINDTICKANNOUNCETMRSLC CLASS2_EVENT(7)
#define MII_MASSLA_STAT_REG 0xa
#define PLAT_RATIO_533_MHZ 8
#define VM_CTX_MASK_IN 0x1
#define WV_REV_ID_VXWORKS_6_7_SMP 0xb1b40000
#define PCI_OUT_ATTR_RTT_MEM 0x00040000
#define __VXWORKS__ 1
#define S_vxdbgLib_HOOK_TBL_FULL VXDBG_ERROR_TO_ERRNO(VXDBG_ERR_HOOK_TBL_FULL)
#define S_vxdbgLib_INVALID_CTX VXDBG_ERROR_TO_ERRNO(VXDBG_ERR_INVALID_CTX)
#define INCLUDE_WDB_USER_EVENT 
#define FD_0_TYPE 0
#define __SOFF 0x1000
#define VXDBG_BP_BY_ADDR_AND_CTX_REMOVE(pClient,retVal,address,pContext) { VXDBG_BP_DEL_INFO bpInfo; bpInfo.type = BP_BY_ADDR_AND_CTX_DELETE; bpInfo.pClnt = pClient; bpInfo.info.addrCtx.addr = address; bpInfo.info.addrCtx.pCtx = pContext; VXDBG_BP_DELETE(bpInfo, retVal); }
#define __INCdbgPpcLibh 
#define _VX_PPC403 95
#define FR500 _VX_FR500
#define _EXC_OFF_RESET 0x00100
#define FAST register
#define WIND_TCB_MSR (WIND_TCB_REGS + REG_SET_MSR)
#define EPIC_IRQSR0_EX_INT(n) (EPIC_BIT(11-(n)) & EPIC_IRQSR0_EX_INT_MSK)
#define EPIC_CRIT_SUMM_REG1 (EPIC_CCSROFF + 0x01340)
#define _PPC_ESR_ILK_U 0x0010
#define M_wdLib (34 << 16)
#define EIEIO_SYNC _WRS_ASM (" eieio; sync")
#define WR_ENET0 0x00
#define KERNEL_HEAP_SIZE ((unsigned int)(sysMemTop() - FREE_RAM_ADRS) / 3 * 2)
#define S29GL_SECTOR_SIZE 0x00020000
#define _IFIELD_VRC(x) ((0x00000400 & x) >> 10)
#define M85XXRIO_CTCSR(base) (CAST(VUINT32 *)(((char*)base) + 0x0006C ))
#define EVENT_OBJ_EVENTSEND CLASS2_EVENT(35)
#define EPIC_IPIVPR_PRIORITY_GET(p) (((p) & EPIC_IPIVPR_PRIORITY_MSK) >> 16)
#define SM_INT_BUS 4
#define INCLUDE_IO_MISC 
#define CS2_BNDS 0x010
#define RIO_OP_SUPPORTED_READ 0x00010000
#define MMU_REGION_ENTRY_BITS 2
#define M85XX_L2CTL_L2SLC_MSK 0x00001000
#define MEM_BLOCK_CHECK 0x10
#define WV_CLASS_3 0x00000007
#define M85XX_LSDMR(base) (CAST(VUINT32 *)((base) + 0x5094))
#define EPIC_MSG_REG0 (EPIC_CCSROFF + 0x01400)
#define EPIC_MSG_REG1 (EPIC_CCSROFF + 0x01410)
#define BOOT_CLEAR 0x02
#define DDR_CAPTURE_DATA_LO 0xe24
#define M85XXRIO_RIWBARn(base,n) (CAST(VUINT32 *)(((char*)base) + 0x10D68 + (0x80 - (n*0x20))))
#define SEMC_IS_FREE(semId) (semId->semCount > 0)
#define TASK_USER_EXEC_STACK_OVERFLOW_SIZE 4096
#define DLL_GET(list,node) { (node) = (void *)((DL_LIST *)(list))->head; if ((node) != NULL) { ((DL_LIST *)(list))->head = ((DL_NODE *)(node))->next; if (((DL_NODE *)(node))->next == NULL) ((DL_LIST *)(list))->tail = NULL; else ((DL_NODE *)(node))->next->previous = NULL; } }
#define CACHE_DRV_VIRT_TO_PHYS(pFuncs,adrs) (((pFuncs)->virtToPhysRtn == NULL) ? (void *) (adrs) : (void *) (((pFuncs)->virtToPhysRtn) (adrs)))
#define MMU_ATTR_USR_IO_RO (MMU_ATTR_USR_RO | MMU_ATTR_SUP_IO_RO)
#define LAWAR_SIZE_512MB 0x0000001C
#define IPCOM_FORWARDER_TRUE_CACHE_WAYS_SHIFT (0)
#define EPIC_SMSG_VEC_REG(irq) (EPIC_SMSG_INT0_VEC_REG + ((irq) * EPIC_SMSG_VEC_REG_INTERVAL))
#define PCI_INBOUND_BASE_ADRS_REG3(base) CVPUINT32(base, 0x8DA8)
#define INIT_NBIO_MSGS 32
#define _WRS_VXLIB_SUPPORT 
#define _WRS_INLINE_QorIQlwsync 
#define S_taskLib_NAME_NOT_FOUND (M_taskLib | 101)
#define _DEFINED_key_t 
#define EPIC_MSG_DEST_REG(irq) (EPIC_MSG_VEC_REG(irq) + EPIC_MSG_DEST_REG_VECREGOFF)
#define DIV_FACT_16 1
#define MII_ALL_BUS_SCAN 0x2000
#define PCI_ERROR_DATA_LOW_CAPTURE_REG 0x8e18
#define EPIC_MSIVPR_INTR_ACTIVE EPIC_BIT(30)
#define MPC85XX_I2C_CONTROL_REG_MIEN 0x40
#define DEFFILEMODE 0666
#define DDR_DATA_ERR_INJECT_HI 0xe00
#define BOOT_LINE_OFFSET 0x4200
#define VXB_INTR_TRIG_POS 0x02
#define S_taskLib_TASK_SWAP_HOOK_CLEAR (M_taskLib | 106)
#define LSDMR_OP_MASK 0x38000000
#define Q_ADVANCEN(pQHead,n) if (((Q_HEAD *)pQHead)->pQClass->valid == qPriDeltaClassId && ((Q_HEAD *)pQHead)->pFirstNode != NULL) { if (n > ((Q_PRI_NODE *)((Q_HEAD *)pQHead)->pFirstNode)->key) ((Q_PRI_NODE *)((Q_HEAD *)pQHead)->pFirstNode)->key = 0; else ((Q_PRI_NODE *)((Q_HEAD *)pQHead)->pFirstNode)->key -= n; }
#define _WRS_GET_PC_FOR_BRANCH_DELAY(pc,pReg) (pc = (INSTR *) (pReg)->reg_pc)
#define RIO_FEATURES_EXTCAP 0x1000
#define MMU_PAGE_ENTRY_BITS 4
#define EVENT_OBJ_VERIFY_FAIL CLASS3_EVENT(77)
#define _ARCH_ALIGN_STACK 4
#define _DBCR0_BRT 0x04000000
#define WV_ACTION_UNSET { vxAtomicAnd ((atomic_t*)&evtAction, ~(0x0100)); }
#define __INCvxWindh 
#define TOTAL_FLASH_SIZE 0x4000000
#define _PARM_STACK_GROWS_DOWN (-1)
#define O_NONBLOCK _FNONBLOCK
#define _PPC_SPEFSCR_FUNFE 0x00000008
#define _PPC_SPEFSCR_FUNFH 0x02000000
#define _VX_NBBY 8
#define _PPC_SPEFSCR_FUNFS 0x00040000
#define WV_REV_ID_T3 0xcdcd0000
#define _WRS_FASTTEXT __attribute__ ((__section__ (".text.fast")))
#define EPIC_EX_VEC_REG(irq) (EPIC_EX_INT0_VEC_REG + ((irq) * EPIC_EX_VEC_REG_INTERVAL))
#define MII_PHY_TX_FLOW_CTRL 0x40000
#define WDB_RESTART_TIME 10
#define MMU_ATTR_USR_EXE (MMU_ATTR_PROT_USR_READ | MMU_ATTR_PROT_USR_EXE)
#define EPIC_IIVPR_PRIORITY_MSK (EPIC_BIT(19) | EPIC_BIT(18) | EPIC_BIT(17) | EPIC_BIT(16))
#define _DEFINED_struct__Timespec 
#define __INC_m85xxVxBusRioH 
#define EPIC_IN_INT36_VEC_REG (EPIC_CCSROFF + 0x10680)
#define SPE_NUM_REGS 32
#define EPIC_IIDR_CRIT0_INT EPIC_BIT(30)
#define EPIC_IN_VEC_REG(irq) (EPIC_IN_INT0_VEC_REG + ((irq) * EPIC_IN_VEC_REG_INTERVAL))
#define PCIEX_XINT2_LVL 0x1
#define M85XXRIO_PLTOCCSR(base) (CAST(VUINT32 *)(((char*)base) + 0x00120 ))
#define EADDRNOTAVAIL 49
#define _PC_MAX_INPUT 8
#define OBJ_IS_REFERENCED(objId) ( DLL_FIRST (&((OBJ_CORE *)(objId))->objHandleList) != NULL )
#define EVENT_RTPSIGWRAPPER_DONE CLASS3_EVENT(93)
#define MII_MF_REG_LEN 0x5
#define EPIC_IN_INT5_DES_REG (EPIC_CCSROFF + 0x102b0)
#define S_mmuLib_ISR_CALL_BLOCKED (M_mmuLib | 12)
#define PCI_OUTBOUND_ATTR_REG3(base) CVPUINT32(base, 0x8c70)
#define _EXTENSION_POSIX_REENTRANT 1
#define _DEFINED_pthread_attr_t 
#define _VX_MC680X0 9
#define TRG_CLASS3_INDEX 2
#define M_fioLib (9 << 16)
#define CLASS_LIST_SEM_INLINE_OPTIONS (CLASS_LIST_SEM_INIT_OPTIONS | SEM_NO_ID_VALIDATE | SEM_NO_ERROR_CHECK | SEM_NO_EVENT_SEND)
#define OBJ_IS_OWNER(objId) ( DLL_FIRST (&((OBJ_CORE *)(objId))->ownerList) != NULL )
#define EPIC_MSG_STATE_REG (EPIC_CCSROFF + 0x01510)
#define _WRS_STRICT_ALIGNMENT 1
#define EPIC_RES30_INT_VEC (EPIC_RES30_INT_NUM + EPIC_VEC_IN_IRQ0)
#define _GCC_WCHAR_T 
#define FREQ_400_MHZ 400000000
#define VM_STATE_MASK_VALID MMU_ATTR_VALID_MSK
#define MMU_STATE_SET (*(mmuLibFuncs.mmuStateSet))
#define __SOPT 0x0400
#define DDR_CAPTURE_ATTRIBUTES 0xe4c
#define ENUM_TO_EVEC(excNum) ((VOIDFUNCPTR *) (excNum))
#define M_mtpLib (168 << 16)
#define EPIC_IN_INT36_DES_REG (EPIC_CCSROFF + 0x10690)
#define WV_REV_ID_T2 0xb0b00000
#define OBJ_SET_PUBLIC(objId) ( ((OBJ_CORE *)(objId))->handle.attributes |= WIND_OBJ_PUBLIC )
#define FIOWBUFSET 25
#define BLOB_LENGTH_WORD(dataLength,alignment) (dataLength | (BLOB_PADDING(dataLength,alignment) << PADDING_SHIFT_COUNT))
#define _PC_NO_TRUNC 10
#define getchar() __sgetc(stdin)
#define _WRS_CONFIG_SPACE "kernel"
#define MII_SR_ABIL_MASK 0xff80
#define __GXX_ABI_VERSION 1002
#define SIO_KYBD_LED_NUM 1
#define OBJ_SET_NAMED(objId) ( ((OBJ_CORE *)(objId))->handle.attributes |= WIND_OBJ_NAMED )
#define M85XXRIO_ROWAR_WRTYPE_MAINT_WRITE 0x7
#define I2C_FRMTOP 2
#define MPC85XX_I2C_ADDRESS_REG_MASK 0xFE
#define S_mmuLib_TLB_PAGE_NOT_LOCKED (M_mmuLib | 8)
#define EPIC_DUART2_INT_VEC (EPIC_DUART2_INT_NUM + EPIC_VEC_IN_IRQ0)
#define MAX_FILENAME_LENGTH PATH_MAX
#define M85XX_L2ERRCAPTECC(x) (CAST(VUINT32 *)((x + 0x20E28)))
#define F_UNLCK 3
#define vxAtomicNand_inline vxAtomicNand
#define M_muxLib (109 << 16)
#define INCLUDE_WDB_BANNER 
#define INCLUDE_AIM_MMU_CONFIG 
#define FS_NAMES_ATA_PRIMARY_MASTER "/ata0a"
#define S_memLib_BLOCK_ERROR (M_memLib | 3)
#define ENET_DEFAULT0 WR_ENET0
#define ENET_DEFAULT1 WR_ENET1
#define _PPC_SPEFSCR_FRMC_RND_PINF 0x00000002
#define WB_MAX_IRQS 256
#define EPIC_TM_B3_VEC_REG (EPIC_CCSROFF + 0x021e0)
#define MC68LC040 _VX_MC68LC040
#define VXB_HANDLE_MEM 0
#define VME_AM_STD_USR_PGM 0x3a
#define _MMU_TLB_IPROT 0x00000080
#define SM_PKTS_SIZE 0
#define VX_WDOG_SIZE 92
#define SIO_KYBD_MODE_ASCII 2
#define M_loadBoutLib (81 << 16)
#define MII_MONITOR_DELAY 0x2
#define EPIC_TM_B3_DES_REG (EPIC_CCSROFF + 0x021f0)
#define _WRS_PACK_ALIGN(x) __attribute__((packed, aligned(x)))
#define DDR_DATA_ERR_INJECT_LO 0xe04
#define _DBCR0_BRT_U 0x0400
#define _ARCH_LDBL_MIN_EXP (-1021)
#define EPIC_RES36_INT_NUM 36
#define S_taskLib_ILLEGAL_OPTIONS (M_taskLib | 110)
#define M_cplusLib (90 << 16)
#define EPIC_RES11_INT_VEC (EPIC_RES11_INT_NUM + EPIC_VEC_IN_IRQ0)
#define MII_MF_ST 0x1
#define __PTRDIFF_T 
#define _WRS_INLINE_ffsLsb 
#define EVENT_OBJ_MSGCREPLYSEND CLASS2_EVENT(41)
#define F_RSETLK 11
#define VXB_BUSID_VME 2
#define M85XXRIO_RIWARn(base,n) (CAST(VUINT32 *)(((char*)base) + 0x10D70 + (0x80 - (n*0x20))))
#define F_GETFD 1
#define EPIC_IN_INT17_DES_REG (EPIC_CCSROFF + 0x10430)
#define _POSIX_CLOCKRES_MIN 20
#define BRK_HARDMASK 0
#define F_GETFL 3
#define _PPC_MSR_POW_U _PPC_MSR_WE_U
#define _STATUS_DEFINED 
#define EVENT_EXCEPTION CLASS1_EVENT(10)
#define ROUND_DOWN(x,align) ((int)(x) & ~(align - 1))
#define SPIN_LOCK_ISR_GIVE(x) (spinLockIsrGive (x) )
#define fileno(p) __sfileno(p)
#define atomic32Clear_inline atomic32Clear
#define FIOCANCEL 14
#define ferror(p) __sferror(p)
#define SEMB_FULL_STATE NULL
#define INCLUDE_LOGGING 
#define __DBL_MIN__ 2.2250738585072014e-308
#define DLL_NEXT(pNode) ( (((DL_NODE *)(pNode))->next) )
#define WV_REV_ID_VXWORKS_6_6_SMP 0xb1b20000
#define _VA_LIST 
#define WIND_TCB_P0 WIND_TCB_R3
#define _WRS_NO_TGT_SHELL_FP 1
#define _DBCR2_DAC1US 0xc0000000
#define EPIC_VEC_MSG_IRQ0 (EPIC_VEC_GT_B_IRQ0 + EPIC_MAX_GT_B_IRQS)
#define _FDEFER 0x0020
#define WDB_INIT WDB_POST_KERNEL_INIT
#define M85XXRIO_DOCAR(base) (CAST(VUINT32 *)(((char*)base) + 0x0001C))
#define VX_MAX_SMP_CPUS 8
#define MMU_STATE_SUP_RX_USR_RWX (MMU_STATE_SUP_RX | _MMU_URWX)
#define TRG_CLASS_6_ON 0x11111111
#define INST_MFLR_R0 INST_MFLR
#define _PPC_SPEFSCR_FOVFH 0x01000000
#define CLASS_WIDTH 0x1
#define VXDBG_MEM_SCAN(pBuffer,pPattern,size,status) status = vxdbgMemScan (pBuffer, pPattern, size);
#define _PPC_SPEFSCR_FOVFS 0x00020000
#define _PPC_REG_SIZE 4
#define __GNUC_VA_LIST 
#define EPIC_PERFMON_1_MSK_REG0 (EPIC_CCSROFF + 0x01370)
#define EPIC_PERFMON_1_MSK_REG1 (EPIC_CCSROFF + 0x01380)
#define S_ioLib_NO_FILENAME ENOENT
#define _IFORM_A_2 51
#define M_pgPoolLib (181 << 16)
#define DBG_INST_ALIGN 4
#define SCRIPT_DEFAULT ""
#define PCI3_DEV_ID 0x826210E3
#define EVENT_WINDUNDELAY CLASS2_EVENT(10)
#define VM_MAX_PHYS_BITS_GET() ((vmLibInfo.pVmMaxPhysBitsGetRtn == NULL) ? (ERROR) : ((*vmLibInfo.pVmMaxPhysBitsGetRtn) ()))
#define S_ioLib_UNKNOWN_REQUEST ENOTSUP
#define INCLUDE_IPNET_USE_LOOPBACK 
#define EVENT_TASKROTATE CLASS3_EVENT(108)
#define S_selectLib_WIDTH_OUT_OF_RANGE (M_selectLib | 3)
#define _ARCH_CHAR_MAX 127
#define CACHE_BURST_ENABLE 0x40
#define VM_STATE_WRITABLE_NOT (MMU_ATTR_PROT_SUP_READ | MMU_ATTR_PROT_SUP_EXE)
#define DDR_ERR_DISABLE 0xe44
#define _PPC_HID0_SLEEP_U 0x0020
#define CACHE_DISABLED 0x00
#define _WRS_VXWORKS_MINOR 8
#define TASK_CPU_LOCK() TASK_CPU_LOCK_TASK(taskIdCurrent)
#define INCLUDE_TFFS 
#define F_GETLK 7
#define VX_NO_STACK_PROTECT 0x4000
#define BOOT_LINE_ADRS ((char *) (LOCAL_MEM_LOCAL_ADRS+BOOT_LINE_OFFSET))
#define EISDIR 21
#define EPIC_IPIDR_P1 EPIC_BIT(1)
#define VXB_REG_MEM 0x00000002
#define REG_TYPE_MASK 0xff000000
#define HID1_ABE 0x00001000
#define REG_SET_PC (REG_SET_CTR + _PPC_REG_SIZE)
#define PCIEX_CFG_DATA_REG (CCSBAR + 0xA004)
#define _PPC_MAS0_ESEL_BIT 16
#define _PPC_HID1_ABE 0x00001000
#define _PPC_TCR_FP_U 0x0300
#define M_spinLockLib (201 << 16)
#define CONSOLE_TTY 0
#define VM_STATE_BUFFERABLE (MMU_ATTR_SPL_0)
#define VX_TASK_NOACTIVATE 0x2000
#define M_nfs3Stat (142 << 16)
#define RIO_FEATURES_MEMORY 0x0002
#define PCI_ERROR_EXT_ADRS_CAPTURE_REG 0x8e14
#define EPIC_IN_INT38_DES_REG (EPIC_CCSROFF + 0x106d0)
#define _IFORM_X_13 23
#define MPC85XX_I2C_STATUS_REG_MAL 0x10
#define _IFIELD_TBR(x) ((0x001ff800 & x) >> 11)
#define MII_PHY_FLAGS_GET(setBits) (pPhyInfo->phyFlags)
#define EVENTS_WAIT_ALL 0x00
#define VME_AM_EXT_SUP_DATA 0x0d
#define HIGH32(x) _VX_HIGH32(x)
#define I2C_ERROR_CYCLE_READ 3
#define reg_pc pc
#define FASYNC _FASYNC
#define EPIC_I2C_INT_VEC (EPIC_I2C_INT_NUM + EPIC_VEC_IN_IRQ0)
#define _IFIELD_SIMM_S(x) ((0x00008000 & x) ? (0xffff0000 | x) : (0x0000ffff & x))
#define RIO_EXTENDED_FEATURES_BASE 0x0100
#define MIPSI64R2 _VX_MIPSI64R2
#define VXB_REG_BASE_1 "regBase1"
#define VXB_REG_BASE_2 "regBase2"
#define VXB_REG_BASE_3 "regBase3"
#define VXB_REG_BASE_4 "regBase4"
#define VXB_REG_BASE_5 "regBase5"
#define VXB_REG_BASE_6 "regBase6"
#define VXB_REG_BASE_8 "regBase8"
#define VXB_REG_BASE_9 "regBase9"
#define ULONG_MAX (LONG_MAX * 2UL + 1)
#define TASK_USER_EXC_STACK_OVERFLOW_SIZE 4096
#define EPIC_IPI_DPATCH0_REG0 (EPIC_CCSROFF + 0x20040)
#define EPIC_IPI_DPATCH0_REG1 (EPIC_CCSROFF + 0x20050)
#define EPIC_IPI_DPATCH0_REG3 (EPIC_CCSROFF + 0x20070)
#define MMU_STATE_CACHEABLE_WRITETHROUGH 0x00000010
#define MII_AN_EXP_REG 0x6
#define EVENTS_WAIT_ANY 0x01
#define EPIC_DMA3_INT_VEC (EPIC_DMA3_INT_NUM + EPIC_VEC_IN_IRQ0)
#define _DBCR0_TRAP 0x01000000
#define EVENTS_WAIT_MASK 0x01
#define PCI_SNOOP_ENABLE 0x40000000
#define EPIC_IPI_2_VEC_REG (EPIC_CCSROFF + 0x010c0)
#define __DBL_HAS_DENORM__ 1
#define VXB_REG_BASE_7 "regBase7"
#define VXB_ITERATE_INSTANCES 1
#define BOOT_WARM_NO_AUTOBOOT BOOT_NO_AUTOBOOT
#define ERF_MAX_USR_CATEGORIES 16
#define SEM_PENDED_TASK 0x1
#define EPIC_RES42_INT_VEC (EPIC_RES42_INT_NUM + EPIC_VEC_IN_IRQ0)
#define _WRS_KERNEL_LOCK_OFFSET_tkt_ctr (0x00)
#define INCLUDE_IPNET_PACKET_POOL_5 
#define LAWAR_SIZE_256KB 0x00000011
#define EVT_TASK_0(evtId) do { if ( ACTION_IS_SET ) eventPointSwHandle(evtId, NULL, 0); } while ((0))
#define _PARM_FILENAME_MAX 20
#define reg_sp spReg
#define STACK_SAVE 0x1000
#define CHAR_BIT 8
#define FIOPROTOARG 23
#define MAX_SYSCALL_ID 21999
#define RIO_CHANNEL_SM 2
#define MAX_SEM_TYPE SEM_TYPE_MAX
#define VXB_ACCESS_PROBE 0x00000001
#define M85XX_PORPLLSR_E500_RATIO(base) ((*M85XX_PORPLLSR(base) & M85XX_PORPLLSR_E500_RATIO_MASK)>>16)
#define DIV_FACT_1 0
#define VXB_BUSID_USB_HUB 14
#define SYM_GLOBAL 0x1
#define VX_SEMAPHORE(name) _WRS_DATA_ALIGN_BYTES(VX_OBJ_ALIGN_SIZE) char name [VX_SEMAPHORE_SIZE]
#define PCIEX_OUTBOUND_TRANS_EXT_ADRS_REG2(base) CVPUINT32(base, 0xac44)
#define _VX_STRONGARM 129
#define VME_AM_EXT_USR_DATA 0x09
#define Q_PRI_BMAP qPriBMapClassId
#define M_usbPeriphLib (132 << 16)
#define TFFS_DRIVE_NUMBER 0
#define VALID_INDEX_TO_STATE(index) ((UINT)index << MMU_ATTR_VALID_INDEX_SHIFT)
#define _DBCR0_ICMP 0x08000000
#define PCIEX_OUTBOUND_TRANS_EXT_ADRS_REG3(base) CVPUINT32(base, 0xac64)
#define LAWAR_SIZE_256MB 0x0000001B
#define __NO_INLINE__ 1
#define S_intLib_VEC_TABLE_WP_UNAVAILABLE (M_intLib | 2)
#define S_memLib_NOT_ENOUGH_MEMORY (M_memLib | 1)
#define EPIC_EIVPR_INTR_ACTIVE EPIC_BIT(30)
#define MCSR 572
#define PCI_AUTO_CONFIG_ADRS 0x4c00
#define _WRS_MMU_CLASS_PID_REG 1
#define M85XX_LTEDR(base) (CAST(VUINT32 *)((base) + 0x50B4))
#define NV_RAM_ADRS (FLASH1_BASE_ADRS)
#define VXB_ACCESS_VMEMREGION_ALLOC 0x00000014
#define M85XXRIO_SPICAR(base) (CAST(VUINT32 *)(((char*)base) + 0x0014))
#define _DBCR1_IAC12M 0x00c00000
#define EPIC_EIVPR_VECTOR(vec) ((vec) & EPIC_EIVPR_VECTOR_MSK)
#define WDB_RTP_PRIORITY 200
#define EPIC_RES43_INT_NUM 43
#define _SIZE_T 
#define EPIC_IN_INT0_VEC_REG (EPIC_CCSROFF + 0x10200)
#define MAX_CANON _POSIX_MAX_CANON
#define MMU_TRANS_TBL_DELETE (*(mmuLibFuncs.mmuTransTblDelete))
#define M85XX_L2SRBAR_ADDR_BIT 14
#define WIND_TCB_R17 (WIND_TCB_REGS + REG_SET_GR(17))
#define EPIC_EX_INT4_DES_REG (EPIC_CCSROFF + 0x10090)
#define PIC_OFFSET 0x40000
#define CPU_FAMILY _VX_CPU_FAMILY
#define errno (*__errno())
#define RIO_MAX_CHANNELS 15
#define PCIEX_OUTBOUND_TRANS_ADRS_REG3(base) CVPUINT32(base, 0xac60)
#define __INCesfh 
#define INCLUDE_PIPES 
#define CORE_DUMP_CKSUM_ENABLE FALSE
#define M85XXRIO_RIWAR_LOCAL_R_SNOOP_CORE 5
#define PCIEX_OUTBOUND_TRANS_ADRS_REG4(base) CVPUINT32(base, 0xac80)
#define FD_ZERO(p) _VX_FD_ZERO (p)
#define _PPC_ESF_R10 _PPC_ESF_R(10)
#define _PTRDIFF_T_ 
#define STATE_TO_PROT_INDEX(state) ((MMU_ATTR_PROT_GET(state)) >> MMU_ATTR_PROT_INDEX_SHIFT)
#define _PPC_ESF_R15 _PPC_ESF_R(15)
#define _PPC_ESF_R16 _PPC_ESF_R(16)
#define _WRS_VXWORKS_MAJOR 6
#define _PPC_ESF_R18 _PPC_ESF_R(18)
#define _PPC_ESF_R19 _PPC_ESF_R(19)
#define EPIC_IN_INT45_DES_REG (EPIC_CCSROFF + 0x107b0)
#define VXWORKS_SMP_VERSION RUNTIME_NAME " " RUNTIME_VERSION " " RUNTIME_SMP_NAME
#define VM_TEXT_PROTECT(addr,protect) ((vmLibInfo.pVmTextProtectRtn == NULL) ? (ERROR) : ((*vmLibInfo.pVmTextProtectRtn) (addr, protect)))
#define _IFORM_X_35 80
#define _WRS_CONFIG_FEATURE_IPNET_GEN_DEPEND 1
#define BOOT_QUICK_AUTOBOOT 0x04
#define _PARM_UTS_VERSION_MAX 64
#define STACK_NAME_V4_V6 2
#define MII_BP_FAULT 0x2000
#define _PPC_ESF_R21 _PPC_ESF_R(21)
#define _PPC_ESF_R23 _PPC_ESF_R(23)
#define _PPC_ESF_R24 _PPC_ESF_R(24)
#define _PPC_ESF_R25 _PPC_ESF_R(25)
#define _PPC_ESF_R26 _PPC_ESF_R(26)
#define _PPC_ESF_R27 _PPC_ESF_R(27)
#define _PPC_ESF_R28 _PPC_ESF_R(28)
#define _PPC_ESF_R29 _PPC_ESF_R(29)
#define MMU_ATTR_CACHE_INDEX_SHIFT 7
#define _WRS_CONFIG_TASK_SWITCH_HOOKS_D 1
#define FIODIRENTRY 9
#define _ARCH_MOVE_SIZE 4
#define O_TEXT _FTEXT
#define _PPC_ESF_R30 _PPC_ESF_R(30)
#define _PPC_ESF_R31 _PPC_ESF_R(31)
#define EVENT_SPINLOCK_ERROR CLASS3_EVENT(238)
#define DEVMETHOD_END { 0, NULL }
#define CACHE_DMA_IS_READ_COHERENT() CACHE_DRV_IS_READ_COHERENT (&cacheDmaFuncs)
#define _PPC_REG_SET_SIZE (_PPC_REG_SIZE * (GREG_NUM + 9))
#define FIONFREE 30
#define CLASS1_EVENT(id) (MIN_CLASS1_ID + id)
#define _MMU_TLB_TS_0 0x00000000
#define Q_PRI_DELTA qPriDeltaClassId
#define UIO_MAXIOV 1024
#define M_pgMgrLib (185 << 16)
#define FIOTRUNC 42
#define S_eventLib_NULL_TASKID_AT_INT_LEVEL (M_eventLib | 0x0007)
#define S_eventLib_NOT_ALL_EVENTS (M_eventLib | 0x0002)
#define PCI_CFG_DATA_REG (CCSBAR + 0x8004)
#define BUS_TYPE_MULTIBUS 2
#define SM_OBJ_MAX_TASK 40
#define INCLUDE_WATCHDOGS_CREATE_DELETE 
#define EVENT_OBJ_MSGCACKSEND CLASS2_EVENT(40)
#define OSCILLATOR_FREQ FREQ_66_MHZ
#define MII_SR_REMOTE_FAULT 0x0010
#define SEMBM_IS_FREE(semId) (semId->semOwner == NULL)
#define S_taskLib_ILLEGAL_OPERATION (M_taskLib | 112)
#define CACHE_CMD_DISABLE 0x04000000
#define _CACHE_ALIGN_SIZE _ppcCacheLineSize
#define ERROR (-1)
#define _PPC_L1CFG_PA_V(x) (x >> 16)
#define _DBCR0_FT 0x00000001
#define _VX_UPDATE 2
#define __STRING(x) #x
#define NGROUPS_MAX _POSIX_NGROUPS_MAX
#define EHOSTUNREACH 65
#define M85XXRIO_AICAR(base) (CAST(VUINT32 *)(((char*)base) + 0x000C))
#define EPIC_SR_OUT_DB1_INT_NUM 33
#define __INCvxParamsh 
#define __INCioLibh 
#define PCI2_OUTBOUND_ATTR_REG3(base) CVPUINT32(base, 0x9c70)
#define _WRS_CONFIG_SUPPORTS_SMP 1
#define M85XXRIO_MSR(base) (CAST(VUINT32 *)(((char*)base) + 0x0040 ))
#define PCI2_OUTBOUND_TRANS_ADRS_REG2(base) CVPUINT32(base, 0x9c40)
#define _MMU_TLB_PERM_UW 0x00020000
#define I2C_IOCTL_RMW_AND 3
#define S29GL_FLASH_NUM 1
#define PCI2_OUTBOUND_TRANS_ADRS_REG3(base) CVPUINT32(base, 0x9c60)
#define atomic32Cas_inline atomic32Cas
#define M_smNameLib (89 << 16)
#define EPIC_IN_DEST_REG(irq) (EPIC_IN_VEC_REG(irq) + EPIC_IN_DEST_REG_VECREGOFF)
#define EVENT_OBJ_EVENTRECEIVE CLASS2_EVENT(36)
#define REG_SET_MSR (REG_SET_GR(GREG_NUM))
#define RLIMIT_CPU 0
#define EPIC_EX_DFT_SENSE EPIC_SENSE_LVL
#define MMU_ASID_GLOBAL MMU_ASID_MIN
#define _FD_SET_DEFINED 
#define INCLUDE_EDR_SYSDBG_FLAG 
#define MII_MASSLA_CTRL_REG 0x9
#define VXB_ACCESS_REG_WRITE8 0x00000006
#define MMU_STATE_SUP_RW (_MMU_SR|_MMU_SW)
#define MMU_STATE_SUP_RX (_MMU_SR| _MMU_SX)
#define EVENT_ISR_DISPATCHER_INVOKE CLASS3_EVENT(60)
#define _IFORM_XFL_1 46
#define M_selectLib (57 << 16)
#define SM_CPU_NOT_ATTACHED 0
#define VXB_LOCK_IMPORT(x) IMPORT struct vxbLock x
#define MMU_ATTR_NOT_GLOBAL 0xffffffff
#define IPCOM_USE_NATIVE_SOCK_API 
#define LOCAL_MEM_LOCAL_ADRS2 0xf0000000
#define IPCOM_RELEASE 60704
#define I2C_ERROR_CYCLE_ACKIN 5
#define _VX_AM29200 52
#define RIO_BUS_CONFIG_DONE 4
#define INCLUDE_MEM_MGR_INFO 
#define TASK_USER_EXC_STACK_SIZE 8192
#define EVENT_RTPSIGPENDING CLASS3_EVENT(95)
#define FIOCONTIG 36
#define _PPC_EXC_VEC_BASE_LOW 0x00000000
#define _ARCH_SUPPORTS_GCC 
#define IMPORT extern
#define _PPC_TCR_WP_U 0xc000
#define _OFF_T 
#define INCLUDE_NET_DAEMON 
#define IPCOM_SPINLOCK_BUSY_PERSIST (1024)
#define INCLUDE_SEM_MUTEX_CREATE 
#define IPCOM_USE_KEY_DB_CMD 
#define VXB_BUSID_VIRTUAL 9
#define DOSFS_DEFAULT_FAT_CACHE_SIZE 0x100000
#define _PPC_ESF_CTR _PPC_ESF_R(GREG_NUM + 2)
#define EVENT_WINDPRIORITYSETRAISE CLASS2_EVENT(4)
#define PPC_WD_INT_ID 598
#define PCIEX_XINT1_LVL 0x0
#define EVENT_IODELETE CLASS3_EVENT(54)
#define RIO_DIRECTION 2
#define EPIC_EX_INT3_DES_REG (EPIC_CCSROFF + 0x10070)
#define VXEVENTS_OPTIONS EVENTS_NONINTERRUPTIBLE
#define _VX_PPCEC603 98
#define WIND_OBJ_CORE_CLASS_ID 0x30
#define _WRS_CONFIG_COMPONENT_USR_IPNET 1
#define EPIC_IN_INT41_VEC_REG (EPIC_CCSROFF + 0x10720)
#define M_hrfsLib (195 << 16)
#define SIO_KYBD_LED_CAP 2
#define EVENT_WDCANCEL CLASS3_EVENT(19)
#define _VX_ARMARCH3 126
#define _VX_ARMARCH4 127
#define _VX_ARMARCH5 1121
#define _VX_ARMARCH6 1123
#define _VX_ARMARCH7 1125
#define SPIN_LOCK_EMPTY 0
#define MII_CR_RES_MASK 0x003f
#define _EXC_INFO_VEC 0x001
#define MII_PHY_INIT 0x8000
#define _WRS_CONFIG_SUPPORTS_MIPC 1
#define VM_MMUSOFT_ENABLED (vmLibInfo.mmuSoftCfgEnabled)
#define __FBSDID(s) __IDSTRING(__CONCAT(__rcsid_,__LINE__),s)
#define VX_SUPERVISOR_MODE 0x0001
#define OBJ_HANDLE_INDEX_MASK 0xffff
#define EPIC_L2CACHE_INT_NUM 0
#define EPIC_MSG_INT3_DES_REG (EPIC_CCSROFF + 0x11670)
#define FNOCTTY _FNOCTTY
#define PCI_IN_ATTR_RTT_LM_WRITE_ALLOC_LOCK_L2_CACHE_LINE 0x00007000
#define M85XX_LAWBAR4(base) (CAST(VUINT32 *)((base) + 0xc88))
#define EPIC_IN_INT17_VEC_REG (EPIC_CCSROFF + 0x10420)
#define VM_STATE_GET(context,pageAddr,pState) ((vmLibInfo.pVmStateGetRtn == NULL) ? (ERROR) : ((*vmLibInfo.pVmStateGetRtn) (context, (VIRT_ADDR) pageAddr, pState)))
#define _VX_MCF5200 161
#define WV_CLASS_1_ON 0x10000001
#define S_taskLib_ILLEGAL_PRIORITY (M_taskLib | 109)
#define _WRS_CONFIG_FP_hard 1
#define EPIC_MSG_INT3_VEC_REG (EPIC_CCSROFF + 0x11660)
#define FS_NAMES_ATA_PRIMARY_SLAVE ""
#define INCLUDE_IPNET_IFCONFIG_1 
#define M85XX_LAWBAR7(base) (CAST(VUINT32 *)((base) + 0xce8))
#define LAWAR_SIZE_16KB 0x0000000D
#define AM29030 _VX_AM29030
#define _WRS_IOSHORT UINT16
#define M85XX_L2CTL_L2MEXTDIS_MSK 0x00100000
#define OBJ_MASTER_TBL_SIZE (0x10000 / OBJ_HANDLE_TBL_SIZE)
#define M_nfsStat (48 << 16)
#define FIOWHERE64 54
#define FIOMKDIR 31
#define MEM_ALLOC_ERROR_RETURN 0
#define EPIC_IN_INT41_DES_REG (EPIC_CCSROFF + 0x10730)
#define M_kernel (1 << 16)
#define M85XX_L2CEWCR_SIZMASK_BIT 0
#define IPCOM_PROC_STACK_MAX IPCOM_STACK_ADJUST(21845)
#define SM_ANCHOR_OFFSET 0x4100
#define CLOCK_REALTIME 0x0
#define EVENT_SALRUN_CONNECT CLASS3_EVENT(106)
#define INCLUDE_SEM_MUTEX 
#define FSTAT_CHR 0020000
#define SIO_MODEM_CTS 0x04
#define STD_BUS_ACCESS_METHOD_END 0x00000015
#define LAWAR_SIZE_16MB 0x00000017
#define MII_CTRL_REG 0x0
#define EPIC_PCI2_INT_NUM 9
#define M85XXRIO_PEFCAR_OFFSET 0x10
#define INT_CPU_LOCK() intCpuLock()
#define _WRS_CONFIG_COMPONENT_IPTCP 1
#define VX_ADA_DEBUG 0x0020
#define RIO_CHANNEL_TAS_CLEAR 4
#define M_pcmciaLib (105 << 16)
#define __INCrngLibh 
#define VXB_LOCK_READER TRUE
#define _DEFINED_struct__Sched_param 
#define MMU_INST 0x01
#define _VX_SH7410 135
#define Q_NEXT(pQHead,pQNode) ((Q_NODE *)((*(((Q_HEAD *)(pQHead))->pQClass->nextRtn)) (((Q_HEAD *)(pQHead)), ((Q_NODE *)(pQNode)))))
#define EPIC_IN_INT22_VEC_REG (EPIC_CCSROFF + 0x104c0)
#define S_semLib_INVALID_OPTION (M_semLib | 102)
#define _POSIX_OPEN_MAX 16
#define MII_PHY_PWR_DOWN 0x0800
#define _MMU_URWX (_MMU_UR | _MMU_UW | _MMU_UX)
#define WIND_TCB_R20 (WIND_TCB_REGS + REG_SET_GR(20))
#define EVENT_CPC_ENTER CLASS3_EVENT(232)
#define __va_copy(d,s) __builtin_va_copy(d,s)
#define EVENT_MSGQDELETE CLASS3_EVENT(21)
#define WIND_TCB_R22 (WIND_TCB_REGS + REG_SET_GR(22))
#define VXB_ASSERT(cond,errVal) 
#define BOOT_WARM_AUTOBOOT BOOT_NORMAL
#define _WRS_ARCH_USER_STACK_FRAME_EXTENSION(sp) do { (sp) = (char *) STACK_ROUND_DOWN ((sp) - 2*sizeof(int *)); *((int *)(sp)) = (int)0; *((int *)((sp)+4)) = (int)0; } while ((0))
#define _VX_NFDBITS (sizeof(_Vx_fd_mask) * _VX_NBBY)
#define MSG_PRI_URGENT 1
#define MPC85XX_I2C_DIG_FILTER_REG (0x00014)
#define ENET_DEFAULT2 WR_ENET2
#define EVENT_MSGQSEND CLASS3_EVENT(23)
#define _STACK_GROWS_UP 1
#define RIO_CAR_DEVVEND_ID 0x00
#define _IFIELD_SIMM(x) ((0x0000ffff & x))
#define VM_CONTEXT_CREATE() ((vmLibInfo.pVmCtxCreateRtn == NULL) ? (ERROR) : ((*vmLibInfo.pVmCtxCreateRtn) ()))
#define _DBCR1_IAC1ER 0x30000000
#define F_OK 0
#define WDB_END_DEVICE_ADDRESS NULL
#define MEMORY_SPACE_ACCESS_ENABLE_BIT 0x2
#define _PC_PATH_MAX 11
#define _FNONBLOCK 0x4000
#define IPCOM_SYSLOG_PRIO_DEFAULT 3
#define MII_MF_DATA_LEN 0x10
#define EPIC_IN_INT22_DES_REG (EPIC_CCSROFF + 0x104d0)
#define __SAPP 0x0100
#define IPCOM_HOST_FROM_LOCALTBL 
#define USHRT_MAX 65535
#define BOOT_USR_LEN 20
#define VM_STATE_CACHEABLE_MINICACHE 0x30
#define VXBAF_BYTE_ORDER_BE_16 0x00010000
#define _POSIX_MAX_INPUT 255
#define EPIC_IN_INT15_VEC_REG (EPIC_CCSROFF + 0x103e0)
#define IPCOM_USE_MUX_DRV 
#define _IFIELD_D_S(x) ((0x00008000 & x) ? (0xffff0000 | x) : (0x0000ffff & x))
#define _PC_LINK_MAX 6
#define EPIC_MSIVPR_VECTOR_MSK (0xffff)
#define FIT_DIVIDER_TAP_10 10
#define FIT_DIVIDER_TAP_11 11
#define FIT_DIVIDER_TAP_12 12
#define FIT_DIVIDER_TAP_13 13
#define FIT_DIVIDER_TAP_15 15
#define ESHUTDOWN 58
#define FIT_DIVIDER_TAP_17 17
#define FIT_DIVIDER_TAP_19 19
#define BRIDGE_BAR0_WIDTH 0x4
#define RLIM_NLIMITS 9
#define M85XXRIO_RIWAR_TGINT(val) (val << 20)
#define EPIC_MIDR_CRIT_INT EPIC_BIT(30)
#define S_semLib_COUNT_OVERFLOW (M_semLib | 106)
#define I2C_ERROR_CYCLE_START 1
#define _VX_howmany(x,y) ((unsigned int)(((x)+((y)-1)))/(unsigned int)(y))
#define ERRNO_PX_FLAG (1<<15)
#define WV_ACTION_SET { vxAtomicOr ((atomic_t*)&evtAction, 0x0100); }
#define MII_TECH_PAUSE 0x0400
#define VXB_HANDLE_OP_WRITE 0x10
#define FIT_DIVIDER_TAP_20 20
#define FIT_DIVIDER_TAP_21 21
#define DLL_REMOVE(list,node) { if (((DL_NODE *)(node))->previous == NULL) ((DL_LIST *)(list))->head = ((DL_NODE *)(node))->next; else ((DL_NODE *)(node))->previous->next = ((DL_NODE *)(node))->next; if (((DL_NODE *)(node))->next == NULL) ((DL_LIST *)(list))->tail = ((DL_NODE *)(node))->previous; else ((DL_NODE *)(node))->next->previous = ((DL_NODE *)(node))->previous; }
#define CLASSID_INVALIDATE(classId) ((CLASS_ID) ((int)classId | 1))
#define SEM_INVERSION_SAFE 0x08
#define MII_EXT_STAT_1000X_FD 0x8000
#define _SIZE_T_DECLARED 
#define WDB_PROXY_INIT_STRING NULL
#define _ARCH_LDBL_MAX_10_EXP 308
#define MMU_GLOBAL_PAGE_MAP (*(mmuLibFuncs.mmuGlobalPageMap))
#define VXBAF_BYTE_ORDER_BE_32 0x001a0000
#define _BYTE_ORDER _BIG_ENDIAN
#define S_mmuLib_VIRT_ADDR_OUT_OF_BOUNDS (M_mmuLib | 6)
#define CORE_DUMP_STACK_SIZE 8192
#define F_SETOWN 6
#define EPIC_IN_INT14_DES_REG (EPIC_CCSROFF + 0x103d0)
#define M85XX_MCMR(base) (CAST(VUINT32 *)((base) + 0x5078))
#define MSG_PRI_NORMAL 0
#define SIO_BAUD_SET 0x1003
#define IPCOM_PROC_STACK_MIN IPCOM_STACK_ADJUST(1024)
#define ARMARCH4_T _VX_ARMARCH4_T
#define PCI_WINDOW_ENABLE_BIT 0x80000000
#define DRV_TIMER_M85XX 
#define EPIC_TSEC4TX_INT_NUM 21
#define PCIEX_INBOUND_ATTR_REG2(base) CVPUINT32(base, 0xaDD0)
#define _IFIELD_D(x) ((0x0000ffff & x))
#define _IFIELD_L(x) ((0x00200000 & x) >> 21)
#define M85XX_L2CTL_L2LFRID_MSK 0x00000300
#define CORE_DUMP_RTP_FS_PATH "/tgtsvr"
#define _WRS_INLINE static __inline__
#define FIONREAD 1
#define PCIEX_INBOUND_ATTR_REG3(base) CVPUINT32(base, 0xaDB0)
#define EPIC_IN_INT8_DES_REG (EPIC_CCSROFF + 0x10310)
#define EPIC_IN_INT2_VEC_REG (EPIC_CCSROFF + 0x10240)
#define _VX_PPC8260 2012
#define _PPC_L1CSR_SLC_V(x) (x >> 11)
#define INCLUDE_IPAIP_GLOBAL_CONFIGS 
#define MII_EXT_STAT_1000X_HD 0x4000
#define EPIC_MIDR_CRIT0_INT EPIC_BIT(30)
#define WIND_TCB_R4 (WIND_TCB_REGS + REG_SET_GR(4))
#define __ELF__ 1
#define TBU_W 285
#define _ARCH_FLT_MAX 3.40282347e+38F
#define _VX_CPU_FAMILY _VX_PPC
#define RIO_IMPLEMENTATION_SPACE_BASE 0x010000
#define DELETE_ERROR ERROR
#define INCLUDE_REMLIB 
#define _DBSR_IAC1 0x00800000
#define _DBSR_IAC2 0x00400000
#define WIND_TCB_R7 (WIND_TCB_REGS + REG_SET_GR(7))
#define VXBAF_BYTE_ORDER_BE_64 0x1a1a0000
#define __INCvxAtomicArchLibh 
#define PPC7400 _VX_PPC7400
#define _WRS_CONFIG_EDR_POLICY_HOOKS 1
#define IPCOM_USE_KEY_DB 
#define MMU_STATE_GUARDED_NOT 0x00000000
#define _VX_PPC7400 2011
#define SEMM_PENDED_TASK SEM_PENDED_TASK
#define CSIZE 0xc
#define EPIC_PCI_EXPRESS_INT_VEC (EPIC_PCI_EXPRESS_INT_NUM + EPIC_VEC_IN_IRQ0)
#define SPARClite _VX_SPARClite
#define EVENT_SALCREATE CLASS3_EVENT(99)
#define RIO_OP_SUPPORTED_AINC 0x01000000
#define MII_NP_TOGGLE 0x0800
#define _DBCR0_DAC1R_U 0x0008
#define SM_OBJ_MAX_SEM 60
#define _PARM_PATH_MAX 1024
#define IS_CONTROL_EVENT(event) ((event >= MIN_CONTROL_ID) && (event <= MAX_CONTROL_ID))
#define PPCACR_PRKM_MASK 0XF0
#define S_taskLib_TASK_UNDELAYED (M_taskLib | 108)
#define FIOSEEK 7
#define WV_CLASS_TASKNAMES_PRESERVE 0x00001000
#define M85XXRIO_PLMRESPCSR(base) (CAST(VUINT32 *)(((char*)base) + 0x00144 ))
#define ZERO 0
#define __INCvxTypesOldh 
#define _IFORM_M_1 54
#define S_ioLib_UNFORMATED EIO
#define IPCOM_USE_SYSLOG 
#define FNBIO _FNBIO
#define _IFORM_M_3 78
#define IPCOM_USE_SA_LEN 1
#define SEMRW_MAX_READERS(semId) ( ((SEM_RW_EXT *) ((UINT) semId + sizeof (SEMAPHORE)))->maxReaders )
#define FIOLABELSET 34
#define _VX_SPARC 10
#define EPIC_IPIVPR_PRIORITY(p) (((p) << 16) & EPIC_IPIVPR_PRIORITY_MSK)
#define M_memLogLib (140 << 16)
#define FIOSEEK64 53
#define SYS_MODEL "Wind River SBC"
#define SRIO_STATUS_CHECK 0x2
#define IPCOM_USE_HW_CAPS 
#define _DBCR0_IRPT 0x02000000
#define _VX_PPC405F 2002
#define __INCselectLibP 
#define _POSIX_ARG_MAX 4096
#define M_ipsLib (165 << 16)
#define INCLUDE_SEM_BINARY 
#define IVOR12 412
#define M85XXRIO_RxWAR_TYPE_READ(val) (val << 16)
#define M_pppSecretLib (101 << 16)
#define OBJ_RESOLVE(pObj) ((OBJ_CORE *)(pObj))
#define LAWAR_TGTIF_RAPIDIO 0x00C00000
#define NUM_PCI2_SLOTS 0x0
#define MIN_CONTROL_ID 0
#define EVENT_SEMMCREATE CLASS3_EVENT(13)
#define IVOR14 414
#define SEM_M_PRI_RESORT 0x4
#define M_mmsLib (162 << 16)
#define __INCmmuE500Libh 
#define INST_BCCTR _OP(19, 528)
#define SEM_RW_EXT_SIZE 0x18
#define MEM_BLOCK_ERROR_LOG_MSG 0x04
#define M85XXRIO_ROWS3R18_OFFSET(n) (0x10C1C + ((n)*0x20))
#define IPCOM_USE_HW_CHECKSUM_RX 
#define CCB_FREQ 396000000
#define OPT_MON_TRAP 0x10
#define IPCOM_FILE_ROOT IPCOM_FILE_NATIVE_ROOT
#define M_arpLib (71 << 16)
#define _PARM_MB_CUR_MAX 1
#define EVENT_MEMALLOC CLASS3_EVENT(30)
#define _WRS_CONFIG_COMPONENT_VXMUX 1
#define _WRS_PHYS_ADDR_IS_64_BITS 
#define CACHE_WRITETHROUGH 0x01
#define M85XXRIO_ROWAR_RDTYPE_ATOMIC_INC 0xc
#define SEM_RW_MAX_CONCURRENT_READERS 32
#define NV_BOOT_OFFSET 0
#define EPIC_IN_INT5_VEC_REG (EPIC_CCSROFF + 0x102a0)
#define FOREVER for (;;)
#define WDB_POOL_SIZE ((unsigned int) (sysMemTop() - FREE_RAM_ADRS)/16)
#define O_CREAT _FCREAT
#define EOVERFLOW 85
#define _WRS_CONFIG_OBJECT_CLASS_LIST 1
#define PCIEX_INBOUND_TRANS_ADRS_REG1(base) CVPUINT32(base, 0xaDE0)
#define _ARCH_FLT_MIN 1.17549435e-38F
#define __sgetc(p) ((HANDLE_VERIFY(p, handleTypeFile) != OK) ? (EOF) : ((--(p)->_r < 0) ? (__srget(p)) : ((int)(*(p)->_p++))))
#define FILESIZEBITS 63
#define UCHAR_MAX 255
#define IPCOM_USE_HW_CHECKSUM_TX 
#define INCLUDE_WDB_MEM 
#define SEEK_SET 0
#define RLIMIT_CORE 4
#define INCLUDE_IPTCP 
#define Q_CLASS_VERIFY(pQClass) ( (((Q_CLASS *)(pQClass))->valid == (Q_CLASS *) pQClass) ? OK : ERROR )
#define VM_STATE_MASK_WRITABLE MMU_ATTR_PROT_MSK
#define CUST_ENET3_0 0xA0
#define CUST_ENET3_1 0xA1
#define CUST_ENET3_3 0xA3
#define VM_DEFAULT_CACHE_COHERENCY_ATTR 0x0
#define SHELL_TASK_NAME_BASE "tShell"
#define PCI2_DEV_ID 0x826110E3
#define _IFIELD_RB(x) ((0x0000f800 & x) >> 11)
#define MMU_STATE_SUP_RW_USR_R (MMU_STATE_SUP_RW | _MMU_UR)
#define EPIC_RES42_INT_NUM 42
#define MII_ANAR_10TX_FD 0x0040
#define MMU_STATE_SUP_RW_USR_W (MMU_STATE_SUP_RW | _MMU_UW)
#define MMU_STATE_SUP_RW_USR_X (MMU_STATE_SUP_RW | _MMU_UX)
#define M85XX_LSRT(base) (CAST(VUINT32 *)((base) + 0x50A4))
#define __INCb_uid_th 
#define I2C_DEVICE_TYPE_TEMP_SENSOR_AD7417 1
#define MII_AN_PRTN_REG 0x5
#define _WRS_CONFIG_SUPPORTS_PROFILE_SMALL_FOOTPRINT 1
#define VXDBG_MEM_READ(pSrc,pDest,size) VXDBG_MEM_WIDTH_READ(pSrc, pDest, size, 0)
#define M85XX_L2CTL_L2LO_MSK 0x00002000
#define OBJ_HANDLE_ENTRY_MASK (OBJ_HANDLE_TBL_SIZE - 1)
#define IVOR0 400
#define WDB_STACK_SIZE 0x2000
#define _PPC_MSR_WE_U 0x0004
#define I2C_IOCTL_RD 1
#define MMU_REGION_TBL_ENTRIES (0x1 << MMU_REGION_INDEX_BITS)
#define EPIC_IN_INT6_DES_REG (EPIC_CCSROFF + 0x102d0)
#define vxAtomicSet_inline vxAtomicSet
#define S_msgQLib_INVALID_QUEUE_TYPE (M_msgQLib | 3)
#define PCI_IN_ATTR_TGI_RIO 0x00c00000
#define SHELL_TASK_PRIORITY 1
#define _VX_READ 0
#define MII_ANAR_10TX_HD 0x0020
#define _WRS_VX_NO_GLOBAL_ERRNO 
#define S_vxCpuLib_INVALID_ARGUMENT (M_vxCpuLib | 1)
#define _GCC_LIMITS_H_ 
#define PHY_10BASE_T_FDX 0x01
#define _IFLAG_4XTLB (_IFLAG_405_SPEC | _IFLAG_440_SPEC)
#define MMU_STATE_MASK_CACHEABLE 0x00000018
#define M85XX_L2CEWAR_ADDR_MSK 0xFFFFFF00
#define WDB_TASK_OPTIONS VX_UNBREAKABLE | VX_FP_TASK
#define WDB_COMM_ULIP 3
#define W_OK 2
#define INCLUDE_APPL_LOG_UTIL 
#define SIMSPARCSOLARIS _VX_SIMSPARCSOLARIS
#define _SIZE_T_ 
#define FREQ_33_MHZ 33000000
#define __size_t 
#define RLIMIT_RSS 5
#define BP_ACTIONS_ALL -1
#define VXB_BYTE_ORDER_CONVERT_64(flags,data,mask) { if ((flags & VXBAF_ENDIAN_MASK) != mask) { VXBAF_BYTE_SWAP_64(data); flags &= ~(VXBAF_ENDIAN_MASK); flags |= mask; flags ^= (VXBAF_CONVERT_BYTE_ORDER | VXBAF_CONVERT_SHORT_ORDER | VXBAF_CONVERT_LONG_ORDER); } }
#define JAVA_C_SYM_PREFIX ""
#define EPIC_SMSG_INT1_DES_REG (EPIC_CCSROFF + 0x11c30)
#define IPCOM_USE_ETHERNET 
#define EPIC_GT_B_VEC_REG(irq) (EPIC_TM_B0_VEC_REG + ((irq) * EPIC_GT_VEC_REG_INTERVAL))
#define PCI_OUTBOUND_BASE_ADRS_REG2(base) CVPUINT32(base, 0x8c48)
#define M85XXRIO_RIWAR_IO_TYPE_R 4
#define _WCHAR_T_H 
#define M85XXRIO_RIWAR_IO_TYPE_W 4
#define EPROTO 76
#define EPIC_MIVPR_INTR_MSK EPIC_BIT(31)
#define EPIC_IPI_DPATCH1_REG0 (EPIC_CCSROFF + 0x21040)
#define ENODEV 19
#define _WRS_INLINE_vxCas 
#define IPCOM_NETIF_IPCOM 1
#define EPIC_VEC_IPI_IRQ0 (255 - EPIC_MAX_IPI_IRQS)
#define _IFIELD_SPR(x) (((0x001f0000 & x) >> 16) | ((0x0000f800 & x) >> 6))
#define __INCvxdbgPpcLibPh 
#define M_msgQLib (65 << 16)
#define TASK_ID_VERIFY(tid) ( (objVerify (&((WIND_TCB *)(tid))->objCore, taskClassId)) )
#define _ARCH_LDBL_MIN_10_EXP (-307)
#define _IFIELD_RS(x) ((0x03e00000 & x) >> 21)
#define USER_RESERVED_MEM 0x000000
#define INT_MAX __INT_MAX__
#define PPC750 _VX_PPC750
#define IPCOM_PROC_PRIO_1 254
#define IPCOM_PROC_PRIO_3 80
#define IPCOM_PROC_PRIO_6 30
#define IPCOM_PROC_PRIO_7 20
#define VM_TEXT_PAGE_PROTECT(addr,protect) VM_TEXT_PROTECT(addr, protect)
#define FSTAT_REG 0100000
#define _WRS_ALIGN_CHECK(ptr,type) (((int)(ptr) & ( _WRS_ALIGNOF(type) - 1)) == 0 ? TRUE : FALSE)
#define CPU32 _VX_CPU32
#define _PPC_MAS0_ESEL_MASK 0x03ff0000
#define __INCmsgQLibCommonh 
#define PHY_10BASE_T 0x00
#define OBJ_IS_DELETE_ON_LAST_CLOSE(objId) ( (((OBJ_CORE *)(objId))->handle.attributes & WIND_OBJ_DELETE_ON_LAST_CLOSE) != 0 )
#define INT_RESTRICT() ( intContext() ? errno = S_intLib_NOT_ISR_CALLABLE, ERROR : OK )
#define _WRS_OSM_INIT 
#define CACHE_CMD_ENABLE 0x02000000
#define INCLUDE_TIMER_STUB 
#define EPIC_MAX_EXT_IRQS 12
#define TRG_CLASS_1_ON 0x10000001
#define I2C_IOCTL_WR 0
#define _SYS_CDEFS_H_ 
#define TLB0CFG 688
#define DLL_FIRST(pList) ( (((DL_LIST *)(pList))->head) )
#define SIO_MCTRL_BITS_CLR 0x100E
#define M85XXRIO_DICAR(base) (CAST(VUINT32 *)(((char*)base) + 0x0004 ))
#define MII_SR_AUTO_SEL 0x0008
#define FRAMEBASESZ 16
#define M_qLib (59 << 16)
#define VXDBG_EVT_MAX_NUM 4
#define _VX_FUNCPTR_DEFINED 
#define __FLT_HAS_QUIET_NAN__ 1
#define S_mmuLib_MARKED_ISR_CALLABLE (M_mmuLib | 13)
#define __INCobsolete_typesh 
#define EVT_CTX_0_BH(evtId) eventPointSwHandle (evtId, NULL, 0)
#define WV_EVT_PROTO_REV_6_3_FCS 2
#define Q_ADVANCE(pQHead) (*(((Q_HEAD *)(pQHead))->pQClass->advanceRtn)) (((Q_HEAD *)(pQHead)))
#define EPIC_TSEC1ERR_INT_NUM 18
#define M_sdLib (190 << 16)
#define SYM_IS_DATA(symType) ((symType) & SYM_DATA)
#define _VX_ARMARCH5_T 1122
#define BREAK_ESF ESFPPC
#define EPIC_VEC_HAS_NO_IDR 26
#define _PC_SYNC_IO 19
#define SIO_MODEM_RTS 0x02
#define MMU_STATE_SUP_R (_MMU_SR)
#define M85XXRIO_ROWAR_RDTYPE_NREAD 0x4
#define __FLT_HAS_INFINITY__ 1
#define M85XXRIO_IDSR(base) (CAST(VUINT32 *)(((char*)base) + 0x13464 ))
#define FRSYNC _FRSYNC
#define S_miiLib_PHY_AN_FAIL (M_miiLib | 4)
#define PCIEX_OUTBOUND_ATTR_REG0(base) CVPUINT32(base, 0xac10)
#define PCIEX_OUTBOUND_ATTR_REG1(base) CVPUINT32(base, 0xac30)
#define PCIEX_OUTBOUND_ATTR_REG3(base) CVPUINT32(base, 0xac70)
#define PCIEX_OUTBOUND_ATTR_REG4(base) CVPUINT32(base, 0xac90)
#define TASK_UNLOCK() TASK_CPU_UNLOCK()
#define VXBUS_VERSION_1 1
#define VXBUS_VERSION_2 2
#define VXBUS_VERSION_3 3
#define VXBUS_VERSION_4 VXB_VER_4_0_0
#define _BSD_PTRDIFF_T_ 
#define EVENT_CPU_ID CONTROL_EVENT(10)
#define _PPC_TCR_WRC_U 0x3000
#define MMU_ATTR_VALID_MSK 0x00000040
#define _MMU_TLB_SZ_64M 0x00000800
#define M_nfsDrv (45 << 16)
#define EXT_VEC_IRQ0 56
#define INCsysMpc85xxI2ch 
#define DDR_DATA_INIT 0x128
#define XTSEC_NAME "motetsec"
#define _WRS_ABSOLUTE(name,value) _WRS_ABSOLUTE_(name,value)
#define EPIC_IN_INT16_VEC_REG (EPIC_CCSROFF + 0x10400)
#define IS_CLASS3_EVENT(event) ((event >= MIN_CLASS3_ID) && (event <= MAX_CLASS3_ID))
#define NULL ((void *)0)
#define VM_MMU_TRANS_TBL_GET(vmCtxId) (vmCtxId->mmuTransTbl)
#define DEAR 61
#define SPRG4_R 260
#define MEM_ALLOC_ERROR_LOG_FLAG 0x20
#define EVENT_TASKSAFE CLASS3_EVENT(6)
#define E2BIG 7
#define EVENT_SYSCALL_BASE CLASS3_EVENT(65)
#define HID1_RUN_NORM 
#define FIOCONTIG64 49
#define VM_TRANSLATE(context,virtualAddr,pPhysicalAddr) ((vmLibInfo.pVmTranslateRtn == NULL) ? (ERROR) : ((*vmLibInfo.pVmTranslateRtn) (context, (VIRT_ADDR) virtualAddr, pPhysicalAddr)))
#define SYS_MODEL_E500 "Freescale E500 : Unknown system version"
#define _DBSR_UDE_U 0x4000
#define _VX_ARMARCH4_T 128
#define _VX_FD_FUNC_DEFINED 
#define Q_RESTORE(pQHead,pQNode,key) (*(((Q_HEAD *)(pQHead))->pQClass->restoreRtn)) (((Q_HEAD *)(pQHead)), ((Q_NODE *)(pQNode)), (key))
#define I2C_KNOWN_STATE(x) i2cCycleMpc85xxKnownState(x)
#define FIOTIMESET 44
#define IPCOM_DRV_PPP_BAUDRATE 38400
#define TBU_R 269
#define _PPC_TCR_DIE (_PPC_TCR_DIE_U << 16)
#define VX_COUNTING_SEMAPHORE VX_SEMAPHORE
#define VX_MAX_TASK_DELETE_RTNS 20
#define OBJ_EACH(list,pNode,routine,arg,objId) { DL_NODE * pNextNode; pNode = DLL_FIRST (&list); while (pNode != NULL) { objId = (OBJ_ID)((int)pNode - OFFSET (OBJ_CORE, classNode)); pNextNode = DLL_NEXT (pNode); if ((* routine) (objId, arg) == FALSE) break; pNode = pNextNode; } }
#define Q_PRI_LIST_FROM_TAIL qPriListFromTailClassId
#define M_iosLib (13 << 16)
#define VX_MAX_TASK_CREATE_RTNS 20
#define FIOFSTATFSGET 46
#define EPIC_WHO_AM_I0_REG (EPIC_CCSROFF + 0x20090)
#define _PC_REC_XFER_ALIGN 17
#define STATE_TO_CACHE_INDEX(state) ((MMU_ATTR_CACHE_GET(state)) >> MMU_ATTR_CACHE_INDEX_SHIFT)
#define EPIC_IN_INT16_DES_REG (EPIC_CCSROFF + 0x10410)
#define EPIC_IRQSR0_MSG_INT_MSK 0xf000
#define M85XX_L2CEWCR_LOCK_MSK 0x40000000
#define IPCOM_SOCK_IPLITE 1
#define MPC85XX_I2C_CONTROLLER 0
#define _WRS_CONFIG_SHELL 1
#define EVT_OBJ_EVENT_2(evtId,ARG1,ARG2) do { if ( ACTION_IS_SET ) { EVT_OBJ_EVENT_2_T evt_obj_event_2; evt_obj_event_2.args [0] = (int)ARG1; evt_obj_event_2.args [1] = (int)ARG2; eventPointSwHandle(evtId, &evt_obj_event_2, sizeof evt_obj_event_2); } } while ((0))
#define EVT_OBJ_EVENT_3(evtId,ARG1,ARG2,ARG3) do { if ( ACTION_IS_SET ) { EVT_OBJ_EVENT_3_T evt_obj_event_3; evt_obj_event_3.args [0] = (int)ARG1; evt_obj_event_3.args [1] = (int)ARG2; evt_obj_event_3.args [2] = (int)ARG3; eventPointSwHandle(evtId, &evt_obj_event_3, sizeof evt_obj_event_3); } } while ((0))
#define PROT_INDEX_TO_STATE(index) (((UINT)(index) << MMU_ATTR_PROT_INDEX_SHIFT) | MMU_ATTR_PROT_SUP_READ)
#define _VX_ARM 120
#define M_ospfLib (111 << 16)
#define EVENTS_SYSFLAGS_UNUSED 0xfc
#define MEM_BLOCK_ERROR_SUSPEND_FLAG 0x100
#define VX_TASK_INSTANTIATE(name,prio,options,stackSz,entryPt,arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10) (((VX_TASK_INITIALIZE(name,prio,options,stackSz,entryPt,arg1,arg2,arg3, arg4,arg5,arg6,arg7,arg8,arg9,arg10) == (int) NULL) || (taskActivate ((int)&name ##Tcb) != OK)) ? (ERROR) : ((int) &name ##Tcb))
#define EVENT_INT_ENT(k) ((k) + MIN_INT_ID)
#define _IFIELD_FRB(x) ((0x0000f800 & x) >> 11)
#define _IFIELD_FRC(x) ((0x000007c0 & x) >> 6)
#define _IFIELD_FRD(x) ((0x03e00000 & x) >> 21)
#define __XSTRING(x) __STRING(x)
#define _IFIELD_FRS(x) ((0x03e00000 & x) >> 21)
#define TRG_CONTROL_INDEX 6
#define RIO_CAR_SWITCH_PORT 0x14
#define NOT_PAGE_ALIGNED(addr) (((UINT)(addr)) & ((UINT)vmPageSize - 1))
#define ENOTDIR 20
#define LBC_SDRAM_LOCAL_ADRS LOCAL_MEM_LOCAL_ADRS2
#define DEBUG_KWRITE_USR_RTN NULL
#define TIMER_ABSTIME 0x1
#define M_mbufLib (98 << 16)
#define MMU_STATE_SUP_RW_USR_RWX (MMU_STATE_SUP_RW | _MMU_URWX)
#define EPIC_REG_NO_OFFSET_WRITE(regAdrs,value) *(volatile UINT32 *)(regAdrs) = value
#define WIND_TCB_XER (WIND_TCB_REGS + REG_SET_XER)
#define FIOCHMOD 63
#define __INCnetVersionh 
#define INST_SC_MASK 0xfc000002
#define USER_I_MMU_ENABLE 
#define DDR_IO_OVCR 0x90000000
#define ECONNRESET 54
#define _MMU_TLB_SZ_1G 0x00000a00
#define _MMU_TLB_SZ_1M 0x00000500
#define VXB_BUSID_USB_HOST_OHCI 12
#define VXB_VER_PATCH(x) ((x)&0x0ff)
#define VX_WRITE 1
#define INCLUDE_NETWORK 
#define _WRS_INLINE_ffsMsb 
#define PENTIUM _VX_PENTIUM
#define END_OF_TABLE 0
#define EVENT_SEMBCREATE CLASS3_EVENT(8)
#define M_cdromFsLib (116 << 16)
#define ENXIO 6
#define __INCb_dev_th 
#define PPC85XX_ERRATA_CPU29 1
#define M_errnoLib (49 << 16)
#define CLOCK_MONOTONIC 0x1
#define _WRS_SDA_BSS __attribute__ ((__section__ (".sbss")))
#define __INCobjLibh 
#define SYS_CLK_RATE 60
#define L2SIZ_0KB 0
#define IPCOM_VXWORKS_DRV_NULLPOOL 
#define _VX_PENTIUM2 84
#define EVT_OBJ_SIG_0(evtId) EVT_OBJ_SIG_N(evtId, 0, 0, 0, 0, 0, 0)
#define EVT_OBJ_SIG_1(evtId,ARG1) do { if (ACTION_IS_SET) { EVT_OBJ_SIG_1_T evt_obj_sig_1; evt_obj_sig_1.args [0] = (int)ARG1; eventPointSwHandle (evtId, &evt_obj_sig_1, sizeof evt_obj_sig_1); } } while ((0))
#define EVT_OBJ_SIG_2(evtId,ARG1,ARG2) do { if (ACTION_IS_SET) { EVT_OBJ_SIG_2_T evt_obj_sig_2; evt_obj_sig_2.args [0] = (int)ARG1; evt_obj_sig_2.args [1] = (int)ARG2; eventPointSwHandle (evtId, &evt_obj_sig_2, sizeof evt_obj_sig_2); } } while ((0))
#define EVT_OBJ_SIG_3(evtId,ARG1,ARG2,ARG3) do { if (ACTION_IS_SET) { EVT_OBJ_SIG_3_T evt_obj_sig_3; evt_obj_sig_3.args [0] = (int)ARG1; evt_obj_sig_3.args [1] = (int)ARG2; evt_obj_sig_3.args [2] = (int)ARG3; eventPointSwHandle (evtId, &evt_obj_sig_3, sizeof evt_obj_sig_3); } } while ((0))
#define EVT_OBJ_SIG_4(evtId,ARG1,ARG2,ARG3,ARG4) do { if (ACTION_IS_SET) { EVT_OBJ_SIG_4_T evt_obj_sig_4; evt_obj_sig_4.args [0] = (int)ARG1; evt_obj_sig_4.args [1] = (int)ARG2; evt_obj_sig_4.args [2] = (int)ARG3; evt_obj_sig_4.args [3] = (int)ARG4; eventPointSwHandle (evtId, &evt_obj_sig_4, sizeof evt_obj_sig_4); } } while ((0))
#define MAX_CLASS3_ID 19999
#define SIO_ERROR_CONNECT 4
#define TOOL_HDR_STRINGIFY(x) #x
#define VXBAF_CONVERT_OTHER 0x00000400
#define MII_STAT_FAIL 0x20
#define _VX_PENTIUM4 86
#define MII_PHY_NO_ABLE 0x40
#define EPIC_PRIORITY_DEFAULT 3
#define S_spinLockLib_LOCK_TIMEOUT (M_spinLockLib | 5)
#define _WRS_CONFIG_COMPONENT_IPFREESCALE_FLAG 1
#define FSYNC _FSYNC
#define EPIC_TSEC4TX_INT_VEC (EPIC_TSEC4TX_INT_NUM + EPIC_VEC_IN_IRQ0)
#define _WRS_KERNEL_LOCK_OFFSET_cpuIndex (0x00 + _WRS_KERNEL_LOCK_ALIGN_tkt_ctr)
#define _PPC_USE_SDA 
#define _MMU_TLB_SZ_4M 0x00000600
#define _PPC_TEXT_SEG_ALIGN 4
#define EPIC_MSIVPR_VECTOR(vec) ((vec) & EPIC_MSIVPR_VECTOR_MSK)
#define L_XTND SEEK_END
#define EVENT_RTPTASKKILL CLASS3_EVENT(87)
#define WDB_GOPHER_TAPE_LEN 1400
#define WV_ACTION_IS_SET ( (evtAction&0xff00) == 0x0100)
#define L1CFG0 515
#define L1CFG1 516
#define INCLUDE_NET_DRV 
#define __INClogLibh 
#define __INCkernelLockLibPh 
#define VM_STATE_MASK_BUFFERABLE (MMU_ATTR_CACHE_MSK | MMU_ATTR_SPL_MSK)
#define LOCAL_MEM_SIZE 0x10000000
#define _FUNCPTR_DEFINED 
#define FAPPEND _FAPPEND
#define IPCOM_PROC_PRIO_2 90
#define __INCvxCpuLibh 
#define ARCH_HEADER(file) ARCH_HDR(_VX_ARCH_DIR,file)
#define IS_INT_ENT_EVENT(event) ((event >= MIN_INT_ID) && (event <= MAX_INT_ID))
#define MMU_ATTR_SUP_IO_RO (MMU_ATTR_SUP_RO | MMU_ATTR_CACHE_IO)
#define _DEFINED_mode_t 
#define MII_HDX_STR "half duplex"
#define _WRS_E500_FIXED_POINT_SUPPORT 1
#define DEFAULT_SYSCLKFREQ FREQ_400_MHZ
#define EPIC_MSIVPR_PRIORITY(p) (((p) << 16) & EPIC_MSIVPR_PRIORITY_MSK)
#define PHY_AN_ENABLE 0x05
#define MII_MASSLA_CTRL_CONFIG_VAL 0x800
#define _DBCR0_RET 0x00008000
#define IPCOM_PROC_PRIO_4 50
#define PCI_OUTBOUND_TRANS_EXT_ADRS_REG2(base) CVPUINT32(base, 0x8c44)
#define _IFIELD_SR(x) ((0x000f0000 & x) >> 16)
#define __INCb_off_th 
#define EPIC_SR_OUT_MU1_INT_NUM 37
#define __BEGIN_DECLS 
#define VM_STATE_CACHEABLE_NOT MMU_ATTR_CACHE_OFF
#define IPCOM_PROC_PRIO_5 40
#define __LDBL_MANT_DIG__ 53
#define IPCOM_CONFIG_H 
#define PORDEVSR_PCIX_MODE 0
#define CACHE_USER_IS_WRITE_COHERENT() CACHE_DRV_IS_WRITE_COHERENT (&cacheUserFuncs)
#define Q_FIFO qFifoClassId
#define _INC_VXBUS_H 
#define M_tapeFsLib (103 << 16)
#define ECM_OFFSET 0x1000
#define EPIC_SR_OUT_MU2_INT_VEC (EPIC_SR_OUT_MU2_INT_NUM + EPIC_VEC_IN_IRQ0)
#define __SRD 0x0004
#define EVENT_OBJ_WINDROTATE CLASS2_EVENT(46)
#define M85XXRIO_ODDATR(base) (CAST(VUINT32 *)(((char*)base) + 0x1341C))
#define _FPOS_T 
#define EPIC_TM_A0_VEC_REG (EPIC_CCSROFF + 0x01120)
#define _TOOL_HEADER(file) _TOOL_HDR(TOOL_FAMILY,file)
#define EPIC_IN_DEST_REG_VECREGOFF 0x10
#define MII_SR_EXT_CAP 0x0001
#define EVENT_KILL CLASS3_EVENT(27)
#define __INCcachePpcLibh 
#define _WRS_CONFIG_COMPONENT_IPDHCPR 1
#define _WRS_CONFIG_COMPONENT_IPDHCPS 1
#define RLIMIT_NOFILE 8
#define _PPC_ESF_DAR (_PPC_ESF_ERRNO + SIZ_UINT32)
#define MII_SR_SPEED_SEL_MASK 0xf800
#define EPIC_DMA3_INT_NUM 7
#define OBJ_UNRESOLVE(pObj) ((OBJ_ID)(pObj))
#define _IFORM_D_2 4
#define _IFORM_D_3 5
#define _IFORM_D_4 6
#define _IFORM_D_5 7
#define _IFORM_D_6 8
#define _IFORM_D_7 9
#define _IFORM_D_9 56
#define EVENT_ISR_CREATE CLASS3_EVENT(62)
#define EPIC_MAX_ALL_IRQS 255
#define PGCCSR_HOST 0x80000000
#define _PPC_HID0_SLEEP 0x00200000
#define RIO_WORKING 5
#define PCI2_CFG_ADR_REG (CCSBAR + 0x9000)
#define SEM_Q_MASK 0x03
#define FILENAME_MAX _PARM_FILENAME_MAX
#define VME_AM_IS_STD(addr) ((addr & 0xf0) == 0x30)
#define WIND_TCB_T3 WIND_TCB_R17
#define FS_COMMIT_POLICY_PERIODIC 3
#define LSB(x) ((x) & 0xff)
#define WIND_TCB_T4 WIND_TCB_R18
#define EPIC_SMSG_INT3_DES_REG (EPIC_CCSROFF + 0x11c70)
#define INCLUDE_MBUF_UTIL1 
#define EPIC_EX_INT3_VEC_REG (EPIC_CCSROFF + 0x10060)
#define ERF_MAX_USR_TYPES 16
#define WIND_TCB_T6 WIND_TCB_R20
#define _WRS_FUNC_ALIAS(func,aliasToFunc,retType) retType aliasToFunc () __attribute__ ((alias (#func)));
#define MII_HDX_LEN sizeof (MII_HDX_STR)
#define _PPC_ESF_VEC_OFF_H (_PPC_ESF_VEC_OFF + SIZ_UINT16)
#define M_setLib (125 << 16)
#define FALSE (0)
#define EVT_OBJ_SAL_STR_2(EVTID,NAME,FD) do { if (ACTION_IS_SET) { EVT_OBJ_SAL_STR_2_T evt_obj_sal_str_2; evt_obj_sal_str_2.args [0] = (int)FD; evt_obj_sal_str_2.length = strlen (name); evt_obj_sal_str_2.pData = name; eventPointSwHandle (EVTID, &evt_obj_sal_str_2, sizeof(evt_obj_sal_str_2)); } } while ((0))
#define PCI_CFG_FORCE 0
#define _IFORM_VXR_1 76
#define M_edrLib (138 << 16)
#define SEMM_NO_OWNER NULL
#define M85XX_L2SRBAREA0(x) (CAST(VUINT32 *)((x + 0x20104)))
#define EPIC_INV_INTER_SOURCE 22
#define _PPC_L1CSR_LO 0x00000200
#define EPIC_IIVPR_INTR_POLARITY EPIC_BIT(23)
#define VXB_BUSID_PCI 3
#define __INCdsmLibh 
#define EPIC_CISR0_MSG_INT(n) (EPIC_BIT(15-(n)) & EPIC_CISR0_MSG_INT_MSK)
#define VME_AM_STD_SUP_ASCENDING 0x3f
#define EVENT_OBJ_MSGSSEND CLASS2_EVENT(45)
#define PCI2_OUTBOUND_TRANS_EXT_ADRS_REG3(base) CVPUINT32(base, 0x9c64)
#define ROUND_UP(x,align) (((int) (x) + (align - 1)) & ~(align - 1))
#define _PPC_L1CSR_UL_V(x) (x >> 10)
#define __volatile volatile
#define IS_KERNEL_TASK(tid) ( (((tid) == 0 ? (WIND_TCB *)taskIdCurrent:(WIND_TCB *)(tid))->rtpId == kernelId) )
#define SLL_PUT_AT_HEAD(list,node) { if ((((SL_NODE *)(node))->next = ((SL_LIST *)(list))->head) == NULL) { ((SL_LIST *)(list))->head = ((SL_NODE *)(node)); ((SL_LIST *)(list))->tail = ((SL_NODE *)(node)); } else ((SL_LIST *)(list))->head = (node); }
#define S_mmuLib_LOCK_NO_MORE_TLB_RESOURCES (M_mmuLib | 9)
#define INCLUDE_NET_HOST_SETUP 
#define WRITE _VX_WRITE
#define _CLOCK_T 
#define EVENTS_RETURN_ALL 0x02
#define PCI2_OUTBOUND_TRANS_EXT_ADRS_REG4(base) CVPUINT32(base, 0x9c84)
#define MCSRR0 570
#define vxAtomicXor_inline vxAtomicXor
#define __CONCAT(x,y) __CONCAT1(x,y)
#define WRS_ASM(x) _WRS_ASM(x)
#define _PPC_MSR_MMU_RI_FP_EXTRACT(src,dst) lis dst, _PPC_MSR_SPE_U ; ori dst, dst, _PPC_MSR_IS | _PPC_MSR_DS ; and dst, dst, src
#define _EXTENSION_WRS 1
#define ETIME 79
#define MC68020 _VX_MC68020
#define VM_STATE_MASK_CACHEABLE MMU_ATTR_CACHE_MSK
#define MII_PHY_ISO 0x0400
#define __FLT_DIG__ 6
#define EPIC_GCR_MODE_EPF (EPIC_BIT(29) | EPIC_BIT(30))
#define _DBSR_MRR 0x30000000
#define VXB_BUSID_I2C 20
#define S_msgQLib_INVALID_MSG_LENGTH (M_msgQLib | 1)
#define VM_CONTEXT_MASK(context,startAddr,endAddr,options) ((vmLibInfo.pVmCtxMaskRtn == NULL) ? (ERROR) : ((*vmLibInfo.pVmCtxMaskRtn) (context, startAddr, endAddr, options)))
#define atomic32Get_inline atomic32Get
#define S_spinLockLib_NOT_SPIN_LOCK_CALLABLE (M_spinLockLib | 1)
#define TASK_SAFE() do { VX_CODE_BARRIER(); EVT_OBJ_2 (taskIdCurrent, taskClassId, EVENT_TASKSAFE, taskIdCurrent, taskIdCurrent->safeCnt); taskIdCurrent->safeCnt++; VX_CODE_BARRIER(); } while ((0))
#define SYM_IS_COMMON(symType) ((symType) & SYM_COMM)
#define EVENT_SEMRWCREATE CLASS3_EVENT(204)
#define M_dsmLib (7 << 16)
#define LOCAL static
#define VX_CLASS_LIST_UNLOCK(lock) semMGiveScalable (lock, CLASS_LIST_SEM_INLINE_OPTIONS)
#define __INT_MAX__ 2147483647
#define M85XXRIO_DIDCAR(base) (CAST(VUINT32 *)(((char*)base) + 0x0000 ))
#define _PPC_MMUCSR0_DL1MMU_FI_V(x) (x >> 3)
#define HWMEM_POOL_SIZE 50000
#define DDR_SDRAM_LOCAL_SIZE LOCAL_MEM_SIZE
#define MII_BP_NP 0x8000
#define VM_PAGE_LOCK(context,virtAddr,len,option) ((vmLibInfo.pVmPageLockRtn == NULL) ? (ERROR) : ((*vmLibInfo.pVmPageLockRtn) (context, virtAddr, len, option)))
#define EPIC_IN_INT29_VEC_REG (EPIC_CCSROFF + 0x105a0)
#define MII_MASSLA_CTRL_PORT_TYPE 0x400
#define VX_OBJ_ALIGN_SIZE 8
#define _FWRITE 0x0002
#define EPIC_EIVPR_PRIORITY_MSK (EPIC_BIT(19) | EPIC_BIT(18) | EPIC_BIT(17) | EPIC_BIT(16))
#define EPIC_IRQSR1_IN_INT(n) EPIC_BIT(31-(n))
#define F_RSETLKW 13
#define _PARM_UTS_NODENAME_MAX 64
#define FIOACCESS 60
#define atomic32Add_inline atomic32Add
#define DBCR0 308
#define DBCR1 309
#define EPIC_TM_A0_DES_REG (EPIC_CCSROFF + 0x01130)
#define EVENT_MSGSDELETE CLASS3_EVENT(42)
#define WV_CLASS_2_ON 0x10000003
#define __INCvxTypesh 
#define EPIC_IIDR_P1_INT EPIC_BIT(1)
#define EPIC_IN_INT6_VEC_REG (EPIC_CCSROFF + 0x102c0)
#define VXB_ACCESS_INT_ACKNOWLEDGE 0x00000011
#define M8260_DPPC_MASK 0x0C000000
#define WDB_TIPC_PORT_TYPE 70
#define SEM_OWNER(semId) (semId->semOwner)
#define INST_BCLRL 0x4c000021
#define S_vmLib_KERNEL_TEXT_NOT_ALIGNED (M_vmLib | 6)
#define VXB_HANDLE_ORDERED 24
#define EIO 5
#define WIND_OBJ_DEALLOC_MEM 0x02
#define _PPC_ESR_ST_U 0x0080
#define CLOCK_PROCESS_CPUTIME_ID 0x2
#define MMU_STATE_SUP_R_USR_RWX (MMU_STATE_SUP_R | _MMU_URWX)
#define PCI_OUTBOUND_TRANS_ADRS_REG0(base) CVPUINT32(base, 0x8c00)
#define SYSFLG_QUICK_AUTOBOOT 0x08
#define ENETUNREACH 51
#define EXDEV 18
#define FOPEN _FOPEN
#define EPIC_IN_INT29_DES_REG (EPIC_CCSROFF + 0x105b0)
#define VXB_BUSID_PLB 1
#define EVT_CTX_BUF(evtId,ADDR,BUFFSIZE,BUFFADDR) do { if (ACTION_IS_SET) { EVT_CTX_BUF_T evt_ctx_buf; evt_ctx_buf.pData = BUFFADDR; evt_ctx_buf.length = BUFFSIZE; evt_ctx_buf.pc = (void *)ADDR; eventPointSwHandle (evtId, &evt_ctx_buf, sizeof evt_ctx_buf); } } while ((0))
#define __INCblkIoh 
#define RESERVED 0x4400
#define PCI_OUTBOUND_TRANS_ADRS_REG2(base) CVPUINT32(base, 0x8c40)
#define __strong_reference(sym,aliassym) extern __typeof (sym) aliassym __attribute__ ((__alias__ (#sym)));
#define HID1_RXFE 0x00020000
#define _WRS_CONFIG_DEFAULT_IPV4 1
#define STRONGARM _VX_STRONGARM
#define MPC85XX_I2C_CONTROL_REG_MASK 0xFD
#define _TYPE_VIRT_ADDR typedef _Vx_VIRT_ADDR VIRT_ADDR
#define _WRS_LIKELY(x) __builtin_expect(!!(x), 1)
#define _EXC_INFO_DEFAULT (_EXC_INFO_VEC|_EXC_INFO_CIA|_EXC_INFO_MSR| _EXC_INFO_CR)
#define VM_PAGE_SIZE_GET() ((vmLibInfo.pVmPageSizeGetRtn == NULL) ? (ERROR) : ((*vmLibInfo.pVmPageSizeGetRtn) ()))
#define MCORE200 _VX_MCORE200
#define M85XX_DDRDLLCR(base) (CAST(VUINT32 *)((base) + 0xE0E10))
#define BLOB_PADDED_LENGTH(dataLength,alignment) ((dataLength + (1<<alignment) - 1) & ~((1<<alignment)-1))
#define _TYPE_sig_atomic_t typedef unsigned int sig_atomic_t
#define WV_REV_ID_CURRENT WV_REV_ID_VXWORKS_6_7
#define M_strmLib (100 << 16)
#define VXB_ASSERT_NONNULL_V(pVar) 
#define M_fastUdpLib (137 << 16)
#define ROM_TEXT_ADRS 0xFFF00100
#define EPIC_GT_A_VEC_REG(irq) (EPIC_TM_A0_VEC_REG + ((irq) * EPIC_GT_VEC_REG_INTERVAL))
#define _ARCH_FLT_ROUNDS 1
#define M85XX_DEVDISR(base) (CAST(VUINT32 *)((base) + 0xE0070))
#define IPCOM_IPC_MAX_NAME 64
#define __WINT_TYPE__ short unsigned int
#define EDQUOT 83
#define _CPU_CACHE_ALIGN_SIZE 32
#define MII_SR_TX_FULL_DPX 0x4000
#define MMU_STATE_MASK_ENDIAN 0x00000001
#define EXC_VEC_HIGH 0x02fff
#define EPIC_IN_INT40_VEC_REG (EPIC_CCSROFF + 0x10700)
#define _WRS_CONFIG_COMPONENT_VXTESTV2_D 1
#define MC68000 _VX_MC68000
#define PCI_IN_ATTR_RTT_LM_WRITE_ALLOC_L2_CACHE_LINE 0x00006000
#define VXB_INTR_TRIG_ACTIVE_LOW (VXB_INTR_TRIG_NEG | VXB_INTR_TRIG_LEVEL)
#define M85XXRIO_ODMR(base) (CAST(VUINT32 *)(((char*)base) + 0x13400))
#define _ARCH_DBL_DIG 15
#define VXB_ACCESS_REG_READ16 0x00000003
#define SH32 _VX_SH32
#define EVENT_OBJ_MSGSDELETE CLASS2_EVENT(42)
#define MII_MF_ADDR_LEN 0x5
#define _TYPE_VX_VIRT_ADDR typedef _Vx_UINT32 _Vx_VIRT_ADDR
#define _VX_CHAR_FROM_CONST(x) (char *)(x)
#define FIOSQUEEZE 15
#define FIORFLUSH 26
#define HID0 1008
#define _WRS_ARCH_HAS_NEW_KERNEL_LOCK 
#define EVENT_RTPPAUSE CLASS3_EVENT(86)
#define EVT_CTX_RTPINFO(evtId,OPTIONS,OWNERID,RTPID,NAME) do { if (ACTION_IS_SET) { EVENT_RTPNAME_T evt_ctx_rtpinfo; evt_ctx_rtpinfo.options = OPTIONS; evt_ctx_rtpinfo.ownerId = OWNERID; evt_ctx_rtpinfo.rtpId = RTPID; evt_ctx_rtpinfo.pRtpName = NAME; eventPointSwHandle (evtId, &evt_ctx_rtpinfo, sizeof evt_ctx_rtpinfo); } } while ((0))
#define SEM_NO_SYSTEM_VIEWER 0x200
#define VXB_PARAM_END_OF_LIST 0x0000
#define ENOEXEC 8
#define __INCttyLibh 
#define DLL_INIT(list) { ((DL_LIST *)(list))->head = NULL; ((DL_LIST *)(list))->tail = NULL; }
#define VM_PAGE_BLOCK_SIZE_GET() ((vmLibInfo.pVmBlockSizeGetRtn == NULL) ? (ERROR) : ((*vmLibInfo.pVmBlockSizeGetRtn) ()))
#define L1CSR1 1011
#define EOF (-1)
#define DELAYTIMER_MAX _POSIX_DELAYTIMER_MAX
#define RIO_CHANNEL_UNRESERVED 0
#define EPIC_RES45_INT_VEC (EPIC_RES45_INT_NUM + EPIC_VEC_IN_IRQ0)
#define M85XX_L2CTL_L2DO_BIT 22
#define _DEFINED_BOOL 
#define _PPC_TCR_ARE_U 0x0040
#define SEM_M_Q_GET 0x1
#define EPIC_IN_INT40_DES_REG (EPIC_CCSROFF + 0x10710)
#define M85XXRIO_RIWTARn(base,n) (CAST(VUINT32 *)(((char*)base) + 0x10D60 + (0x80 - (n*0x20))))
#define VX_COPROC4_TASK 0x08000000
#define MC68030 _VX_MC68030
#define INST_HIGH_MASK 0xffff0000
#define VXBAF_NON_OPTIMIZED_FLAGS (VXBAF_PREVENT_OPTIMIZATION | VXBAF_BYTE_ORDER_KNOWN | VXBAF_NOT_FIRST_BUS)
#define EVT_CTX_DISP_NOTEST(ARG1,PRI,NORMAL_PRI) do { EVENT_WIND_EXIT_DISPATCH_T evt_ctx_disp; evt_ctx_disp.taskIdNew = ARG1; evt_ctx_disp.priority = PRI; eventPointSwHandle ( (NORMAL_PRI > PRI ? EVENT_WIND_EXIT_DISPATCH_PI : EVENT_WIND_EXIT_DISPATCH), &evt_ctx_disp, sizeof evt_ctx_disp); } while ((0))
#define S_msgQLib_ILLEGAL_OPTIONS (M_msgQLib | 4)
#define VXB_MODE "mode"
#define M85XX_L2CTL_L2SLC_BIT 12
#define EPIC_SMSG_INT3_VEC_REG (EPIC_CCSROFF + 0x11c60)
#define WDB_REGS_SIZE 512
#define CACHE_CMD_LOAD_LOCK 0x06000000
#define __INCvxAtomicLibh 
#define MC68040 _VX_MC68040
#define TASK_QNODE_TO_PSCHEDINFO(node) ( taskSchedInfoGet(node) )
#define __LDBL_MAX_10_EXP__ 308
#define S_vxdbgLib_HOOK_ALREADY_EXISTS VXDBG_ERROR_TO_ERRNO(VXDBG_ERR_HOOK_ALREADY_EXISTS)
#define FIOFCNTL 62
#define VX_SEMAPHORE_SIZE 104
#define PCI1_DEV_ID 0x826010E3
#define __DBL_EPSILON__ 2.2204460492503131e-16
#define EVENT_BEGIN CONTROL_EVENT(0)
#define EPIC_DMA2_INT_NUM 6
#define EPIC_MSG_INT2_DES_REG (EPIC_CCSROFF + 0x11650)
#define SYM_LOCAL 0x40
#define _PPC_ESR_ST 0x00800000
#define NUM_RAWFS_FILES 5
#define EPIC_IN_INT21_VEC_REG (EPIC_CCSROFF + 0x104a0)
#define le16toh(x) bswap16((x))
#define _BSD_CLOCK_T_DEFINED_ 
#define M85XX_L2ERRADDR(x) (CAST(VUINT32 *)((x + 0x20E50)))
#define TRG_ACTION_SET { vxAtomicOr ((atomic_t*)&evtAction, 0x0001); }
#define _MMU_TLB_ATTR_E 0x00000001
#define _MMU_TLB_ATTR_G 0x00000002
#define _MMU_TLB_ATTR_I 0x00000008
#define _MMU_TLB_ATTR_M 0x00000004
#define MEDR_EXTENDED_ENABLE FALSE
#define _MMU_TLB_ATTR_W 0x00000010
#define VM_PAGE_UNLOCK(context,virtAddr) ((vmLibInfo.pVmPageUnlockRtn == NULL) ? (ERROR) : ((*vmLibInfo.pVmPageUnlockRtn) (context, virtAddr)))
#define ESR 62
#define SLL_FIRST(pList) ( (((SL_LIST *)pList)->head) )
#define M_dhcpsLib (112 << 16)
#define TOOL_FAMILY gnu
#define FIOCOMMITPOLICYSETFS 67
#define FREAD _FREAD
#define BSP_SERIAL_CHAN_GET bspSerialChanGet
#define ESRCH 3
#define EVENT_OBJ_MSGCSEND CLASS2_EVENT(38)
#define CACHE_USER_INVALIDATE(adrs,bytes) CACHE_DRV_INVALIDATE (&cacheUserFuncs, (adrs), (bytes))
#define EPIC_IRQSR0_MSG_INT(n) (EPIC_BIT(15-(n)) & EPIC_IRQSR0_MSG_INT_MSK)
#define _WRS_CONFIG_COMPONENT_WRLOAD 1
#define MII_CR_POWER_DOWN 0x0800
#define __wchar_t__ 
#define BOOT_NO_AUTOBOOT 0x01
#define SIO_MODEM_DSR 0x20
#define IPCOM_ENV_NATIVE 3
#define SHELL_MAX_SESSIONS -1
#define ERANGE 38
#define SEEK_END 2
#define M_nfsLib (46 << 16)
#define EPIC_SPUR_VEC_REG (EPIC_CCSROFF + 0x010e0)
#define TASK_KERNEL_EXEC_STACK_OVERFLOW_SIZE 4096
#define TRG_ACTION_IS_SET ( (evtAction&0x00ff) == 0x0001)
#define EVEC_TO_ENUM(excVec) ((int)(excVec))
#define EPIC_IN_INT21_DES_REG (EPIC_CCSROFF + 0x104b0)
#define _IFORM_XO_1 47
#define _PPC_ESF_PG_TBL_PTR (_PPC_ESF_XER + 4)
#define EPIC_MIVPR_VECTOR(vec) ((vec) & EPIC_MIVPR_VECTOR_MSK)
#define S_vmLib_NOALIAS_SUPPORT_NOT_INCLUDED (M_vmLib | 9)
#define SIO_MODEM_DTR 0x01
#define __INCtimerDevh 
#define ENOLCK 34
#define vxAtomicInc_inline vxAtomicInc
#define ENFILE 23
#define PPC_MAX_ARG_REGS 8
#define BOOT_USB_OPEN_ATTEMPTS 10
#define INCLUDE_SEM_LIB 
#define EPIC_OPT_CRIT_OFF (0x00000000 >> 16)
#define taskExit(exitCode) exit((exitCode))
#define EPIC_SMSG_INT5_DES_REG (EPIC_CCSROFF + 0x11cb0)
#define FSTAT_DIR 0040000
#define EPIC_RES11_INT_NUM 11
#define M85XXRIO_RIWAR_LOCAL_R_NO_SNOOP 4
#define SPIN_LOCK_ISR_DECL(x,flag) spinlockIsr_t x = { {-1, 0, 0, NULL, {{0}}}, flag}
#define _STDDEF_H_ 
#define EPIC_EX_INT2_VEC_REG (EPIC_CCSROFF + 0x10040)
#define Q_ATTRIBUTE_GET(qHead) (((Q_HEAD *)(qHead))->qPriv2)
#define WDB_ULIP_DEV "/dev/ulip14"
#define _VX_MIPSI64R2 48
#define VXB_EPICINTCTLR_DISABLE_INTS _VXB_EPICINTCTLR_DISABLE_INTS
#define be64toh(x) ((UINT64)(x))
#define PCI_OUTBOUND_TRANS_ADRS_REG3(base) CVPUINT32(base, 0x8c60)
#define ENOSYS 71
#define _WRS_CONFIG_OBJECT_MANAGEMENT 1
#define IVOR1 401
#define IVOR2 402
#define IVOR3 403
#define IVOR4 404
#define IVOR5 405
#define IVOR6 406
#define IVOR7 407
#define IVOR8 408
#define IVOR9 409
#define _PPC_MSR_BIT_CE 14
#define M85XX_L2CTL_L2IO_MSK 0x00200000
#define M85XXRIO_ROWAR_RDTYPE_ATOMIC_SET 0xe
#define M_rarpLib (127 << 16)
#define MMU_I_ADDR_TRANS 0
#define PCI_REQUEST_LEVEL 0x3
#define _PARM_UTS_RELEASE_MAX 64
#define _PPC_L1CFG_CARCH_V(x) (x >> 30)
#define _MMU_TLB_SZ_16K 0x00000200
#define _MMU_TLB_SZ_16M 0x00000700
#define SYM_ABS 0x2
#define MII_AN_FAIL 0x10
#define _WRS_CPU_INDEX_GET() 0
#define VXB_DEVID_DEVICE 0
#define _PARM_STACK_GROWS_UP 1
#define DDR_SDRAM_INTERVAL 0x124
#define MMU_STATE_WRITABLE_NOT 0x00000000
#define EPIC_MAX_SMSG_SHARED_IRQS 32
#define _PPC_MSR_BIT_DE 22
#define VXB_BUSID_USB_HOST_UHCI 13
#define _DBCR1_IAC2ER 0x03000000
#define _PPC_MSR_BIT_DS 27
#define M85XXRIO_ROWAR_RDTYPE_ATOMIC_DEC 0xd
#define M_alarmLib (153 << 16)
#define EVT_OBJ_STR_2(OBJ,CLASS,evtId,ARG1,ARG2,LENGTH,STRING) do { if (ACTION_IS_SET) { EVT_OBJ_STR_ARGS_2_T evt_obj_str_args_2; evt_obj_str_args_2.evt_obj_str.objId = OBJ; evt_obj_str_args_2.evt_obj_str.classId = CLASS; evt_obj_str_args_2.evt_obj_str.pData = STRING; evt_obj_str_args_2.evt_obj_str.length = LENGTH; evt_obj_str_args_2.args [0] = (int)ARG1; evt_obj_str_args_2.args [1] = (int)ARG2; eventPointSwHandle (evtId, &evt_obj_str_args_2, sizeof evt_obj_str_args_2); } } while ((0))
#define EVENT_SALCALL_SENDREQ CLASS3_EVENT(97)
#define DEFAULT_BEATS_TO_WAIT 5
#define CACHE_FLUSH_LOAD_INIT (CACHE_FLUSH_LOAD_ADRS + _CPU_CACHE_ALIGN_SIZE)
#define M85XXRIO_RxWAR_SIZE_16MB 25
#define _INCmot85xxPcih 
#define SHELL_STACK_SIZE (0x10000)
#define va_arg(v,l) __builtin_va_arg(v,l)
#define STORE_ABS_SYMBOLS FALSE
#define INCLUDE_JOB_TASK 
#define MMU_ATTR_SUP_IO (MMU_ATTR_SUP_RW | MMU_ATTR_CACHE_IO)
#define EPIC_CISR1_IN_INT(n) EPIC_BIT(31-(n))
#define SEM_MUT_OPTIONS_MASK (SEM_BIN_OPTIONS_MASK | SEM_DELETE_SAFE | SEM_INVERSION_SAFE)
#define WIND_TCB_PG_TBL_PTR (WIND_TCB_REGS + REG_SET_PG_TBL_PTR)
#define MIPSI32R2 _VX_MIPSI32R2
#define HUPCL 0x10
#define CACHE_DRV_INVALIDATE(pFuncs,adrs,bytes) (((pFuncs)->invalidateRtn == NULL) ? OK : ((pFuncs)->invalidateRtn) (DATA_CACHE, (adrs), (bytes)))
#define USER_I_CACHE_ENABLE 
#define _ARCH_va_list typedef char *va_list
#define SIO_ERROR_DISCONNECT 5
#define INCLUDE_L2_CACHE 
#define Q_PRI_HEAP qPriHeapClassId
#define SYS_MODEL_UNKNOWN "Freescale Unknown processor"
#define MMU_STATE_MASK_MEM_COHERENCY 0x00000004
#define VX_FP_TASK VX_COPROC1_TASK
#define PPC32 _VX_PPC32
#define INCLUDE_IPNET 
#define MMU_RPN_SHIFT 12
#define VXB_INTR_PRIO_FORCE 0x8000
#define ENOTSUP 35
#define S_mmulib_LOCK_REQUIRED (M_mmuLib | 16)
#define _IFORM_X_3 13
#define PCI_MEM2LOCAL(x) (((UINT32)x - PCI_MEM_ADRS) + CPU_PCI_MEM_ADRS)
#define R_OK 4
#define BOOT_TARGET_ADDR_LEN 50
#define _EXC_INFO_CR 0x020
#define OK 0
#define RLIMIT_FSIZE 1
#define PPC555 _VX_PPC555
#define STACK_ADRS _romInit
#define _DBCR0_IAC1_U 0x0080
#define WIND_OBJ_INSTRUMENTED 0x04
#define CLOCKS_PER_SEC sysClkRateGet()
#define I80386 _VX_I80386
#define MIN_SYSCALL_ID 21000
#define EVT_OBJ_TASKSPAWN(evtId,TID,PRI,STACKSIZE,ENTRYPT,OPT) do { if ( ACTION_IS_SET ) { EVENT_TASKSPAWN_T evt_obj_taskspawn; evt_obj_taskspawn.taskId = (TASK_ID)TID; evt_obj_taskspawn.priority = PRI; evt_obj_taskspawn.stackSize = STACKSIZE; evt_obj_taskspawn.entryPoint = ENTRYPT; evt_obj_taskspawn.options = OPT; eventPointSwHandle (evtId, &evt_obj_taskspawn, sizeof evt_obj_taskspawn); } } while ((0))
#define _PPC_L1CFG_PA_MASK 0x00100000
#define _FNBIO 0x1000
#define VXB_ACCESS_INT_CONNECT 0x0000000c
#define _VX_AM29030 51
#define PCI2_OUTBOUND_TRANS_ADRS_REG0(base) CVPUINT32(base, 0x9c00)
#define _EXC_OFF_INTR 0x00500
#define PCI2_OUTBOUND_TRANS_ADRS_REG4(base) CVPUINT32(base, 0x9c80)
#define MII_MASSLA_CTRL_1000T_FD 0x200
#define M85XX_RAPIDIO_ROWS3R18n(base,n) (CAST(VUINT32 *)(((char*)base) + 0x10C1C + ((n)*0x20)))
#define CACHE_BURST_DISABLE 0x80
#define M_umsLib (160 << 16)
#define TCR 340
#define SPRG5_R 261
#define EPIC_TSEC3TX_INT_NUM 15
#define SPRG5_W 277
#define _PPC_MSR_BIT_IS 26
#define FOPEN_MAX _PARM_FOPEN_MAX
#define MII_TECH_100BASE_TX_FD 0x0100
#define MAS0 624
#define MAS1 625
#define MAS2 626
#define MAS3 627
#define MAS4 628
#define MAS6 630
#define VME_AM_USR_SHORT_IO 0x29
#define AM29035 _VX_AM29035
#define INCLUDE_TYLIB 
#define MEM_PART_DEFAULT_OPTIONS (MEM_ALLOC_ERROR_LOG_FLAG | MEM_ALLOC_ERROR_EDR_WARN_FLAG | MEM_BLOCK_ERROR_LOG_FLAG | MEM_BLOCK_ERROR_EDR_WARN_FLAG | MEM_BLOCK_ERROR_SUSPEND_FLAG | MEM_BLOCK_CHECK)
#define MII_MASSLA_CTRL_1000T_HD 0x100
#define MPC85XX_I2C_CONTROL_REG_BCST 0x01
#define M85XXRIO_RxWAR_EN 0x80000000
#define MMU_PAGE_UNLOCK (*(mmuLibFuncs.mmuPageUnlock))
#define MMU_STATE_VALID_NOT 0x00000000
#define M85XXRIO_IFQDPAR(base) (CAST(VUINT32 *)(((char*)base) + 0x0106C))
#define PCI_ERROR_DATA_HIGH_CAPTURE_REG 0x8e1c
#define S_memLib_NO_PARTITION_DESTROY (M_memLib | 4)
#define MMU_ASID_MAX 255
#define EPIC_INT_ACT_HIGH 1
#define WDB_MAX_RESTARTS 5
#define _IFORM_VX_6 69
#define EPIC_RES31_INT_NUM 31
#define INCLUDE_SIO_UTILS 
#define INCLUDE_AIM_MMU_MEM_POOL_CONFIG 
#define EPIC_GTVPR_PRIORITY(p) (((p) << 16) & EPIC_GTVPR_PRIORITY_MSK)
#define SH _VX_SH
#define SHELL_FIRST_CONFIG NULL
#define _GCC_SIZE_T 
#define _IFLAG_604_SPEC 0x0040
#define _FDSYNC 0x10000
#define EVENTS_SEND_ONCE 0x01
#define EVENT_WIND_EXIT_DISPATCH_PI CLASS1_EVENT(4)
#define __INCb_struct__Timespech 
#define DBG_HARDWARE_BP 0
#define MAC_ADRS_LEN 6
#define L_SET SEEK_SET
#define MMU_STATE_SUP_R_USR_RW (MMU_STATE_SUP_R | _MMU_UR | _MMU_UW)
#define MMU_STATE_SUP_R_USR_RX (MMU_STATE_SUP_R | _MMU_UR | _MMU_UX)
#define _DEFINED_ssize_t 
#define EPIC_IN_INT44_VEC_REG (EPIC_CCSROFF + 0x10780)
#define DATAKEYS_MAX _PARM_DATAKEYS_MAX
#define VXB_ACCESS_REG_READ32 0x00000004
#define RIO_DIRECTION_OUTBOUND 0
#define L2SIZ_256KB 1
#define __INTMAX_MAX__ 9223372036854775807LL
#define M_hostLib (50 << 16)
#define VXDBG_BP_FUNCS_ARE_INSTALLED() (_func_vxdbgFuncs[VXDBG_BP_DELETE] != NULL)
#define EVENT_SALRUN_READREQ CLASS3_EVENT(102)
#define __size_t__ 
#define MPC85XX_I2C_STATUS_REG_MAAS 0x40
#define _WRS_UNLIKELY(x) __builtin_expect(!!(x), 0)
#define PCIEX_OUTBOUND_BASE_ADRS_REG1(base) CVPUINT32(base, 0xac28)
#define PCIEX_OUTBOUND_BASE_ADRS_REG3(base) CVPUINT32(base, 0xac68)
#define PCIEX_OUTBOUND_BASE_ADRS_REG4(base) CVPUINT32(base, 0xac88)
#define INCLUDE_VXMEMPROBE_INIT 
#define __FLT_DENORM_MIN__ 1.40129846e-45F
#define _WRS_CONFIG_TTY_DEV 1
#define MMU_ATTR_SUP_RO (MMU_ATTR_PROT_SUP_READ)
#define VXB_HANDLE_SWAP(x) ((x) + 48)
#define MMU_ATTR_SUP_RW (MMU_ATTR_PROT_SUP_READ | MMU_ATTR_PROT_SUP_WRITE)
#define _PPC_TSR_WRS_U 0x3000
#define EPIC_RES41_INT_NUM 41
#define _PC_CHOWN_RESTRICTED 4
#define IPCOM_SHELL_MAX_PATH 256
#define EPIC_GTVPR_VECTOR(vec) ((vec) & EPIC_GTVPR_VECTOR_MSK)
#define M_classLib (66 << 16)
#define _PPC_SPEFSCR_FRMC_RND_NR 0x00000000
#define EPIC_IN_INT4_DES_REG (EPIC_CCSROFF + 0x10290)
#define _PPC_TSR_WIS_U 0x4000
#define EVT_STR_CLASS_0(CLASS,evtId,LENGTH,STRING) do { if (ACTION_IS_SET) { EVT_STR_CLASS_0_T evt_str_class_0; evt_str_class_0.length = LENGTH; evt_str_class_0.string = STRING; evt_str_class_0.classId = CLASS; eventPointSwHandle (evtId, &evt_str_class_0, sizeof evt_str_class_0); } } while ((0))
#define _DBSR_UDE 0x40000000
#define HRFS_DEFAULT_COMMIT_PERIOD 5000
#define vxAtomicDec_inline vxAtomicDec
#define EPIC_VEC_OPTION_INV 28
#define FS_COMMIT_POLICY_AUTO 1
#define OPT_REG_READ8 0x01
#define EVENT_WINDTICKUNDELAY CLASS2_EVENT(18)
#define S_selectLib_NO_SELECT_CONTEXT (M_selectLib | 2)
#define MMU_STATE_MASK_PROTECTION 0x00003f00
#define EVT_OBJ_SIG(evtId,nParam,arg1,arg2) EVT_OBJ_SIG_N(evtId, nParam, arg1, arg2, 0, 0, 0)
#define M85XXRIO_ROWS2R18_OFFSET(n) (0x10C18 + ((n)*0x20))
#define VX_ALTIVEC_TASK VX_COPROC2_TASK
#define EPIC_MIVPR_PRIORITY(p) (((p) << 16) & EPIC_MIVPR_PRIORITY_MSK)
#define INT_WE_MASK(src,des) rlwinm des, src, 0, _PPC_MSR_BIT_WE+1, _PPC_MSR_BIT_WE-1
#define _IFORM_XFX_2 43
#define EPFNOSUPPORT 46
#define __INCarchPpch 
#define ENOPROTOOPT 42
#define INCLUDE_BOOT_FILESYSTEMS 
#define MII_TECH_ASM_PAUSE 0x0800
#define FIORMDIR 32
#define MMU_STATE_SUP_R_USR_WX (MMU_STATE_SUP_R | _MMU_UW | _MMU_UX)
#define EPIC_EIVPR_POLARITY(p) ((p) << 23)
#define __INCvxCpuh 
#define __INCtoolMacrosh 
#define EPIC_EIVPR_INTR_MSK EPIC_BIT(31)
#define _WRS_SPE_SUPPORT 1
#define SPINLOCK_TAKE_RECOVERY -2
#define PCIEX_OUTBOUND_BASE_ADRS_REG0(base) CVPUINT32(base, 0xac08)
#define _PPC_L1CFG_LA_MASK 0x00200000
#define HID1_RUN_UNDEF 
#define SIMNT _VX_SIMNT
#define VXBAF_BYTE_ORDER_KNOWN 0x00000200
#define MII_SR_AUTO_NEG 0x0020
#define MEDR_POOL_SIZE 0x100000
#define _DBCR2_DAC1ER 0x30000000
#define MMU_TRANS_TBL_CREATE (*(mmuLibFuncs.mmuTransTblCreate))
#define VXB_ACCESS_VOLREG_READ 0x0000000b
#define SHM_DEV_NAME "/shm"
#define PHYS_64BIT_ADDR(h,l) (((PHYS_ADDR)(h) << 32) + (l))
#define MMU_STATE_SUP_RWX_USR_RWX (MMU_STATE_SUP_RWX | _MMU_URWX)
#define PCICMD_VAL 0x00000006
#define _IFLAG_601_SPEC 0x0010
#define VXBAF_BYTE_SWAP_16(data) ((data) = ((((data) & 0xFF) << 8) | (((data) >> 8) & 0xFF)))
#define MPC85XX_I2C_DATA_REG (0x00010)
#define __INCtaskDefsh 
#define EPIC_IN_INT12_VEC_REG (EPIC_CCSROFF + 0x10380)
#define INCLUDE_WDB_EVENTPOINTS 
#define EPIC_CTASK_PRI0_REG (EPIC_CCSROFF + 0x20080)
#define RIO_OP_SUPPORTED_SWRITE 0x00040000
#define INST_BCLR _OP(19, 16)
#define _DBCR0_IDM_U 0x4000
#define FIOREADDIR 37
#define CACHE_USER_IS_READ_COHERENT() CACHE_DRV_IS_READ_COHERENT (&cacheUserFuncs)
#define INCLUDE_IPNET_USE_SOCK_COMPAT 
#define AUX_CLK_RATE ((CCB_FREQ / 16) / (1 << FIT_DIVIDER_TAP_18))
#define EPIC_IN_INT34_VEC_REG (EPIC_CCSROFF + 0x10640)
#define _DBCR1_IAC2US 0x0c000000
#define M85XX_L2CTL_L2BLKSIZ_BIT 26
#define EPIC_EX_INT9_DES_REG (EPIC_CCSROFF + 0x10130)
#define M85XXRIO_RIWBAR_BADDR(adrs) (adrs >> 12)
#define INCLUDE_WATCHDOGS 
#define _WRS_KERNEL_LOCK_OFFSET_flags (0x08 + _WRS_KERNEL_LOCK_ALIGN_tkt_ctr)
#define INCLUDE_MUX_COMMON 
#define _PPC_SPEFSCR_FRMC_RND_ZERO 0x00000001
#define _PARM_EXIT_FAILURE 1
#define ENOBUFS 55
#define TRG_CLASS2_INDEX 1
#define INCLUDE_FORMATTED_OUT_BASIC 
#define M_sigLib (51 << 16)
#define __FLT_MIN_10_EXP__ (-37)
#define PCI_ATTR_WS_512K 0x00000012
#define VXDBG_MEM_WRITE(pSrc,pDest,size) VXDBG_MEM_WIDTH_WRITE(pSrc, pDest, size, 0)
#define S_symLib_INVALID_SYMTAB_ID (M_symLib | 12)
#define _DBSR_DAC1W_U 0x0004
#define _WRS_KERNEL 1
#define _IFORM_EVX_1 91
#define _IFORM_EVX_2 92
#define _IFORM_EVX_4 94
#define _IFORM_EVX_5 95
#define _IFORM_EVX_7 97
#define _IFORM_EVX_8 98
#define _IFORM_EVX_9 99
#define _T_SIZE_ 
#define __INTMAX_TYPE__ long long int
#define SEM_EVENTSEND_ERR_NOTIFY 0x10
#define VME_AM_IS_EXT(addr) ((addr & 0xf0) == 0x00)
#define _WRS_CONFIG_RTP 1
#define EFAULT 14
#define EVENT_RTPKILL CLASS3_EVENT(83)
#define EVENT_MSGQCREATE CLASS3_EVENT(20)
#define _DEFINED_ino_t 
#define INCLUDE_ENV_VARS 
#define BOOT_DISABLE_MMU_BEFORE_ENTRY TRUE
#define _ARCH_LDBL_MAX_EXP 1024
#define EVENT_TASKNAME CONTROL_EVENT(3)
#define M85XXRIO_PLASCSR(base) (CAST(VUINT32 *)(((char*)base) + 0x00148 ))
#define M85XXRIO_HBDIDLCSR(base) (CAST(VUINT32 *)(((char*)base) + 0x00068 ))
#define _PPC_MSR_BIT_WE 13
#define _WRS_CONFIG_COMPONENT_IPNET 1
#define EPIC_IN_INT34_DES_REG (EPIC_CCSROFF + 0x10650)
#define MMU_TRANS_TBL_UNION (*(mmuLibFuncs.mmuTransTblUnion))
#define M85XX_L2CEWCR_E_MSK 0x80000000
#define S_mmuLib_TLB_LOCKED_PAGE (M_mmuLib | 7)
#define EPIC_CRIT_SUMM_REG0 (EPIC_CCSROFF + 0x01330)
#define S_mmuLib_NOT_CONTIGUOUS_ADDR (M_mmuLib | 10)
#define MMU_ATTR_PROT_SUP_READ 0x00000001
#define EWOULDBLOCK 70
#define _IFIELD_VA(x) ((0x001f0000 & x) >> 16)
#define __INCvmLibh 
#define ENOMEM 12
#define RIO_WPCSR_BUSY 0x08000000
#define SPE_OFFSET(x) (4*x)
#define MMU_ATTR_PROT_SUP_TO_USR(attr) (((attr) & MMU_ATTR_PROT_SUP_MSK) << 3)
#define _IFIELD_VB(x) ((0x0000f800 & x) >> 11)
#define IPCOM_USE_HW_CHECKSUM 
#define IPCOM_USE_JOB_QUEUE 
#define LAWAR_SIZE_4MB 0x00000015
#define EPIC_SMSG_INT7_DES_REG (EPIC_CCSROFF + 0x11cf0)
#define WDB_SPAWN_STACK_SIZE 0x5000
#define WIND_OBJ_NAME_DYNAMIC 0x01
#define INCLUDE_IO_REMOVABLE 
#define MII_PHY_FLAGS_ARE_SET(setBits) (pPhyInfo->phyFlags & (setBits))
#define RIO_OP_SUPPORTED_PWRITE 0x20000000
#define MEMBER_SIZE(structure,member) (sizeof (((structure *) 0) -> member))
#define __GNUC_MINOR__ 1
#define PPC860 _VX_PPC860
#define SPIN_LOCK_RESTRICT() spinLockRestrict()
#define INT_CONTEXT() ( intContext() )
#define EPIC_EX_INT4_VEC_REG (EPIC_CCSROFF + 0x10080)
#define TSR 336
#define SIO_KYBD_LED_SCR 4
#define MMU_ATTR_VALID_NOT 0x00000000
#define SIO_KYBD_MODE_UNICODE 3
#define __INCmsgQLibPh 
#define INCLUDE_AIM_MMU_PT_PROTECTION 
#define INCLUDE_ANSI_STDIO 
#define WV_INSTRUMENTATION _WRS_CONFIG_SV_INSTRUMENTATION
#define vxAtomicOr_inline vxAtomicOr
#define EPIC_MIVPR_INTR_ACTIVE EPIC_BIT(30)
#define M85XXRIO_PEFCAR(base) (CAST(VUINT32 *)(((char*)base) + 0x0010))
#define RIO_CHANNEL_RESERVED (UINT32)-1
#define PCI2_OUTBOUND_ATTR_REG1(base) CVPUINT32(base, 0x9c30)
#define M85XX_RAPIDIO_ROWS2R18n(base,n) (CAST(VUINT32 *)(((char*)base) + 0x10C18 + ((n)*0x20)))
#define _IFORM_A_3 52
#define _IFLAG_VRC 0x0200
#define EVENT_ISR_INFO CONTROL_EVENT(9)
#define tsecVxbEnd1Num NELEMENTS(tsecVxbEnd1Resources)
#define EPIC_PCI1_INT_VEC (EPIC_PCI1_INT_NUM + EPIC_VEC_IN_IRQ0)
#define MAP _VX_MAP
#define FLASH_WIDTH 2
#define SIO_KYBD_LED_SET 0x1013
#define SPIN_LOCK_TASK_GIVE(x) (spinLockTaskGive (x) )
#define OBJ_TABLE_INDEX_GET(objHdl) (((objHdl) & OBJ_HANDLE_TABLE_MASK) >> 8)
#define MMU_ATTR_USR_TEXT_W (MMU_ATTR_USR_RWX | MMU_ATTR_SUP_TEXT_W)
#define __INCsemLibCommonh 
#define EPIC_IN_INT43_VEC_REG (EPIC_CCSROFF + 0x10760)
#define INCLUDE_WDB 
#define _WRS_CONSTRUCTOR(rtn,lvl) __attribute__((constructor(lvl))) void _STI__ ##lvl ##__ ##rtn (void)
#define INCLUDE_ANSI_TIME 
#define MEM_ROUND_UP(x) ROUND_UP(x, _ALLOC_ALIGN_SIZE)
#define MII_1000MBS 1000000000
#define EPIC_IN_INT15_DES_REG (EPIC_CCSROFF + 0x103f0)
#define MEM_BLOCK_ERROR_LOG_AND_SUSPEND 0x08
#define WDB_TASK_PRIORITY 3
#define M85XXRIO_RIWAR_LOCAL_W_ALLOC_L2 6
#define INET 1
#define PCIEX_OUTBOUND_BASE_ADRS_REG2(base) CVPUINT32(base, 0xac48)
#define VX_TASK_PRIORITY_MAX 255
#define PCI2_OUTBOUND_ATTR_REG4(base) CVPUINT32(base, 0x9c90)
#define PCI_CFG_AUTO 1
#define LNLSB(x) (((x) >> 8) & 0xff)
#define _TIMESPEC_DEFINED 
#define PCI_PREFETCHABLE 0x20000000
#define VME_AM_STD_USR_ASCENDING 0x3b
#define M85XX_L2CTL_L2I_MSK 0x40000000
#define _VX_STACK_DIR _ARCH_STACK_DIR
#define INCLUDE_DDR_SDRAM 
#define CORE_DUMP_RTP_ZLIB_COMPRESSION_LEVEL 9
#define EPIC_SMSG_INT0_VEC_REG (EPIC_CCSROFF + 0x11c00)
#define M85XX_L2CTL_L2INTDIS_BIT 19
#define DBCR2 310
#define S_vxdbgLib_NO_HW_REGS VXDBG_ERROR_TO_ERRNO(VXDBG_ERR_NO_HW_REGS)
#define CACHE_NO_WRITEALLOCATE 0x08
#define MII_CR_RESTART 0x0200
#define _PPC_ESR_PTR 0x02000000
#define V7 1
#define _WRS_CONFIG_ENABLE_TOOL2 1
#define INST_B _OP(18, 0)
#define _EXC_PROG_SRR1_TRAP 0x00020000
#define RIO_FEATURES_EXTADDR_MASK 0xe000
#define SYSFLG_SYS_MODE_DEBUG 0x400
#define AIM_MMU_INIT_PT_NUM 0x40
#define RIO_OP_SUPPORTED_ACLEAR 0x08000000
#define I2C_ERROR_CYCLE_ACKOUT 6
#define MPC85XX_I2C_STATUS_REG_MASK 0xFF
#define _DBCR0_DAC2R_U 0x0002
#define _PPC_L1CSR_PIE 0x00008000
#define PPCEC603 _VX_PPCEC603
#define _PPC_ESR_DLK_U 0x0020
#define LNMSB(x) (((x) >> 16) & 0xff)
#define ENOENT 2
#define SPY_TASKS_MAX 200
#define M_pspLib (163 << 16)
#define MC680X0 _VX_MC680X0
#define _IFLAG_AV_SPEC 0x0400
#define __INCexcPcLibh 
#define M85XX_LTEAR(base) (CAST(VUINT32 *)((base) + 0x50C0))
#define M85XXRIO_ROWBARn(base,n) (CAST(VUINT32 *)(((char*)base) + 0x10C08 + ((n)*0x20)))
#define reg_fp fpReg
#define VXBAF_OPERATION_MASK 0x0000FFFF
#define EXC_VEC_LOW 0x00000
#define FLASH1_ADRS_MASK 0xfc000000
#define EPIC_EIDR_CRIT_INT EPIC_BIT(30)
#define BOOT_NORMAL 0x00
#define M85XXRIO_LCSBA1CSR(base) (CAST(VUINT32 *)(((char*)base) + 0x0005C ))
#define N_SIO_CHANNELS 2
#define FIORBUFSET 24
#define _PPC_SPEFSCR_FOVFE 0x00000004
#define IPCOM_WV_INSTRUMENTATION 
#define EVENT_WIND_EXIT_DISPATCH CLASS1_EVENT(2)
#define SHELL_REMOTE_CONFIG NULL
#define ETIMEDOUT 60
#define INCLUDE_STDIO 
#define _VX_PPC405 2001
#define RTP_ID_TO_PID(rtpId) (((RTP_ID)rtpId)->rtpHandleId)
#define M_shlLib (191 << 16)
#define EPIC_IPI_VEC_REG_INTERVAL 0x10
#define MAX_TASK_ARGS 10
#define FREQ_533_MHZ 533333333
#define M85XX_L2ERRCTL(x) (CAST(VUINT32 *)((x + 0x20E58)))
#define _WRS_CONFIG_TASK_SWITCH_HOOKS 1
#define RIO_CHANNEL_DOORBELL 5
#define _FSYNC 0x2000
#define M_tlsLib (192 << 16)
#define M85XXRIO_ROWAR_RDTYPE_ATOMIC_CLR 0xf
#define MPC85XX_I2C_STATUS_REG_RXAK 0x01
#define DRV_SIO_NS16550 
#define Q_REMOVE(pQHead,pQNode) (*(((Q_HEAD *)(pQHead))->pQClass->removeRtn)) (((Q_HEAD *)(pQHead)), ((Q_NODE *)(pQNode)))
#define MSG_Q_PRIORITY 0x01
#define EPIC_GT_VEC_REG_INTERVAL 0x40
#define S_memLib_INVALID_ADDRESS (M_memLib | 7)
#define WIND_TCB_R10 (WIND_TCB_REGS + REG_SET_GR(10))
#define WIND_TCB_R12 (WIND_TCB_REGS + REG_SET_GR(12))
#define WIND_TCB_R13 (WIND_TCB_REGS + REG_SET_GR(13))
#define MPC85XX_I2C_CONTROL_REG_RSTA 0x04
#define WIND_TCB_R16 (WIND_TCB_REGS + REG_SET_GR(16))
#define MMU_ATTR_VALID_GET(attr) ((attr) & MMU_ATTR_VALID_MSK)
#define WIND_TCB_R19 (WIND_TCB_REGS + REG_SET_GR(19))
#define SYMLINK_MAX 0
#define _VX_TRON 30
#define _EXC_OFF_RES2 0x00b00
#define WV_EVT_PROTO_REV_1_0_FCS 1
#define _WRS_IOCHAR UCHAR
#define EVENT_RTPSUSPEND CLASS3_EVENT(85)
#define _MMU_TLB_SZ_4K 0x00000100
#define EVENTS_INTERRUPTIBLE 0x01
#define SIO_OPEN 0x100A
#define WIND_TCB_R21 (WIND_TCB_REGS + REG_SET_GR(21))
#define WIND_TCB_R23 (WIND_TCB_REGS + REG_SET_GR(23))
#define WIND_TCB_R24 (WIND_TCB_REGS + REG_SET_GR(24))
#define WIND_TCB_R25 (WIND_TCB_REGS + REG_SET_GR(25))
#define WIND_TCB_R26 (WIND_TCB_REGS + REG_SET_GR(26))
#define WIND_TCB_R27 (WIND_TCB_REGS + REG_SET_GR(27))
#define WIND_TCB_R28 (WIND_TCB_REGS + REG_SET_GR(28))
#define WIND_TCB_R29 (WIND_TCB_REGS + REG_SET_GR(29))
#define _GCC_PTRDIFF_T 
#define PCI2_XINT1_LVL 0xb
#define TIP_CONFIG_STRING ""
#define _EXC_INFO_DSISR 0x080
#define _PARM_UTS_MACHINE_MAX 64
#define SHELL_SECURE FALSE
#define M85XXRIO_PWDCSR(base) (CAST(VUINT32 *)(((char*)base) + 0x00044 ))
#define SERIAL_RAPIDIO 
#define FIOUNMOUNT 39
#define _VX__FLTFUNCPTR_DEFINED 
#define S_mmuLib_NOT_GLOBAL_PAGE (M_mmuLib | 15)
#define MPC85XX_I2C_CONTROL_REG_TXAK 0x08
#define M_vxCpuLib (202 << 16)
#define WIND_TCB_R30 (WIND_TCB_REGS + REG_SET_GR(30))
#define WIND_TCB_R31 (WIND_TCB_REGS + REG_SET_GR(31))
#define MMU_D_ADDR_TRANS 1
#define SIO_ERROR_UNKNWN 7
#define OPT_REG_WRITE_READ_BACK_8 0x09
#define _VX_PPC440 2003
#define BOOT_PASSWORD_LEN 20
#define _WRS_CONFIG_USR_INET4_ONLY 1
#define MII_ANAR_100T_4 0x0200
#define IPCOM_ENV_IPCOM 2
#define EVENT_MEMFREE CLASS3_EVENT(31)
#define S_vxdbgLib_ERR_INIT VXDBG_ERROR_TO_ERRNO(VXDBG_ERR_INIT)
#define S_eventLib_ALREADY_REGISTERED (M_eventLib | 0x0003)
#define ___int_ptrdiff_t_h 
#define EVENT_RTP_NORMAL_STATE VXEV25
#define RFI_OPCODE 0x4c000064
#define FIOISATTY 20
#define PCI_ERROR_ENABLE_REG 0x8e08
#define EPIC_IPI_0_VEC_REG (EPIC_CCSROFF + 0x010a0)
#define EPIC_SR_OUT_DB1_INT_VEC (EPIC_SR_OUT_DB1_INT_NUM + EPIC_VEC_IN_IRQ0)
#define __INCmmuLibh 
#define _WRS_VXWORKS_5_X 
#define EPIC_TSEC4RX_INT_VEC (EPIC_TSEC4RX_INT_NUM + EPIC_VEC_IN_IRQ0)
#define VX_USER_MODE 0x0000
#define S_objLib_OBJ_OPERATION_UNSUPPORTED (M_objLib _WRS_BIT_OR 11)
#define SPIN_LOCK_BUSY 1
#define VXB_ACCESS_VOLREG_WRITE 0x0000000a
#define STATEMASK_TO_INDEX(statemask) ((MMU_ATTR_MSK_ID_GET(statemask)) >> MMU_ATTR_MSK_INDEX_SHIFT)
#define M85XX_L2CTL_L2SRAM_BIT 16
#define EVT_TASK_1(evtId,ARG) do { if ( ACTION_IS_SET ) { EVT_TASK_1_T evt_task_1; evt_task_1.args [0] = (int)ARG; eventPointSwHandle(evtId, &evt_task_1, sizeof evt_task_1); } } while ((0))
#define EVT_TASK_2(evtId,ARG1,ARG2) do { if ( ACTION_IS_SET ) { EVT_TASK_2_T evt_task_2; evt_task_2.args [0] = (int)ARG1; evt_task_2.args [1] = (int)ARG2; eventPointSwHandle(evtId, &evt_task_2, sizeof evt_task_2); } } while ((0))
#define EVT_TASK_3(evtId,ARG1,ARG2,ARG3) do { if ( ACTION_IS_SET ) { EVT_TASK_3_T evt_task_3; evt_task_3.args [0] = (int)ARG1; evt_task_3.args [1] = (int)ARG2; evt_task_3.args [2] = (int)ARG3; eventPointSwHandle(evtId, &evt_task_3, sizeof evt_task_3); } } while ((0))
#define EPIC_TSEC3TX_INT_VEC (EPIC_TSEC3TX_INT_NUM + EPIC_VEC_IN_IRQ0)
#define WDB_COMM_MIPC 10
#define _PPC_SPEFSCR_FUNF 0x00000200
#define M85XX_LTEIR(base) (CAST(VUINT32 *)((base) + 0x50B8))
#define INCLUDE_SECONDARY_TSEC_END 
#define I2C_ERROR_CYCLE_STOP 2
#define VM_STATE_MEM_COHERENCY MMU_ATTR_CACHE_COHERENCY
#define _ARCH_STACK_DIR _PARM_STACK_GROWS_DOWN
#define _PPC_MSR_CE 0x00020000
#define EPIC_IN_INT35_VEC_REG (EPIC_CCSROFF + 0x10660)
#define __INCobjLibCommonh 
#define VXDBG_BP_DELETE(bpInfo,retVal) retVal = _func_vxdbgFuncs[VXDBG_BP_DELETE] (bpInfo)
#define __WCHAR_T 
#define _WRS_ADJUST_PC_AFTER_SW_BP(pRegs) 
#define O_DSYNC _FDSYNC
#define MII_MF_PREAMBLE 0xffffffff
#define MPC85XX_I2C_STATUS_REG (0x0000c)
#define I80X86 _VX_I80X86
#define X_OK 1
#define EVENT_ANY_EVENT CONTROL_EVENT(48)
#define _VX_SIMLINUX 190
#define _WRS_CONFIG_SM_OBJ 1
rm D:/WindRiver6.8/sbc8548-t9/SBC8548M-S9_vxWorks/ipcom_ipdomain
In file included from sysLib.c:477:
hwconf.c:142:2: error: #error our tsec network driver must use TSEC_MDIO
D:\WindRiver6.8\utilities-1.0\x86-win32\bin\make.exe: *** [headerMacros] Error 1
"make headerMacros BSP2PRJ=TRUE TOOL_OPTIONS_FILES_DIR=D:/WindRiver6.8/sbc8548-t9/SBC8548M-S9_vxWorks TOOL=e500v2gnu VSB_DIR=D:/WindRiver6.8/vxworks-6.8/target/lib" failed

!STACK 0
com.windriver.osconfig.tcl.JTclException: Can not create project file D:\WindRiver6.8\sbc8548-t9\SBC8548M-S9_vxWorks\SBC8548M-S9_vxWorks.wpj
	at com.windriver.ide.osconfig.core.model.tcl.TclProjectManagement.createNewProject(TclProjectManagement.java:236)
	at com.windriver.ide.osconfig.ui.screen.BIPWizard$1CreateProjectRunnable.run(BIPWizard.java:446)
	at org.eclipse.jface.operation.ModalContext$ModalContextThread.run(ModalContext.java:121)

!ENTRY org.eclipse.cdt.core 1 0 2016-07-26 08:51:35.546
!MESSAGE Indexed 'SBC8548M-S9_vxWorks' (0 sources, 13 headers) in 0.08 sec: 125 declarations; 290 references; 0 unresolved inclusions; 0 syntax errors; 0 unresolved names (0.00%)

!ENTRY com.windriver.ide.osconfig.core 4 0 2016-07-26 08:51:35.827
!MESSAGE Can not create project file D:\WindRiver6.8\sbc8548-t9\SBC8548M-S9_vxWorks\SBC8548M-S9_vxWorks.wpj
!STACK 0
com.windriver.osconfig.tcl.JTclException: Can not create project file D:\WindRiver6.8\sbc8548-t9\SBC8548M-S9_vxWorks\SBC8548M-S9_vxWorks.wpj
	at com.windriver.ide.osconfig.core.model.tcl.TclProjectManagement.createNewProject(TclProjectManagement.java:236)
	at com.windriver.ide.osconfig.ui.screen.BIPWizard$1CreateProjectRunnable.run(BIPWizard.java:446)
	at org.eclipse.jface.operation.ModalContext$ModalContextThread.run(ModalContext.java:121)

!ENTRY com.windriver.ide.osconfig.core 4 0 2016-07-26 08:51:35.828
!MESSAGE Output of D:\WindRiver6.8\vxworks-6.8\host\x86-win32\bin\vxprj.bat create D:/WindRiver6.8/sbc8548-t9/SB8548M-s9_boot/wrSbc8548 e500v2gnu D:/WindRiver6.8/sbc8548-t9/SBC8548M-S9_vxWorks/SBC8548M-S9_vxWorks.wpj:

Creating Project ...
{parsing the BSP Makefile...}
{extract user defined rules from BSP Makefile...}
{creating the project file...}
{creating a default build spec for PPC32 e500v2gnu ...}
{creating a component configuration...}
In file included from sysLib.c:477:
hwconf.c:142:2: error: #error our tsec network driver must use TSEC_MDIO
D:\WindRiver6.8\utilities-1.0\x86-win32\bin\make.exe: *** [headerMacros] Error 1
Project creation failed : #define EPIC_INT_ACK0_REG (EPIC_CCSROFF + 0x200a0)
#define M_objLib (61 << 16)
#define RIO_FEATURES_SWITCH 0x0008
#define S_objLib_OBJ_UNAVAILABLE (M_objLib _WRS_BIT_OR 2)
#define EPIC_IN_INT47_VEC_REG (EPIC_CCSROFF + 0x107e0)
#define __DBL_MIN_EXP__ (-1021)
#define M85XXRIO_ODRETCR(base) (CAST(VUINT32 *)(((char*)base) + 0x1342C))
#define EMULTIHOP 86
#define EVENT_INT_EXIT (MIN_INT_ID - 1)
#define S_memLib_INVALID_NBYTES (M_memLib | 2)
#define INCLUDE_HOOKS 
#define WIND_TCB_CTR (WIND_TCB_REGS + REG_SET_CTR)
#define MEM_BLOCK_ERROR_EDR_FATAL_FLAG 0x1000
#define EVENT_IOCLOSE CLASS3_EVENT(52)
#define TASK_KERNEL_EXEC_STACK_UNDERFLOW_SIZE 4096
#define EPIC_EX_INT2_DES_REG (EPIC_CCSROFF + 0x10050)
#define _ARCH_SUPPORTS_PROTECT_INTERRUPT_STACK 
#define CLASS_LIST_ADD(list,node) dllAdd (list, node)
#define VX_SMP_INTLOCKED 0x0001
#define M85XX_RAPIDIO_ROWS1R18n(base,n) (CAST(VUINT32 *)(((char*)base) + 0x10C14 + ((n)*0x20)))
#define INST_STWU_SP 0x94210000
#define VME_AM_CSR 0x2f
#define VXB_LOCK_DECL(x) struct vxbLock x = { FALSE, NULL, 0 }
#define MSB(x) (((x) >> 8) & 0xff)
#define VXB_INTR_TRIG_RISING_EDGE (VXB_INTR_TRIG_POS | VXB_INTR_TRIG_EDGE)
#define VXEV_RESERVED 0xff000000
#define _DBCR0_ICMP_U 0x0800
#define EVENT_SEMDELETE CLASS3_EVENT(10)
#define M_hashLib (58 << 16)
#define MSW(x) (((x) >> 16) & 0xffff)
#define vxAtomicClear_inline vxAtomicClear
#define TRG_CLASS_2_ON 0x10000010
#define I2C_CYCLE_STOP(x) i2cCycleMpc85xxStop(x)
#define TLB1CFG 689
#define _WRS_CONFIG_TASK_CREATE_HOOKS 1
#define _WRS_CONFIG_USRSOURCE 1
#define M_netBufLib (115 << 16)
#define WR_ENET1 0xA0
#define M85XXRIO_ODPR(base) (CAST(VUINT32 *)(((char*)base) + 0x11018))
#define EPIC_IN_INT47_DES_REG (EPIC_CCSROFF + 0x107f0)
#define _VX_ARMARCH6_T 1124
#define WR_ENET2 0x1E
#define SIO_ERROR_UFLOW 3
#define _EXC_OFF_DATA 0x00300
#define INCLUDE_ANSI_MATH 
#define PHY_100BASE_TX_FDX 0x03
#define VXB_BUSID_LOCAL 1
#define INCLUDE_WDB_EVENTS 
#define EVENT_MSGSREPLY CLASS3_EVENT(40)
#define _T_WCHAR_ 
#define IPCOM_FILE_IPCOM 2
#define EPIC_MIDR_P1_INT EPIC_BIT(1)
#define INCLUDE_FS_MONITOR 
#define INCLUDE_ANSI_ASSERT 
#define _PPC_ESF_DSISR (_PPC_ESF_DAR + _PPC_REG_SIZE)
#define S_taskLib_ILLEGAL_STACK_INFO (M_taskLib | 113)
#define EPIC_IN_VEC_REG_INTERVAL 0x20
#define FIOUPDATE 65
#define F_CNVT 12
#define VX_COPROC6_TASK 0x20000000
#define WIND_TCB_P2 WIND_TCB_R5
#define EPIC_IN_INT28_VEC_REG (EPIC_CCSROFF + 0x10580)
#define _ARCH_FLT_MANT_DIG 24
#define M_qPriMaskLib (130 << 16)
#define COLDFIRE _VX_COLDFIRE
#define EPIC_TM_B2_VEC_REG (EPIC_CCSROFF + 0x021a0)
#define _WRS_CONFIG_COMPONENT_VXTESTV2 1
#define CORE_DUMP_MAX_HOOKS 10
#define _IFORM_SC_1 2
#define CSRR0 58
#define CSRR1 59
#define ALIGN_STACK _VX_ALIGN_STACK
#define _BSD_SIZE_T_DEFINED_ 
#define _DATA_CACHE 1
#define MMU_ATTR_SUP_DATA (MMU_ATTR_SUP_RW)
#define INCLUDE_IPAIP 
#define PCI_ERROR_ADRS_CAPTURE_REG 0x8e10
#define S_iosLib_INVALID_FILE_DESCRIPTOR EBADF
#define EPIC_RES35_INT_NUM 35
#define __INCb_ino_th 
#define PVR_VALUE 0x80210030
#define __CHAR_BIT__ 8
#define _VOP(opcd,xo) ((opcd << 26) + xo)
#define SYM_MASK_ALL 0xff
#define Q_PRI_LIST qPriListClassId
#define INST_STW_SP 0x90010000
#define MMU_STATE_MASK_VALID 0x80000000
#define M85XXRIO_IDQEPAR(base) (CAST(VUINT32 *)(((char*)base) + 0x13474 ))
#define _POSIX_TIMER_MAX 32
#define _VX_ALIGN_MEMORY _ARCH_ALIGN_MEMORY
#define METHOD_DECL(NAME) IMPORT char NAME ##_desc[];
#define SHRT_MAX 32767
#define MIN_INT_ID 102
#define VXB_REG_IO 0x00000001
#define _VX_ARM810 123
#define VM_STATE_WBACK MMU_ATTR_CACHE_COPYBACK
#define ROOT_STACK_SIZE (24000)
#define EPIC_IN_INT28_DES_REG (EPIC_CCSROFF + 0x10590)
#define TOOL_HEADER(file) TOOL_HDR(_VX_TOOL_FAMILY,file)
#define _FOPEN (-1)
#define VXB_ACCESS_REG_READ8 0x00000002
#define _WRS_ALIGNOF(x) __alignof__(x)
#define EACCES 13
#define VME_AM_EXT_SUP_PGM 0x0e
#define EVENT_RTPSIGWRAPPER CLASS3_EVENT(92)
#define MII_MF_OP_LEN 0x2
#define MII_SR_EXT_STS 0x0100
#define NONE (-1)
#define EPIC_L2CACHE_INT_VEC (EPIC_L2CACHE_INT_NUM + EPIC_VEC_IN_IRQ0)
#define VM_CTX_MASK_DELETE 0x2
#define EVT_CTX_NODISP(TASKID,PRI,PRI_NORMAL) do { if (ACTION_IS_SET) { EVENT_WIND_EXIT_NODISPATCH_T evt_ctx_nodisp; evt_ctx_nodisp.taskId = TASKID; eventPointSwHandle((PRI_NORMAL > PRI ? EVENT_WIND_EXIT_NODISPATCH_PI : EVENT_WIND_EXIT_NODISPATCH), &evt_ctx_nodisp, sizeof evt_ctx_nodisp); } } while ((0))
#define S_objLib_OBJ_INVALID_ARGUMENT (M_objLib _WRS_BIT_OR 17)
#define _PPC_MMUCSR0_IL1MMU_FI 0x00000010
#define _PPC_MSR_WE 0x00040000
#define _STACK_ALIGN_SIZE _CPU_STACK_ALIGN_SIZE
#define EDESTADDRREQ 40
#define _PPC_MAS0_TLBSEL_MASK 0x30000000
#define M85XXRIO_OMR(base) (CAST(VUINT32 *)(((char*)base) + 0x11000))
#define INCLUDE_IO_POSIX 
#define EVENT_SIGNAL CLASS3_EVENT(24)
#define __sputc(c,p) ((HANDLE_VERIFY(p, handleTypeFile) != OK) ? (EOF) : (--(p)->_w < 0 ? (p)->_w >= (p)->_lbfsize ? (*(p)->_p = (c)), *(p)->_p != '\n' ? (int)*(p)->_p++ : __swbuf('\n', p) : __swbuf((int)(c), p) : (*(p)->_p = (c), (int)*(p)->_p++)))
#define MMU_PAGE_MAP (*(mmuLibFuncs.mmuPageMap))
#define PARENB 0x40
#define FIOCOMMITPERIODSETFS 69
#define EVT_OBJ_SM_MSGQ(EVTID,ARG1,ARG2,ARG3,ARG4,ARG5,NPARAMS) do { if ( ACTION_IS_SET ) { EVT_SM_MSGQ_T evt_sm_msgq; evt_sm_msgq.args [0] = (int)ARG1; evt_sm_msgq.args [1] = (int)ARG2; evt_sm_msgq.args [2] = (int)ARG3; evt_sm_msgq.args [3] = (int)ARG4; evt_sm_msgq.args [4] = (int)ARG5; evt_sm_msgq.nParams = NPARAMS; eventPointSwHandle(EVTID, &evt_sm_msgq, sizeof evt_sm_msgq); } } while ((0))
#define KERNEL_LOCK_OBJ_UNLOCK(classId,lockLevel) do { KERNEL_LOCK(); OBJ_UNLOCK(classId,lockLevel); } while ((0))
#define INCLUDE_GENERICPHY 
#define KERNEL_LOCK_OWNED_BY_ME() (kernelLockOwnedByMe())
#define L2SRAM_ADDR 0x7FF80000
#define S_objLib_OBJ_NOT_FOUND (M_objLib _WRS_BIT_OR 16)
#define MMU_ATTR_MSK_INDEX_SHIFT 5
#define MIPS _VX_MIPS
#define stderr (*__stderr())
#define _PPC_ESF_T10 _PPC_ESF_R24
#define _PPC_ESF_T11 _PPC_ESF_R25
#define _PPC_ESF_T12 _PPC_ESF_R26
#define _PPC_ESF_T13 _PPC_ESF_R27
#define _PPC_ESF_T14 _PPC_ESF_R28
#define _PPC_ESF_T15 _PPC_ESF_R29
#define _PPC_ESF_T16 _PPC_ESF_R30
#define _PPC_ESF_T17 _PPC_ESF_R31
#define STD_IN 0
#define _VX_ARM710A 121
#define SM_OBJ_TASK_PRIORITY 40
#define PCISTAT_ADRS (PCI_CFG_BASE + 0x06)
#define EPIC_MAX_GT_A_IRQS 4
#define M85XX_L2CTL_L2INTDIS_MSK 0x00080000
#define va_start(v,l) __builtin_va_start(v,l)
#define S_vxdbgLib_INVALID_PARAMS VXDBG_ERROR_TO_ERRNO(VXDBG_ERR_INVALID_PARAMS)
#define FIOPATHCONF 61
#define EPIC_IIDR_EX_PIN EPIC_BIT(31)
#define MMU_PAGE_SIZE_GET (*(mmuLibFuncs.mmuPageSizeGet))
#define EVENT_EDR_ERROR_INJECT CLASS3_EVENT(82)
#define EVT_TIMER_ROLLOVER(evtId) EVT_CTX_0(evtId)
#define ppcIntCtlr0Num NELEMENTS(ppcIntCtlr0Resources)
#define INST_MTSPR_MASK 0xfc1fffff
#define STACK_NAME STACK_NAME_V4_V6
#define EMLINK 31
#define VM_CONTEXT_BUFFER_WRITE(context,fromAddr,toAddr,nbBytes) ((vmLibInfo.pVmBufferWriteRtn == NULL) ? (memcpy((void *)toAddr, (void *)fromAddr, nbBytes), OK) : ((*vmLibInfo.pVmBufferWriteRtn) (context, (VIRT_ADDR) fromAddr, (VIRT_ADDR) toAddr, nbBytes)))
#define TRG_ANY_EVENT_INDEX 5
#define FIOWHERE 8
#define LAWAR_SIZE_8KB 0x0000000C
#define EVENT_IOOPEN CLASS3_EVENT(48)
#define FIOUNSELECT 29
#define EPIC_MSG_INT1_VEC_REG (EPIC_CCSROFF + 0x11620)
#define _WRS_SUP_STACK_RELOC(p) p
#define INCsysMotI2ch 
#define EVENT_SEMMGIVEFORCE CLASS3_EVENT(14)
#define Q_CALIBRATE(pQHead,keyDelta) (*(((Q_HEAD *)(pQHead))->pQClass->calibrateRtn)) (((Q_HEAD *)(pQHead)), ((int)(keyDelta)))
#define TLB_LOCK_BIT 26
#define MCORE300 _VX_MCORE300
#define M85XX_OR2(base) (CAST(VUINT32 *)((base) + 0x5014))
#define _FCREAT 0x0200
#define M85XX_OR3(base) (CAST(VUINT32 *)((base) + 0x501c))
#define __DBL_DENORM_MIN__ 4.9406564584124654e-324
#define MMU_STATE_SUP_RWX (_MMU_SR|_MMU_SW|_MMU_SX)
#define ALIGNED(x,align) (((int)(x) & (align - 1)) == 0)
#define M85XX_OR5(base) (CAST(VUINT32 *)((base) + 0x502C))
#define _WRS_CHECK_MACHINE_TYPE if (pHdr->e_machine != EM_ARCH_MACHINE && pHdr->e_machine != EM_ARCH_MACH_ALT) return (ERROR)
#define _PPC_TCR_FIE_U 0x0080
#define _PARM_EXIT_SUCCESS 0
#define EPIC_SMSG_INT2_VEC_REG (EPIC_CCSROFF + 0x11c40)
#define M_pgPoolVirtLib (183 << 16)
#define M85XX_OR6(base) (CAST(VUINT32 *)((base) + 0x5034))
#define REG_SET_GRBASE 0x00
#define LAWAR_SIZE_8MB 0x00000016
#define F_RDLCK 1
#define S_vmLib_ADDR_IN_GLOBAL_SPACE (M_vmLib | 4)
#define _ARCH_FLT_EPSILON 1.19209290e-07F
#define M_qPriHeapLib (62 << 16)
#define EPIC_IPI_1_VEC_REG (EPIC_CCSROFF + 0x010b0)
#define INCLUDE_IO_BASIC 
#define _PPC_ESF_RES_OFF_H (_PPC_ESF_VEC_OFF + 0)
#define SHRT_MIN (-32767-1)
#define ALIGN_MEMORY _VX_ALIGN_MEMORY
#define M85XXRIO_ROWAR_WRTYPE_SWRITE 0x3
#define __sfeof(p) ((HANDLE_VERIFY(p, handleTypeFile) != OK) ? (FALSE) : (((p)->_flags & __SEOF) != 0))
#define MII_SR_TX_HALF_DPX 0x2000
#define EPIC_VENDOR_ID_REG (EPIC_CCSROFF + 0x01080)
#define EPIC_MSG_INT1_DES_REG (EPIC_CCSROFF + 0x11630)
#define _VSB_CONFIG_FILE "D:/WindRiver6.8/vxworks-6.8/target/lib/h/config/vsbConfig.h"
#define SIO_HW_OPTS_SET 0x1005
#define MMU_ATTR_SUP_TEXT_W (MMU_ATTR_SUP_RWX)
#define INTERRUPT_STACK_OVERFLOW_SIZE 4096
#define EPIC_IN_INT20_VEC_REG (EPIC_CCSROFF + 0x10480)
#define EXC_MSG_OFFSET 0x4300
#define SYM_COMM 0x20
#define INCLUDE_NETMASK_GET 
#define S_objLib_OBJ_DESTROY_ERROR (M_objLib _WRS_BIT_OR 14)
#define _VOIDFUNCPTR_DEFINED 
#define INCLUDE_ANSI_LOCALE 
#define SEM_NO_ID_VALIDATE 0x40
#define M85XXRIO_ROWAR_WRTYPE_NWRITE 0x4
#define OPT_CRMOD 0x02
#define EPIC_SMSG_INT2_DES_REG (EPIC_CCSROFF + 0x11c50)
#define MII_MF_OP_WR 0x1
#define OPT_7_BIT 0x08
#define SYSFLG_NO_SYS_CONTROLLER 0x01
#define VXB_INST_CONNECT_DONE 0x00000004
#define _FREAD 0x0001
#define CACHE_CMD_UNLOCK_ALL 0x0a000000
#define __signed signed
#define _FEXLOCK 0x0100
#define OPT_REG_WRITE16 0x06
#define INCLUDE_DEVICE_MANAGER 
#define _PPC_ESF_CR _PPC_ESF_R(GREG_NUM + 4)
#define AM29200 _VX_AM29200
#define EPIC_IN_INT20_DES_REG (EPIC_CCSROFF + 0x10490)
#define _MMU_TLB_PERM_UR 0x00010000
#define _FNDELAY 0x0004
#define VME_BUS BUS_TYPE_VME
#define VXB_ACCESS_CFG_WRITE 0x00000013
#define FD_ISSET(n,p) _VX_FD_ISSET (n, p)
#define IPCOM_USE_FILE IPCOM_FILE_NATIVE
#define S_objLib_OBJ_ID_ERROR (M_objLib _WRS_BIT_OR 1)
#define EPIC_PRIORITY_MIN 0
#define EVENT_WINDDELETE CLASS2_EVENT(1)
#define S_objLib_OBJ_RENAME_NOT_ALLOWED (M_objLib _WRS_BIT_OR 13)
#define OPT_REG_WRITE32 0x07
#define _EXC_INFO_XER 0x010
#define _PPC_TSR_ENW_U 0x8000
#define LAWAR_TGTIF_PCIEX 0x00200000
#define EPIPE 32
#define FRV _VX_FRV
#define _PPC_SPEFSCR_FDBZE 0x00000010
#define S_iosLib_DRIVER_GLUT ENOMEM
#define __DBL_MIN_10_EXP__ (-307)
#define RIO_DIRECTION_INBOUND 1
#define SM_OBJ_TASK_OPTIONS 0
#define M85XXRIO_PRTOCCSR(base) (CAST(VUINT32 *)(((char*)base) + 0x00124 ))
#define ENOTTY 25
#define EPIC_IIVPR_POLARITY(p) ((p) << 23)
#define _VX_MCF5400 162
#define _IFORM_400_2 58
#define PCI2_INBOUND_ATTR_REG1(base) CVPUINT32(base, 0x9DF0)
#define EPIC_MIDR_P0_INT EPIC_BIT(0)
#define L2SRAM_WINDOW_SIZE 0x80000
#define S_taskLib_TASK_VAR_NOT_FOUND (M_taskLib | 107)
#define _FASYNC 0x0040
#define OFFSET(structure,member) ((int) &(((structure *) 0) -> member))
#define L_cuserid _PARM_L_cuserid
#define DOSFS_DEFAULT_MAX_FILES 20
#define Q_RESORT(pQHead,pQNode,newKey) (*(((Q_HEAD *)(pQHead))->pQClass->resortRtn)) (((Q_HEAD *)(pQHead)), ((Q_NODE *)(pQNode)), ((ULONG)(newKey)))
#define _PPC_ESR_PTR_U 0x0200
#define EVENT_IOREAD CLASS3_EVENT(49)
#define VXB_INTR_TRIG_EDGE 0x10
#define atomic32Set_inline atomic32Set
#define VXBAF_CPU_PIPE_FLUSH 0x00000010
#define _IFLAG_603_SPEC 0x0020
#define _VX_FD_CLR(n,p) ((p)->fds_bits[(n)/_VX_NFDBITS] &= ~(1 << ((n) % _VX_NFDBITS)))
#define MCF5200 _VX_MCF5200
#define __GNUC_PATCHLEVEL__ 2
#define OPT_REG_WRITE64 0x08
#define S_spinLockLib_INVALID_OPERATION (M_spinLockLib | 2)
#define M_netDrv (41 << 16)
#define _VX_SH7600 132
#define M_devCfgLib (129 << 16)
#define M_loadFileLib (193 << 16)
#define _VX_AM29XXX 50
#define _ARCH_DBL_MAX_10_EXP 308
#define MII_100MBS 100000000
#define M_dhcpcLib (106 << 16)
#define __INCb_struct_timespech 
#define FLASH_SECTOR_MASK 0xfffe0000
#define M85XXRIO_ROWTAR_OFFSET(n) (0x10C00 + ((n)*0x20))
#define EVENT_MEMPARTCREATE CLASS3_EVENT(32)
#define _LIMITS_H___ 
#define DS_1D_5 7
#define DS_1D_8 3
#define MMU_STATE_EXECUTE 0x00003000
#define _WRS_CONFIG_COMPONENT_USR_APPS 1
#define _EXC_OFF_RES0 0x00000
#define _EXC_OFF_RES1 0x00a00
#define MEM_ALLOC_ERROR_EDR_FATAL_FLAG 0x400
#define _EXC_OFF_RES3 0x00e00
#define PENTIUM2 _VX_PENTIUM2
#define PENTIUM3 _VX_PENTIUM3
#define PENTIUM4 _VX_PENTIUM4
#define _DEFINED_nlink_t 
#define _WRS_SDA_DATA __attribute__ ((__section__ (".sdata")))
#define _WCHAR_T_DEFINED 
#define EPIC_MIVPR_VECTOR_MSK (0xffff)
#define O_ACCMODE (O_RDONLY|O_WRONLY|O_RDWR)
#define MMU_STATE_WRITABLE 0x00000c00
#define SPIN_LOCK_ISR_INIT(x,y) (spinLockIsrInit(x, y))
#define PCI_ERROR_GASKET_TIMER_REG 0x8e20
#define INCLUDE_DOSFS 
#define TASK_UNSAFE() ( taskUnsafe () )
#define M_rpmLib (159 << 16)
#define PCI_ATTR_WS_128K 0x00000010
#define M_intLib (67 << 16)
#define FS_NAMES_ATA_SECONDARY_SLAVE ""
#define EPIC_DMA2_INT_VEC (EPIC_DMA2_INT_NUM + EPIC_VEC_IN_IRQ0)
#define _PPC_SPEFSCR_FDBZH 0x04000000
#define VXB_PARAM_FUNCPTR 0x0005
#define BUS 0
#define VX_USR_TASK_OPTIONS (VX_USR_TASK_OPTIONS_BASE | VX_COPROC1_TASK | VX_COPROC2_TASK | VX_COPROC3_TASK | VX_COPROC4_TASK | VX_COPROC5_TASK | VX_COPROC6_TASK | VX_COPROC7_TASK | VX_COPROC8_TASK)
#define _PPC_SPEFSCR_FDBZS 0x00080000
#define FREE_RAM_ADRS (end)
#define S_semLib_INVALID_INITIAL_COUNT (M_semLib | 105)
#define M85XX_L2ERRINJHI(x) (CAST(VUINT32 *)((x + 0x20E00)))
#define M_rtpLib (178 << 16)
#define CONTROL_EVENT(id) (MIN_CONTROL_ID + id)
#define OPT_TERMINAL (OPT_ECHO | OPT_CRMOD | OPT_TANDEM | OPT_MON_TRAP | OPT_7_BIT | OPT_ABORT | OPT_LINE)
#define MMU_STATE_GET (*(mmuLibFuncs.mmuStateGet))
#define _PPC_ESF_LR _PPC_ESF_R(GREG_NUM + 1)
#define M_coreDumpLib (197 << 16)
#define VM_CTX_MASK_L2_FREE 0x4
#define M_errno (0 << 16)
#define __vxworks 1
#define M85XXRIO_IFQEPAR(base) (CAST(VUINT32 *)(((char*)base) + 0x11074))
#define M_xcomLib (164 << 16)
#define VM_PAGE_UNMAP(context,virtAddr,len) ((vmLibInfo.pVmPageUnMapRtn == NULL) ? (ERROR) : ((*vmLibInfo.pVmPageUnMapRtn) (context, virtAddr, len)))
#define VXB_HANDLE_OP_READ 0x00
#define LAWAR_SIZE_1GB 0x0000001D
#define NUM_PCI1_SLOTS 0x1
#define M_hsmsLib (157 << 16)
#define MSG_PRI_DONT_CARE MSG_PRI_URGENT
#define DDR_SDRAM_MODE_CFG_2 0x11c
#define _DEFINED_blksize_t 
#define PCIEX_INBOUND_BASE_ADRS_REG3(base) CVPUINT32(base, 0xaDA8)
#define EVENT_WIND_EXIT_NODISPATCH_PI CLASS1_EVENT(5)
#define _IFLAG_SPEC (_IFLAG_4XX_SPEC | _IFLAG_6XX_SPEC | _IFLAG_AV_SPEC | _IFLAG_E500_SPEC | _IFLAG_FP_SPEC)
#define VM_CONTEXT_UNION(context1,context2) ((vmLibInfo.pVmCtxUnionRtn == NULL) ? (ERROR) : ((*vmLibInfo.pVmCtxUnionRtn) (context1, context2)))
#define MMU_ATTR_CACHE_WRITETHRU 0x00000180
#define I960 _VX_I960
#define REG_SET_PG_TBL_PTR (REG_SET_XER + 4)
#define _VX_FD_MASK_DEFINED 
#define IPCOM_USE_RAM_DISK 
#define EPIC_RES35_INT_VEC (EPIC_RES35_INT_NUM + EPIC_VEC_IN_IRQ0)
#define _WRS_CONFIG_FORMATTED_OUT 1
#define _VX_FD_ISSET(n,p) ((p)->fds_bits[(n)/_VX_NFDBITS] & (1 << ((n) % _VX_NFDBITS)))
#define PGCCSR_MASTER 0x40000000
#define _WRS_CONFIG_COMPONENT_VXCOREIP 1
#define WIND_CLASS_RENAME_NOT_ALLOWED 0x02
#define AIM_MMU_INIT_RT_INCR 0x10
#define EPIC_DDR_INT_NUM 2
#define MII_CR_LOOPBACK 0x4000
#define DDR_ECC_ERR_INJECT 0xe08
#define MAX_RESERVE_ID 39999
#define INCLUDE_VX_TRADITIONAL_SCHEDULER 
#define STAT_TBL_HASH_SIZE_LOG2 6
#define OBJ_INSTRUMENTATION_DISABLE(objId) ( ((OBJ_CORE *)(objId))->handle.attributes &= ~WIND_OBJ_INSTRUMENTED )
#define EPIC_IN_INT3_VEC_REG (EPIC_CCSROFF + 0x10260)
#define S_vxdbgLib_INVALID_ALIGNMENT VXDBG_ERROR_TO_ERRNO(VXDBG_ERR_INVALID_ALIGNMENT)
#define WV_CLASS_3_ON 0x10000007
#define ARMARCH6_T _VX_ARMARCH6_T
#define INUM_TO_IVEC(intNum) ((VOIDFUNCPTR *) (intNum))
#define MII_MF_ST_LEN 0x2
#define _WRS_BLIB_ALIGNMENT 3
#define _PPC_ESF_P0 _PPC_ESF_R3
#define _PPC_ESF_P1 _PPC_ESF_R4
#define _PPC_ESF_P2 _PPC_ESF_R5
#define _PPC_ESF_P3 _PPC_ESF_R6
#define _PPC_ESF_P4 _PPC_ESF_R7
#define _PPC_ESF_P5 _PPC_ESF_R8
#define _PPC_ESF_P6 _PPC_ESF_R9
#define I80486 _VX_I80486
#define M85XX_L2ERRINJLO(x) (CAST(VUINT32 *)((x + 0x20E04)))
#define EVENT_OBJ_SEMFLUSH CLASS2_EVENT(22)
#define BOOT_FLASH ON_BOARD_FLASH
#define howmany(x,y) _VX_howmany (x,y)
#define _ARCH_LDBL_DIG 15
#define _PPC_ESF_PC _PPC_ESF_R(GREG_NUM + 3)
#define NAME_MAX _PARM_NAME_MAX
#define __INClimitsh 
#define SIO_MODE_POLL 1
#define SCHAR_MAX 127
#define PCI_ATTR_WS_256M 0x0000001b
#define VXB_BUSID_NEXUS 1
#define _ARCH_PPC 1
#define SPRG6_R 262
#define LBC_SDRAM_LOCAL_SIZE_MASK 0xfc000000
#define VXBAF_BIT_REVERSE_IN_BYTE 0x00000040
#define SPRG6_W 278
#define M_routeLib (44 << 16)
#define MEM_BLOCK_ERROR_LOG_FLAG 0x80
#define __UINTMAX_TYPE__ long long unsigned int
#define EPIC_PRIORITY_MAX 15
#define WDB_PROXY_TASK_STACK_SIZE 10000
#define EPIC_LBC_INT_VEC (EPIC_LBC_INT_NUM + EPIC_VEC_IN_IRQ0)
#define EPIC_TM_A3_DES_REG (EPIC_CCSROFF + 0x011f0)
#define SEM_M_SEND_EVENTS 0x8
#define EPIC_TSEC3ERR_INT_NUM 17
#define __INCdllLibh 
#define SIO_HUP 0x100B
#define M85XXRIO_RIWAR_LOCAL_W_NO_SNOOP 4
#define EPIC_TSEC3RX_INT_NUM 16
#define RIO_OP_SUPPORTED_ATSWAP 0x00800000
#define _PPC_ESF_R1 _PPC_ESF_R(1)
#define _PPC_ESF_R2 _PPC_ESF_R(2)
#define _PPC_ESF_R5 _PPC_ESF_R(5)
#define _PPC_ESF_R6 _PPC_ESF_R(6)
#define _PPC_ESF_R9 _PPC_ESF_R(9)
#define EPIC_TSEC2TX_INT_NUM 19
#define __INCexcLibh 
#define M_remLib (37 << 16)
#define INCLUDE_FTP 
#define EPIC_IN_INT3_DES_REG (EPIC_CCSROFF + 0x10270)
#define _PPC_L1CFG_BSIZE_V(x) (x >> 19)
#define S_classLib_NO_CLASS_DESTROY (M_classLib | 2)
#define sioPollOutput(pSioChan,thisChar) ((pSioChan)->pDrvFuncs->pollOutput (pSioChan, thisChar))
#define LAWAR_SIZE_1MB 0x00000013
#define __INCb_pid_th 
#define CORE_DUMP_REGION_SIZE pmFreeSpace(pmDefaultArena)
#define __CHAR_UNSIGNED__ 1
#define _PPC_ESF_SP _PPC_ESF_R1
#define AIM_MMU_INIT_RT_NUM 0x10
#define PCI_DEV_ID_82XX 0x00031057
#define _VX_FD_SET_DEFINED 
#define _PPC_ESF_T0 _PPC_ESF_R14
#define _PPC_ESF_T1 _PPC_ESF_R15
#define _PPC_ESF_T2 _PPC_ESF_R16
#define _PPC_ESF_T3 _PPC_ESF_R17
#define _PPC_ESF_T4 _PPC_ESF_R18
#define _PPC_ESF_T5 _PPC_ESF_R19
#define _PPC_ESF_T6 _PPC_ESF_R20
#define _PPC_ESF_T7 _PPC_ESF_R21
#define _PPC_ESF_T8 _PPC_ESF_R22
#define _PPC_ESF_T9 _PPC_ESF_R23
#define VXBAF_RETRIEVE_UPSTREAM_BUS_PTR(pDevInfo,pUpstreamDevInfo) { if (pDevInfo->pParentBus != NULL) { pUpstreamDevInfo = pDevInfo->pParentBus->pCtlr; } else pUpstreamDevInfo = NULL; }
#define MMUCSR0 1012
#define EPIC_MSR_ST_MSK 0xf
#define _WRS_CONFIG_COMPONENT_IPSNTP 1
#define MII_PHY_TBL 0x0020
#define OPT_RAW 0
#define MII_EXT_STAT_1000T_FD 0x2000
#define __SIZE_T 
#define EVENT_OBJ_MSGRECEIVE CLASS2_EVENT(24)
#define _POSIX_PIPE_BUF 512
#define IPCOM_GETLINE_HISTORY_FILENAME ".ipcom_getline_history"
#define CS3_CONFIG 0x08C
#define CLASS_LIST_INFO(list,max,element) { DL_NODE * pNode ; pNode = DLL_FIRST (&list); while ((pNode != NULL) && (--max >= 0)) { *(element++) = (OBJ_ID)((int)pNode - OFFSET (OBJ_CORE, classNode)); pNode = DLL_NEXT (pNode); } }
#define SW_MMU_ENABLE FALSE
#define PCI_ATTR_WS_8M 0x00000016
#define __INCvxWorksh 
#define _DEFINED_off_t 
#define M_tftpLib (75 << 16)
#define _WRS_ABSOLUTE_END return OK; }
#define S_cacheLib_UNSUPPORTED (M_cacheLib | 2)
#define PHY_100BASE_TX 0x02
#define INCLUDE_SEM_COUNTING_CREATE 
#define _WRS_CONFIG_MMU_BASIC 1
#define _WRS_CONFIG_COMPONENT_IPMCRYPTO 1
#define _VX_G100 31
#define INCLUDE_ANSI_ALL 
#define WDB_TTY_DEV_NAME "/tyCo/1"
#define MMU_ATTR_PROT_USR_WRITE 0x00000010
#define MII_EXT_STAT_1000T_HD 0x1000
#define _WRS_ABSOLUTE_(name,value) __asm__ (".globl\t"#name "\n\t.equ\t"#name",%0" "\n\t.type\t"#name",@object" :: "n"(value))
#define MAX_RTI_RESERVE_ID 39999
#define _IFORM_405_SX 61
#define RIO_IMPLEMENTATION_SPACE_TOP 0xfffffc
#define MEM_ROUND_DOWN(x) ROUND_DOWN(x, _ALLOC_ALIGN_SIZE)
#define MII_PHY_ID2_REG 0x3
#define EPIC_IN_INT33_VEC_REG (EPIC_CCSROFF + 0x10620)
#define PPC405F _VX_PPC405F
#define _PPC_SPEFSCR_SOV 0x00008000
#define M85XX_MAR(base) (CAST(VUINT32 *)((base) + 0x5068))
#define MMU_STATE_EXECUTE_NOT 0x00000000
#define Q_INFO(pQHead,nodeArray,maxNodes) (*(((Q_HEAD *)(pQHead))->pQClass->infoRtn)) (((Q_HEAD *)(pQHead)),((int *)(nodeArray)),((int)(maxNodes)))
#define PCI_ATTR_WS_64K 0x0000000F
#define PCI_ATTR_WS_64M 0x00000019
#define SCHAR_MIN (-128)
#define ENOMSG 80
#define _PC_PRIO_IO 13
#define EXIT_FAILURE _PARM_EXIT_FAILURE
#define epic0Num NELEMENTS(epic0Resources)
#define WDB_SPAWN_PRI 100
#define _DEFINED_timer_t 
#define M85XXRIO_RIWAR_LOCAL_W_SNOOP_CORE 5
#define _SIZE_T_DEFINED_ 
#define __eventPointStubLibPh 
#define __INCvxbSysEpich 
#define VXDBG_MEM_FUNCS_ARE_INSTALLED() (_func_vxdbgFuncs[VXDBG_READ] != NULL)
#define __SCHAR_MAX__ 127
#define SYM_IS_UNDF(symType) (!(symType))
#define MII_NP_ACK1 0x4000
#define MII_NP_ACK2 0x1000
#define MAX_REBOOT_HOOKS 8
#define MII_ANAR_PAUSE 0x0400
#define _DBSR_TRAP 0x01000000
#define _PPC_ESR_PIL 0x08000000
#define M85XXRIO_ROWS1R18_OFFSET(n) (0x10C14 + ((n)*0x20))
#define _STACK_GROWS_DOWN (-1)
#define NFDBITS _VX_NFDBITS
#define EPIC_SMSG_INT4_DES_REG (EPIC_CCSROFF + 0x11c90)
#define SYM_UNDF 0x0
#define _DEFINED_off_t64 
#define GREG_NUM 32
#define M85XX_MRTPR(base) (CAST(VUINT32 *)((base) + 0x5084))
#define CACHE_SNOOP_ENABLE 0x10
#define M85XXRIO_HBDIDLCSR_OFFSET 0x68
#define M85XX_MDR(base) (CAST(VUINT32 *)((base) + 0x5088))
#define EPIC_IN_INT33_DES_REG (EPIC_CCSROFF + 0x10630)
#define STD_ERR 2
#define _ARCH_MULTIPLE_CACHELIB FALSE
#define M_rngLib (19 << 16)
#define _VX_I960 20
#define IPCOM_PROC_STACK_LARGE IPCOM_STACK_ADJUST(8192)
#define M85XXRIO_IDMR(base) (CAST(VUINT32 *)(((char*)base) + 0x13460 ))
#define VM_STATE_WRITABLE MMU_ATTR_SUP_RWX
#define SEM_BIN_OPTIONS_MASK (SEM_Q_FIFO | SEM_Q_PRIORITY | SEM_EVENTSEND_ERR_NOTIFY | SEM_INTERRUPTIBLE)
#define JOB_TASK_STACK_SIZE 8000
#define EPIC_OPT_POLAR_MSK EPIC_EIVPR_INTR_POLARITY
#define _DBSR_BRT_U 0x0400
#define IVPR 63
#define _DEFINED_blkcnt_t 
#define EPIC_GTVPR_VECTOR_MSK (0xffff)
#define FIOCHKDSK 48
#define EPIC_GCR_MODE_MIXED EPIC_BIT(29)
#define WDB_PROXY_PORT 0x4444
#define S29GL_FLASH_BIT 1
#define EVENT_DPRINTF_LOG CLASS3_EVENT(239)
#define IPCOM_FILE_NONE 1
#define _WRS_ENABLE_IDLE_INTS {intUnlock (taskMsrDefault);}
#define _DBSR_ICMP 0x08000000
#define WIND_OBJ_NAMED 0x80
#define _DBSR_DAC2R 0x00020000
#define PCI_OUTBOUND_BASE_ADRS_REG0(base) CVPUINT32(base, 0x8c08)
#define PCI_OUTBOUND_BASE_ADRS_REG1(base) CVPUINT32(base, 0x8c28)
#define SEM_DELETE_SAFE 0x04
#define PCI_OUTBOUND_BASE_ADRS_REG3(base) CVPUINT32(base, 0x8c68)
#define PCI_OUTBOUND_BASE_ADRS_REG4(base) CVPUINT32(base, 0x8c88)
#define SYM_BSS 0x10
#define MPC85XX_I2C_CONTROL_REG_MSTA 0x20
#define EVENT_TASKPRIORITYSET CLASS3_EVENT(3)
#define TOOL e500v2gnu
#define SEM_CNT_OPTIONS_MASK SEM_BIN_OPTIONS_MASK
#define EVT_OBJ_1(OBJ,CLASS,evtId,ARG1) do { if ( ACTION_IS_SET ) { EVT_OBJ_1_T evt_obj_1; evt_obj_1.objId = OBJ; evt_obj_1.classId = CLASS; evt_obj_1.args [0] = (int)ARG1; eventPointSwHandle(evtId, &evt_obj_1, sizeof evt_obj_1); } } while ((0))
#define EVT_OBJ_2(OBJ,CLASS,evtId,ARG1,ARG2) do { if ( ACTION_IS_SET ) { EVT_OBJ_2_T evt_obj_2; evt_obj_2.objId = OBJ; evt_obj_2.classId = CLASS; evt_obj_2.args [0] = (int)ARG1; evt_obj_2.args [1] = (int)ARG2; eventPointSwHandle(evtId, &evt_obj_2, sizeof evt_obj_2); } } while ((0))
#define EVT_OBJ_3(OBJ,CLASS,evtId,ARG1,ARG2,ARG3) do { if ( ACTION_IS_SET ) { EVT_OBJ_3_T evt_obj_3; evt_obj_3.objId = OBJ; evt_obj_3.classId = CLASS; evt_obj_3.args [0] = (int)ARG1; evt_obj_3.args [1] = (int)ARG2; evt_obj_3.args [2] = (int)ARG3; eventPointSwHandle(evtId, &evt_obj_3, sizeof evt_obj_3); } } while ((0))
#define EVT_OBJ_4(OBJ,CLASS,evtId,ARG1,ARG2,ARG3,ARG4) do { if ( ACTION_IS_SET ) { EVT_OBJ_4_T evt_obj_4; evt_obj_4.objId = OBJ; evt_obj_4.classId = CLASS; evt_obj_4.args [0] = (int)ARG1; evt_obj_4.args [1] = (int)ARG2; evt_obj_4.args [2] = (int)ARG3; evt_obj_4.args [3] = (int)ARG4; eventPointSwHandle(evtId, &evt_obj_4, sizeof evt_obj_4); } } while ((0))
#define EVT_OBJ_5(OBJ,CLASS,evtId,ARG1,ARG2,ARG3,ARG4,ARG5) do { if ( ACTION_IS_SET ) { EVT_OBJ_5_T evt_obj_5; evt_obj_5.objId = OBJ; evt_obj_5.classId = CLASS; evt_obj_5.args [0] = (int)ARG1; evt_obj_5.args [1] = (int)ARG2; evt_obj_5.args [2] = (int)ARG3; evt_obj_5.args [3] = (int)ARG4; evt_obj_5.args [4] = (int)ARG5; eventPointSwHandle(evtId, &evt_obj_5, sizeof evt_obj_5); } } while ((0))
#define _FD_MASK_DEFINED 
#define WIND_TCB_T12 WIND_TCB_R26
#define EPIC_MSG_INTERRUPT 24
#define MEDR_FILL_FREE_ENABLE FALSE
#define EVENT_OS_REVISION CONTROL_EVENT(18)
#define EPIC_CCSROFF 0x40000
#define MII_ADS_TECH_MASK 0x1fe0
#define _DBSR_DAC2W 0x00010000
#define EPIC_TM_B_FREQ_REG (EPIC_CCSROFF + 0x020f0)
#define M_csLib (138 << 16)
#define RIO_OP_SUPPORTED_ADEC 0x02000000
#define NUM_DRIVERS 20
#define EVENT_SEMTAKE CLASS3_EVENT(15)
#define INCLUDE_FLOATING_POINT 
#define PCIEX_OUTBOUND_TRANS_ADRS_REG0(base) CVPUINT32(base, 0xac00)
#define PCIEX_OUTBOUND_TRANS_ADRS_REG2(base) CVPUINT32(base, 0xac40)
#define clearerr(p) __sclearerr(p)
#define VX_COPROC8_TASK 0x80000000
#define TFFS_REMOVABLE FALSE
#define VXEV_USER_MASK 0x00ffffff
#define M_usrLib (35 << 16)
#define M85XX_PORPLLSR_PLAT_RATIO_MASK 0x0000003e
#define MII_PHY_DEF_DELAY 300
#define M85XX_LAWBAR0(base) (CAST(VUINT32 *)((base) + 0xc08))
#define M85XX_LAWBAR1(base) (CAST(VUINT32 *)((base) + 0xc28))
#define M85XX_LAWBAR2(base) (CAST(VUINT32 *)((base) + 0xc48))
#define M85XX_LAWBAR3(base) (CAST(VUINT32 *)((base) + 0xc68))
#define M85XX_LAWBAR5(base) (CAST(VUINT32 *)((base) + 0xcA8))
#define M85XX_LAWBAR6(base) (CAST(VUINT32 *)((base) + 0xcc8))
#define _VX_XSCALE 1120
#define SM_CPUS_MAX DEFAULT_CPUS_MAX
#define EVENT_OBJ_SEMGIVE CLASS2_EVENT(20)
#define M_loginLib (54 << 16)
#define _TIMER_T 
#define PCI2_INBOUND_TRANS_EXT_ADRS_REG3(base) CVPUINT32(base, 0x9DA4)
#define __INCb_key_th 
#define _TYPE_timer_t typedef struct __timer *timer_t
#define CACHE_DRV_IS_READ_COHERENT(pFuncs) ((pFuncs)->invalidateRtn == NULL)
#define PCI2_INBOUND_BASE_ADRS_REG1(base) CVPUINT32(base, 0x9DE8)
#define _IFORM_M_2 55
#define M_vxdbgLib (5 << 16)
#define RIO_CHANNEL_MAINT 1
#define __USER_LABEL_PREFIX__ 
#define IPCOM_PROC_PRIO_BACKGROUND 255
#define __INCspeLibh 
#define _WRS_CONFIG_OBJECT_CLASS_LIST_D 1
#define PRIO_STATUS_CHECK 0xa
#define EPIC_OPT_POLAR_ACT_LOW 0x00000000
#define IPCOM_RAM_DISK_NO_BLOCK 64
#define _PPC_ESR_PPR 0x04000000
#define _IFORM_EFX_2 88
#define _IFORM_EFX_3 89
#define _IFORM_EFX_4 90
#define S_memLib_FUNC_NOT_AVAILABLE (M_memLib | 9)
#define __INChwConfigh 
#define I2C_ERROR_KNOWN_STATE 7
#define __INCeventLibCommonh 
#define INCLUDE_XBD 
#define PCI_OUT_ATTR_WTT_IO 0x00008000
#define WDB_COMM_VTMD 8
#define PPC970 _VX_PPC970
#define _PC_REC_MAX_XFER_SIZE 15
#define VXB_PARAM_STRING 0x0003
#define EPIC_MSIR_INTX_OFFSET 0x10
#define _VX_CPU32 8
#define EVENT_SAFE_PEND CLASS3_EVENT(28)
#define _VX_TOOL_FAMILY TOOL_FAMILY
#define VX_DEALLOC_EXC_STACK 0x1000
#define WV_OBJ_CLASS_INSTRUMENTATION_DISABLE(classId) (classId->handle.attributes &= ~WIND_CLASS_INSTRUMENTED)
#define WDB_SPAWN_OPTS VX_FP_TASK
#define DRV_INTCTLR_EPIC 
#define HID1 1009
#define EVENT_OBJ_MSGSEND CLASS2_EVENT(23)
#define M85XXRIO_RIWAR_LOCAL_R_UNLOCK_L2 7
#define VXB_INTR_TRIG_ACTIVE_HIGH (VXB_INTR_TRIG_POS | VXB_INTR_TRIG_LEVEL)
#define __clock_t_defined 
#define __dataCollectorLibh 
#define SYS_CLK_RATE_MAX 8000
#define EVENTS_SYSFLAGS_DEL_RSRC 0x02
#define __LDBL_HAS_INFINITY__ 1
#define atomic32Xor_inline atomic32Xor
#define FIOSCSICOMMAND 40
#define MII_SR_LINK_STATUS 0x0004
#define MMU_DATA 0x02
#define M85XX_L2CTL_L2LFR_BIT 10
#define SIO_DEV_UNLOCK 0x1016
#define EVENT_EVENTRECEIVE CLASS3_EVENT(58)
#define INCLUDE_ANSI_STDLIB 
#define __INCsymbolh 
#define _ARCH_USHRT_MAX 65535
#define EPIC_MSG_REG3 (EPIC_CCSROFF + 0x01430)
#define FIOGETFL 43
#define RES_INT 2
#define EPIC_MSIVPR_PRIORITY_MSK (EPIC_BIT(19) | EPIC_BIT(18) | EPIC_BIT(17) | EPIC_BIT(16))
#define EVENT_WIND_EXIT_NODISPATCH CLASS1_EVENT(3)
#define TOOL_HDR(tc,file) TOOL_HDR_STRINGIFY(tool/tc/file)
#define _PPC_MAS0_ESEL_V(x) (x >> _PPC_MAS0_ESEL_BIT)
#define _ARCH_va_end(list) 
#define SYM_DATA 0x8
#define SYSFLG_NO_STARTUP_SCRIPT 0x10
#define EVT_OBJ_SAL_1(evtId,ARG1) do { if (ACTION_IS_SET) { EVT_OBJ_SAL_1_T evt_obj_sal_1; evt_obj_sal_1.args [0] = (int)ARG1; eventPointSwHandle (evtId, &evt_obj_sal_1, sizeof evt_obj_sal_1); } } while ((0))
#define EVT_OBJ_SAL_2(evtId,ARG1,ARG2) do { if (ACTION_IS_SET) { EVT_OBJ_SAL_2_T evt_obj_sal_2; evt_obj_sal_2.args [0] = (int)ARG1; evt_obj_sal_2.args [1] = (int)ARG2; eventPointSwHandle (evtId, &evt_obj_sal_2, sizeof evt_obj_sal_2); } } while ((0))
#define EVT_OBJ_SAL_3(evtId,ARG1,ARG2,ARG3) do { if (ACTION_IS_SET) { EVT_OBJ_SAL_3_T evt_obj_sal_3; evt_obj_sal_3.args [0] = (int)ARG1; evt_obj_sal_3.args [1] = (int)ARG2; evt_obj_sal_3.args [2] = (int)ARG3; eventPointSwHandle (evtId, &evt_obj_sal_3, sizeof evt_obj_sal_3); } } while ((0))
#define EPIC_RES41_INT_VEC (EPIC_RES41_INT_NUM + EPIC_VEC_IN_IRQ0)
#define S_qLib_Q_CLASS_ID_ERROR (M_qLib | 1)
#define MMU_ATTR_CACHE_COHERENCY 0x00000200
#define VXBAF_CONVERT_LONG_ORDER 0x00000004
#define EPIC_MSIDR_CRIT_INT EPIC_BIT(30)
#define FIOTRUNC64 55
#define MII_TECH_100BASE_T4 0x0200
#define EPIC_PCI1_INT_NUM 8
#define Q_GET(pQHead) ((Q_NODE *)((*(((Q_HEAD *)(pQHead))->pQClass->getRtn)) ((Q_HEAD *)(pQHead))))
#define RUNTIME_VERSION "6.8"
#define CACHE_USER_FLUSH(adrs,bytes) CACHE_DRV_FLUSH (&cacheUserFuncs, (adrs), (bytes))
#define NV_RAM_SIZE 0X100000
#define _ARCH_LDBL_MANT_DIG 53
#define MSG_Q_RESTRICT_UNPEND 0x80000000
#define VX_MEM_BARRIER_RW() _WRS_BARRIER("sync");
#define IPCOM_USE_ENV IPCOM_ENV_NATIVE
#define MII_TECH_100BASE_TX 0x0080
#define __FLT_EPSILON__ 1.19209290e-7F
#define _PPC_ESF_PAD0 (_PPC_ESF_REG_BASE + _PPC_REG_SET_SIZE)
#define _PPC_ESF_PAD1 (_PPC_ESF_PAD0 + SIZ_UINT32)
#define _PPC_ESF_PAD2 (_PPC_ESF_PAD1 + SIZ_UINT32)
#define EPIC_VEC_IN_IRQ0 (EPIC_VEC_EXT_IRQ0 + EPIC_MAX_EXT_IRQS)
#define ENOLINK 87
#define DEFAULT_DIR_PERM 0000750
#define _WRS_TASK_MSR_DEFAULT 
#define _ARCH_DBL_MAX 1.7976931348623157e+308
#define EPIC_OPT_PRI_MSK EPIC_EIVPR_PRIORITY_MSK
#define _VX_CPU CPU
#define FIOGETOPTIONS 19
#define EVENT_WINDCONT CLASS2_EVENT(30)
#define _WRS_CONFIG_TASK_SWAP_HOOKS 1
#define INCLUDE_VXB_CMDLINE 
#define S_objLib_OBJ_NOT_NAMED (M_objLib _WRS_BIT_OR 9)
#define VXB_CLK_FREQ "clkFreq"
#define M85XX_I2C2_BASE 0x3100
#define FIOLINK 58
#define _PPC_L1CFG_BSIZE_MASK 0x01800000
#define _PPC_ESF_R20 _PPC_ESF_R(20)
#define EVENT_OBJ_SEMWTAKE CLASS2_EVENT(48)
#define __INCsysLibh 
#define SM_TAS_HARD 1
#define SIO_KYBD_MODE_RAW 1
#define M85XXRIO_RxWAR_SIZE_MSK 0x3f
#define M85XXRIO_ODATR(base) (CAST(VUINT32 *)(((char*)base) + 0x1101C))
#define INCLUDE_WDB_CTXT 
#define EVENT_WDDELETE CLASS3_EVENT(17)
#define _IFLAG_FP_SPEC 0x1000
#define MMU_ATTR_SPL_0 0x00001000
#define _VX_PPC505 96
#define PCIEX_INBOUND_BASE_ADRS_REG1(base) CVPUINT32(base, 0xaDE8)
#define _VX_PPC509 2000
#define INCLUDE_WDB_VIO 
#define M85XX_L2CTL_L2E_MSK 0x80000000
#define S_objLib_OBJ_NO_ACCESS_RIGHTS (M_objLib _WRS_BIT_OR 6)
#define MII_ETH_MAX_PCK_SZ (ETHERMTU + SIZEOF_ETHERHEADER + MII_CRC_LEN)
#define __INCobjLibPh 
#define FIOFSTATGET_OLD 38
#define INCLUDE_HWMEM_ALLOC 
#define le32toh(x) bswap32((x))
#define _DBSR_DAC2W_U 0x0001
#define M_ftnLib (52 << 16)
#define SIO_ERROR_OFLOW 2
#define _DEFINED_uid_t 
#define LSDMR_OP_SHIFT(x) ((x << 27) & LSDMR_OP_MASK)
#define TYLIB_XON_PCNT 50
#define S_dsmLib_UNKNOWN_INSTRUCTION (M_dsmLib | 1)
#define _DBCR2_DAC2US 0x0c000000
#define EVENT_SD_UNMAP CLASS3_EVENT(203)
#define PCIEX_INBOUND_ATTR_REG1(base) CVPUINT32(base, 0xaDF0)
#define VXDBG_BP_BY_CTX_REMOVE(pClient,retVal,pContext) VXDBG_BP_BY_ADDR_AND_CTX_REMOVE(pClient, retVal, NULL, pContext)
#define _POSIX_NAME_MAX 14
#define SIMHPPA _VX_SIMHPPA
#define EPIC_DMA1_INT_NUM 5
#define INST_BL_MASK 0xfc000001
#define SYS_CLK_RATE_MIN 1
#define OPT_LINE 0x40
#define _ANSI_STDDEF_H 
#define EPIC_IIVPR_PRIORITY(p) (((p) << 16) & EPIC_IIVPR_PRIORITY_MSK)
#define SPE_CONTEXT_SET(pTcb,X) (pTcb->pCoprocCtx=(int)(X))
#define I2C_CYCLE_WRITE(x,wd) i2cCycleMpc85xxWrite(x,wd)
#define M_m2Lib (91 << 16)
#define _IFIELD_BD(x) ((0x00008000 & x) ? (0xffff0000 | (x & ~3)) : (0x0000fffc & x))
#define MMU_ATTR_PROT_SUP_EXE 0x00000004
#define _IFIELD_BI(x) ((0x001f0000 & x) >> 16)
#define _VX_SH 130
#define TASK_CPU_LOCK_TASK(_pTcb__) do { if (ACTION_IS_SET) { VX_CODE_BARRIER(); _pTcb__->lockCnt++; VX_CODE_BARRIER(); EVT_CTX_0_BH (EVENT_TASKLOCK); } else { VX_CODE_BARRIER(); _pTcb__->lockCnt++; VX_CODE_BARRIER(); } } while ((0))
#define _CPU_STACK_ALIGN_SHIFT 4
#define VX_USR_TASK_OPTIONS_BASE (VX_PRIVATE_ENV | VX_NO_STACK_FILL | VX_TASK_NOACTIVATE | VX_NO_STACK_PROTECT)
#define _DBCR2_DAC2ER_U 0x0300
#define S_eventLib_ZERO_EVENTS (M_eventLib | 0x0005)
#define WDB_PROXY_TASK_PRIORITY 55
#define EPIC_EX_INT1_VEC_REG (EPIC_CCSROFF + 0x10020)
#define ARM7TDMI_T _VX_ARM7TDMI_T
#define MIN_USER_ID 40000
#define EPIC_TM_B2_DES_REG (EPIC_CCSROFF + 0x021b0)
#define TFFS_MOUNT_POINT "/tffs0"
#define S_iosLib_DEVICE_NOT_FOUND ENODEV
#define SEMB_PENDED_TASK SEM_PENDED_TASK
#define MAX_INT_ID 599
#define MMU_ATTR_CACHE_GET(attr) ((attr) & MMU_ATTR_CACHE_MSK)
#define EPIC_CTASK_PRI1_REG (EPIC_CCSROFF + 0x21080)
#define MMU_TRANSLATE (*(mmuLibFuncs.mmuTranslate))
#define _ARCH_INT_MAX 2147483647
#define _PPC_ESR_AP_U 0x0008
#define sioTxStartup(pSioChan) ((pSioChan)->pDrvFuncs->txStartup (pSioChan))
#define EPIC_DDR_INT_VEC (EPIC_DDR_INT_NUM + EPIC_VEC_IN_IRQ0)
#define EPIC_CISR0_EX_INT_MSK 0xfff
#define EVENT_TICKANNOUNCE CLASS1_EVENT(9)
#define _WRS_SYS_IO 
#define SPIN_LOCK_INTERESTED 2
#define _VX_PPC555 99
#define EPIC_IN_INT46_VEC_REG (EPIC_CCSROFF + 0x107c0)
#define MMU_STATE_MASK_LOCK 0x00800000
#define I2C_DRV_TYPE MPC85XX_I2C_CONTROLLER
#define EVENT_SIGWRAPPER CLASS3_EVENT(29)
#define VX_MAX_TASK_SWAP_RTNS 16
#define RES_STRING 1
#define _ARCH_DBL_MIN 2.2250738585072014e-308
#define EMFILE 24
#define _PPC_SPEFSCR_FGH 0x20000000
#define EPIC_IN_INT27_DES_REG (EPIC_CCSROFF + 0x10570)
#define IS_USER_EVENT(event) ((event >= MIN_USER_ID) && (event <= MAX_USER_ID))
#define SS_2D_8 2
#define EPIC_IPI_DPATCH1_REG1 (EPIC_CCSROFF + 0x21050)
#define TIP_ESCAPE_CHARACTER "~"
#define EPIC_EX_INT1_DES_REG (EPIC_CCSROFF + 0x10030)
#define S_ioLib_NO_DEVICE_NAME_IN_PATH ENODEV
#define __DECIMAL_DIG__ 17
#define EPIC_LBC_INT_NUM 3
#define INCLUDE_IPNET_USE_ROUTESOCK 
#define EPIC_TSEC3ERR_INT_VEC (EPIC_TSEC3ERR_INT_NUM + EPIC_VEC_IN_IRQ0)
#define REG_SET_GR(n) (REG_SET_GRBASE + _PPC_REG_SIZE*(n))
#define FIOMOVE 47
#define EPIC_TSEC3RX_INT_VEC (EPIC_TSEC3RX_INT_NUM + EPIC_VEC_IN_IRQ0)
#define M85XX_LURT(base) (CAST(VUINT32 *)((base) + 0x50A0))
#define _PPC_ESR_ILK 0x00100000
#define EVT_EDR_ERR_INJECT(EVTID,KIND,FILENAME,LINE,ADDRESS,MSG) do { if ( ACTION_IS_SET ) { EVENT_EDR_ERR_INJECT_T evt_edr_err_inject; evt_edr_err_inject.kind = KIND; evt_edr_err_inject.filename = FILENAME; evt_edr_err_inject.linenumber = LINE; evt_edr_err_inject.address = ADDRESS; evt_edr_err_inject.message = MSG; eventPointSwHandle (EVTID, &evt_edr_err_inject, sizeof (evt_edr_err_inject)); } } while ((0))
#define EPIC_ECM_INT_NUM 1
#define _DBSR_ICMP_U 0x0800
#define EVENT_SALOPEN CLASS3_EVENT(96)
#define S_vxdbgLib_INVALID_BP_DELETE_CLASS VXDBG_ERROR_TO_ERRNO(VXDBG_ERR_INVALID_BP_DELETE_CLASS)
#define _INC_VXBUSLIB_H 
#define PID_MASK 0x0FF
#define IPCOM_SOCK_IPCOM 3
#define MAX_INPUT _POSIX_MAX_INPUT
#define MAP1000A _VX_MAP1000A
#define ENETDOWN 62
#define EPIC_IN_INT46_DES_REG (EPIC_CCSROFF + 0x107d0)
#define ESTALE 88
#define EPIC_GLOBAL_REG (EPIC_CCSROFF + 0x01020)
#define CLASS_LIST_REMOVE(list,node) dllRemove (list, node)
#define __INCtypesh 
#define IPCOM_FORWARDER_TRUE_CACHE_WAYS (1 << IPCOM_FORWARDER_TRUE_CACHE_WAYS_SHIFT)
#define M85XXRIO_RIWAR_PCI2 0x01
#define _IFIELD_CRBD(x) ((0x03e00000 & x) >> 21)
#define M85XXRIO_PCR(base) (CAST(VUINT32 *)(((char*)base) + 0x10010 ))
#define _IFLAG_6XX_SPEC (_IFLAG_601_SPEC | _IFLAG_603_SPEC | _IFLAG_604_SPEC)
#define __INCb_gid_th 
#define M85XX_L2ERRDIS(x) (CAST(VUINT32 *)((x + 0x20E44)))
#define I2C_DEVICE_TYPE_IOPORT_PCA9555 2
#define MII_SYS_DELAY(delay) if (pPhyInfo->phyDelayRtn != NULL) ((* (pPhyInfo->phyDelayRtn)) (delay))
#define CS1_BNDS 0x008
#define _VX_SPARCV9 110
#define __INCspinLockLibh 
#define _IFORM_XL_1 38
#define _IFORM_XL_2 39
#define _IFORM_XL_3 40
#define _IFORM_XL_4 41
#define DDR_CAPTURE_ECC 0xe28
#define __LDBL_HAS_QUIET_NAN__ 1
#define M85XX_L2CTL_L2SIZ_BIT 28
#define M85XXRIO_ODCR(base) (CAST(VUINT32 *)(((char*)base) + 0x11020))
#define M_dirLib (68 << 16)
#define CACHE_DMA_VIRT_TO_PHYS(adrs) CACHE_DRV_VIRT_TO_PHYS (&cacheDmaFuncs, (adrs))
#define MPC85XX_I2C_FREQ_DIV_REG (0x00004)
#define _IFIELD_UIMM(x) ((0x0000ffff & x) >> 0)
#define WV_OBJ_CLASS_INSTRUMENTATION_ENABLE(classId) (classId->handle.attributes |= WIND_CLASS_INSTRUMENTED)
#define M85XX_PORDEVSR(base) (CAST(VUINT32 *)((base) + 0xE000C))
#define EPIC_INT_ACT_LOW 0
#define RIO_SWITCH_PORT_MASK 0x00ff0000
#define INCLUDE_MUXTK 
#define atomic32Dec_inline atomic32Dec
#define MII_STAT_REG 0x1
#define CORE_DUMP_COMPRESSION_LEVEL 9
#define __INCvxInlineArchh 
#define CACHE_FLUSH_LOAD_ADRS 0x10000
#define _WRS_CONFIG_SUPPORTS_WRLOAD 1
#define _PPC_BUCSR_FI 0x200
#define _ARCH_INT_MIN (-2147483647-1)
#define MAX_VALUE_E500_RATIO 10
#define _EXC_INFO_CIA 0x002
#define REG_SET_LR (REG_SET_MSR + _PPC_REG_SIZE)
#define IPCOM_USE_SYSVAR 
#define EPIC_SENSE_LVL 1
#define _WRS_CONFIG_WIND_IPNET 1
#define fpReg gpr[31]
#define VX_MSG_Q(name,max_msgs,max_msg_len) _WRS_DATA_ALIGN_BYTES(VX_OBJ_ALIGN_SIZE) char name [VX_MSG_Q_SIZE + ((max_msgs)*(MSG_NODE_SIZE(max_msg_len)))];
#define _IFIELD_LK(x) ((0x00000001 & x) >> 0)
#define EPIC_EX_INT8_VEC_REG (EPIC_CCSROFF + 0x10100)
#define EVENTS_ALLOW_OVERWRITE 0x02
#define L_tmpnam _PARM_L_tmpnam
#define VM_BASE_INSTALLED (vmLibInfo.vmBaseLibInstalled)
#define ___int_wchar_t_h 
#define VX_DEALLOC_STACK 0x0004
#define PCI_IN_ATTR_RTT_LM_WRITE_SNOOP 0x00005000
#define INT_MIN (-INT_MAX-1)
#define _IFIELD_CRFD(x) ((0x03800000 & x) >> 23)
#define _IFIELD_CRFE(x) ((0x00000007 & x))
#define __GNUC__ 4
#define _IFIELD_MB(x) ((0x000007c0 & x) >> 6)
#define FIONMSGS 17
#define VX_FORTRAN 0x0040
#define S_vxCpuLib_NO_CPU_AVAILABLE (M_vxCpuLib | 2)
#define _IFIELD_MO(x) ((0x03e00000 & x) >> 21)
#define EVENTS_KEEP_UNWANTED 0x04
#define MIN_RTI_RESERVE_ID 39000
#define SHELL_TASK_OPTIONS (VX_FP_TASK | VX_UNBREAKABLE | COPROCS_ALL | VX_PRIVATE_ENV)
#define offsetof(TYPE,MEMBER) __builtin_offsetof (TYPE, MEMBER)
#define VX_INSTR_BARRIER() _WRS_BARRIER("isync")
#define _DBCR0_TRAP_U 0x0100
#define EVENTS_SYSFLAGS_WAITING 0x01
#define __INC_vxbRapidIOH 
#define _ARCH_DBL_MIN_EXP (-1021)
#define STACK_VERSION_MINOR 1
#define _IFIELD_NB(x) ((0x0000f800 & x) >> 11)
#define SIO_BAUD_GET 0x1004
#define CAST(x) (x)
#define _FLTFUNCPTR_DEFINED 
#define OBJ_HANDLE_TABLE_MASK (OBJ_HANDLE_INDEX_MASK - OBJ_HANDLE_ENTRY_MASK)
#define CACHE_CMD_UNLOCK_LINE 0x08000000
#define EVENT_WINDRESUME CLASS2_EVENT(3)
#define __INCvmLibCommonh 
#define EBADMSG 77
#define _IFIELD_OE(x) ((0x00000400 & x) >> 10)
#define EVENT_SALRUN_ACCEPT CLASS3_EVENT(105)
#define __INCfcntlh 
#define RIO_OP_SUPPORTED_ASET 0x04000000
#define INCLUDE_IPNET_PACKET_POOL_3 
#define VM_PAGE_MAP(context,virtAddr,physAddr,len) ((vmLibInfo.pVmPageMapRtn == NULL) ? (ERROR) : ((*vmLibInfo.pVmPageMapRtn) (context, virtAddr, physAddr, len)))
#define atomic32Nand_inline atomic32Nand
#define INCLUDE_IPNET_PACKET_POOL_6 
#define FIODISKCHANGE 13
#define OBJ_LIBRARY_OPTIONS 0
#define __INChandleLibPh 
#define __NO_LWSYNC__ 1
#define PCI2_OUTBOUND_ATTR_REG0(base) CVPUINT32(base, 0x9c10)
#define _VX_WRITE 1
#define EPIC_PERFMON_2_MSK_REG0 (EPIC_CCSROFF + 0x01390)
#define EPIC_PERFMON_2_MSK_REG1 (EPIC_CCSROFF + 0x013a0)
#define SEMRW_READER_ENTRY_PTR(semId,index) ( ((SEM_RW_LIST_ENTRY *)((UINT) semId + sizeof (SEMAPHORE) + sizeof (SEM_RW_EXT) + (index * sizeof (SEM_RW_LIST_ENTRY)))) )
#define DDR_SDRAM_CLK_CTRL 0x130
#define _DBSR_IRPT 0x02000000
#define S_intLib_NOT_ISR_CALLABLE (M_intLib | 1)
#define EVENT_OBJ_MSGSREPLY CLASS2_EVENT(44)
#define MII_MF_PREAMBLE_LEN 0x20
#define EPIC_SR_ERR_INT_VEC (EPIC_SR_ERR_INT_NUM + EPIC_VEC_IN_IRQ0)
#define F_RGETLK 10
#define HCF_RES_INT 2
#define OBJ_INDEX_GET(objHdl) ((objHdl) & OBJ_HANDLE_INDEX_MASK)
#define LONG_MAX __LONG_MAX__
#define __INCregh 
#define _VX_I960CA 21
#define __sfileno(p) ((HANDLE_VERIFY(p, handleTypeFile) != OK) ? (-1) : ((p)->_file))
#define NUM_PCIEX_SLOTS 0x1
#define M85XX_DEVDISR_DDR 0x00010000
#define SM_TAS_SOFT 0
#define SIO_ERROR_NO_CLK 6
#define EPIC_MSG_VEC_REG(irq) (EPIC_MSG_INT0_VEC_REG + ((irq) * EPIC_MSG_VEC_REG_INTERVAL))
#define _IFIELD_RA(x) ((0x001f0000 & x) >> 16)
#define _IFIELD_RC(x) ((0x00000001 & x) >> 0)
#define _IFIELD_RD(x) ((0x03e00000 & x) >> 21)
#define EPIC_MSG_INT0_VEC_REG (EPIC_CCSROFF + 0x11600)
#define SYSFLG_AUTOFILE 0x800
#define INCLUDE_BRANCH_PREDICTION 
#define _EXC_OFF_SYSTIMER _EXC_OFF_DECR
#define _WRS_CHANGE_INSN_SET(p) {}
#define MMU_ATTR_SUP_RWX (MMU_ATTR_SUP_RW | MMU_ATTR_PROT_SUP_EXE)
#define MMU_ATTR_CACHE_GUARDED 0x00000400
#define RAPIDIO_BA 0xC0000
#define REG_SET_SP (REG_SET_GR(1))
#define _IFIELD_SH(x) ((0x0000f800 & x) >> 11)
#define RNG_ELEM_GET(ringId,pCh,fromP) ( fromP = (ringId)->pFromBuf, ((ringId)->pToBuf == fromP) ? 0 : ( *pCh = (ringId)->buf[fromP], (ringId)->pFromBuf = ((++fromP == (ringId)->bufSize) ? 0 : fromP), 1 ) )
#define MMU_ATTR_SPL_MSK 0x000FF000
#define IPCOM_SHELL_NATIVE 4
#define _CPU_STACK_ALIGN_SIZE 16
#define FUNCREF(func) func
#define VXB_EPICINTCTLR_ENABLE_INTS _VXB_EPICINTCTLR_ENABLE_INTS
#define S_ioLib_DISK_NOT_PRESENT ENXIO
#define CACHE_CMD_INVALIDATE 0x0c000000
#define EPIC_SMSG_INT1_VEC_REG (EPIC_CCSROFF + 0x11c20)
#define EXIT_SUCCESS _PARM_EXIT_SUCCESS
#define _INC_vxbParamSysH 
#define WV_EVT_PROTO_REV_CURRENT WV_EVT_PROTO_REV_6_7
#define EPIC_IN_INT35_DES_REG (EPIC_CCSROFF + 0x10670)
#define OBJ_INSTRUMENTED(objId) ((((OBJ_CORE *)(objId))->handle.attributes) & WIND_OBJ_INSTRUMENTED)
#define SM_MAX_WAIT 3000
#define EPIC_EX_DEST_REG(irq) (EPIC_EX_VEC_REG(irq) + EPIC_EX_DEST_REG_VECREGOFF)
#define __INCppc85xxh 
#define _IFIELD_TO(x) ((0x03e00000 & x) >> 21)
#define _PPC_ESR_PIL_U 0x0800
#define VX_TRAD_SCHED_CONSTANT_RDY_Q TRUE
#define AIO_TASK_STACK_SIZE 0
#define EVENT_OBJ_MSGDELETE CLASS2_EVENT(25)
#define INCLUDE_EXC_HANDLING 
#define M_ioLib (12 << 16)
#define _VX_PPC32 90
#define EPIC_EIDR_P0_INT EPIC_BIT(0)
#define __INCeventph 
#define INCLUDE_TASK_RESTART 
#define EPIC_MSG_INT0_DES_REG (EPIC_CCSROFF + 0x11610)
#define RIO_CAR_ASSEMBLY_INFO 0x0c
#define _STD_USING_INT_TYPES 
#define EVENT_MSGCSEND CLASS3_EVENT(36)
#define CACHE_COPYBACK 0x02
#define PCI_ID_I82559 0x12298086
#define semOwner state.owner
#define _IFIELD_VC(x) ((0x000007c0 & x) >> 6)
#define _IFIELD_VD(x) ((0x03e00000 & x) >> 21)
#define _IFIELD_VS(x) ((0x03e00000 & x) >> 21)
#define M85XX_PORDEVSR_PCI_MODE(base) ((*M85XX_PORDEVSR(base) & M85XX_PORDEVSR_PCI_MODE_MASK)>>23)
#define VXB_BAUD_RATE "baudRate"
#define OPT_TANDEM 0x04
#define _VX_I960HX 25
#define _IFIELD_WS(x) ((0x0000f800 & x) >> 11)
#define _VX_MIPS32 41
#define M_shellInterpCmdLib (174 << 16)
#define VXB_INTR_ENTSZ 32
#define EPIC_SR_ERR_INT_NUM 32
#define EXTENDED_REF_REC 0x100
#define IPCOM_USE_SOCK IPCOM_SOCK_NATIVE
#define FD_1_TYPE -1
#define RUNTIME_SMP_NAME "SMP"
#define CS2_CONFIG 0x088
#define M85XX_SVR(base) (CAST(VUINT32 *)((base) + 0xE00A4))
#define _PPC_ESR_BO_U 0x0002
#define PCIEX_INBOUND_TRANS_ADRS_REG2(base) CVPUINT32(base, 0xaDC0)
#define PCIEX_INBOUND_TRANS_ADRS_REG3(base) CVPUINT32(base, 0xaDA0)
#define _MACH_MACHLIMITS_H_ 
#define EPIC_EIVPR_SENS(s) ((s) << 22)
#define VX_SPE_TASK VX_COPROC3_TASK
#define _VX_I960JX 24
#define LOW24_INSERT(buf,value) INSERT ((buf), (value), 0x03fffffc)
#define EPIC_FRR_NCPU_SHIFT 8
#define IPCOM_USE_BITARRAY 
#define REG_TYPE_SHIFT 24
#define _DBCR1_IAC12AT_U 0x0001
#define VXB_SPIN_LOCK_TAKE(x) (*pVxbSpinLockTake)(x)
#define LONG_MIN (-LONG_MAX-1)
#define S_symLib_SYMBOL_NOT_FOUND (M_symLib | 1)
#define EVT_SYSCALL_ENTRY(RTPID,NPARAMS,PSTATE) do { if (ACTION_IS_SET) { EVENT_SYSCALL_ENTER_T evt_syscall_entry; evt_syscall_entry.rtpId = RTPID; evt_syscall_entry.nParams = NPARAMS; evt_syscall_entry.pState = PSTATE; eventPointSwHandle(EVENT_SYSCALL_ENTER, &evt_syscall_entry, sizeof evt_syscall_entry); } } while ((0))
#define MCAR 573
#define EVENT_TIMESTAMP_CONFIG CONTROL_EVENT(8)
#define getc(p) __sgetc(p)
#define _VX_I960KA 22
#define _VX_I960KB 23
#define M85XXRIO_SOCAR(base) (CAST(VUINT32 *)(((char*)base) + 0x0018))
#define MMU_PAGE_LOCK (*(mmuLibFuncs.mmuPageLock))
#define INCLUDE_IO_SYSTEM 
#define M_bootLoadLib (82 << 16)
#define INCLUDE_SEM_COUNTING 
#define RIO_SWITCH_PORT_ACCESS(x) ((x) & RIO_SWITCH_PORT_SRC_MASK) >> 24)
#define __INCppc32h 
#define M_dmsLib (126 << 16)
#define PHY_100BASE_T4 0x04
#define OBJ_LOCK(classId,lockLevel) do { lockLevel = INT_CPU_MICRO_LOCK(); } while ((0))
#define INCconfigAllNetworkh 
#define VX_READ 0
#define DDR_CAPTURE_ADDRESS 0xe50
#define M85XXRIO_ODSR(base) (CAST(VUINT32 *)(((char*)base) + 0x13404))
#define MII_MASSLA_CTRL_CONFIG_EN 0x1000
#define __STRICT_ANSI__ 1
#define M85XXRIO_BDIDCSR(base) (CAST(VUINT32 *)(((char*)base) + 0x00060 ))
#define VXB_BUSID_USB_HOST_EHCI 11
#define SYM_THUMB 0x80
#define _VX_MIPS64 42
#define RIO_MAX_OUTBOUND_CHANNELS 9
#define VXB_INST_INIT2_DONE 0x00000002
#define NUM_FILES 50
#define WV_EVT_PROTO_REV_2_0_FCS 2
#define __INCqLibh 
#define S_mmuLib_NO_DESCRIPTOR (M_mmuLib | 2)
#define S29GL_FLASH_SIZE 0x04000000
#define DDR_ERR_DETECT 0xe40
#define M85XXRIO_ATMU_CHANNELS 15
#define M85XXRIO_PCCSR(base) (CAST(VUINT32 *)(((char*)base) + 0x0015C ))
#define _DBSR_IAC1_U 0x0080
#define EPIC_RES47_INT_NUM 47
#define VXB_ITERATE_VERBOSE 8
#define __LDBL_HAS_DENORM__ 1
#define MII_EXP_LOC_NP 0x0004
#define IPCOM_RAM_DISK_BLOCK_SIZE 512
#define LBC_CS3_SIZE 0x0100000
#define DBG_SYSCALL_SIZE (sizeof (INSTR) / sizeof (INSTR))
#define BOOT_LINE_SIZE 255
#define I2C_BYTE_NUM_MASK 0x700
#define PCIEX_INBOUND_BASE_ADRS_REG2(base) CVPUINT32(base, 0xaDC8)
#define MMU_STATE_UNLOCK 0x00000000
#define PCI2_OUTBOUND_BASE_ADRS_REG0(base) CVPUINT32(base, 0x9c08)
#define PCI2_OUTBOUND_BASE_ADRS_REG1(base) CVPUINT32(base, 0x9c28)
#define PCI2_OUTBOUND_BASE_ADRS_REG3(base) CVPUINT32(base, 0x9c68)
#define PCI_INT_ACK (CCSBAR + 0x8008)
#define __INCarchPpcCommonh 
#define M_if_sl (53 << 16)
#define _WRS_INLINE_QorIQdcbf 
#define __DELETE_FUNC FALSE
#define EDR_RECORD_SIZE 4096
#define MII_ANAR_100TX_FD 0x0100
#define UPDATE _VX_UPDATE
#define M_rdsLib (166 << 16)
#define _ALLOC_ALIGN_SIZE _ppcAllocationQuantumSize
#define __ISO_C_VISIBLE 1999
#define S_iosLib_CONTROLLER_NOT_PRESENT ENXIO
#define _VX_VOIDFUNCPTR_DEFINED 
#define ARMSA110 _VX_ARMSA110
#define _PPC_L1CFG_NWAY_V(x) (x >> 12)
#define EVENT_MSGSRECEIVE CLASS3_EVENT(41)
#define _DBCR0_DAC1R 0x00080000
#define _VX_VOID_FROM_CONST(x) (void *)(x)
#define _DBCR0_DAC1W 0x00040000
#define _PPC_ESR_BO 0x00020000
#define _PPC_TCR_WPEXT_U 0x0040
#define M_if_ul (122 << 16)
#define LOCAL_MEM_LOCAL_ADRS 0x00000000
#define FIONFREE64 51
#define __DBL_MAX_EXP__ 1024
#define IPCOM_DRV_ETH_MAX_MULTIADDR 32
#define PCI_IN_ATTR_RTT_LM_READ_NO_SNOOP 0x00040000
#define VX_NATIVE_SCHED_CONSTANT_RDY_Q VX_TRAD_SCHED_CONSTANT_RDY_Q
#define MMUCFG 1015
#define VX_GLOBAL_NO_STACK_FILL FALSE
#define _WRS_CONFIG_KSOURCE 1
#define _WRS_HAS_GCC_ASM_SYNTAX 
#define VXB_REG_WIDTH "regWidth"
#define _DBCR0_DAC2R 0x00020000
#define _DBCR0_DAC2W 0x00010000
#define MII_ANAR_100TX_HD 0x0080
#define EPIC_TM_B1_VEC_REG (EPIC_CCSROFF + 0x02160)
#define MII_PHY_ID1_REG 0x2
#define MMU_PAGE_TBL_ENTRIES_MAX (0x1 << MMU_PAGE_INDEX_BITS_MAX)
#define __INCiosLibh 
#define VXB_BYTE_ORDER_CONVERT_16(flags,data,mask) { if ((flags & VXBAF_ENDIAN_MASK) != mask) { VXBAF_BYTE_SWAP_16(data); flags &= ~(VXBAF_ENDIAN_MASK); flags |= mask; flags ^= (VXBAF_CONVERT_BYTE_ORDER); } }
#define __BSD_VISIBLE 1
#define M_loadRtpLib (186 << 16)
#define SEM_Q_PRIORITY 0x01
#define EPIC_DMA1_INT_VEC (EPIC_DMA1_INT_NUM + EPIC_VEC_IN_IRQ0)
#define CLASS_LIST_SEM_INIT_OPTIONS (SEM_Q_PRIORITY | SEM_DELETE_SAFE | SEM_INVERSION_SAFE)
#define MAX_DRV_NAME_LEN 31
#define _PPC_TCR_DIE_U 0x0400
#define IAC1 312
#define IAC2 313
#define EPIC_EX_INT11_DES_REG (EPIC_CCSROFF + 0x10170)
#define INT_CPU_UNLOCK(key) intCpuUnlock(key)
#define _VA_LIST_ 
#define _PPC_MMUCSR0_IL1MMU_FI_V(x) (x >> 4)
#define MIN_CLASS1_ID 50
#define __eventdefsPh 
#define AIO_LISTIO_MAX 10
#define EPIC_OPT_EXPIN_MSK (EPIC_EIDR_EX_PIN >> 16)
#define _WRS_CONFIG_DEFAULT_GPP 1
#define SM_BASE_ADRS LOCAL_MEM_LOCAL_ADRS
#define STACK_ROUND_DOWN(x) ROUND_DOWN(x, _STACK_ALIGN_SIZE)
#define IPCOM_USE_MD5 
#define _POSIX_TZNAME_MAX 3
#define _POSIX_SSIZE_MAX 32767
#define __INCmemLibh 
#define _VX_SH7700 134
#define VXB_BYTE_ORDER_CONVERT_32(flags,data,mask) { if ((flags & VXBAF_ENDIAN_MASK) != mask) { VXBAF_BYTE_SWAP_32(data); flags &= ~(VXBAF_ENDIAN_MASK); flags |= mask; flags ^= (VXBAF_CONVERT_BYTE_ORDER | VXBAF_CONVERT_SHORT_ORDER); } }
#define _IFLAG_403_SPEC 0x0080
#define TRG_ACTION_UNSET { vxAtomicAnd ((atomic_t*)&evtAction, ~(0x0001)); }
#define S_taskLib_TASK_HOOK_NOT_FOUND (M_taskLib | 103)
#define EPIC_BITS_M2N(x,y) (( 1 << ((y)-(x)+1) ) - 1) << (x)
#define _EXC_OFF_ALIGN 0x00600
#define MC68010 _VX_MC68010
#define _PPC_SPEFSCR_FOVF 0x00000100
#define EPIC_TM_B1_DES_REG (EPIC_CCSROFF + 0x02170)
#define CPU_PWR_TASK_P_STATE (cpuPwrP0State)
#define WV_REV_ID_BASE6 0xb1b10000
#define _STD_USING_CLOCK_T 
#define M85XXRIO_OSAR(base) (CAST(VUINT32 *)(((char*)base) + 0x11014))
#define SEM_INTERRUPTIBLE 0x20
#define __INCvxWorksCommonh 
#define WIND_OBJ_CORE_HANDLE_ATTRIBUTES 0x8
#define M85XXRIO_ROWTAR0(base) (CAST(VUINT32 *)(((char*)base) + 0x10C00 ))
#define MEM_ALLOC_ERROR_EDR_WARN_FLAG 0x200
#define BSP_REV "/6"
#define FIT_DIVIDER_TAP_14 14
#define IPCOM_FILE_NATIVE 3
#define STOPB 0x20
#define _IFORM_EVX_10 100
#define _IFORM_EVX_11 101
#define _IFORM_EVX_12 102
#define _IFORM_EVX_13 103
#define STACK_NAME_V4 1
#define VX_DEALLOC_TCB 0x8000
#define FIT_DIVIDER_TAP_16 16
#define EVENT_IDLE_TASK_ID CONTROL_EVENT(19)
#define _STDARG_H 
#define M85XXRIO_ROWTARn(base,n) (CAST(VUINT32 *)(((char*)base) + 0x10C00 + ((n)*0x20)))
#define TRG_ON 0x10000000
#define M85XX_DCR0(base) (CAST(VUINT32 *)((base) + 0xe0f1c))
#define M85XX_DCR1(base) (CAST(VUINT32 *)((base) + 0xe0f20))
#define PCI_ID_I82559ER 0x12098086
#define _PC_PIPE_BUF 12
#define S_memLib_WRONG_PART_ID (M_memLib | 6)
#define __INCb_mode_th 
#define LAWAR_TGTIF_PCI2 0x00100000
#define _PC_VDISABLE 20
#define FIT_DIVIDER_TAP_18 18
#define __LONG_LONG_MAX__ 9223372036854775807LL
#define __INCselectLibh 
#define M85XX_L2SRBAR_ADDR_EA_MSK 0x0000000F
#define CACHE_DRV_PHYS_TO_VIRT(pFuncs,adrs) (((pFuncs)->physToVirtRtn == NULL) ? (void *) (adrs) : ((void *) ((pFuncs)->physToVirtRtn) (adrs)))
#define INCLUDE_SELECT 
#define KERNEL_LOCK_OWNER_GET() (kernelLockOwnerGet())
#define _MMU_TLB_PERM_UX 0x00040000
#define EPIC_SR_OUT_MU2_INT_NUM 39
#define FEXCL _FEXCL
#define EVENT_CONFIG CONTROL_EVENT(4)
#define EPIC_ECM_INT_VEC (EPIC_ECM_INT_NUM + EPIC_VEC_IN_IRQ0)
#define O_CNTRL _FCNTRL
#define INCLUDE_WDB_DIRECT_CALL 
#define __INCstdlibh 
#define LAWAR_SIZE_2GB 0x0000001E
#define BOOT_HOST_LEN 20
#define EXT_MAX_IRQS 200
#define ENOTEMPTY 15
#define _VX_SH7750 137
#define FLASH_WINDOW_SIZE 0x00800000
#define M_smObjLib (88 << 16)
#define PASSFS_CACHE TRUE
#define EVENT_TASKUNSAFE CLASS3_EVENT(7)
#define INCLUDE_MEM_MGR_FULL 
#define MPC85XX_I2C_STATUS_REG_MBB 0x20
#define INCLUDE_WDB_BP 
#define EPIC_IN_INT2_DES_REG (EPIC_CCSROFF + 0x10250)
#define BOOT_ADDR_LEN 30
#define WDB_COMM_TYCODRV_5_2 2
#define EVENT_RTP_LOAD CLASS3_EVENT(81)
#define MMU_STATE_SUP_RWX_USR_R (MMU_STATE_SUP_RWX | _MMU_UR)
#define __INCb_time_th 
#define MMU_STATE_SUP_RWX_USR_W (MMU_STATE_SUP_RWX | _MMU_UW)
#define MMU_STATE_SUP_RWX_USR_X (MMU_STATE_SUP_RWX | _MMU_UX)
#define SH7410 _VX_SH7410
#define INCLUDE_MSG_Q_CREATE_DELETE 
#define PCI2_INBOUND_TRANS_ADRS_REG1(base) CVPUINT32(base, 0x9DE0)
#define S_smLib_INVALID_CPU_NUMBER (M_smLib | 2)
#define __INCvxPpcLibh 
#define MII_ADS_SEL_MASK 0x001f
#define MAX_VALUE_PLAT_RATIO 32
#define VX_TASK_NAME_LENGTH 31
#define EVENT_CPC_INVOKE CLASS3_EVENT(231)
#define FD_DEV_NAME "/fd"
#define ENV_VAR_USE_HOOKS TRUE
#define MMU_ATTR_PROT_INDEX_SHIFT 1
#define M85XXRIO_RIWAR_PCIEX 0x02
#define S_symLib_INVALID_SYMBOL_NAME (M_symLib | 5)
#define EPIC_OPT_POLAR_ACT_HIGH 0x00800000
#define ARMARCH7_T _VX_ARMARCH7_T
#define ENOSPC 28
#define _MMU_TLB_SZ_MASK 0x00000f00
#define M_smPktLib (78 << 16)
#define MMU_STATE_MASK_WRITETHROUGH 0x00000010
#define SIO_DEV_LOCK 0x1015
#define RLIMIT_OFILE RLIMIT_NOFILE
#define sioIoctl(pSioChan,cmd,arg) ((pSioChan)->pDrvFuncs->ioctl (pSioChan, cmd, arg))
#define SYM_MASK_EXACT 0x1ff
#define _VX_SIMHPPA 70
#define __INCmsgQLibh 
#define PCI2_OUTBOUND_BASE_ADRS_REG2(base) CVPUINT32(base, 0x9c48)
#define CLASSID_RESTORE(classId) ((CLASS_ID) ((int)classId & ~1))
#define _VX_PPC8560 2013
#define _PTRDIFF_T 
#define M_omsLib (158 << 16)
#define _DBCR0_IAC2_U 0x0040
#define EVENT_OBJ_SIGKILL CLASS2_EVENT(28)
#define _ARCH_jmp_buf_len 8
#define SPRG7_W 279
#define M_bootpLib (73 << 16)
#define INCLUDE_TIMEX 
#define __IDSTRING(name,string) __asm__(".ident\t\"" string "\"")
#define INCLUDE_ANSI_STRING 
#define EVENT_TASKSPAWN CLASS3_EVENT(0)
#define VXBAF_PREVENT_OPTIMIZATION 0x00000100
#define INCLUDE_NETBUFPOOL 
#define M85XXRIO_PELLCCSR(base) (CAST(VUINT32 *)(((char*)base) + 0x0004C ))
#define STATE_TO_VALID_INDEX(state) ((MMU_ATTR_VALID_GET(state)) >> MMU_ATTR_VALID_INDEX_SHIFT)
#define EPIC_IPI_DPATCH_REG0 (EPIC_CCSROFF + 0x00040)
#define _WRS_EVTLOGT1_NOTS 
#define EPIC_IPI_DPATCH_REG2 (EPIC_CCSROFF + 0x00060)
#define EPIC_IPI_DPATCH_REG3 (EPIC_CCSROFF + 0x00070)
#define EVENT_OBJ_MSGCREPLYGET CLASS2_EVENT(39)
#define KERNEL_LOCK_TRY() (kernelLockTry())
#define S_vxdbgLib_CPU_NOT_SUSPENDED VXDBG_ERROR_TO_ERRNO(VXDBG_ERR_CPU_NOT_SUSPENDED)
#define _VX_ALIGN_STACK _ARCH_ALIGN_STACK
#define _WRS_INITDATA __attribute__ ((__section__ (".data.init")))
#define __FLT_MIN_EXP__ (-125)
#define INCLUDE_LBC_CS3 
#define INCLUDE_PRIMARY_TSEC_END 
#define _BRANCH_CACHE 2
#define BLOB_PADDING(dataLength,alignment) (BLOB_PADDED_LENGTH(dataLength,alignment) - dataLength)
#define MMU_ATTR_PROT_SUP_MSK 0x00000007
#define FS_NAMES_ATA_SECONDARY_MASTER ""
#define EPIC_WHO_AM_I1_REG (EPIC_CCSROFF + 0x21090)
#define INT_LOCK_LEVEL 0x0
#define _WRS_REV_INSN_SET_CHANGE(p) (p)
#define EPIC_TSEC2RX_INT_NUM 20
#define F_GETOWN 5
#define EPIC_IN_INT32_VEC_REG (EPIC_CCSROFF + 0x10600)
#define LAWAR_SIZE_2MB 0x00000014
#define SIO_MODE_GET 0x1008
#define _VX_MIPSI32 45
#define EPIC_TSEC1TX_INT_NUM 13
#define EPIC_PERFMON_INT_NUM 28
#define M85XXRIO_ISR(base) (CAST(VUINT32 *)(((char*)base) + 0x11064))
#define _PPC_L1CSR_CPE 0x00010000
#define TRG_CLASS1_INDEX 0
#define KERNEL_APPL_CORE_DUMP_ENABLE FALSE
#define __printf0like(fmtarg,firstvararg) 
#define OM_EXCL 0x20000000
#define SIO_CALLBACK_GET_TX_CHAR 1
#define MMU_STATE_LOCK 0x00800000
#define _WRS_CONFIG_BUILD_MODE_speed 1
#define _VX_MIPSI2 43
#define _VX_MIPSI3 44
#define AIO_TASK_PRIORITY 0
#define __INCvxSmpPh 
#define DEFAULT_VM_MAP_ATTR (MMU_ATTR_VALID | MMU_ATTR_SUP_RWX | MMU_ATTR_CACHE_DEFAULT)
#define VXBAF_BYTE_SWAP_32(data) ((data) = ((((data) & 0xFF) << 24) | (((data) & 0xFF00) << 8) | (((data) & 0xFF0000) >>8) | (((data) >> 24) & 0xFF)))
#define INCLUDE_DOSFS_MAIN 
#define INCLUDE_NET_REM_IO 
#define I2C_ERROR_CYCLE_TIMEOUT (1<<16)
#define NBBY _VX_NBBY
#define FLASH_BASE_ADRS 0xfff00000
#define M85XXRIO_RxWAR_TYPE_WRITE(val) (val << 12)
#define _BSD_SIZE_T_ 
#define LOGIN_PASSWORD "RcQbRbzRyc"
#define FLASH_SPACE_SIZE TOTAL_FLASH_SIZE
#define S_ioLib_MEDIA_CHANGED (M_ioLib | 1)
#define MMU_ATTR_PROT_STATE_NUM 32
#define EVENT_RTPSIGQUEUE CLASS3_EVENT(88)
#define EPIC_VEC_SMSG_IRQ0 (EPIC_VEC_MSG_IRQ0 + EPIC_MAX_MSG_IRQS)
#define EPIC_CISR0_EX_INT(n) (EPIC_BIT(11-(n)) & EPIC_CISR0_EX_INT_MSK)
#define MMU_STATE_MASK_WRITABLE 0x00000c00
#define PCI_OUTBOUND_TRANS_ADRS_REG4(base) CVPUINT32(base, 0x8c80)
#define MII_EXP_PR 0x0002
#define IS_Q_ATTRIBUTE_OK(value) ((value) == QUEUE_INTERRUPTIBLE || (value) == QUEUE_NONINTERRUPTIBLE)
#define INCconfigAllh 
#define _WRS_CONFIG_PPC32_APP_TOOL "diab"
#define __INCvxTypesBaseh 
#define _VX_G200 32
#define M_erfLib (196 << 16)
#define _VX_MIPSI64 47
#define SEMRW_READ_CNT(semId) ( ((SEM_RW_EXT *) ((UINT) semId + sizeof (SEMAPHORE)))->readCount )
#define MAX_NUMBER_RIO_TARGETS 10
#define EPIC_MSISR_REG (EPIC_CCSROFF + 0x01720)
#define M85XXRIO_PGCCSR_OFFSET 0x13c
#define O_RSYNC _FRSYNC
#define VM_STATE_CACHEABLE_WRITETHROUGH MMU_ATTR_CACHE_WRITETHRU
#define DLL_INSERT(list,previousNode,node) { DL_NODE *temp; if ((previousNode) == NULL) { temp = ((DL_LIST *)(list))->head; ((DL_LIST *)(list))->head = (DL_NODE *)(node); } else { temp = ((DL_NODE *)(previousNode))->next; ((DL_NODE *)(previousNode))->next = (DL_NODE *)(node); } if (temp == NULL) ((DL_LIST *)(list))->tail = (DL_NODE *)(node); else temp->previous = (DL_NODE *)(node); ((DL_NODE *)(node))->next = temp; ((DL_NODE *)(node))->previous = (DL_NODE *)(previousNode); }
#define VX_TASK_INITIALIZE(name,prio,options,stackSz,entryPt,arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10) ((taskInitExcStk (&name ##Tcb, #name, (prio), (options), &name ##Stk[STACK_ROUND_UP((stackSz))], STACK_ROUND_UP((stackSz)), &name ##ExcStk [STACK_ROUND_UP((KERNEL_TASK_EXC_STACK_SIZE))], STACK_ROUND_UP((KERNEL_TASK_EXC_STACK_SIZE)), ((FUNCPTR) (entryPt)), (arg1), (arg2), (arg3), (arg4), (arg5), (arg6), (arg7), (arg8), (arg9), (arg10)) == OK) ? ((int) &name ##Tcb) : ((int) NULL))
#define EVENT_SYSCALL_0 CLASS3_EVENT(65)
#define EVENT_SYSCALL_1 CLASS3_EVENT(66)
#define EVENT_SYSCALL_2 CLASS3_EVENT(67)
#define EVENT_SYSCALL_3 CLASS3_EVENT(68)
#define EVENT_SYSCALL_4 CLASS3_EVENT(69)
#define EVENT_SYSCALL_5 CLASS3_EVENT(70)
#define EVENT_SYSCALL_6 CLASS3_EVENT(71)
#define EVENT_SYSCALL_7 CLASS3_EVENT(72)
#define EVENT_SYSCALL_8 CLASS3_EVENT(73)
#define VM_STATE_VALID_NOT MMU_ATTR_VALID_NOT
#define IPCOM_SOCK_NATIVE 4
#define SLL_NEXT(pNode) ( (((SL_NODE *)pNode)->next) )
#define __SMBF 0x0080
#define FIONWRITE 12
#define __INCcoprocPpch 
#define VXBAF_BYTE_SWAP_64(data) 
#define VXB_BUSID_PCIEXPRESS 5
#define EPIC_IN_INT13_VEC_REG (EPIC_CCSROFF + 0x103a0)
#define MMUE500_NUM_STATIC_TLB_ENTIRES 0x10
#define _VX_ARM7TDMI_T 125
#define SPEREG_SET SPE_CONTEXT
#define M_endLib (108 << 16)
#define VXB_ACCESS_REG_WRITE16 0x00000007
#define PCIEX_OUTBOUND_ATTR_REG2(base) CVPUINT32(base, 0xac50)
#define SPRG7_R 263
#define OBJ_VERIFY(objId,classId) objVerify (objId, classId)
#define N_TLB_ENTRIES_BITS 8
#define PC_OFFSET REG_SET_PC
#define M_symLib (28 << 16)
#define atomic32Or_inline atomic32Or
#define HOST_NAME_DEFAULT "bootHost"
#define MMU_ATTR_CACHE_OFF 0x00000080
#define PCI_IN_ATTR_TGI_LM 0x00f00000
#define MMU_ATTR_CACHE_STATE_NUM 16
#define tsecVxbEnd0Num NELEMENTS(tsecVxbEnd0Resources)
#define _PPC_ESF_VEC_OFF (_PPC_ESF_SP_OFF + _PPC_REG_SIZE)
#define FREQ_133_MHZ 133333333
#define _WRS_ARCH_HAS_VXDBG_CPU_CTRL_SUPPORT 
#define ENETRESET 52
#define FDEFER _FDEFER
#define DOSFS_DEFAULT_DATA_DIR_CACHE_SIZE 0x800000
#define VXB_ACCESS_REG_WRITE32 0x00000008
#define _VX_MCORE10 151
#define _VX_MCORE15 152
#define RIO_OP_SUPPORTED_RWRITE 0x00080000
#define MEM_ALIGNED(x) ALIGNED(x, _ALLOC_ALIGN_SIZE)
#define PCI_ATTR_WS_512M 0x0000001c
#define LAWAR_TGTIF_PCI 0x00000000
#define EPIC_IN_INT13_DES_REG (EPIC_CCSROFF + 0x103b0)
#define _VX_FD_SET(n,p) ((p)->fds_bits[(n)/_VX_NFDBITS] |= (1 << ((n) % _VX_NFDBITS)))
#define MSG_Q_INTERRUPTIBLE 0x04
#define SS_1D_5 5
#define INCLUDE_BOOT_LINE_INIT 
#define SS_1D_8 1
#define DDR_SDRAM_CFG 0x110
#define _VX_SIMNT 100
#define EPIC_GCR_RESET EPIC_BIT(31)
#define MII_AN_ADS_REG 0x4
#define _VX_SH7000 131
#define _PARM_BIG_ENDIAN 1234
#define VXB_REMOVAL_INSTANCE 0x00001000
#define G200 _VX_G200
#define VM_STATE_GUARDED MMU_ATTR_CACHE_GUARDED
#define RIO_CHANNEL_GENERIC 0x00000001
#define CHAR_MAX 255
#define _IFIELD_FRA(x) ((0x001f0000 & x) >> 16)
#define PCI_IN_ATTR_RTT_LM_READ_SNOOP 0x00050000
#define _WRS_VA_ADDR(x) ((va_list *)x)
#define _PPC_WORD_SIZE 32
#define INCLUDE_MOT_TSEC_END 
#define VXB_ACCESS_REG_WRITE64 0x00000009
#define CONSOLE_BAUD_RATE 115200
#define DS_2D_5 8
#define DS_2D_8 4
#define _PPC_ESR_PPR_U 0x0400
#define _IFIELD_BO(x) ((0x03e00000 & x) >> 21)
#define EPIC_IN_INT0_DES_REG (EPIC_CCSROFF + 0x10210)
#define PCI2_OUTBOUND_BASE_ADRS_REG4(base) CVPUINT32(base, 0x9c88)
#define INCLUDE_END_COMMON 
#define FLASH_SECTOR_SIZE 0x00020000
#define _VX_LOW32(x) (long) (((long long)(x)) & (unsigned long) 0xffffffff)
#define EOS '\0'
#define DELETE_DONE OK
#define _ARCH_FLT_RADIX 2
#define M85XX_PORDEVSR_PCI_MODE_MASK 0x00800000
#define _PARM_BUFSIZ 1024
#define SM_INT_USER_1 8
#define SM_INT_USER_2 9
#define _PPC_TCR_FPEXT_U 0x0040
#define SYSFLG_WDB 0x200
#define VXB_ACCESS_REG_READ64 0x00000005
#define CS3_BNDS 0x018
#define _MMU_TLB_SZ_256M 0x00000900
#define S_vxdbgLib_INVALID_EVENT_TYPE VXDBG_ERROR_TO_ERRNO(VXDBG_ERR_INVALID_EVENT_TYPE)
#define __REGISTER_PREFIX__ 
#define M85XXRIO_AIDCAR(base) (CAST(VUINT32 *)(((char*)base) + 0x0008))
#define _VX_SH7040 133
#define VXB_PARAM_INT32 0x0001
#define S_iosLib_DUPLICATE_DEVICE_NAME EINVAL
#define VXB_INTR_TRIG_LEVEL 0x20
#define _WRS_USAGE_WARNING(x) _WRS_DEPRECATED(x)
#define S_vmLib_NOT_PAGE_ALIGNED (M_vmLib | 1)
#define EIDRM 84
#define EPIC_RES47_INT_VEC (EPIC_RES47_INT_NUM + EPIC_VEC_IN_IRQ0)
#define VXDBG_MEM_WIDTH_WRITE vxdbgMemWrite
#define REG_SET_XER (REG_SET_CR + 4)
#define MPC85XX_I2C_STATUS_REG_MCF 0x80
#define _PC_NAME_MAX 9
#define __INCmiiLibh 
#define _DBCR0_RST 0x30000000
#define _PPC_ESF_SIZE (9 * _PPC_REG_SIZE + _PPC_REG_SET_SIZE)
#define SM_INT_MAILBOX_R1 5
#define __INCivPpch 
#define SM_INT_MAILBOX_R4 7
#define RIO_CFG_INDEX 5
#define MPC85XX_I2C_STATUS_REG_BCSTM 0x08
#define MII_CR_AUTO_EN 0x1000
#define HOST_USER_DEFAULT "target"
#define _WRS_CONFIG_OBJECT_VERIFICATION 1
#define INCLUDE_VXMUX_NULLBUFPOOL 
#define REV2_SILICON 
#define _PC_MAX_CANON 7
#define IPCOM_USE_KEY_DB_CMD_VERIFY 
#define M8260_DPPC_VALUE 0x08000000
#define PCI2_INT_ACK (CCSBAR + 0x9008)
#define MAX_MAC_DEVS 4
#define EVENT_TASK_CPU_AFFINITY_SET CLASS3_EVENT(230)
#define EPIC_MAX_MSG_IRQS 4
#define ALIGN_REGS _VX_ALIGN_REGS
#define _PPC_ESR_AP 0x00080000
#define SPIN_LOCK_ISR_TAKE(x) (spinLockIsrTake (x) )
#define EVENTS_FETCH 0x80
#define INCLUDE_SEM_DELETE 
#define TLB_GLOBAL_BIT 25
#define EPIC_IN_INT25_DES_REG (EPIC_CCSROFF + 0x10530)
#define TIMING_CFG_0 0x104
#define TIMING_CFG_1 0x108
#define TIMING_CFG_2 0x10C
#define DDR_OFFSET 0x2000
#define _DBCR2_DAC12M_U 0x00c0
#define MII_PHY_100 0x0040
#define VXB_PARAM_INT64 0x0002
#define FIOBAUDRATE 4
#define __INCsllLibh 
#define CLASS3_EVENT(id) (MIN_CLASS3_ID + id)
#define M85XX_I2C1_BASE 0x3000
#define WDB_COMM_TIPC 9
#define PCI_IN_ATTR_RTT_LM_READ_UNLOCK_L2_CACHE_LINE 0x00070000
#define SYM_IS_TEXT(symType) ((symType) & SYM_TEXT)
#define _WRS_CONFIG_BUILD_KERNEL 1
#define _PPC_MSR_CE_U 0x0002
#define _PPC_MMUCSR0_L2TLB1_FI_V(x) (x >> 1)
#define VXB_PCI_BUS_CFG_WRITE(pDev,byteOffset,transactionSize,data) ((_func_vxbPciDevCfgWrite == NULL) ? ERROR : _func_vxbPciDevCfgWrite (pDev, byteOffset, transactionSize, (UINT32) data))
#define M85XX_L2CTL_L2MEXTDIS_BIT 20
#define ns165500Num NELEMENTS(ns165500Resources)
#define MEM_BLOCK_ERROR_MASK 0x0c
#define EVENT_OBJ_SIGWAIT CLASS2_EVENT(32)
#define FNONBIO _FNONBLOCK
#define _IFIELD_IMM(x) ((0x0000f000 & x) >> 12)
#define CHAR_MIN 0
#define __INCvxAtomicArchLibCommonh 
#define EVENT_TASKSUSPEND CLASS3_EVENT(4)
#define VM_STATE_GUARDED_NOT 0
#define CHAR_FROM_CONST(x) _VX_CHAR_FROM_CONST(x)
#define __VERSION__ "4.1.2"
#define _VX_MC68LC040 6
#define EVENT_ISR_DISPATCHER_DONE CLASS3_EVENT(61)
#define PCIEX_OUTBOUND_TRANS_EXT_ADRS_REG0(base) CVPUINT32(base, 0xac04)
#define PCIEX_OUTBOUND_TRANS_EXT_ADRS_REG1(base) CVPUINT32(base, 0xac24)
#define RIO_SWITCH_PORT_SRC_MASK 0xff000000
#define PCIEX_OUTBOUND_TRANS_EXT_ADRS_REG4(base) CVPUINT32(base, 0xac84)
#define EPIC_DMA0_INT_NUM 4
#define DEFAULT_ALIVE_TIMEOUT 600
#define VME_AM_STD_SUP_DATA 0x3d
#define MMU_STATE_CACHEABLE 0x00000000
#define CLASS_OFFSET 0xB
#define SLL_REMOVE(list,deleteNode,previousNode) { if (((SL_NODE *)(previousNode)) == NULL) { ((SL_LIST *)(list))->head = ((SL_NODE *)(deleteNode))->next; if (((SL_LIST *)(list))->tail == ((SL_NODE *)(deleteNode))) ((SL_LIST *)(list))->tail = NULL; } else { ((SL_NODE *)(previousNode))->next = ((SL_NODE *)(deleteNode))->next; if (((SL_LIST *)(list))->tail == ((SL_NODE *)(deleteNode))) ((SL_LIST *)(list))->tail = ((SL_NODE *)(previousNode)); } }
#define SYSFLG_PROXY 0x100
#define EPIC_PERFMON_0_MSK_REG1 (EPIC_CCSROFF + 0x01360)
#define M85XX_L2CEWCRn(x,n) (CAST(VUINT32 *)((x + 0x20018) + (n * 0x10)))
#define IPCOM_KEY_DB_KEY_ENCRYPTING_KEY "donald duck"
#define _WRS_CONFIG_FEATURE_IPNET_BUILD "speed"
#define EVENT_RTP_DELETE_STATE VXEV26
#define S_semLib_INVALID_STATE (M_semLib | 101)
#define EPIC_EX_INT0_VEC_REG (EPIC_CCSROFF + 0x10000)
#define _IFORM_EVX_3 93
#define PCI_ATTR_BS_BIT 0x40000000
#define EVENT_TASKDELAY CLASS3_EVENT(2)
#define MII_AN_PRTN_NEXT_REG 0x8
#define MII_EXP_FAULT 0x0010
#define WV_REV_ID_CURRENT_SMP WV_REV_ID_VXWORKS_6_7_SMP
#define __INT_WCHAR_T_H 
#define VXWORKS_VERSION RUNTIME_NAME " " RUNTIME_VERSION
#define __BIG_ENDIAN__ 1
#define IS_CLASS2_EVENT(event) ((event >= MIN_CLASS2_ID) && (event <= MAX_CLASS2_ID))
#define MII_PHY_LINK_UNKNOWN 0x0
#define S_memLib_PAGE_SIZE_UNAVAILABLE (M_memLib | 5)
#define _VX_PPC601 91
#define _VX_PPC602 92
#define _VX_PPC603 93
#define _VX_PPC604 94
#define SPD_SIZE 256
#define _PC_REC_INCR_XFER_SIZE 14
#define SPIN_LOCK_TASK_INIT(x,y) ( spinLockTaskInit(x, y))
#define _DBSR_DAC1R_U 0x0008
#define _WRS_IS_SUPV_EXC() (((excInfo.msr & _PPC_MSR_PR) == _PPC_MSR_PR) ? FALSE : TRUE)
#define S_msgQLib_NON_ZERO_TIMEOUT_AT_INT_LEVEL (M_msgQLib | 2)
#define _WRS_CONFIG_COMPONENT_IPPPP 1
#define WIND_CLASS_INST_RTN 0x1c
#define EPIC_EX_INT8_DES_REG (EPIC_CCSROFF + 0x10110)
#define USER_B_CACHE_ENABLE 
#define O_RDWR 2
#define VX_COPROC1_TASK 0x01000000
#define _PPC_ESF_R11 _PPC_ESF_R(11)
#define _T_PTRDIFF_ 
#define EPERM 1
#define ARM7TDMI _VX_ARM7TDMI
#define FIOSELECT 28
#define M_m2RipLib (110 << 16)
#define TPR 0x0000
#define _WRS_CONFIG_APP_TOOL_diab 1
#define _PPC_ESF_R12 _PPC_ESF_R(12)
#define VM_STATE_WBACK_NOT MMU_ATTR_CACHE_WRITETHRU
#define EPIC_EX_INT0_DES_REG (EPIC_CCSROFF + 0x10010)
#define WIND_TCB_T10 WIND_TCB_R24
#define WIND_TCB_T11 WIND_TCB_R25
#define WIND_TCB_T13 WIND_TCB_R27
#define WIND_TCB_T14 WIND_TCB_R28
#define WIND_TCB_T15 WIND_TCB_R29
#define WIND_TCB_T16 WIND_TCB_R30
#define WIND_TCB_T17 WIND_TCB_R31
#define S_objLib_OBJ_DELETED (M_objLib _WRS_BIT_OR 3)
#define MMU_ATTR_VALID_STATE_NUM 2
#define __SSTR 0x0200
#define EVENT_WINDWDCANCEL CLASS2_EVENT(12)
#define EPIC_IPI_DPATCH0_REG2 (EPIC_CCSROFF + 0x20060)
#define CS1_CONFIG 0x084
#define BUS_TYPE_NONE NONE
#define BOOT_FIELD_LEN 160
#define VX_TASK_PRIORITY_MIN 0
#define LLSB(x) ((x) & 0xff)
#define RIO_CSR_LCS_HIGHBAR 0x58
#define WIND_TCB_R11 (WIND_TCB_REGS + REG_SET_GR(11))
#define EPIC_EOI_REG (EPIC_CCSROFF + 0x000b0)
#define EPIC_EIVPR_VECTOR_MSK (0xffff)
#define S_objLib_OBJ_INVALID_OWNER (M_objLib _WRS_BIT_OR 12)
#define M85XX_L2ERRINJCTL(x) (CAST(VUINT32 *)((x + 0x20E08)))
#define EPIC_GT_B_INTERRUPT 30
#define __hardfp 1
#define SIO_KYBD_MODE_SET 0x1011
#define MMU_STATE_CACHEABLE_NOT 0x00000008
#define __INCclassLibPh 
#define _WRS_DEPRECATED(x) __attribute__((deprecated))
#define __SLBF 0x0001
#define _ARCH_LDBL_MIN 2.2250738585072014e-308L
#define _POSIX_STREAM_MAX 8
#define EPIC_VEC_EXT_IRQ0 0
#define EPIC_TM_A_FREQ_REG (EPIC_CCSROFF + 0x010f0)
#define _ARCH_SHRT_MAX 32767
#define INCLUDE_POOL 
#define WIND_CLASS_TYPE 0x38
#define EPIC_CTPR_TASKPRI_MSK (EPIC_BIT(3) | EPIC_BIT(2) | EPIC_BIT(1) | EPIC_BIT(0))
#define _SYS_SIZE_T_H 
#define USPRG0 256
#define RLIMIT_NPROC 7
#define VM_STATE_GLOBAL_NOT 0
#define M85XX_L2CTL_L2LFRID_BIT 8
#define INCLUDE_IPCOM_USE_ETHERNET 
#define EPIC_GTVPR_INTR_ACTIVE EPIC_BIT(30)
#define DDRBA (CCSBAR | DDR_OFFSET)
#define SIO_MCTRL_ISIG_MASK 0x100F
#define SEM_NO_RECURSE 0x400
#define EPIC_IN_INT26_VEC_REG (EPIC_CCSROFF + 0x10540)
#define _BIG_ENDIAN 1234
#define __SIZE_T__ 
#define MII_EXP_PRT_AN 0x0001
#define MII_PHY_LINK_AUTO 0x1
#define CACHE_DMA_INVALIDATE(adrs,bytes) CACHE_DRV_INVALIDATE (&cacheDmaFuncs, (adrs), (bytes))
#define M_fmsLib (155 << 16)
#define M85XXRIO_RxWAR_SIZE_1MB 21
#define TASK_PRIORITY_SELF -1
#define _EXC_NEW_OFF_SYSTIMER _EXC_OFF_DECR
#define __SRW 0x0010
#define EPIC_SMSG_VEC_REG_INTERVAL 0x20
#define MCSRR1 571
#define PCI_IN_ATTR_RTT_RIO_READ 0x00040000
#define _EXC_OFF_INST 0x00400
#define _ARCH_va_start(list,last_arg) (list = (va_list)(&last_arg + 1))
#define S_symLib_TABLE_NOT_EMPTY (M_symLib | 3)
#define WRS_DATA_ALIGN_BYTES(x) _WRS_DATA_ALIGN_BYTES(x)
#define WDB_POST_KERNEL_INIT 0
#define MMU_PAGE_OPTIMIZE (*(mmuLibFuncs.mmuPageOptimize))
#define EPIC_GT_A_INTERRUPT 23
#define EPIC_INT_ACK_REG (EPIC_CCSROFF + 0x000a0)
#define WIND_TCB_R18 (WIND_TCB_REGS + REG_SET_GR(18))
#define MMU_ATTR_CACHE_DEFAULT 0x00000800
#define _IFORM_EVS_1 86
#define EPIC_TSEC1TX_INT_VEC (EPIC_TSEC1TX_INT_NUM + EPIC_VEC_IN_IRQ0)
#define _VX_MCORE200 153
#define EPIC_PERFMON_INT_VEC (EPIC_PERFMON_INT_NUM + EPIC_VEC_IN_IRQ0)
#define MMU_MAX_PHYS_BITS_GET (*(mmuLibFuncs.mmuMaxPhysBitsGet))
#define INCLUDE_TASK_CREATE_DELETE 
#define EPIC_IN_INT26_DES_REG (EPIC_CCSROFF + 0x10550)
#define EVENT_OBJ_SIGSUSPEND CLASS2_EVENT(27)
#define M85XX_L2SRBAR_ADDR_MSK 0xFFFFC000
#define INT_MASK(src,des) rlwinm des, src, 0, _PPC_MSR_BIT_EE+1, _PPC_MSR_BIT_EE-1; rlwinm des, des, 0, _PPC_MSR_BIT_CE+1, _PPC_MSR_BIT_CE-1
#define INCLUDE_INTCTLR_LIB 
#define CACHE_TEXT_LOCAL_UPDATE(adrs,bytes) CACHE_TEXT_UPDATE(adrs, bytes)
#define ELOOP 64
#define _IFORM_VA_1 62
#define _IFORM_VA_2 63
#define IVEC_TO_INUM(intVec) ((int) (intVec))
#define _VX_PPC85XX 2004
#define LOCAL_MEM_SIZE2 0x4000000
#define LBC_CS3_LOCAL_SIZE_MASK 0xfff00000
#define _WRS_CHANGE_INSN_SET_PTR(p) (p)
#define F_SETFD 2
#define INCLUDE_SIGNALS 
#define F_SETFL 4
#define __INCconfigh 
#define MII_TECH_MASK MII_ADS_TECH_MASK
#define _EXC_PROG_SRR1_PRIV 0x00040000
#define _VX_DBLFUNCPTR_DEFINED 
#define _DBCR2_DAC2US_U 0x0c00
#define _POSIX_SYNC_IO 0
#define EPIC_TSEC4RX_INT_NUM 22
#define MMU_PAGE_INDEX_BITS_MAX 10
#define FWRITE _FWRITE
#define _DBSR_IDE_U 0x8000
#define EPIC_MSG_EN_REG (EPIC_CCSROFF + 0x01500)
#define SIO_MODEM_CD 0x08
#define _ARCH_SHRT_MIN (-32767-1)
#define __SWR 0x0008
#define SEM_M_SAFE_Q_FLUSH 0x2
#define _PARM_L_ctermid 64
#define _TOOL_HDR_STRINGIFY(x) #x
#define EVENT_SEMGIVE CLASS3_EVENT(12)
#define __INCivh 
#define SPEFSCR 512
#define _PPC_ESF_R0 _PPC_ESF_R(0)
#define PCI_OUTBOUND_TRANS_EXT_ADRS_REG0(base) CVPUINT32(base, 0x8c04)
#define SIO_ERROR_PARITY 1
#define WV_EVT_PROTO_REV_1_EAR 1
#define EVT_OBJ_6(OBJ,CLASS,evtId,ARG1,ARG2,ARG3,ARG4,ARG5,ARG6) do { if ( ACTION_IS_SET ) { EVT_OBJ_6_T evt_obj_6; evt_obj_6.objId = OBJ; evt_obj_6.classId = CLASS; evt_obj_6.args [0] = (int)ARG1; evt_obj_6.args [1] = (int)ARG2; evt_obj_6.args [2] = (int)ARG3; evt_obj_6.args [3] = (int)ARG4; evt_obj_6.args [4] = (int)ARG5; evt_obj_6.args [5] = (int)ARG6; eventPointSwHandle(evtId, &evt_obj_6, sizeof evt_obj_6); } } while ((0))
#define _PPC_ESF_R3 _PPC_ESF_R(3)
#define MII_CR_DEF_0_MASK 0xca7f
#define _WRS_FASTDATA __attribute__ ((__section__ (".data.fast")))
#define FIOSETOPTIONS FIOOPTIONS
#define _PPC_ESF_R4 _PPC_ESF_R(4)
#define _EXC_INFO_NIA 0x8000
#define VXBAF_ENDIAN_MASK 0xFFFF0000
#define PPC_DECR_INT_ID 599
#define FREQ_266_MHZ 266666666
#define OPT_REG_WRITE8 0x05
#define MSG_Q_TYPE_MASK 0x01
#define O_RDONLY 0
#define EPIC_IPI_DPATCH1_REG2 (EPIC_CCSROFF + 0x21060)
#define EPIC_IPI_DPATCH1_REG3 (EPIC_CCSROFF + 0x21070)
#define EINVAL 22
#define _ANSI_STDARG_H_ 
#define __INCresourceh 
#define RIO_CHANNEL_AVAILABLE NULL
#define MMU_CURRENT_SET (*(mmuLibFuncs.mmuCurrentSet))
#define __INCstringh 
#define _PPC_ESF_R7 _PPC_ESF_R(7)
#define RIO_FEATURES_EXTADDR_34 0x2000
#define RAND_MAX _PARM_RAND_MAX
#define S_selectLib_NO_SELECT_SUPPORT_IN_DRIVER (M_selectLib | 1)
#define _MMU_TLB_SZ_SHIFT 8
#define _DEFINED_atomic_t 
#define _WRS_READ_PREFETCH(ptr) __builtin_prefetch((ptr),0)
#define _SIZET_ 
#define EPIC_MSIDR_EX_PIN EPIC_BIT(31)
#define F_SETLK 8
#define MMU_ATTR_SPL_1 0x00002000
#define MMU_ATTR_SPL_2 0x00004000
#define MMU_ATTR_SPL_3 0x00008000
#define MMU_ATTR_SPL_4 0x00010000
#define MMU_ATTR_SPL_5 0x00020000
#define MMU_ATTR_SPL_6 0x00040000
#define MMU_ATTR_SPL_7 0x00080000
#define ENTIRE_CACHE ULONG_MAX
#define M85XX_L2CTL_L2LO_BIT 13
#define MII_AN_NEXT_REG 0x7
#define RIO_FEATURES_EXTADDR_50 0x4000
#define __SIZE_TYPE__ unsigned int
#define _VX_ALIGN_REGS _ARCH_ALIGN_REGS
#define __INCkernelBaseLibPh 
#define M_dshm (200 << 16)
#define OPT_REG_WRITE_READ_BACK_16 0x0A
#define EPIC_PERFMON_0_MSK_REG0 (EPIC_CCSROFF + 0x01350)
#define RIO_FEATURES_EXTADDR_66 0x8000
#define MMU_STATE_MASK_WIMG 0x0000001F
#define CDS85XX_FLASH_RESERVED_SIZE 0x00100000
#define DAC1 316
#define DAC2 317
#define EPIC_SMSG_INT0_DES_REG (EPIC_CCSROFF + 0x11c10)
#define FREQ_333_MHZ 333333333
#define EPIC_SR_IN_MU2_INT_NUM 40
#define OPT_REG_WRITE_READ_BACK_32 0x0B
#define _IFIELD_OPCD(x) ((0xfc000000 & x) >> 26)
#define CLOCK_THREAD_CPUTIME_ID 0x3
#define MEM_ALLOC_ERROR_SUSPEND_FLAG 0x40
#define EVENT_SALRUN_SOCKCLOSE CLASS3_EVENT(103)
#define EVENT_WDCREATE CLASS3_EVENT(16)
#define M85XXRIO_SEGS_PER_CHANNEL 4
#define INCLUDE_CPU_LIGHT_PWR_MGR 
#define M85XX_LTESR(base) (CAST(VUINT32 *)((base) + 0x50B0))
#define IPCOM_USE_SHELL IPCOM_SHELL_NATIVE
#define LAWAR_ENABLE 0x80000000
#define CORE_DUMP_SKIP_TEXT_SECTION TRUE
#define _PPC_L1CFG_NWAY_MASK 0x000FF000
#define BOOT_DEV_LEN 40
#define M85XXRIO_ROWBAR_OFFSET(n) (0x10C08 + ((n)*0x20))
#define MII_ID2_REVISON_MASK 0x000f
#define O_NOATIME _FNOATIME
#define EVENT_OBJ_SEMRTAKE CLASS2_EVENT(47)
#define REAL_SPD_SIZE 256
#define _VX_FR500 171
#define PPC8260 _VX_PPC8260
#define PCI_IO2LOCAL(x) (((UINT32)x - PCI_IO_ADRS) + CPU_PCI_IO_ADRS)
#define EPIC_SR_IN_MU2_INT_VEC (EPIC_SR_IN_MU2_INT_NUM + EPIC_VEC_IN_IRQ0)
#define _IFIELD_STRM(x) ((0x00600000 & x) >> 21)
#define OPT_REG_WRITE_READ_BACK_64 0x0C
#define EPIC_IPIVPR_INTR_MSK EPIC_BIT(31)
#define MII_10MBS 10000000
#define _DBSR_IDE 0x80000000
#define __LDBL_EPSILON__ 2.2204460492503131e-16L
#define MEM_BLOCK_ERROR_RETURN 0
#define ARM710A _VX_ARM710A
#define FIOLABELGET 33
#define PCI2_OUTBOUND_TRANS_EXT_ADRS_REG1(base) CVPUINT32(base, 0x9c24)
#define PCI2_OUTBOUND_TRANS_EXT_ADRS_REG2(base) CVPUINT32(base, 0x9c44)
#define INST_BCLRL_MASK 0xfc00ffff
#define O_SYNC _FSYNC
#define _FCNTRL 0x40000
#define VXDBG_BP_BY_ADDR_RANGE_REMOVE(pClient,retVal,startAddr,endAddr) { VXDBG_BP_DEL_INFO bpInfo; bpInfo.type = BP_BY_ADDR_RANGE_DELETE; bpInfo.pClnt = pClient; bpInfo.info.addrRange.startAddr = startAddr; bpInfo.info.addrRange.endAddr = endAddr; VXDBG_BP_DELETE(bpInfo, retVal); }
#define EPIC_SMSG_DEST_REG_VECREGOFF 0x10
#define _FSHLOCK 0x0080
#define M85XX_L2CEWCR_SIZMASK_MSK 0x0FFFFFFF
#define FIODISCARDGET 70
#define EPIC_IIVPR_INTR_ACTIVE EPIC_BIT(30)
#define MMU_PAGE_BLOCK_SIZE_GET (*(mmuLibFuncs.mmuBlockSizeGet))
#define EPIC_RES46_INT_NUM 46
#define INCLUDE_CONSTANT_RDY_Q 
#define _DEFINED_pid_t 
#define __INCeventLibPh 
#define PCI2_INBOUND_TRANS_ADRS_REG2(base) CVPUINT32(base, 0x9DC0)
#define __INCb_struct__Sched_paramh 
#define SLL_LAST(pList) ( (((SL_LIST *)pList)->tail) )
#define MMU_STATE_MEM_COHERENCY_NOT 0x00000000
#define PCI_ERROR_CAPTURE_DISABLE_REG 0x8e04
#define EVENT_RTPSIGTIMEDWAIT CLASS3_EVENT(91)
#define SYM_IS_ABS(symType) ((symType) & SYM_ABS)
#define PCI_ATTR_WS_1G 0x0000001d
#define PCI_ATTR_WS_1M 0x00000013
#define USER_D_CACHE_ENABLE 
#define DMA_CHANNEL_0 0
#define DMA_CHANNEL_1 1
#define DMA_CHANNEL_2 2
#define DMA_CHANNEL_3 3
#define S_memLib_INVALID_ALIGNMENT (M_memLib | 8)
#define INCLUDE_LOCK_TEXT_SECTION 
#define IPCOM_USE_MUX2 
#define OBJ_HANDLE_TBL_SIZE 256
#define MII_PHY_NULL 0xff
#define SYS_MODEL_8543E "Wind River SBC8543E - Security Engine"
#define DEFAULT_FILE_PERM 0000640
#define _DBCR0_RST_U 0x3000
#define EPIC_EX_DEST_REG_VECREGOFF 0x10
#define EPIC_VEC_GT_B_IRQ0 (EPIC_VEC_GT_A_IRQ0 + EPIC_MAX_GT_A_IRQS)
#define DLL_EMPTY(pList) ( (((DL_LIST *)pList)->head == NULL) )
#define PCI_ATTR_WS_2M 0x00000014
#define SYSFLG_VENDOR_1 0x2000
#define SYSFLG_VENDOR_2 0x4000
#define SYSFLG_VENDOR_3 0x8000
#define VXB_ITERATE_ORPHANS 2
#define CUST_ENET4 0xAA
#define CUST_ENET5 0xA0
#define _WRS_LOCK_ALIGN_ticket 128
#define RIO_CAR_PE_FEATURES 0x10
#define S_objLib_OBJ_TIMEOUT (M_objLib _WRS_BIT_OR 4)
#define __SWRNBF (__SWR|__SNBF)
#define RIO_CHANNEL_TAS_SET 3
#define INCLUDE_REBOOT_HOOKS 
#define MPC85XX_I2C_DIG_FILTER_REG_MASK 0x3F
#define MSG_NODE_SIZE(msgLength) (MEM_ROUND_UP((VX_MSG_NODE_SIZE + msgLength)))
#define VXB_BUSID_SPI 21
#define EPIC_MSIVPR_INTR_MSK EPIC_BIT(31)
#define MII_MF_TA_LEN 0x2
#define M85XX_L2SRBAREA1(x) (CAST(VUINT32 *)((x + 0x2010C)))
#define SYS_MODEL_8545E "Wind River SBC8545E - Security Engine"
#define SIO_MODEM_RI 0x10
#define _VX_HIGH32(x) (long) ((((long long)(x)) >> 32) & (unsigned long)0xffffffff)
#define PCI_ATTR_WS_4G 0x0000001f
#define PCI_ATTR_WS_4K 0x0000000B
#define SM_OBJ_MAX_TRIES 5000
#define MII_PHY_DEF_SET 0x1000
#define EPIC_TM_B0_VEC_REG (EPIC_CCSROFF + 0x02120)
#define _DBSR_IAC2_U 0x0040
#define RIO_CAR_DEST_OPERATIONS 0x1c
#define MMU_ENABLE (*(mmuLibFuncs.mmuEnable))
#define STACK_VERSION_MAJOR 3
#define EPIC_DMA0_INT_VEC (EPIC_DMA0_INT_NUM + EPIC_VEC_IN_IRQ0)
#define sioPollInput(pSioChan,inChar) ((pSioChan)->pDrvFuncs->pollInput (pSioChan, inChar))
#define SM_MASTER 0
#define INCLUDE_EXC_SHOW 
#define SYS_MODEL_8547E "Wind River SBC8547E - Security Engine"
#define VXBAF_CONVERT_LONG_LONG 0x00000008
#define _DEFINED_dev_t 
#define _DBCR2_DAC1US_U 0xc000
#define EPIC_IN_INT39_VEC_REG (EPIC_CCSROFF + 0x106e0)
#define _PPC_L1CFG_REPL_V(x) (x >> 18)
#define _IFORM_400_1 57
#define _IFORM_400_3 59
#define VXB_ACCESS_INT_VEC_GET 0x0000000e
#define ON_BOARD_FLASH 1
#define I2C_WRITOP 1
#define EVENT_WINDPENDQGET CLASS2_EVENT(13)
#define EVENT_CPC_DONE CLASS3_EVENT(233)
#define _VX_SH7729 136
#define __INCsmLibh 
#define S_miiLib_PHY_NO_ABLE (M_miiLib | 3)
#define SYS_MODEL_8548E "Wind River SBC8548E - Security Engine"
#define LBC_SDRAM_LOCAL_SIZE LOCAL_MEM_SIZE2
#define S_spinLockLib_LOCK_IN_RECOVERY (M_spinLockLib | 3)
#define M85XX_L2CEWCR_LOCK_BIT 30
#define S_mmuLib_NOT_CONTIGUOUS_STATE (M_mmuLib | 11)
#define VXB_REMOVAL_MASK 0x0000f000
#define EVENT_TIMER_ROLLOVER CONTROL_EVENT(2)
#define _WRS_WRITE_PREFETCH(ptr) __builtin_prefetch((ptr),1)
#define EPIC_TM_B0_DES_REG (EPIC_CCSROFF + 0x02130)
#define S_objLib_OBJ_HANDLE_TBL_FULL (M_objLib _WRS_BIT_OR 15)
#define LOGIN_USER_NAME "target"
#define EVENT_SEMFLUSH CLASS3_EVENT(11)
#define _PPC_MSR_SPE_U 0x0200
#define MMU_PHYS_TRANSLATE (*(mmuLibFuncs.mmuPhysTranslate))
#define SPRG4_W 276
#define EPIC_FEATURES_REG (EPIC_CCSROFF + 0x01000)
#define _PPC_SPEFSCR_FXH 0x10000000
#define _WRS_CONFIG_COMPONENT_USR_SRC 1
#define PCI_ATTR_WS_8K 0x0000000c
#define EBUSY 16
#define EPIC_MSIDR_P0_INT EPIC_BIT(0)
#define _WRS_CONFIG_TASK_CREATE_HOOKS_D 1
#define PCI_INBOUND_TRANS_ADRS_REG1(base) CVPUINT32(base, 0x8DE0)
#define PCI_INBOUND_TRANS_ADRS_REG2(base) CVPUINT32(base, 0x8DC0)
#define PCI_INBOUND_TRANS_ADRS_REG3(base) CVPUINT32(base, 0x8DA0)
#define _IFLAG_4XX_SPEC (_IFLAG_403_SPEC | _IFLAG_405_SPEC | _IFLAG_440_SPEC)
#define O_NDELAY _FNDELAY
#define _DBCR2_DAC1ER_U 0x3000
#define _ARCH_UCHAR_MAX 255
#define _VX_MAP1000 180
#define EPIC_IN_INT39_DES_REG (EPIC_CCSROFF + 0x106f0)
#define MII_PHY_1000T_FD 0x10000
#define _PPC_MSR_MMU_RI_EXTRACT(src,dst) rlwinm dst, src, 0, _PPC_MSR_BIT_IS, _PPC_MSR_BIT_DS
#define VXB_REG_BASE "regBase"
#define EPIC_IN_INT1_VEC_REG (EPIC_CCSROFF + 0x10220)
#define BUFSIZE BUFSIZ
#define VXB_ASSERT_V(cond) 
#define EVENT_WDSTART CLASS3_EVENT(18)
#define MII_PHY_AUTO 0x0010
#define EPIC_MSR_ST(n) (EPIC_BIT(n) & EPIC_MER_ST_MSK)
#define _IFIELD_AA(x) ((0x00000002 & x) >> 1)
#define EPIC_SEC_INT_NUM 29
#define INCLUDE_TASK_HOOKS 
#define MII_PHY_PRE_INIT 0x0001
#define _ARCH_FLT_MIN_EXP (-125)
#define S_ioLib_WRITE_PROTECTED EACCES
#define MCF5400 _VX_MCF5400
#define INCLUDE_COMMON_NET 
#define SPINLOCK_OPERATION_OK 0
#define EPIC_IIVPR_INTR_MSK EPIC_BIT(31)
#define EVT_OBJ_STR_0(OBJ,CLASS,evtId,LENGTH,STRING) do { if (ACTION_IS_SET) { EVT_OBJ_STR_0_T evt_obj_str_0; evt_obj_str_args_0.evt_obj_str.objId = OBJ; evt_obj_str_args_0.evt_obj_str.classId = CLASS; evt_obj_str_args_0.evt_obj_str.pData = STRING; evt_obj_str_args_0.evt_obj_str.length = LENGTH; eventPointSwHandle (evtId, &evt_obj_str_0, sizeof evt_obj_str_0); } } while ((0))
#define WDB_GOPHER_TAPE_NB 10
#define EVT_OBJ_STR_3(OBJ,CLASS,evtId,ARG1,ARG2,ARG3,LENGTH,STRING) do { if (ACTION_IS_SET) { EVT_OBJ_STR_ARGS_3_T evt_obj_str_args_3; evt_obj_str_args_3.evt_obj_str.objId = OBJ; evt_obj_str_args_3.evt_obj_str.classId = CLASS; evt_obj_str_args_3.evt_obj_str.pData = STRING; evt_obj_str_args_3.evt_obj_str.length = LENGTH; evt_obj_str_args_3.args [0] = (int)ARG1; evt_obj_str_args_3.args [1] = (int)ARG2; evt_obj_str_args_3.args [2] = (int)ARG3; eventPointSwHandle (evtId, &evt_obj_str_args_3, sizeof evt_obj_str_args_3); } } while ((0))
#define EVT_OBJ_STR_5(OBJ,CLASS,evtId,ARG1,ARG2,ARG3,ARG4,ARG5,LENGTH,STRING) do { if (ACTION_IS_SET) { EVT_OBJ_STR_ARGS_5_T evt_obj_str_args_5; evt_obj_str_args_5.evt_obj_str.objId = OBJ; evt_obj_str_args_5.evt_obj_str.classId = CLASS; evt_obj_str_args_5.evt_obj_str.pData = STRING; evt_obj_str_args_5.evt_obj_str.length = LENGTH; evt_obj_str_args_5.args [0] = (int)ARG1; evt_obj_str_args_5.args [1] = (int)ARG2; evt_obj_str_args_5.args [2] = (int)ARG3; evt_obj_str_args_5.args [3] = (int)ARG4; evt_obj_str_args_5.args [4] = (int)ARG5; eventPointSwHandle (evtId, &evt_obj_str_args_5, sizeof evt_obj_str_args_5); } } while ((0))
#define SIO_KYBD_LED_GET 0x1014
#define INCLUDE_IPNET_PACKET_POOL_4 
#define TRG_INT_ENT_INDEX 4
#define M85XXRIO_PESCSR(base) (CAST(VUINT32 *)(((char*)base) + 0x00158 ))
#define MII_PHY_1000T_HD 0x20000
#define M_loadSomCoffLib (96 << 16)
#define EPIC_IPI_VEC_REG(irq) (EPIC_IPI_0_VEC_REG + ((irq) * EPIC_IPI_VEC_REG_INTERVAL))
#define MMU_ATTR_SPL_GET(attr) ((attr) & MMU_ATTR_SPL_MSK)
#define RIO_FEATURES_EXTADDR_34_50 0x6000
#define MMU_STATE_MASK_WIMG_WRITABLE_EXECUTE 0x00000000
#define _ARCH_ALIGN_REGS 4
#define EPIC_OPT_SENSE_LVL 0x00400000
#define VX_READ_WRITE_SEMAPHORE(name,numReaders) _WRS_DATA_ALIGN_BYTES(VX_OBJ_ALIGN_SIZE) char name [VX_SEMAPHORE_SIZE + SEM_RW_EXT_SIZE + (SEM_RW_LIST_ENTRY_SIZE * numReaders)]
#define M_smmLib (171 << 16)
#define EROFS 30
#define EPIC_IN_INT1_DES_REG (EPIC_CCSROFF + 0x10230)
#define WIND_OBJ_DELETED 0x100
#define DOSFS_DEFAULT_CREATE_OPTIONS 0x04
#define _PPC_MSR_DS 0x0010
#define INST_MFLR 0x7c0802a6
#define PCI_INBOUND_ATTR_REG2(base) CVPUINT32(base, 0x8DD0)
#define _WRS_TLB_MISS_CLASS_SW 1
#define M_vmLib (84 << 16)
#define _IFLAG_AA 0x0004
#define SYM_MASK_NONE 0x00
#define _IFLAG_405_SPEC 0x0100
#define PCI_LAT_TIMER 0x40
#define S29GL_FLASH_OP_DELAY 
#define M_memLib (17 << 16)
#define VXB_LOST_DEVICES 3
#define AM29XXX _VX_AM29XXX
#define CPU_VARIANT _ppc85XX_e500v2
#define S_vmLib_TEXT_PROTECTION_UNAVAILABLE (M_vmLib | 5)
#define M_sntpsLib (114 << 16)
#define WIND_TCB_PC (WIND_TCB_REGS + REG_SET_PC)
#define _PPC_ESF_R22 _PPC_ESF_R(22)
#define VXB_ACCESS_INT_ENABLE 0x0000000f
#define EPIC_OPT_SENSE_EDG 0x00000000
#define __SEOF 0x0020
#define __INCfcntlcomh 
#define EPIC_DUART_INT_NUM 26
#define MMU_PAGE_UNMAP (*(mmuLibFuncs.mmuPageUnMap))
#define __LONG_MAX__ 2147483647L
#define __WCHAR_T__ 
#define S_semLib_INVALID_QUEUE_TYPE (M_semLib | 103)
#define PPC_ARG0_REG 3
#define EVENT_INT_EXIT_K (MIN_INT_ID - 2)
#define MII_ANAR_REMORT_FAULT 0x2000
#define _PPC_MMUCSR0_L2TLB0_FI 0x00000004
#define SPIN_LOCK_ACKNOWLEDGED 3
#define M_loadPecoffLib (117 << 16)
#define L_INCR SEEK_CUR
#define HRFS_DEFAULT_MAX_FILES 10
#define M_syscallLib (184 << 16)
#define TARGET_NAME_DEFAULT "vxTarget"
#define S_mmuLib_OUT_OF_PMEGS (M_mmuLib | 5)
#define __INCerrnoh 
#define __INCvxWindCommonh 
#define IPCOM_FILE_FD_SETSIZE 64
#define SYM_IS_GLOBAL(symType) ((symType) & SYM_GLOBAL)
#define VXDBG_MEM_MOVE(pSrc,pDest,size) vxdbgMemMove (pSrc, pDest, size);
#define _VX_SPARClite 11
#define SM_INT_NONE 0
#define _PPC_ESF_ERRNO (_PPC_ESF_VEC_OFF + SIZ_UINT32)
#define __INCsymLibh 
#define INCLUDE_VXBUS 
#define READ _VX_READ
#define SIMPENTIUM _VX_SIMPENTIUM
#define WDB_COMM_NETROM 4
#define __SERR 0x0040
#define _IFIELD_EE(x) ((0x00008000 & x) >> 15)
#define EPIC_IN_INT31_VEC_REG (EPIC_CCSROFF + 0x105e0)
#define LSDMR_RFEN 0x40000000
#define __INCsioLibCommonh 
#define ISR_STACK_SIZE (5000)
#define va_end(v) __builtin_va_end(v)
#define VME_AM_EXT_USR_PGM 0x0a
#define _WRS_CONFIG_CPU_PWR_MGMT 1
#define _VA_LIST_DEFINED 
#define _EXC_INFO_DAR 0x008
#define EVENT_LOGCOMMENT CONTROL_EVENT(7)
#define EFPOS 81
#define EPIC_EX_INT7_DES_REG (EPIC_CCSROFF + 0x100f0)
#define EPIC_INT_ACK1_REG (EPIC_CCSROFF + 0x210a0)
#define RTP_ID_OF_TASK(tid) ((RTP_ID)(((WIND_TCB *)tid)->rtpId))
#define FIONCONTIG 41
#define EDEADLK 33
#define SHELL_START_AT_BOOT TRUE
#define __INCtimeh 
#define EADDRINUSE 48
#define _EXC_CODE_SIZE 16
#define EVENT_RTPTASKSIGQUEUE CLASS3_EVENT(89)
#define INCLUDE_TTY_DEV 
#define EPIC_IN_INT31_DES_REG (EPIC_CCSROFF + 0x105f0)
#define htole16(x) bswap16((x))
#define MAPCA _VX_MAPCA
#define BOOT_FLASH_TLB_SIZE _MMU_TLB_SZ_1M
#define EVENT_TASKDESTROY CLASS3_EVENT(1)
#define Q_GET_EXPIRED(pQHead) ((Q_NODE *)((*(((Q_HEAD *)(pQHead))->pQClass->getExpiredRtn)) ((Q_HEAD *)(pQHead))))
#define VXBAF_CONVERT_SHORT_ORDER 0x00000002
#define FDSYNC _FDSYNC
#define FLOAT_NORM 
#define VX_TASK(name,stackSz) WIND_TCB name ##Tcb; _WRS_DATA_ALIGN_BYTES(_STACK_ALIGN_SIZE) char name ##Stk [STACK_ROUND_UP((stackSz))]; _WRS_DATA_ALIGN_BYTES(_STACK_ALIGN_SIZE) char name ##ExcStk [STACK_ROUND_UP((KERNEL_TASK_EXC_STACK_SIZE))];
#define LSDMR_BSMA_SHIFT(x) ((x << 23) & LSDMR_BSMA_MASK)
#define _WRS_CONFIG_VM_MULTIPLE_CONTEXT 1
#define IS_CLASS1_EVENT(event) ((event >= MIN_CLASS1_ID) && (event <= MAX_CLASS1_ID))
#define EDOM 37
#define VXDBG_MEM_WIDTH_ACCESS(mode,pSrc,pDest,size,width) if (mode == VX_READ) vxdbgMemRead (pSrc, pDest, size, width); else vxdbgMemWrite (pSrc, pDest, size, width);
#define EPIC_BITS(x,y) EPIC_BITS_M2N(x-y+1, x)
#define Q_KEY(pQHead,pQNode,keyType) (*(((Q_HEAD *)(pQHead))->pQClass->keyRtn)) (((Q_NODE *)(pQNode)), ((int)(keyType)))
#define INT_UNMASK(reg) mfmsr reg ; ori reg, reg, _PPC_MSR_EE ; mtmsr reg ; isync
#define FIODISKINIT 6
#define htole32(x) bswap32((x))
#define PCI2_INBOUND_BASE_ADRS_REG2(base) CVPUINT32(base, 0x9DC8)
#define PCI2_INBOUND_BASE_ADRS_REG3(base) CVPUINT32(base, 0x9DA8)
#define MII_CR_NORM_EN 0x0000
#define _PPC_VX_SVR_GET ((_func_vxSvrGet == NULL) ? 0 : (_func_vxSvrGet) ())
#define F_WRLCK 2
#define EPIC_TSEC1RX_INT_NUM 14
#define _WRS_USE_ELF_LOAD_FORMAT 
#define PORDEVSR_PCI_MODE 1
#define FIOCOMMITPOLICYGETFS 66
#define MMU_ATTR_SUP_DATA_RO (MMU_ATTR_SUP_RO)
#define _WRS_CONFIG_PPC32_FP "hard"
#define _IFORM_D_1 3
#define MPC85XX_I2C_ADR_REG (0x00000)
#define S_eventLib_TIMEOUT (M_eventLib | 0x0001)
#define CS0_CONFIG 0x080
#define _IFLAG_LK 0x0008
#define _PPC_SPEFSCR_FINV 0x00000800
#define M_distNameLib (119 << 16)
#define _PPC_SPEFSCR_FRMC_RND_NINF 0x00000003
#define VM_STATE_CACHEABLE MMU_ATTR_CACHE_DEFAULT
#define VM_PHYS_TRANSLATE(context,physicalAddr,pVirtualAddr) ((vmLibInfo.pVmPhysTranslateRtn == NULL) ? (ERROR) : ((*vmLibInfo.pVmPhysTranslateRtn) (context, physicalAddr, pVirtualAddr)))
#define VXB_INST_INIT_DONE 0x00000001
#define _ARCH_SUPPORTS_DCC 
#define _IOLBF 1
#define S_semLib_INVALID_OPERATION (M_semLib | 104)
#define htole64(x) bswap64((x))
#define EVENT_MSGCDELETE CLASS3_EVENT(38)
#define _DBCR1_IAC12M_U 0x00c0
#define EPIC_EOI0_REG (EPIC_CCSROFF + 0x200b0)
#define DEVICE_MANAGER_MAX_NUM_DEVICES 255
#define F_SETLKW 9
#define MII_MASSLA_STAT_LP1000T_FD 0x800
#define VXB_VER_4_0_0 0x00040000
#define OPT_REG_READ16 0x02
#define FREQ_66_MHZ 66000000
#define M_pingLib (99 << 16)
#define EIEIO _WRS_ASM (" eieio")
#define _PPC_ESF_P7 _PPC_ESF_R10
#define EVENT_SEMCCREATE CLASS3_EVENT(9)
#define _WRS_CONFIG_OBJECT_LIB 1
#define WDB_COMM_PORT 0x4321
#define EDR_ERRLOG_SIZE (pmFreeSpace(EDR_PM_ARENA)/2)
#define EPIC_EX_INT7_VEC_REG (EPIC_CCSROFF + 0x100e0)
#define _IFLAG_OE 0x0001
#define M85XXRIO_DICAR_OFFSET 0x4
#define ENOSTR 75
#define MMU_ATTR_PROT_SUP_GET(attr) ((attr) & MMU_ATTR_PROT_SUP_MSK)
#define RIO_CAR_ASSEMBLY_ID 0x08
#define SYSFLG_NO_SECURITY 0x20
#define ARM _VX_ARM
#define INCLUDE_AIM_MMU_SHOW 
#define M8260ABBREVIATIONS 
#define OPT_REG_READ32 0x03
#define MII_MASSLA_STAT_LP1000T_HD 0x400
#define PCI_OUT_ATTR_RTT_IO 0x00080000
#define M_unldLib (87 << 16)
#define EPIC_WHO_AM_I_REG (EPIC_CCSROFF + 0x00090)
#define M_hsiLib (156 << 16)
#define _PC_REC_MIN_XFER_SIZE 16
#define FIOCOMMITFS 56
#define VXB_SPIN_LOCK_GIVE(x) (*pVxbSpinLockGive)(x)
#define __INCregsh 
#define INCLUDE_WDB_FUNC_CALL 
#define ENAMETOOLONG 26
#define EPIC_OPT_EN_Y 0x00000000
#define S_spinLockLib_LOCK_UNAVAILABLE (M_spinLockLib | 4)
#define EPIC_WHOAMI_ID_MSK (EPIC_BIT(4) | EPIC_BIT(3) | EPIC_BIT(2) | EPIC_BIT(1) | EPIC_BIT(0))
#define DEFAULT_CPUS_MAX 10
#define MMU_TRANS_TBL_MASK (*(mmuLibFuncs.mmuTransTblMask))
#define I2C_DELAY(d) i2cCycleMpc85xxDelay(d)
#define __DBL_HAS_QUIET_NAN__ 1
#define TRG_CLASS_4_ON 0x10001000
#define PCI2_OUTBOUND_ATTR_REG2(base) CVPUINT32(base, 0x9c50)
#define MMU_STATE_GUARDED 0x00000002
#define INCLUDE_HOST_TBL 
#define INST_BC _OP(16, 0)
#define INST_BL (_OP(18, 0) | 1)
#define MIN_CLASS2_ID 600
#define BSP_VER_1_1 1
#define BSP_VER_1_2 1
#define M_hookLib (187 << 16)
#define EPIC_SR_IN_MU1_INT_NUM 38
#define EPIC_RES46_INT_VEC (EPIC_RES46_INT_NUM + EPIC_VEC_IN_IRQ0)
#define M85XXRIO_IDQDPAR(base) (CAST(VUINT32 *)(((char*)base) + 0x1346C ))
#define ECMBA (CCSBAR | ECM_OFFSET)
#define OPT_REG_READ64 0x04
#define VXB_BUSID_HYPERTRANSPORT 6
#define _ARCH_BYTE_ORDER _PARM_BIG_ENDIAN
#define LAWAR_SIZE_512KB 0x00000012
#define FLASH_CHIP_WIDTH 2
#define S_excLib_EXCEPTION_STACK_OVERFLOW (M_excLib | 1)
#define le64toh(x) bswap64((x))
#define OPT_ECHO 0x01
#define M_proxyArpLib (76 << 16)
#define __INCsemLibh 
#define EVENT_SEMWTAKE CLASS3_EVENT(206)
#define EPIC_TSEC4ERR_INT_VEC (EPIC_TSEC4ERR_INT_NUM + EPIC_VEC_IN_IRQ0)
#define _PARM_LITTLE_ENDIAN 4321
#define ESOCKTNOSUPPORT 44
#define __WCHAR_TYPE__ short unsigned int
#define _EXC_OFF_MACH 0x00200
#define PCI_INBOUND_TRANS_EXT_ADRS_REG3(base) CVPUINT32(base, 0x8DA4)
#define MMU_ATTR_USR_TEXT (MMU_ATTR_USR_EXE | MMU_ATTR_SUP_TEXT)
#define MII_FDX_STR "full duplex"
#define SEMRW_IS_FREE(semId) ( (((semId)->semOwner == NULL) && (((SEM_RW_EXT *) ((UINT) semId + sizeof (SEMAPHORE)))->readCount == 0)) )
#define EPIC_OPT_CRIT_ON (0x40000000 >> 16)
#define _WRS_ABSOLUTE_BEGIN(x) STATUS absSymbols_ ##x (void) {
#define S_objLib_OBJ_NAME_CLASH (M_objLib _WRS_BIT_OR 8)
#define WDB_MIPC_BUS_NAME "main"
#define VM_STATE_MASK_MEM_COHERENCY MMU_ATTR_CACHE_MSK
#define EVT_WVEVENT(USR_EVENT,DATA,LENGTH) do { if (ACTION_IS_SET) { EVENT_WVEVENT_T event; event.userEventId = USR_EVENT; event.data = DATA; event.length = LENGTH; event.pc = NULL; eventPointSwHandle (MIN_USER_ID, &event, sizeof (event)); } } while ((0))
#define PARODD 0x80
#define _DBSR_BRT 0x04000000
#define HANDLE_VERIFY(handle,handleType) ( ( (((HANDLE_ID) (handle))->magic == (unsigned)(handle)) && (((HANDLE_ID) (handle))->type == (handleType)) ) ? OK : ERROR )
#define VXB_REG_NONE 0x00000000
#define MMU_ATTR_PROT_MSK 0x0000003f
#define __INCstdioh 
#define EVENT_RTPSIGNAL CLASS3_EVENT(84)
#define __INCb_timer_th 
#define VXBAF_NOT_FIRST_BUS 0x00000080
#define EVENT_WINDPRIORITYSETLOWER CLASS2_EVENT(5)
#define CPU_PWR_ISR_P_STATE (0)
#define MII_PHY_RX_FLOW_CTRL 0x80000
#define MC68060 _VX_MC68060
#define CREAD 0x2
#define INST_ADDI_SP 0x38210000
#define VXB_REMOVAL_ORPHAN 0x00002000
#define EVENT_SD_MAP CLASS3_EVENT(202)
#define S_smLib_MEMORY_ERROR (M_smLib | 1)
#define putc(c,p) __sputc(c, p)
#define KERNEL_LOCK_GIVE() (kernelLockGive())
#define EPIC_EIVPR_INTR_POLARITY EPIC_BIT(23)
#define MII_PHY_FLAGS_SET(setBits) (pPhyInfo->phyFlags |= (setBits))
#define CAM_DRAM_CACHE_MODE _MMU_TLB_ATTR_M
#define MII_PHY_10 0x0080
#define HID1_ASTME 0x00002000
#define POSIX_PTHREAD_RR_TIMESLICE 10
#define vxAtomicAnd_inline vxAtomicAnd
#define FOLLOW_LINK -2
#define WDB_MIPC_PORT 2
#define Q_PUT(pQHead,pQNode,key) (*(((Q_HEAD *)(pQHead))->pQClass->putRtn)) (((Q_HEAD *)(pQHead)), ((Q_NODE *)(pQNode)), (key))
#define BUFSIZ _PARM_BUFSIZ
#define VEC_BASE_ADRS ((char *) 0x0)
#define MMU_ATTR_SUP_EXE (MMU_ATTR_PROT_SUP_READ | MMU_ATTR_PROT_SUP_EXE)
#define WDB_PRE_KERNEL_INIT 1
#define VXB_PCI_BUS_CFG_READ(pDev,byteOffset,transactionSize,data) ((_func_vxbPciDevCfgRead == NULL) ? ERROR : _func_vxbPciDevCfgRead (pDev, byteOffset, transactionSize, (void *) &data))
#define S_smLib_NO_REGIONS (M_smLib | 4)
#define _INSTRUCTION_CACHE 0
#define __FLT_MAX_10_EXP__ 38
#define _PPC_L1CSR_E 0x00000001
#define _IFIELD_FM(x) ((0x01fe0000 & x) >> 17)
#define WIND_OBJ_NO_RECLAIM 0x20
#define _VX_SH32 130
#define _WCHAR_T_DECLARED 
#define INCLUDE_BOOTXSYS 
#define MII_FDX_LEN sizeof (MII_FDX_STR)
#define VXB_INTR_DYNAMIC 0x00000F7F
#define __INCvmLibPh 
#define MCORE _VX_MCORE
#define LONGSWAP(x) ((LLSB(x) << 24) | (LNLSB(x) << 16)| (LNMSB(x) << 8) | (LMSB(x)))
#define S_vxdbgLib_INVALID_BP VXDBG_ERROR_TO_ERRNO(VXDBG_ERR_INVALID_BP)
#define SYM_MASK_ANY_TYPE SYM_MASK_NONE
#define WV_EVT_PROTO_REV_6_6 3
#define WV_EVT_PROTO_REV_6_7 3
#define EVENT_ISR_DESTROY CLASS3_EVENT(64)
#define FIONREAD64 52
#define _FEXCL 0x0800
#define M85XXRIO_RIWTAR_TRAD(adrs) (adrs >> 12)
#define __INCb_nlink_th 
#define M85XX_L2ERRCAPTDATAHI(x) (CAST(VUINT32 *)((x + 0x20E20)))
#define VXB_REG_SPEC 0x00000003
#define TASK_LOCK() TASK_CPU_LOCK()
#define LSDMR_BSMA_MASK 0x00E00000
#define _WRS_FUNC_NORETURN __attribute__((noreturn))
#define __weak_reference(sym,alias) __asm__(".weak " #alias); __asm__(".equ " #alias ", " #sym)
#define EPIC_IIDR_CRIT_INT EPIC_BIT(30)
#define OBJ_INSTRUMENTATION_ENABLE(objId) ( ((OBJ_CORE *)(objId))->handle.attributes |= WIND_OBJ_INSTRUMENTED )
#define I2C_ERROR_CYCLE_WRITE 4
#define _VX_SIMPENTIUM 191
#define EPIC_REG_WRITE(offset,value) *(volatile UINT32 *)((UINT32)pEpicRegBase + (offset & REG_ADRS_MASK)) = value
#define MII_PHY_FLAGS_CLEAR(clearBits) (pPhyInfo->phyFlags &= ~(clearBits))
#define MMU_ATTR_PROT_USR_READ 0x00000008
#define MII_AN_TBL_MAX 20
#define QUEUE_NONINTERRUPTIBLE 0
#define EPROTONOSUPPORT 43
#define UINT_MAX (INT_MAX * 2U + 1)
#define EVENT_WINDWDSTART CLASS2_EVENT(11)
#define EFBIG 27
#define RIO_WPCSR_ERROR 0x20000000
#define VXB_INTR_TRIG_NEG 0x01
#define SIO_MODE_SET 0x1007
#define feof(p) __sfeof(p)
#define EPIC_GTVPR_INTR_MSK EPIC_BIT(31)
#define PCI_CFG_ADR_REG (CCSBAR + 0x8000)
#define RIO_WPCSR_AVAILABLE 0x01000000
#define ARMARCH3 _VX_ARMARCH3
#define ARMARCH4 _VX_ARMARCH4
#define ARMARCH5 _VX_ARMARCH5
#define ARMARCH6 _VX_ARMARCH6
#define ARMARCH7 _VX_ARMARCH7
#define SEM_TYPE_MASK 0xf
#define SLL_EMPTY(pList) ( (((SL_LIST *)pList)->head == NULL) )
#define DECAR 54
#define _PPC_MAS0_NV 0x00000000
#define __FLT_MAX_EXP__ 128
#define P_PID 0
#define INCLUDE_EDR_STUB 
#define M85XX_OR0(base) (CAST(VUINT32 *)((base) + 0x5004))
#define M85XX_OR1(base) (CAST(VUINT32 *)((base) + 0x500c))
#define _DBCR1_IAC2US_U 0x0c00
#define M85XX_OR4(base) (CAST(VUINT32 *)((base) + 0x5024))
#define _DEFINED_struct_timespec 
#define __INCtimesh 
#define M85XX_OR7(base) (CAST(VUINT32 *)((base) + 0x503C))
#define _PARM_NAME_MAX 255
#define SM_INT_MAILBOX_1 1
#define SM_INT_MAILBOX_2 2
#define SM_INT_MAILBOX_4 3
#define MMU_ATTR_VALID_INDEX_SHIFT 6
#define SIO_HW_OPTS_GET 0x1006
#define VME_AM_STD_SUP_PGM 0x3e
#define _DBSR_HWBP_MSK ( _DBSR_IAC1 | _DBSR_IAC2 | _DBSR_DAC1R | _DBSR_DAC1W | _DBSR_DAC2R | _DBSR_DAC2W )
#define EPIC_IN_INT44_DES_REG (EPIC_CCSROFF + 0x10790)
#define MII_MASSLA_STAT_CONF_RES 0x4000
#define PCI_ATTR_WS_128M 0x0000001a
#define __INCe_vxTypesOldh 
#define REG_ADRS_MASK 0x00ffffff
#define LAWAR_SIZE_64KB 0x0000000F
#define EPIC_SMSG_INT7_VEC_REG (EPIC_CCSROFF + 0x11ce0)
#define REG_SET_CTR (REG_SET_LR + _PPC_REG_SIZE)
#define BUSAF_VERBOSE 0x01000000
#define __DBL_MANT_DIG__ 53
#define ___int_size_t_h 
#define bswap16(x) ((LSB(x) << 8) | MSB(x))
#define REG_SET_CR (REG_SET_PC + _PPC_REG_SIZE)
#define VXB_MAXBARS 10
#define FEXLOCK _FEXLOCK
#define __INCvxdbgLibPh 
#define _VX_COLDFIRE 160
#define EPIC_IIVPR_VECTOR(vec) ((vec) & EPIC_IIVPR_VECTOR_MSK)
#define M85XXRIO_LCSBA1CSR_OFFSET 0x5C
#define EPIC_CTASK_PRI_REG (EPIC_CCSROFF + 0x00080)
#define HID1_RUN_MODE(x) (((x)&0x70000000)>>28)
#define VXB_DEVID_BUSCTRL 1
#define _PPC_L1CSR_SLC 0x00000800
#define VM_STATE_VALID MMU_ATTR_VALID
#define VXB_INTR_TABSZ 124
#define M85XXRIO_PGCCSR(base) (CAST(VUINT32 *)(((char*)base) + 0x0013C ))
#define EVENT_NUM_CPU CONTROL_EVENT(17)
#define INST_B_MASK 0xfc000000
#define EPIC_IN_INT25_VEC_REG (EPIC_CCSROFF + 0x10520)
#define PID 48
#define ACTION_IS_SET _WRS_UNLIKELY(evtAction != 0)
#define PIR 286
#define FNDELAY _FNDELAY
#define _DBCR1_IAC2ER_U 0x0300
#define LAWAR_SIZE_64MB 0x00000019
#define EPIC_IN_INT45_VEC_REG (EPIC_CCSROFF + 0x107a0)
#define WDB_TTY_CHANNEL 1
#define M_fastPathLib (135 << 16)
#define __LDBL_MIN_EXP__ (-1021)
#define EPIC_OPT_PRI_VALUE(p) EPIC_EIVPR_PRIORITY(p)
#define SIO_MSTAT_GET 0x100C
#define BRIDGE_CLASS_TYPE 0x6
#define EPIC_MSG_REG2 (EPIC_CCSROFF + 0x01420)
#define HOST_PASSWORD_DEFAULT ""
#define _EXC_OFF_SYSCALL 0x00c00
#define MAX_DIRNAMES 148
#define EVENT_WINDSEMDELETE CLASS2_EVENT(6)
#define PCIEX_OUTBOUND_TRANS_ADRS_REG1(base) CVPUINT32(base, 0xac20)
#define VXB_HANDLE_WIDTH(x) ((x) & 0x0F)
#define LMSB(x) (((x) >> 24) & 0xff)
#define MMU_STATE_MEM_COHERENCY 0x00000004
#define EPIC_INT_EDG_NEG 0
#define _POSIX_MAX_CANON 255
#define EPIC_MSIDR_CRIT1_INT EPIC_BIT(29)
#define SM_INT_MAILBOX_R2 6
#define INST_SC _OP(17, 1)
#define S_ioLib_DEVICE_ERROR EIO
#define stdout (*__stdout())
#define TRG_CLASS_1 0x00000001
#define TRG_CLASS_2 0x00000010
#define TRG_CLASS_3 0x00000100
#define TRG_CLASS_4 0x00001000
#define TRG_CLASS_5 0x00010000
#define TRG_CLASS_6 0x01111111
#define INCLUDE_OBJ_LIB 
#define MSG_Q_EVENTSEND_ERR_NOTIFY 0x02
#define MAX_USER_ID 65535
#define NUM_DOSFS_FILES 20
#define LSDMR_RFCR_MASK 0x00038000
#define MAP_ERRNO_2_POSIX(errno) (((errno) & ERRNO_PX_FLAG)? (errno) &= 0x7fff : (errno) )
#define __EABI__ 1
#define VM_ENABLE(enable) ((vmLibInfo.pVmEnableRtn == NULL) ? (ERROR) : ((*vmLibInfo.pVmEnableRtn) (enable)))
#define EVENT_RTPNAME CONTROL_EVENT(16)
#define _ARCH_LONG_MAX 2147483647
#define MMU_STATE_SUP_R_USR_X (MMU_STATE_SUP_R | _MMU_UX)
#define M_qPriBMapLib (63 << 16)
#define RIO_EXTENDED_FEATURES_TOP 0xfffC
#define M85XXRIO_RIWAR_TGINT_MSK 0xf
#define FIRST_CUSTOM_BUS_ACCESS_METHOD 0x00000100
#define PLAT_RATIO_400_MHZ 6
#define SHELL_COMPATIBLE FALSE
#define I2C_CYCLE_READ(x,ad,y) i2cCycleMpc85xxRead(x,ad,y)
#define S_symLib_INVALID_SYM_ID_PTR (M_symLib | 13)
#define RLIMIT_DATA 2
#define PCI_ATTR_WS_16K 0x0000000D
#define PCI_ATTR_WS_16M 0x00000017
#define CACHE_DMA_FLUSH(adrs,bytes) CACHE_DRV_FLUSH (&cacheDmaFuncs, (adrs), (bytes))
#define INST_BCR_MASK 0xfc00fffe
#define WIND_TCB_CR (WIND_TCB_REGS + REG_SET_CR)
#define M85XXRIO_RIWBAR_BEXAD(adrs) (adrs << 22)
#define _PPC_SPEFSCR_MODE 0x00010000
#define _VX_PPC750 2010
#define MII_SR_10T_FULL_DPX 0x1000
#define EPIC_MSIR_INT0_STATE_REG (EPIC_CCSROFF + 0x01600)
#define S_mmuLib_INVALID_DESCRIPTOR (M_mmuLib | 3)
#define FSTAT_LNK 0120000
#define PPC403 _VX_PPC403
#define MMU_STATE_MASK_EXECUTE 0x00003000
#define PPC405 _VX_PPC405
#define _ARCH_ULONG_MAX 4294967295u
#define M85XXRIO_ROWAR_OFFSET(n) (0x10C10 + ((n)*0x20))
#define S_vmLib_BAD_MASK_PARAM (M_vmLib | 3)
#define MII_BP_ACK 0x4000
#define WDB_PROXY_TASK_OPTIONS VX_UNBREAKABLE
#define _PARM_TMP_MAX 64
#define PCI2_INBOUND_TRANS_ADRS_REG3(base) CVPUINT32(base, 0x9DA0)
#define MPC85XX_I2C_CONTROL_REG_MEN 0x80
#define SS_2D_5 6
#define _IFORM_XFX_1 42
#define WDB_TIPC_PORT_INSTANCE 71
#define _IFORM_XFX_3 44
#define _IFORM_XFX_4 45
#define _IFORM_XFX_5 84
#define _IFORM_XFX_6 85
#define MEM_ALLOC_ERROR_LOG_AND_SUSPEND 0x02
#define IPCOM_SOCK_NONE 5
#define EMSGSIZE 36
#define M_loadEcoffLib (79 << 16)
#define S_iosLib_INVALID_ETHERNET_ADDRESS EINVAL
#define PCI_OUT_ATTR_WTT_MEM 0x00004000
#define ARM810 _VX_ARM810
#define _VX_MAPCA 182
#define DEVMETHOD_CALL(METHOD) ((UINT32)(&METHOD ##_desc[0]))
#define EPIC_MER_EN_MSK 0xf
#define INST_LWZU_SP 0x84010000
#define _PC_ALLOC_SIZE_MIN 2
#define EPIC_TSEC2ERR_INT_NUM 24
#define OBJ_IS_DELETED(objId) ( (((OBJ_CORE *)(objId))->handle.attributes & WIND_OBJ_DELETED) != 0 )
#define I2C_CHCKOP 3
#define RIO_CAR_SRC_OPERATIONS 0x18
#define __INCvsbConfig_h 
#define VXDBG_CTX_FUNCS_ARE_INSTALLED() (_func_vxdbgFuncs[VXDBG_STOP] != NULL)
#define PPC _VX_PPC
#define __INCtoolPpch 
#define EVENT_OBJ_MSGSRECEIVE CLASS2_EVENT(43)
#define EPIC_OPT_CRIT_MSK (EPIC_EIDR_CRIT_INT >> 16)
#define _VX_MCORE300 154
#define VM_STATE_GLOBAL MMU_ATTR_SPL_0
#define _TOOL_HDR(tc,file) _TOOL_HDR_STRINGIFY(tool/tc/file)
#define VX_TASK_OBJ_OWNER 0x0800
#define EVENT_MEMREALLOC CLASS3_EVENT(33)
#define EPIC_IN_INT7_VEC_REG (EPIC_CCSROFF + 0x102e0)
#define _IFIELD_VSH(x) ((0x000003c0 & x) >> 6)
#define WDT_RATE_MAX (sysTimerClkFreq / (1 << 21))
#define PPC440 _VX_PPC440
#define MAX_LINKHDR_CFG 32
#define EVENT_RTPSIGPROCMASK CLASS3_EVENT(94)
#define PCI_ERROR_DETECT_REG 0x8e00
#define EVENT_RTP_DELETE CLASS3_EVENT(79)
#define EPIC_RES30_INT_NUM 30
#define TIMER_RELTIME (~TIMER_ABSTIME)
#define Q_FIRST(pQHead) ((Q_NODE *)(((Q_HEAD *)(pQHead))->pFirstNode))
#define I2C_IOCTL_RMW_OR 2
#define _DBSR_MRR_U 0x3000
#define SIO_MCTRL_OSIG_MASK 0x1010
#define NELEMENTS(array) (sizeof (array) / sizeof ((array) [0]))
#define WAIT_FOREVER (-1)
#define M_rpcClntStat (47 << 16)
#define _WRS_CONFIG_FEATURE_IPNET_INET4_ONLY 1
#define __INCunistdh 
#define VXB_OPTIONS "options"
#define VM_STATE_SET(context,virtualAddr,len,stateMask,state) ((vmLibInfo.pVmStateSetRtn == NULL) ? (ERROR) : ((*vmLibInfo.pVmStateSetRtn) (context, (VIRT_ADDR) virtualAddr, len, stateMask, state)))
#define RIO_CSR_WRITE_PORT 0x44
#define OBJ_SET_DELETED(objId) ( ((OBJ_CORE *)(objId))->handle.attributes |= WIND_OBJ_DELETED )
#define _TYPE_PHYS_ADDR typedef UINT64 PHYS_ADDR
#define _WRS_SUP_STACK_UNRELOC(p) p
#define _PPC_ESF_SP_OFF (0)
#define VXEV01 0x00000001
#define VXEV02 0x00000002
#define VXEV03 0x00000004
#define VXEV04 0x00000008
#define VXEV05 0x00000010
#define VXEV06 0x00000020
#define VXEV07 0x00000040
#define VXEV08 0x00000080
#define VXEV09 0x00000100
#define EHOSTDOWN 67
#define EVENT_IOWRITE CLASS3_EVENT(50)
#define IPTELNETS 
#define M_loadAoutLib (80 << 16)
#define _FNOCTTY 0x8000
#define SM_OFFSET_TO_LOCAL(offset,baseAddr,typeCast) ((typeCast) ((char *) offset + baseAddr))
#define EVENT_SYSCALL_BAD_ID CLASS3_EVENT(76)
#define MB_CUR_MAX _PARM_MB_CUR_MAX
#define vxAtomicSub_inline vxAtomicSub
#define O_TRUNC _FTRUNC
#define VXEV11 0x00000400
#define VXEV12 0x00000800
#define VXEV13 0x00001000
#define VXEV14 0x00002000
#define VXEV15 0x00004000
#define VXEV16 0x00008000
#define VXEV17 0x00010000
#define VXEV18 0x00020000
#define VXEV19 0x00040000
#define max(x,y) (((x) < (y)) ? (y) : (x))
#define _PPC_MAS0_TLBSEL1 0x10000000
#define F_DUPFD 0
#define KERNEL_TASK_EXC_STACK_SIZE (4096)
#define MII_PHY_FD 0x0100
#define _WRS_KERNEL_LOCK_OFFSET_line (0x10 + _WRS_KERNEL_LOCK_ALIGN_tkt_ctr)
#define M_pppHookLib (102 << 16)
#define SYM_MASK_EXACT_TYPE SYM_MASK_ALL
#define VXEV20 0x00080000
#define VXEV21 0x00100000
#define VXEV22 0x00200000
#define VXEV23 0x00400000
#define VXEV24 0x00800000
#define VXEV25 0x01000000
#define WDB_TTY_ECHO FALSE
#define VXEV27 0x04000000
#define VXEV28 0x08000000
#define VXEV29 0x10000000
#define WIND_TCB_LR (WIND_TCB_REGS + REG_SET_LR)
#define SM_LOCAL_TO_OFFSET(localAdrs,baseAddr) ((int) ((char *) localAdrs - baseAddr))
#define SYSFLG_NO_AUTOBOOT 0x04
#define MII_MAX_PHY_NUM 0x20
#define MMU_STATE_PROTECTION_BIT_SHIFT 8
#define RIO_TGTID_GENERIC 0
#define _ARCH_LDBL_EPSILON 2.2204460492503131e-16L
#define SEMRW_RQHEAD(semId) ( ((SEM_RW_EXT *) ((UINT) semId + sizeof (SEMAPHORE)))->readQHead )
#define M85XX_L2ERRINTEN(x) (CAST(VUINT32 *)((x + 0x20E48)))
#define VXEV31 0x40000000
#define VXEV32 0x80000000
#define EVT_CTX_DISP(ARG1,PRI,NORMAL_PRI) do { if ( ACTION_IS_SET ) EVT_CTX_DISP_NOTEST(ARG1, PRI, NORMAL_PRI); } while ((0))
#define __INCqClassh 
#define M_moduleLib (86 << 16)
#define HID0_MCP 0x80000000
#define _DBCR0_IRPT_U 0x0200
#define M85XX_L2CTL_L2LFR_MSK 0x00000400
#define RNG_ELEM_PUT(ringId,ch,toP) ( toP = (ringId)->pToBuf, (toP == (ringId)->pFromBuf - 1) ? 0 : ( (toP == (ringId)->bufSize - 1) ? ( ((ringId)->pFromBuf == 0) ? 0 : ( (ringId)->buf[toP] = ch, (ringId)->pToBuf = 0, 1 ) ) : ( (ringId)->buf[toP] = ch, (ringId)->pToBuf++, 1 ) ) )
#define EPIC_INTER_IN_SERVICE 2
#define I2C_IOCTL_RMW_AND_OR 4
#define MMU_ATTR_MSK_ID_GET(mask) ((mask) & MMU_ATTR_MSK_ID_MSK)
#define MSG_NODE_DATA(pNode) (((char *) pNode) + sizeof (MSG_NODE))
#define MII_PHY_HD 0x0200
#define INCLUDE_VXMUX_MBLK 
#define M_mountLib (94 << 16)
#define EVENT_RTPCHILDWAIT CLASS3_EVENT(90)
#define VXBAF_BYTE_ORDER_LE_32 0x00e40000
#define ns165501Num NELEMENTS(ns165501Resources)
#define EPIC_TSEC2TX_INT_VEC (EPIC_TSEC2TX_INT_NUM + EPIC_VEC_IN_IRQ0)
#define __INCtyLibh 
#define _FRSYNC 0x20000
#define S_miiLib_PHY_NULL (M_miiLib | 2)
#define VX_COPROC3_TASK 0x04000000
#define _IFORM_VX_1 64
#define _IFORM_VX_2 65
#define _IFORM_VX_3 66
#define _IFORM_VX_4 67
#define _IFORM_VX_5 68
#define _WRS_SDA_CONST __attribute__ ((__section__ (".sdata2")))
#define _DBCR1_IAC1US_U 0xc000
#define M85XX_L2ERRCAPTDATALO(x) (CAST(VUINT32 *)((x + 0x20E24)))
#define EPIC_TSEC1RX_INT_VEC (EPIC_TSEC1RX_INT_NUM + EPIC_VEC_IN_IRQ0)
#define __SMOD 0x2000
#define EPIC_IPI_DPATCH_REG1 (EPIC_CCSROFF + 0x00050)
#define FIODISKFORMAT 5
#define RIO_HOST_ID_OFFSET 16
#define WDT_RATE_MIN (sysTimerClkFreq / (1 << 29))
#define _DBCR2_DAC12M 0x00c00000
#define INST_BCLR_MASK 0xfc00ffff
#define WIND_TCB_P1 WIND_TCB_R4
#define EISCONN 56
#define WIND_TCB_P3 WIND_TCB_R6
#define WIND_TCB_P4 WIND_TCB_R7
#define WIND_TCB_P5 WIND_TCB_R8
#define WIND_TCB_P6 WIND_TCB_R9
#define WIND_TCB_P7 WIND_TCB_R10
#define MMU_ATTR_SUP_TEXT (MMU_ATTR_SUP_EXE)
#define I2C_READOP 0
#define M85XX_L2CTL_L2DO_MSK 0x00400000
#define S_eventLib_EVENTSEND_FAILED (M_eventLib | 0x0004)
#define _WRS_INLINE_vxAtomicGet 
#define I2C_TSENSOR_SEEKER_ADRS 0
#define ECONNABORTED 53
#define FATAL_SYSTEM_CORE_DUMP_ENABLE TRUE
#define INST_STW_R0_SP INST_STW_SP
#define __INCvxInlineh 
#define VXBAF_BYTE_ORDER_LE_64 0xe4e40000
#define DBG_BREAK_INST 0x7fe00008
#define _TYPE_clock_t typedef unsigned int clock_t
#define EPIC_RES45_INT_NUM 45
#define __INCmmuAttrh 
#define I2C_CYCLE_ACKOUT(x) i2cCycleMpc85xxAckOut(x)
#define EPIC_IN_INT24_VEC_REG (EPIC_CCSROFF + 0x10500)
#define M_dbgLib (4 << 16)
#define WIND_TCB_R0 (WIND_TCB_REGS + REG_SET_GR(0))
#define WIND_TCB_R1 (WIND_TCB_REGS + REG_SET_GR(1))
#define WIND_TCB_R2 (WIND_TCB_REGS + REG_SET_GR(2))
#define WIND_TCB_R3 (WIND_TCB_REGS + REG_SET_GR(3))
#define WIND_TCB_R5 (WIND_TCB_REGS + REG_SET_GR(5))
#define WIND_TCB_R6 (WIND_TCB_REGS + REG_SET_GR(6))
#define WIND_TCB_R8 (WIND_TCB_REGS + REG_SET_GR(8))
#define WIND_TCB_R9 (WIND_TCB_REGS + REG_SET_GR(9))
#define _DBCR1_IAC1ER_U 0x3000
#define __const const
#define MMU_ATTR_MSK_ID_MSK 0x000000e0
#define VX_MUTEX_SEMAPHORE VX_SEMAPHORE
#define M85XX_L2CEWCR_E_BIT 31
#define EVENT_OBJ_SEMTAKE CLASS2_EVENT(21)
#define EPIC_OPT_EXPIN_OFF (0x00000000 >> 16)
#define MII_ANAR_ASM_PAUSE 0x0800
#define CS7 0x8
#define SIO_ERROR_NONE (-1)
#define DDR_ERR_SBE 0xe58
#define STACK_DIR _VX_STACK_DIR
#define M85XXRIO_RIWAR_PCI 0x00
#define INCLUDE_IPCOM_USE_INET 
#define _IFIELD_CRM(x) ((0x000ff000 & x) >> 12)
#define min(x,y) (((x) < (y)) ? (x) : (y))
#define _DBSR_DAC2R_U 0x0002
#define WIND_TCB_SP WIND_TCB_R1
#define S_objLib_OBJ_LIB_NOT_INITIALIZED (M_objLib _WRS_BIT_OR 18)
#define EPIC_MSIDR_CRIT0_INT EPIC_BIT(30)
#define EPIC_PCI2_INT_VEC (EPIC_PCI2_INT_NUM + EPIC_VEC_IN_IRQ0)
#define M_dosFsLib (56 << 16)
#define _VX_PENTIUM3 85
#define _PPC_MMUCSR0_L2TLB0_FI_V(x) (x >> 2)
#define M85XXRIO_PMBH0CSR(base) (CAST(VUINT32 *)(((char*)base) + 0x00100 ))
#define EPIC_SR_IN_DB1_INT_NUM 34
#define MMU_STATE_MASK_WRITABLE_EXECUTE 0x00003c00
#define MII_PHY_MONITOR 0x4000
#define PCI_OUTBOUND_TRANS_EXT_ADRS_REG1(base) CVPUINT32(base, 0x8c24)
#define PCI_OUTBOUND_TRANS_EXT_ADRS_REG3(base) CVPUINT32(base, 0x8c64)
#define PCI_OUTBOUND_TRANS_EXT_ADRS_REG4(base) CVPUINT32(base, 0x8c84)
#define RES_ADDR 3
#define WIND_TCB_T0 WIND_TCB_R14
#define WIND_TCB_T1 WIND_TCB_R15
#define WIND_TCB_T2 WIND_TCB_R16
#define WIND_TCB_T5 WIND_TCB_R19
#define MPC85XX_I2C_CONTROL_REG_MTX 0x10
#define WIND_TCB_T7 WIND_TCB_R21
#define WIND_TCB_T8 WIND_TCB_R22
#define WIND_TCB_T9 WIND_TCB_R23
#define WDB_COMM_TYPE WDB_COMM_END
#define ERRMAX 89
#define LAWAR_TGTIF_DDRSDRAM 0x00F00000
#define SIO_MCTRL_BITS_SET 0x100D
#define __INCb_blkcnt_th 
#define FREQ_100_MHZ 99999999
#define FCREAT _FCREAT
#define M_smLib (72 << 16)
#define S_mmuLib_INVALID_PAGE_SIZE (M_mmuLib | 1)
#define RLIMIT_MEMLOCK 6
#define MMU_ATTR_USR_DATA (MMU_ATTR_USR_RW | MMU_ATTR_SUP_DATA)
#define RIO_CHANNEL_CFG 6
#define EPIC_SMSG_INT6_DES_REG (EPIC_CCSROFF + 0x11cd0)
#define WDB_PROXY_HAS_CONTROL_PORT TRUE
#define WV_EVT_PROTO_REV_3_1_FCS 4
#define PCI2_CFG_DATA_REG (CCSBAR + 0x9004)
#define INT_BANK_DESC_NUM 10
#define EPIC_EX_INT10_VEC_REG (EPIC_CCSROFF + 0x10140)
#define INCLUDE_MII_BUS 
#define TASK_PRIORITY_SET_COMPATIBLE FALSE
#define PCI_INBOUND_BASE_ADRS_REG1(base) CVPUINT32(base, 0x8DE8)
#define INCLUDE_ANSI_CTYPE 
#define WDB_END_DEVICE_NAME NULL
#define VXB_INTR_TRIG_FALLING_EDGE (VXB_INTR_TRIG_NEG | VXB_INTR_TRIG_EDGE)
#define _ARCH_LDBL_MAX 1.7976931348623157e+308L
#define PCI_INBOUND_BASE_ADRS_REG2(base) CVPUINT32(base, 0x8DC8)
#define EPIC_IN_INT38_VEC_REG (EPIC_CCSROFF + 0x106c0)
#define _PPC_L1CSR_UL 0x00000400
#define DDR_SDRAM_LOCAL_ADRS LOCAL_MEM_LOCAL_ADRS
#define MMU_ATTR_PROT_USR_EXE 0x00000020
#define PCI2_OUTBOUND_TRANS_EXT_ADRS_REG0(base) CVPUINT32(base, 0x9c04)
#define RLIMIT_STACK 3
#define _FTEXT 0x200000
#define INST_MTLR 0x7c0803a6
#define _PPC_ESF_MSR _PPC_ESF_R(GREG_NUM)
#define MII_NP_NP 0x8000
#define VME_AM_SUP_SHORT_IO 0x2d
#define _VA_LIST_T_H 
#define LOCAL2PCI_MEMIO(x) ((int)(x) + PCI_MSTR_MEM_BUS)
#define _PPC_HID0_DOZE 0x00800000
#define MII_PHY_LINK_FORCE 0x2
#define M_cbioLib (133 << 16)
#define __INCb_atomic_th 
#define M85XX_L2CTL_L2I_BIT 30
#define VM_INSTALLED (vmLibInfo.vmLibInstalled)
#define INCwrSbc8548h 
#define EPIC_OPT_POLAR_EDG_NEG 0x00000000
#define INCLUDE_SPE 
#define INCLUDE_END 
#define EVENT_OWNERSET CLASS3_EVENT(59)
#define INST_BCL (_OP(16, 0) | 1)
#define FIOGETNAME 18
#define EPIC_EX_INT10_DES_REG (EPIC_CCSROFF + 0x10150)
#define EPIC_MIDR_CRIT1_INT EPIC_BIT(29)
#define MMU_STATE_SUP_RWX_USR_RW (MMU_STATE_SUP_RWX | _MMU_UR | _MMU_UW)
#define MMU_STATE_SUP_RWX_USR_RX (MMU_STATE_SUP_RWX | _MMU_UR | _MMU_UX)
#define __RCSID(s) __IDSTRING(rcsid,s)
#define _DBCR0_IAC1 0x00800000
#define _DBCR0_IAC2 0x00400000
#define L2_CACHE_SIZE L2SIZ_512KB
#define __INCcoprocLibPh 
#define _PPC_L1CSR_FI 0x00000002
#define _PPC_ESR_DLK 0x00200000
#define S_vxdbgLib_ILLEGAL_OPERATION VXDBG_ERROR_TO_ERRNO(VXDBG_ERR_ILLEGAL_OPERATION)
#define __FLT_MAX__ 3.40282347e+38F
#define EVENT_MSGSCREATE CLASS3_EVENT(39)
#define _WRS_ADJUST_PC_FOR_BRANCH_DELAY(pReg) {}
#define EVENT_EVENTSEND CLASS3_EVENT(57)
#define PCI_IN_ATTR_RTT_LM_WRITE_NO_SNOOP 0x00004000
#define MAX_LOG_MSGS 50
#define _WRS_CONFIG_COMPONENT_USR_TEST 1
#define FSTAT_NON 0140000
#define INCLUDE_LINKBUFPOOL 
#define MQ_HASH_SIZE 0
#define OBJ_SET_DELETE_ON_LAST_CLOSE(objId) ( ((OBJ_CORE *)(objId))->handle.attributes |= WIND_OBJ_DELETE_ON_LAST_CLOSE )
#define MMU_ATTR_USR_IO (MMU_ATTR_USR_RW | MMU_ATTR_SUP_IO)
#define SEM_Q_FIFO 0x00
#define M_miiLib (123 << 16)
#define VX_COPROC5_TASK 0x10000000
#define _IFORM_VA_1B 77
#define MULTI_BUS BUS_TYPE_MULTIBUS
#define __va_list__ 
#define _WRS_CONFIG_CPU_PWR_MGMT_D 1
#define JOB_TASK_DONE_EVENT VXEV27
#define __INCclassLibh 
#define EPIC_BIT(x) (1 << (x))
#define M_tickLib (60 << 16)
#define SM_REGIONS_MAX 20
#define RIO_FEATURES_BRIDGE 0x0001
#define EPIC_IN_INT19_VEC_REG (EPIC_CCSROFF + 0x10460)
#define _POSIX_ASYNC_IO 0
#define _VX_MAP 180
#define _WRS_DATA_ALIGN_BYTES(x) __attribute__((aligned(x)))
#define RIO_BRIDGE_ININTIALIZED 2
#define EPIC_SMSG_INTERRUPT 29
#define EVENT_RTP_INIT_TASK CLASS3_EVENT(80)
#define IS_VALID_CACHEABLE(mask,attr) ( ((mask) & MMU_ATTR_VALID_MSK) == MMU_ATTR_VALID_MSK && ((mask) & MMU_ATTR_CACHE_MSK) == MMU_ATTR_CACHE_MSK && ((attr) & MMU_ATTR_VALID) == MMU_ATTR_VALID && ((attr) & (MMU_ATTR_CACHE_COPYBACK | MMU_ATTR_CACHE_DEFAULT)) != 0 )
#define M_adrSpaceLib (180 << 16)
#define M85XX_LBCR(base) (CAST(VUINT32 *)((base) + 0x50D0))
#define _IFORM_A_1 50
#define _IFORM_A_4 53
#define _DBLFUNCPTR_DEFINED 
#define MMU_ATTR_VALID 0x00000040
#define PCIEX_INBOUND_TRANS_EXT_ADRS_REG3(base) CVPUINT32(base, 0xaDA4)
#define VXB_BUSID_PCIX 4
#define M85XXRIO_ROWAR_WRTYPE_FLUSH 0x1
#define S_msgQLib_ILLEGAL_PRIORITY (M_msgQLib | 5)
#define EPIC_CISR0_MSG_INT_MSK 0xf000
#define MMU_STATE_SUP_RWX_USR_WX (MMU_STATE_SUP_RWX | _MMU_UW | _MMU_UX)
#define EVENTS_NONINTERRUPTIBLE 0x00
#define EPIC_OPT_SENSE_MSK EPIC_EIVPR_INTR_SENSE
#define VM_STATE_MEM_COHERENCY_NOT 0
#define be16toh(x) ((UINT16)(x))
#define EVENT_RTP_SPAWN CLASS3_EVENT(78)
#define SEM_NO_ERROR_CHECK 0x80
#define PCI_ERROR_ATTR_CAPTURE_REG 0x8e0c
#define RIO_CSR_LCS_BAR 0x5c
#define INCLUDE_TASK_VARS 
#define PCI_CFG_NONE 2
#define MPC85XX_I2C_STATUS_REG_MIF 0x02
#define EPIC_IN_INT19_DES_REG (EPIC_CCSROFF + 0x10470)
#define DDR_SDRAM_CFG_2 0x114
#define EVENT_TASKSTOP CLASS3_EVENT(43)
#define MAX_NUM_RIO_TARGETS 10
#define M85XX_LAWAR5(base) (CAST(VUINT32 *)((base) + 0xcB0))
#define VXBAF_IO_SPACE_OPERATION 0x00000020
#define M85XXRIO_RxWAR_TYPE_MSK 0xf
#define _T_SIZE 
#define WDB_COMM_SERIAL 1
#define M85XX_LAWAR6(base) (CAST(VUINT32 *)((base) + 0xcd0))
#define sioCallbackInstall(pSioChan,callbackType,callback,callbackArg) ((pSioChan)->pDrvFuncs->callbackInstall (pSioChan, callbackType, callback, callbackArg))
#define _EXC_OFF_TRACE 0x00d00
#define __warn_references(sym,msg) __asm__(".section .gnu.warning." #sym); __asm__(".asciz \"" msg "\""); __asm__(".previous")
#define S_vxdbgLib_INVALID_REGSET VXDBG_ERROR_TO_ERRNO(VXDBG_ERR_INVALID_REGSET)
#define S_msgQLib_UNSUPPORTED_OPERATION (M_msgQLib | 6)
#define M_excLib (194 << 16)
#define M_bufLib (64 << 16)
#define MAX_CONTROL_ID 49
#define EPIC_IPIVPR_VECTOR(vec) ((vec) & EPIC_IPIVPR_VECTOR_MSK)
#define _PC_FILESIZEBITS 5
#define BRIDGE_BAR0_OFFSET 0x10
#define _VX_MIPSI32R2 46
#define _OP(opcd,xo) ((opcd << 26) + (xo << 1))
#define DBSR 304
#define INCLUDE_FORMATTED_IO 
#define EPIC_DUART_INT_VEC (EPIC_DUART_INT_NUM + EPIC_VEC_IN_IRQ0)
#define STD_OUT 1
#define _EXTENSION_POSIX_1003 1
#define WDB_END_DEVICE_UNIT 0
#define M_mmuLib (85 << 16)
#define IS_SYSCALL_EVENT(event) ((event >= EVENT_SYSCALL_0) && (event <= EVENT_SYSCALL_8))
#define EPIC_IN_INT30_VEC_REG (EPIC_CCSROFF + 0x105c0)
#define OBJ_IS_PUBLIC(objId) ( (((OBJ_CORE *)(objId))->handle.attributes & WIND_OBJ_PUBLIC) != 0 )
#define __CONCAT1(x,y) x ## y
#define EPIC_MAX_IPI_IRQS 4
#define CPU_PWR_UTIL_PERIOD1 (300)
#define CPU_PWR_UTIL_PERIOD2 (1000)
#define ECONNREFUSED 61
#define FIOOPTIONS 3
#define WDB_MTU 1500
#define VX_MSG_Q_SIZE 176
#define EPIC_IPIVPR_INTR_ACTIVE EPIC_BIT(30)
#define _PPC_HID0_NAP 0x00400000
#define EAGAIN 11
#define PLAT_RATIO_333_MHZ 4
#define DBG_NO_SINGLE_STEP 1
#define __DBL_MAX_10_EXP__ 308
#define _GNU_TOOL 
#define M85XXRIO_PEIR(base) (CAST(VUINT32 *)(((char*)base) + 0x10014 ))
#define _PARM_L_tmpnam 64
#define M_taskPxLib (198 << 16)
#define __LDBL_DENORM_MIN__ 4.9406564584124654e-324L
#define AUTOCONF_INCLUDED 
#define I2C_DEVICE_TYPE_EEPROM_AT24C256 0
#define BUS_TYPE_VME 1
#define PCI_ARCADIA_BRIDGE_DEV_ID 0x051310E3
#define FLASH_ADRS_MASK 0xfff00000
#define _EXC_OFF_FPU 0x00800
#define WIND_OBJ_DELETE_ON_LAST_CLOSE 0x08
#define MMU_ATTR_USR_RO (MMU_ATTR_PROT_USR_READ)
#define BUCSR 1013
#define MMU_ATTR_USR_RW (MMU_ATTR_PROT_USR_READ | MMU_ATTR_PROT_USR_WRITE)
#define VME_AM_IS_SHORT(addr) ((addr & 0xf0) == 0x20)
#define RIO_CAR_DEVICE_INFO 0x04
#define MII_WRITE(addr,reg,val1,val2) val2 = ((* (pPhyInfo->phyWriteRtn)) ((pPhyInfo->pDrvCtrl), (addr), (reg), (val1)));
#define PCICMD_ADRS (PCI_CFG_BASE + 0x04)
#define MII_TECH_10BASE_T 0x0020
#define MMU_STATE_MASK_GUARDED 0x00000002
#define _VX_SIMSPARCSOLARIS 61
#define _PPC_MSR_SPE 0x02000000
#define INCLUDE_CPU_PWR_MGMT 
#define EPIC_TSEC2ERR_INT_VEC (EPIC_TSEC2ERR_INT_NUM + EPIC_VEC_IN_IRQ0)
#define _WRS_PAL_COPROC_LIB 
#define _VX_FD_ZERO(p) bzero((char *)(p), sizeof(*(p)))
#define ULTRASPARC _VX_ULTRASPARC
#define __STDC__ 1
#define MII_CR_RESET 0x8000
#define _WRS_CONFIG_ISR_OBJECTS 1
#define CACHE_SNOOP_DISABLE 0x20
#define VX_CLASS_LIST_LOCK(lock) semMTakeScalable (lock, WAIT_FOREVER, CLASS_LIST_SEM_INLINE_OPTIONS)
#define SH7600 _VX_SH7600
#define INCLUDE_MMU_BASIC 
#define __sferror(p) ((HANDLE_VERIFY(p, handleTypeFile) != OK) ? (FALSE) : (((p)->_flags & __SERR) != 0))
#define M_sntpcLib (113 << 16)
#define VXB_BUSID_MII 8
#define MII_CR_1000 0x0040
#define INCLUDE_WDB_GOPHER 
#define M_scsiLib (55 << 16)
#define EVENT_MEMADDTOPOOL CLASS3_EVENT(34)
#define HD_1 129
#define HD_2 130
#define _DBSR_TRAP_U 0x0100
#define RIO_WPCSR_EMPTY 0x04000000
#define MAX_LIO_CALLS 0
#define spReg gpr[1]
#define WV_EVT_PROTO_REV_3_0_FCS 3
#define _IFIELD_CRBA(x) ((0x001f0000 & x) >> 16)
#define EPIC_IN_INT11_VEC_REG (EPIC_CCSROFF + 0x10360)
#define SYM_IS_BSS(symType) ((symType) & SYM_BSS)
#define _IFIELD_CRBB(x) ((0x0000f800 & x) >> 11)
#define _PPC_L1CFG_REPL_MASK 0x00400000
#define VXDBG_MEM_WIDTH_READ vxdbgMemRead
#define _SYS_UIO_H_ 
#define WIND_CLASS_ALLOW_DUPLICATE_NAMES 0x01
#define M_ftpLib (136 << 16)
#define INCLUDE_TFFS_MOUNT 
#define EVENT_INT_ENTER EVENT_INT_ENT(0)
#define EPIC_IN_INT12_DES_REG (EPIC_CCSROFF + 0x10390)
#define _IFORM_EVX_14 104
#define MII_MAX_REG_NUM 0x20
#define _PPC_HID0_TBEN 0x00004000
#define BSP_VERSION "2.0"
#define __XSI_VISIBLE 600
#define INCLUDE_MSG_Q 
#define __INCsmpPpcPh 
#define SPE_CONTEXT_GET(pTcb) (SPE_CONTEXT *)(pTcb->pCoprocCtx)
#define LSDMR_RFCR_SHIFT(x) ((x << 15) & LSDMR_RFCR_MASK)
#define DEV_HDR_REMOVABLE 0x0001
#define FD_CLOEXEC 1
#define M85XXRIO_IPWMR(base) (CAST(VUINT32 *)(((char*)base) + 0x134E0 ))
#define LAWAR_SIZE_4KB 0x0000000B
#define M_taskLib (3 << 16)
#define __LDBL_DIG__ 15
#define FIOREADYCHANGE 11
#define EPIC_PCI_EXPRESS_INT_NUM 10
#define _MMU_SR 0x00000100
#define VXDBG_MEM_ACCESS(mode,pSrc,pDest,size) VXDBG_MEM_WIDTH_ACCESS(mode, pSrc, pDest, size, 0)
#define L2_SRAM_SIZE 0
#define EPIC_MAX_SMSG_IRQS 8
#define M85XX_L2CTL_L2BLKSIZ_MSK 0x0C000000
#define EXT_NUM_IRQ0 EXT_VEC_IRQ0
#define EPIC_IN_INT11_DES_REG (EPIC_CCSROFF + 0x10370)
#define PPC8560 _VX_PPC8560
#define __INCeventLibh 
#define __LDBL_MIN_10_EXP__ (-307)
#define FS_COMMIT_POLICY_NONE 0
#define DDR_SDRAM_LOCAL_ADRS_END (DDR_SDRAM_LOCAL_ADRS + DDR_SDRAM_LOCAL_SIZE)
#define RUNTIME_NAME "VxWorks"
#define WV_CLASS_NONE 0x00000000
#define EPIC_EIVPR_INTR_SENSE EPIC_BIT(22)
#define _DBCR0_DAC1W_U 0x0004
#define INCLUDE_SHELL_BANNER 
#define HRFS_DEFAULT_COMMIT_POLICY FS_COMMIT_POLICY_AUTO
#define EPIC_IPIDR_P0 EPIC_BIT(0)
#define MMU_BUFFER_WRITE (*(mmuLibFuncs.mmuBufferWrite))
#define FIOPROTOHOOK 22
#define EPIC_SMSG_DEST_REG(irq) (EPIC_SMSG_VEC_REG(irq) + EPIC_SMSG_DEST_REG_VECREGOFF)
#define MII_EXP_PRTN_NP 0x0008
#define CACHE_DMA_IS_WRITE_COHERENT() CACHE_DRV_IS_WRITE_COHERENT (&cacheDmaFuncs)
#define PCI_DEV_ID_85XX 0x000C1057
#define EPIC_EX_INT6_VEC_REG (EPIC_CCSROFF + 0x100c0)
#define EVENTS_SEND_IF_FREE 0x04
#define SLL_PUT_AT_TAIL(list,node) { ((SL_NODE *)(node))->next = NULL; if (((SL_LIST *)(list))->head == NULL) { ((SL_LIST *)(list))->head = (SL_NODE *)(node); ((SL_LIST *)(list))->tail = (SL_NODE *)(node); } else ((SL_LIST *)(list))->tail->next = (SL_NODE *)(node); ((SL_LIST *)(list))->tail = (SL_NODE *)(node); }
#define __INCb_clock_th 
#define VXBAF_CONVERT_BYTE_ORDER 0x00000001
#define IPCOM_ENV_NONE 1
#define M85XXRIO_ODQEPAR(base) (CAST(VUINT32 *)(((char*)base) + 0x11028))
#define S_smLib_NOT_ATTACHED (M_smLib | 3)
#define _WRS_KERNEL_LOCK_OFFSET_file (0x0c + _WRS_KERNEL_LOCK_ALIGN_tkt_ctr)
#define _CPU_CACHE_ALIGN_SHIFT 5
#define INCLUDE_PARAM_SYS 
#define PPC_NO_REAL_MODE 
#define INCLUDE_IO_FILE_SYSTEM 
#define HCF_RES_ADDR 3
#define VXB_ACCESS_INT_DISABLE 0x00000010
#define CONTIG_MAX -1
#define MAC_OFFSET_MOTTSEC 0
#define RIO_FEATURES_EXTADDR_34_50_66 0xe000
#define MIPSI32 _VX_MIPSI32
#define __RCSID_SOURCE(s) __IDSTRING(rcsid_source,s)
#define MMU_STATE_SUP_RX_USR_RW (MMU_STATE_SUP_RX | _MMU_UR | _MMU_UW)
#define MMU_STATE_SUP_RX_USR_RX (MMU_STATE_SUP_RX | _MMU_UR | _MMU_UX)
#define FIODISCARD 71
#define __INCsioLibh 
#define VX_BINARY_SEMAPHORE VX_SEMAPHORE
#define EPIC_EIVPR_PRIORITY(p) (((p) << 16) & EPIC_EIVPR_PRIORITY_MSK)
#define _VX_ARCH_DIR ppc
#define MII_PHY_ISO_UNAVAIL 0x200000
#define _PPC_TCR_WIE_U 0x0800
#define EPIC_INT_EDG_POS 1
#define MMU_ATTR_CACHE_COPYBACK 0x00000100
#define EPIC_PROC_INIT_REG (EPIC_CCSROFF + 0x01090)
#define MMU_STATE_ENDIAN_LITTLE 0x00000001
#define INST_BC_RL 0x4c000021
#define VM_PAGE_OPTIMIZE(context,virtAddr,len,option) ((vmLibInfo.pVmPageOptimizeRtn == NULL) ? (ERROR) : ((*vmLibInfo.pVmPageOptimizeRtn) (context, virtAddr, len, option)))
#define EPIC_EX_INT6_DES_REG (EPIC_CCSROFF + 0x100d0)
#define MII_SR_T2_FULL_DPX 0x0400
#define M85XXRIO_IPWSR(base) (CAST(VUINT32 *)(((char*)base) + 0x134E4 ))
#define MII_MASSLA_STAT_LOCAL_RCV 0x2000
#define IPCOM_PCONFIG_H 
#define I2C_CYCLE_START(x) i2cCycleMpc85xxStart(x)
#define FD_CLR(n,p) _VX_FD_CLR (n, p)
#define MSG_Q_OPTIONS_MASK (MSG_Q_TYPE_MASK | MSG_Q_EVENTSEND_ERR_NOTIFY | MSG_Q_INTERRUPTIBLE)
#define M85XXRIO_ROWAR0(base) (CAST(VUINT32 *)(((char*)base) + 0x10C10 ))
#define _ARCH_CHAR_MIN (-127-1)
#define INCLUDE_WDB_START_NOTIFY 
#define CDF_OVERRIDE TRUE
#define MB_LEN_MAX 1
#define DRV_INTCTLR_PPC 
#define _FFD_CLOEXEC 0x100000
#define VX_MEM_BARRIER_R() _WRS_BARRIER("sync");
#define __ppc 1
#define VX_MEM_BARRIER_W() _WRS_BARRIER("sync");
#define MIPSI64 _VX_MIPSI64
#define EOPNOTSUPP 45
#define _EXC_OFF_PROG 0x00700
#define M85XXRIO_ROWARn(base,n) (CAST(VUINT32 *)(((char*)base) + 0x10C10 + ((n)*0x20)))
#define SEM_RW_LIST_ENTRY_SIZE 0x0c
#define M_icmpLib (74 << 16)
#define S_objLib_OBJ_NO_METHOD (M_objLib _WRS_BIT_OR 5)
#define _ARCH_DBL_EPSILON 2.2204460492503131e-16
#define S_taskLib_TASK_SWAP_HOOK_SET (M_taskLib | 105)
#define _VX_AM29035 53
#define S_classLib_CLASS_ID_ERROR (M_classLib | 1)
#define __P(protos) protos
#define MEM_ALLOC_ERROR_MASK 0x03
#define CORE_DUMP_MEM_FILTER_MAX 10
#define UIO_SMALLIOV 8
#define __INCvwModNumh 
#define MII_TECH_10BASE_FD 0x0040
#define MAX_CLASS1_ID 599
#define SM_OBJ_MAX_MEM_PART 4
#define EPIC_TM_A3_VEC_REG (EPIC_CCSROFF + 0x011e0)
#define __INCb_cpuset_th 
#define VX_MAX_TASK_SWITCH_RTNS 16
#define RIO_NO_HARDWARE 0
#define _WRS_UNALIGNED_COPY(pSrc,pDest,size) ( __builtin_memcpy ((pDest), (void *)(pSrc), size))
#define BRK_HARDWARE 0
#define MMU_STATE_SUP_RX_USR_WX (MMU_STATE_SUP_RX | _MMU_UW | _MMU_UX)
#define EPIC_SR_IN_DB1_INT_VEC (EPIC_SR_IN_DB1_INT_NUM + EPIC_VEC_IN_IRQ0)
#define EPIC_MIDR_EX_PIN EPIC_BIT(31)
#define _T_WCHAR 
#define CLASS2_EVENT(id) (MIN_CLASS2_ID + id)
#define PCIBA (CCSBAR | PIC_OFFSET)
#define EVENT_SD_DELETE CLASS3_EVENT(201)
#define EVENT_TASKCONT CLASS3_EVENT(44)
#define EPIC_FRR_NCPU_MASK 0x00001f00
#define EVENT_TASKLOCK CLASS1_EVENT(7)
#define MII_MF_OP_RD 0x2
#define __INCregsPpch 
#define _PPC_ESF_R8 _PPC_ESF_R(8)
#define I2C_CYCLE_ACKIN(x) i2cCycleMpc85xxAckIn(x)
#define MMU_ATTR_TRANSLATE (*(mmuLibFuncs.mmuAttrTranslate))
#define SM_ANCHOR_ADRS ((char *) (SM_BASE_ADRS + SM_ANCHOR_OFFSET))
#define F_UNLKSYS 4
#define S_iosLib_TOO_MANY_OPEN_FILES EMFILE
#define SIO_MODE_INT 2
#define M_nfsdLib (95 << 16)
#define INCLUDE_WDB_EXC_NOTIFY 
#define SIO_CALLBACK_PUT_RCV_CHAR 2
#define M_ipcom (199 << 16)
#define M_poolLib (124 << 16)
#define MCORE10 _VX_MCORE10
#define O_NOCTTY _FNOCTTY
#define MCORE15 _VX_MCORE15
#define AIO_PRIO_DELTA_MAX 254
#define VX_CODE_BARRIER() _WRS_BARRIER("")
#define TRON _VX_TRON
#define _WRS_KERNEL_LOCK_ALIGN_tkt_ctr (_WRS_KERNEL_LOCK_VAR_ALIGN)
#define FIONBIO 16
#define FMARK _FMARK
#define _FAPPEND 0x0008
#define _PPC_ESF_R13 _PPC_ESF_R(13)
#define _VX_MIPS 40
#define _PPC_ESF_R14 _PPC_ESF_R(14)
#define WDB_COMM_NETWORK 0
#define M_loadCoffLib (83 << 16)
#define WIND_TCB_R14 (WIND_TCB_REGS + REG_SET_GR(14))
#define EPIC_RES43_INT_VEC (EPIC_RES43_INT_NUM + EPIC_VEC_IN_IRQ0)
#define WIND_JOBS_MAX 64
#define RIO_BUS_CONFIG_IN_PROGRESS 3
#define __INCb_BOOLh 
#define WIND_TCB_R15 (WIND_TCB_REGS + REG_SET_GR(15))
#define _PPC_ESF_R17 _PPC_ESF_R(17)
#define EPIC_IN_INT30_DES_REG (EPIC_CCSROFF + 0x105d0)
#define __FLT_MIN__ 1.17549435e-38F
#define S_vmLib_FUNCTION_UNSUPPORTED (M_vmLib | 7)
#define IPCOM_USE_INET 
#define _VX_I80386 81
#define _WRS_ABSOLUTE_EXTERN(name) extern const char name[]
#define MMU_ASID_MIN 1
#define MEM_ALLOC_ERROR_LOG_MSG 0x01
#define S_taskLib_TASK_SWAP_HOOK_REFERENCED (M_taskLib | 104)
#define EVENT_TASKUNLOCK CLASS1_EVENT(8)
#define _ARCH_LONG_MIN (-2147483647-1)
#define EVENT_WINDPENDQFLUSH CLASS2_EVENT(14)
#define _WRS_CONFIG_COMPONENT_IPAPPL 1
#define EPIC_MIVPR_PRIORITY_MSK (EPIC_BIT(19) | EPIC_BIT(18) | EPIC_BIT(17) | EPIC_BIT(16))
#define __POSIX_VISIBLE 200112
#define SPARCV9 _VX_SPARCV9
#define _PPC_SPEFSCR_SOVH 0x80000000
#define _PPC_ESR_SPE 0x00000080
#define _PPC_MMUCSR0_L2TLB1_FI 0x00000002
#define RIO_CSR_PE_LL_CTRL 0x4c
#define EPIC_PERFMON_3_MSK_REG0 (EPIC_CCSROFF + 0x013b0)
#define MRTPR_PTP_MASK 0xff000000
#define __INCb_blksize_th 
#define IPCOM_FILE_NATIVE_ROOT "/ram/"
#define WDB_DPRINTF_MAX_MSG_LENGTH 100
#define PCI_INBOUND_ATTR_REG1(base) CVPUINT32(base, 0x8DF0)
#define LAWAR_SIZE_128KB 0x00000010
#define MII_PHY_NO_DELAY 0x0
#define EPIC_MSIDR_P1_INT EPIC_BIT(1)
#define PCI2_INBOUND_ATTR_REG2(base) CVPUINT32(base, 0x9DD0)
#define PCI2_INBOUND_ATTR_REG3(base) CVPUINT32(base, 0x9DB0)
#define _VX_SIMSPARCSUNOS 60
#define PCI_INBOUND_ATTR_REG3(base) CVPUINT32(base, 0x8DB0)
#define TRUE (1)
#define M_isrLib (175 << 16)
#define _WRS_CONFIG_COMPONENT_IPRIP 1
#define _VX_MAP1000A 181
#define __INCversionh 
#define M_exEngLib (169 << 16)
#define EAFNOSUPPORT 47
#define EPIC_IIVPR_VECTOR_MSK (0xffff)
#define M85XX_MAMR(base) (CAST(VUINT32 *)((base) + 0x5070))
#define LAWAR_SIZE_128MB 0x0000001A
#define EEXIST 17
#define VX_COPROC2_TASK 0x02000000
#define M85XXRIO_PLMREQCSR(base) (CAST(VUINT32 *)(((char*)base) + 0x00140 ))
#define M_lstLib (15 << 16)
#define _VX_ULTRASPARC 111
#define EPIC_IN_INT43_DES_REG (EPIC_CCSROFF + 0x10770)
#define VME_AM_EXT_SUP_ASCENDING 0x0f
#define SEMRW_EXT_PTR_GET(semId) ( (SEM_RW_EXT *) ((UINT) semId + sizeof (SEMAPHORE) )
#define S_vmLib_BAD_STATE_PARAM (M_vmLib | 2)
#define EPIC_SMSG_INT6_VEC_REG (EPIC_CCSROFF + 0x11cc0)
#define XSCALE _VX_XSCALE
#define INCLUDE_ELF 
#define VM_STATE_MASK_GLOBAL MMU_ATTR_SPL_MSK
#define M85XXRIO_ODDPR(base) (CAST(VUINT32 *)(((char*)base) + 0x13418))
#define M85XX_L2CTL_L2SRAM_MSK 0x00070000
#define MMU_STATE_SUP_R_USR_R (MMU_STATE_SUP_R | _MMU_UR)
#define MMU_ATTR_PROT_GET(attr) ((attr) & MMU_ATTR_PROT_MSK)
#define MMU_STATE_SUP_R_USR_W (MMU_STATE_SUP_R | _MMU_UW)
#define EPIC_OPT_EN_N 0x80000000
#define EPIC_EX_DFT_POLAR EPIC_INT_ACT_HIGH
#define INCLUDE_CACHE_SUPPORT 
#define _WRS_ASM(x) __asm__ volatile (x)
#define _EXC_OFF_DECR 0x00900
#define CORE_DUMP_MEM_POOL_PROTECTION_ENABLE TRUE
#define EPIC_CTPR_TASKPRI(p) ((p) & EPIC_CTPR_TASKPRI_MSK)
#define S_ioLib_CANT_OVERWRITE_DIR EISDIR
#define M_vwModNum (27 << 16)
#define SYM_TEXT 0x4
#define VXB_PARAM_POINTER 0x0004
#define FIOATTRIBSET 35
#define M85XXRIO_ROWAR_RDTYPE_IO_READ_HOME 0x2
#define S_msgQLib_INVALID_MSG_COUNT (M_msgQLib | 7)
#define EVENT_CPC_ACK CLASS3_EVENT(234)
#define MEM_BLOCK_ERROR_EDR_WARN_FLAG 0x800
#define __COPYRIGHT(s) __IDSTRING(copyright,s)
#define EILSEQ 82
#define M85XX_LAWAR0(base) (CAST(VUINT32 *)((base) + 0xc10))
#define M85XX_LAWAR1(base) (CAST(VUINT32 *)((base) + 0xc30))
#define M85XX_LAWAR2(base) (CAST(VUINT32 *)((base) + 0xc50))
#define M85XX_LAWAR3(base) (CAST(VUINT32 *)((base) + 0xc70))
#define M85XX_LAWAR4(base) (CAST(VUINT32 *)((base) + 0xc90))
#define SM_OBJ_MAX_MSG_Q 10
#define M85XX_LAWAR7(base) (CAST(VUINT32 *)((base) + 0xcf0))
#define EPIC_IN_INT27_VEC_REG (EPIC_CCSROFF + 0x10560)
#define ESPIPE 29
#define FIOFSTATFSGET64 70
#define _IFLAG_E500_SPEC 0x2000
#define M85XX_L2SRBAR0(x) (CAST(VUINT32 *)((x + 0x20100)))
#define M85XX_L2SRBAR1(x) (CAST(VUINT32 *)((x + 0x20108)))
#define __PTRDIFF_TYPE__ int
#define FIOFSTATGET 64
#define _VX_STATUS_DEFINED 
#define _ARCH_FLT_MIN_10_EXP (-37)
#define EPIC_TM_A2_VEC_REG (EPIC_CCSROFF + 0x011a0)
#define EVENT_SYSCALL_RETURN_OK CLASS3_EVENT(74)
#define SYS_MODEL_8543 "Wind River SBCC8543"
#define SYS_MODEL_8545 "Wind River SBC8545"
#define _VX_ARMARCH7_T 1126
#define SYS_MODEL_8548 "Wind River SBC8548"
#define M_amsLib (154 << 16)
#define CVPUINT32(base,addr) (CAST(VUINT32 *)((base) + (addr)))
#define EVENT_WINDSPAWN CLASS2_EVENT(0)
#define __WCHAR_MAX__ 65535U
#define M_coprocLib (179 << 16)
#define MMU_ATTR_PROT_USR_MSK 0x00000038
#define SLL_INIT(list) { ((SL_LIST *)(list))->head = NULL; ((SL_LIST *)(list))->tail = NULL; }
#define S_symLib_NAME_CLASH (M_symLib | 2)
#define _VX_FRV 170
#define EPIC_IN_INT24_DES_REG (EPIC_CCSROFF + 0x10510)
#define __INCtaskHookLibh 
#define _WCHAR_T 
#define INCLUDE_TIMER_SYS 
#define _PPC_L1CFG_LA_V(x) (x >> 17)
#define SEM_NO_EVENT_SEND 0x100
#define EVENT_MSGCCREATE CLASS3_EVENT(35)
#define WDB_COMM_PIPE 7
#define M_shellLib (173 << 16)
#define EPIC_MSG_INT2_VEC_REG (EPIC_CCSROFF + 0x11640)
#define _WRS_BARRIER(x) __asm volatile (x ::: "memory")
#define PM_RESERVED_MEM (6 * VM_PAGE_SIZE)
#define VOID_FROM_CONST(x) _VX_VOID_FROM_CONST(x)
#define INT_EVENT(id) (MIN_INT_ID + id)
#define EPIC_IRQSR0_EX_INT_MSK 0xfff
#define IPCOM_SHELL_IPCOM 3
#define _LITTLE_ENDIAN 4321
#define _IOFBF 0
#define INCLUDE_ERF 
#define SEMB_EMPTY_STATE 0x10
#define EPIC_I2C_INT_NUM 27
#define __FLT_EVAL_METHOD__ 0
#define S_vxdbgLib_HW_REGS_FULL VXDBG_ERROR_TO_ERRNO(VXDBG_ERR_HW_REGS_FULL)
#define PID0 48
#define PID1 633
#define PID2 634
#define NUM_SIGNAL_QUEUES 16
#define __INCfuncBindPh 
#define SEM_M_INLINE_PRI_RESORT 0x10
#define _IFIELD_XO_1(x) ((0x000007fe & x) >> 1)
#define _IFIELD_XO_2(x) ((0x000003fe & x) >> 1)
#define _IFIELD_XO_3(x) ((0x0000003e & x) >> 1)
#define PCI_ATTR_WS_2G 0x0000001e
#define M_inetLib (43 << 16)
#define S_ioLib_CANCELLED ECANCELED
#define SSIZE_MAX _POSIX_SSIZE_MAX
#define M85XX_PVR(base) (CAST(VUINT32 *)((base) + 0xE00A0))
#define __INCtaskLibh 
#define _DBSR_RET 0x00008000
#define _POSIX_DELAYTIMER_MAX 32
#define SHELL_DEFAULT_CONFIG "LINE_EDIT_MODE=,LINE_LENGTH=256,STRING_FREE=manual,INTERPRETER=,VXE_PATH=.;/romfs"
#define __SNBF 0x0002
#define COMMAND_REGISTER_WIDTH 0x2
#define VM_CTX_MASK_OUT 0x0
#define _VX_MAP_ERRNO_2_POSIX(errno) (((errno) & ERRNO_PX_FLAG)? (errno) &= 0x7fff : (errno) )
#define LINK_MAX _POSIX_LINK_MAX
#define M_msgQDistLib (121 << 16)
#define ROM_SIZE 0x00100000
#define EPIC_IN_INT9_VEC_REG (EPIC_CCSROFF + 0x10320)
#define HCF_RES_STRING 1
#define _PPC_L1CFG_CARCH_MASK 0xC0000000
#define WIND_OBJ_PUBLIC 0x40
#define _IFORM_405_TLB 60
#define FIORENAME 10
#define SYSFLG_VENDOR_0 0x1000
#define _FNOATIME 0x80000
#define USER_D_MMU_ENABLE 
#define WV_OBJ_CLASS_IS_INSTRUMENTED(classId) (classId->handle.attributes & WIND_CLASS_INSTRUMENTED)
#define M_msgQDistGrpLib (120 << 16)
#define LEADING_UNDERSCORE FALSE
#define ARMARCH5_T _VX_ARMARCH5_T
#define PPC505 _VX_PPC505
#define PPC509 _VX_PPC509
#define _FD_FUNC_DEFINED 
#define MII_SR_10T_HALF_DPX 0x0800
#define EVT_NOOBJ_STR_0(evtId,LENGTH,DATA) do { if (ACTION_IS_SET) { EVT_NOOBJ_STR_0_T evt_noobj_str_0; evt_noobj_str_0.data = DATA; evt_noobj_str_0.length = LENGTH; eventPointSwHandle (evtId, &evt_noobj_str_0, sizeof evt_noobj_str_0); } } while ((0))
#define VXDBG_BP_BY_ID_REMOVE(pClient,retVal,brkptId) { VXDBG_BP_DEL_INFO bpInfo; bpInfo.type = BP_BY_ID_DELETE; bpInfo.pClnt = pClient; bpInfo.info.id.bpId = brkptId; VXDBG_BP_DELETE(bpInfo, retVal); }
#define N_TLB_ENTRIES 256
#define TRG_CLASS_5_ON 0x10010000
#define STACK_ROUND_UP(x) ROUND_UP(x, _STACK_ALIGN_SIZE)
#define _VX_PPC860 97
#define SPIN_LOCK_TASK_DECL(x,flag) spinlockTask_t x = { {{0}}, -1, 0, NULL, flag}
#define VXEV10 0x00000200
#define FIOINODETONAME 45
#define FIOCOMMITPERIODGETFS 68
#define EPIC_SEC_INT_VEC (EPIC_SEC_INT_NUM + EPIC_VEC_IN_IRQ0)
#define M85XX_PORPLLSR_PLAT_RATIO(base) ((*M85XX_PORPLLSR(base) & M85XX_PORPLLSR_PLAT_RATIO_MASK)>>1)
#define MIN_CLASS3_ID 10000
#define M_unLib (188 << 16)
#define S_ioLib_NO_DRIVER ENXIO
#define SM_TAS_TYPE SM_TAS_HARD
#define VXB_BUSID_MF 10
#define M_tyLib (31 << 16)
#define SODIMM_FLASH 2
#define IPCOM_USE_TIME 
#define EVENT_SALRUN_WAIT CLASS3_EVENT(101)
#define PENDED 2
#define __FINITE_MATH_ONLY__ 0
#define _PPC_SPEFSCR_FINVS 0x00100000
#define S_objLib_OBJ_ILLEGAL_CLASS_TYPE (M_objLib _WRS_BIT_OR 10)
#define SYSFLG_TFTP 0x80
#define CACHE_PIPE_FLUSH() ((cacheLib.pipeFlushRtn == NULL) ? OK : (cacheLib.pipeFlushRtn) ())
#define S_ioLib_NAME_TOO_LONG ENAMETOOLONG
#define WIND_OBJ_CORE_SIZE 0x40
#define __INCdsmPpch 
#define EPIC_VEC_OPTION_NA 27
#define _PPC_SPEFSCR_OVH 0x40000000
#define M_pmLib (139 << 16)
#define DEFAULT_VM_MAP_ATTR_MASK (MMU_ATTR_VALID_MSK | MMU_ATTR_PROT_MSK | MMU_ATTR_CACHE_MSK | MMU_ATTR_SPL_MSK)
#define VX_COPROC7_TASK 0x40000000
#define TLB_CACHE_MODE VM_STATE_CACHEABLE | VM_STATE_MEM_COHERENCY
#define STACK_VERSION_PATCH 2
#define EBADF 9
#define S29GL_FLASH_WIDTH 2
#define AUX_CLK_RATE_MAX ((CCB_FREQ / 16) / (1 << FIT_DIVIDER_TAP_10))
#define __INCcacheLibh 
#define __INCesfPpch 
#define __STDDEF_H__ 
#define IPCOM_AUTOCONF_H 
#define LSRT_VALUE 0x20
#define IO_ADRS_EI ((char *) 0x000fff00)
#define MII_EXT_STAT_REG 0xf
#define INT_LEVEL(eventNum) ((eventNum)-MIN_INT_ID)
#define _IFORM_XO_2 48
#define _IFORM_XO_3 49
#define ECANCELED 72
#define S_taskLib_NO_TCB (M_taskLib | 111)
#define _ARCH_CHAR_BIT 8
#define DOSFS_CACHE_BACKGROUND_FLUSH_TASK_ENABLE FALSE
#define SPIN_LOCK_NOBODY -1
#define EVENT_SEMRTAKE CLASS3_EVENT(205)
#define _IFORM_I_1 0
#define M85XXRIO_ODQDPAR(base) (CAST(VUINT32 *)(((char*)base) + 0x1100C))
#define _IFORM_EVX_6 96
#define semCount state.count
#define EPIC_WHOAMI_ID(n) ((n) & EPIC_WHOAMI_ID_MSK)
#define BOOT_CMD_STACK_SIZE (11000)
#define REFCNT_NOT_ZERO 1
#define TFFS_FLASH_TLB_SIZE _MMU_TLB_SZ_64M
#define DDR_SDRAM_MD_CNTL 0x120
#define INCLUDE_IO_RTP 
#define PPC85XX _VX_PPC85XX
#define I2C_BYTE_NUM_SHIFT 7
#define _IFORM_EFX_1 87
#define EVENT_WINDSUSPEND CLASS2_EVENT(2)
#define EVENT_MSGCREPLYGET CLASS3_EVENT(37)
#define MII_READ(addr,reg,val1,val2) val2 = ((* (pPhyInfo->phyReadRtn)) ((pPhyInfo->pDrvCtrl), (addr), (reg), (val1)));
#define ETXTBSY 63
#define S_vxdbgLib_ERR_IPI_EMIT VXDBG_ERROR_TO_ERRNO(VXDBG_ERR_IPI_EMIT)
#define DEFAULT_BOOT_LINE "motetsec(0,0)host:vxWorks h=192.102.10.32 e=192.102.10.15 u=vxworks pw=vxworks f=0x0"
#define XBD_BLK_DEV_TASK_PRIORITY 50
#define M_distLib (118 << 16)
#define _EXC_INFO_FPCSR 0x040
#define _WRS_CONFIG_FAST_MATH 1
#define _WRS_SNOOP_NEEDS_DMA_MALLOC_SUPPORT 
#define _IFLAG_RC 0x0002
#define PCI_XINT4_LVL 0x5
#define _MMU_UW 0x00000800
#define MMU_STATE_VALID 0x80000000
#define _VX_PPC 90
#define FIOFLUSH 2
#define FIOSYNC 21
#define _DBSR_DAC1R 0x00080000
#define EPIC_VEC_GT_A_IRQ0 (EPIC_VEC_IN_IRQ0 + EPIC_MAX_IN_IRQS)
#define NV_MAC_ADRS_OFFSET 0x200
#define _DBSR_DAC1W 0x00040000
#define __INCb_pthread_attr_th 
#define _WRS_CONFIG_DETERMINISTIC 1
#define __INCvxLibh 
#define EPIC_RES44_INT_NUM 44
#define htobe16(x) ((UINT16)(x))
#define _PPC_HID0_DOZE_U 0x0080
#define __restrict 
#define EVENT_SYSCALL_RETURN_ERR CLASS3_EVENT(75)
#define MMU_STATE_SUP_RX_USR_R (MMU_STATE_SUP_RX | _MMU_UR)
#define MMU_STATE_SUP_RX_USR_W (MMU_STATE_SUP_RX | _MMU_UW)
#define MMU_STATE_SUP_RX_USR_X (MMU_STATE_SUP_RX | _MMU_UX)
#define ETOOMANYREFS 59
#define _PPC_SPEFSCR_FINVH 0x08000000
#define __SHRT_MAX__ 32767
#define WDB_MODE WDB_MODE_DUAL
#define EPIC_IN_INT7_DES_REG (EPIC_CCSROFF + 0x102f0)
#define CCSBAR 0xE0000000
#define __LDBL_MAX__ 1.7976931348623157e+308L
#define MAX_MAC_ADRS 4
#define EPIC_TM_A1_VEC_REG (EPIC_CCSROFF + 0x01160)
#define M_ipRouteLib (141 << 16)
#define Q_ATTRIBUTE_SET(qHead,value) (((Q_HEAD *)(qHead))->qPriv2 = (UINT)(value))
#define OBJ_RECLAIM_DISABLE(objId) ( ((OBJ_CORE *)(objId))->handle.attributes |= WIND_OBJ_NO_RECLAIM )
#define CACHE_LIBRARY_MODE (CACHE_COPYBACK | CACHE_SNOOP_ENABLE)
#define S_vxdbgLib_TIMEOUT VXDBG_ERROR_TO_ERRNO(VXDBG_ERR_TIMEOUT)
#define TBL_R 268
#define M_loadElfLib (97 << 16)
#define _VX_ARMSA110 124
#define TBL_W 284
#define M85XXRIO_RIWAR_LOCAL_W_LOCK_L2 7
#define _PARM_UTS_SYSNAME_MAX 64
#define SIMLINUX _VX_SIMLINUX
#define INCLUDE_WDB_REG 
#define htobe32(x) ((UINT32)(x))
#define M_grmLib (167 << 16)
#define EPIC_TSEC2RX_INT_VEC (EPIC_TSEC2RX_INT_NUM + EPIC_VEC_IN_IRQ0)
#define EPIC_IN_DFT_POLAR EPIC_INT_ACT_HIGH
#define EVENT_SYSCALL_ENTER EVENT_SYSCALL_BASE
#define INST_BC_RL_MASK 0xfc00fbff
#define M85XX_L2ERRATTR(x) (CAST(VUINT32 *)((x + 0x20E4C)))
#define SPARC _VX_SPARC
#define MII_MASSLA_STAT_CONF_FAULT 0x8000
#define VM_STATE_BUFFERABLE_NOT 0x00
#define _ARCH_DBL_MAX_EXP 1024
#define PCI_OUTBOUND_TRANS_ADRS_REG1(base) CVPUINT32(base, 0x8c20)
#define _WRS_CONFIG_COMPONENT_MIPC 1
#define _PARM_FOPEN_MAX 20
#define RIO_NOT_INITIALIZED 1
#define VM_PAGE_SIZE 4096
#define _EXC_INFO_MSR 0x004
#define EPIC_EIDR_CRIT1_INT EPIC_BIT(29)
#define USER_D_CACHE_MODE (CACHE_LIBRARY_MODE)
#define USER_I_CACHE_MODE (CACHE_LIBRARY_MODE)
#define S_miiLib_PHY_LINK_DOWN (M_miiLib | 1)
#define _IFLAG_440_SPEC 0x0800
#define __SNPT 0x0800
#define _PPC_TSR_FIS_U 0x0400
#define MMU_ATTR_USR_DATA_RO (MMU_ATTR_USR_RO | MMU_ATTR_SUP_DATA_RO)
#define ETHERNET_MAC_HANDLER 
#define MII_CR_FDX 0x0100
#define __INCb_size_th 
#define L2SIZ_512KB 2
#define INCLUDE_MUX2 
#define LAWBAR_ADRS_SHIFT 12
#define EPIC_SMSG_INT4_VEC_REG (EPIC_CCSROFF + 0x11c80)
#define MII_TECH_PAUSE_MASK 0x0c00
#define htobe64(x) ((UINT64)(x))
#define _ARCH_va_arg(list,type) ((type *)(list += sizeof(type)))[-1]
#define EINPROGRESS 68
#define EPIC_RES25_INT_NUM 25
#define _ARCH_FLT_MAX_EXP 128
#define _PC_ASYNC_IO 3
#define EPIC_IN_INT37_VEC_REG (EPIC_CCSROFF + 0x106a0)
#define INCLUDE_WDB_EXIT_NOTIFY 
#define EPIC_GTVPR_PRIORITY_MSK (EPIC_BIT(19) | EPIC_BIT(18) | EPIC_BIT(17) | EPIC_BIT(16))
#define _POSIX_PRIO_IO 0
#define IPCOM_USE_TCP 
#define _PPC_MSR_DE 0x0200
#define _WRS_CONFIG_SV_INSTRUMENTATION 1
#define putchar(c) (__sputc(c, (stdout)))
#define BSD_4_2 3
#define _VX_PENTIUM 83
#define COMMAND_REGISTER_OFFSET 0x4
#define _WRS_CONFIG_FEATURE_USR 1
#define M_aioPxLib (92 << 16)
#define VX_NO_STACK_FILL 0x0100
#define EPIC_TSEC1ERR_INT_VEC (EPIC_TSEC1ERR_INT_NUM + EPIC_VEC_IN_IRQ0)
#define _PPC_PID_REG PID0
#define EVENT_WINDDELAY CLASS2_EVENT(9)
#define WIND_OBJ_ORPHANED 0x10
#define _VX_TOOL TOOL
#define EPIC_RES31_INT_VEC (EPIC_RES31_INT_NUM + EPIC_VEC_IN_IRQ0)
#define S_vmLib_PHYS_PAGES_ALREADY_MAPPED (M_vmLib | 8)
#define AIM_MMU_INIT_PT_INCR 0x20
#define MEDR_BLOCK_GUARD_ENABLE FALSE
#define INT_CPU_MICRO_LOCK() intCpuMicroLock()
#define EVENT_SALRUN_TERMINATE CLASS3_EVENT(107)
#define RIO_FEATURES_EXTADDR_34_66 0xa000
#define _WRS_ARCH_SUPPORTS_MEM_BARRIER 
#define M_rawFsLib (70 << 16)
#define __INClstLibh 
#define MPC85XX_I2C_DATA_REG_MASK 0xFF
#define _POSIX_AIO_MAX 1
#define I960CA _VX_I960CA
#define _VX_I80X86 80
#define _ARCH_SCHAR_MAX 127
#define EPIC_IN_INT37_DES_REG (EPIC_CCSROFF + 0x106b0)
#define _PPC_SPEFSCR_FDBZ 0x00000400
#define DDR_SDRAM_MODE_CFG 0x118
#define INCLUDE_PLB_BUS 
#define FD_SETSIZE _VX_FD_SETSIZE
#define __LDBL_MAX_EXP__ 1024
#define WDB_DPRINTF_MAX_MSGS 100
#define KERNEL_LOCK_TAKE() (kernelLockTake())
#define __printflike(fmtarg,firstvararg) __attribute__((__format__ (__printf__, fmtarg, firstvararg)))
#define M_smUtilLib (77 << 16)
#define EVENT_OBJ_TASK CLASS2_EVENT(19)
#define MII_ANAR_NEXT_PAGE 0x8000
#define _ARCH_FLT_DIG 7
#define _ARCH_MB_LEN_MAX 1
#define VM_CONTEXT_UNION_INIT(context,startAddr,len) ((vmLibInfo.pVmCtxUnionInitRtn == NULL) ? (ERROR) : ((*vmLibInfo.pVmCtxUnionInitRtn) (context, startAddr, len)))
#define _WRS_IOLONG ULONG
#define RIO_FEATURES_PROCESSOR 0x0004
#define M_pgPoolPhysLib (182 << 16)
#define ENOTBLK 66
#define M_cacheLib (69 << 16)
#define _PPC_ESF_FPCSR (_PPC_ESF_DSISR + SIZ_UINT32)
#define MMU_STATE_SUP_RW_USR_RW (MMU_STATE_SUP_RW | _MMU_UR | _MMU_UW)
#define MMU_STATE_SUP_RW_USR_RX (MMU_STATE_SUP_RW | _MMU_UR | _MMU_UX)
#define MII_MASSLA_STAT_REMOTE_RCV 0x1000
#define MAX_ARGS 10
#define EPROTOTYPE 41
#define M_graLib (172 << 16)
#define bswap32(x) LONGSWAP((UINT32)(x))
#define Q_EACH(pQHead,routine,routineArg) ((Q_NODE *)((*(((Q_HEAD *)(pQHead))->pQClass->eachRtn)) (((Q_HEAD *)(pQHead)),((FUNCPTR)(routine)),((int)(routineArg)))))
#define EPIC_EX_VEC_REG_INTERVAL 0x20
#define EPIC_IN_INT18_VEC_REG (EPIC_CCSROFF + 0x10440)
#define TRG_USER_INDEX 3
#define EVENT_WINDTICKTIMEOUT CLASS2_EVENT(31)
#define VXBAF_BYTE_ORDER_LE_16 0x00040000
#define EPIC_EX_INT9_VEC_REG (EPIC_CCSROFF + 0x10120)
#define _WRS_BIT_OR |
#define SYSFLG_DEBUG 0x02
#define LAWAR_SIZE_32KB 0x0000000E
#define M85XX_PORPLLSR(base) (CAST(VUINT32 *)((base) + 0xE0000))
#define VXEV26 0x02000000
#define MII_ID2_MODE_MASK 0x03f0
#define _PPC_MSR_IS 0x0020
#define EPIC_PERFMON_3_MSK_REG1 (EPIC_CCSROFF + 0x013c0)
#define EPIC_MAX_GT_B_IRQS 4
#define _POSIX_AIO_LISTIO_MAX 2
#define VXB_DRIVER_METHOD(NAME) ((UINT32)&NAME ##_desc[0])
#define M_tplLib (170 << 16)
#define SPINLOCK_OPERATION_ABORTED -1
#define EPIC_REG_READ(offset) *(volatile UINT32 *)((UINT32)pEpicRegBase + (offset & REG_ADRS_MASK))
#define EALREADY 69
#define _PPC_SPEFSCR_FINVE 0x00000020
#define LAWAR_SIZE_32MB 0x00000018
#define PCI2_OUTBOUND_TRANS_ADRS_REG1(base) CVPUINT32(base, 0x9c20)
#define bswap64(x) 
#define SLL_PREVIOUS(list,node,previousNode) { SL_NODE *temp; (SL_NODE *)(previousNode) = NULL; temp = ((SL_LIST *)(list))->head; if (temp != NULL) && (temp != (node)) while (temp->next != NULL) { if (temp->next == (node)) { (SL_NODE *)(previousNode) = temp; break; } temp = temp->next; } }
#define __INCtoolMacrosPh 
#define _POSIX_SYNCHRONIZED_IO 0
#define I960HX _VX_I960HX
#define EPIC_IN_INT18_DES_REG (EPIC_CCSROFF + 0x10450)
#define INCLUDE_MMU_OPTIMIZE 
#define M_salLib (189 << 16)
#define INCLUDE_VXBUS_SHOW 
#define MPC85XX_I2C_STATUS_REG_SRW 0x04
#define M85XXRIO_IMR(base) (CAST(VUINT32 *)(((char*)base) + 0x11060))
#define CACHE_DRV_FLUSH(pFuncs,adrs,bytes) (((pFuncs)->flushRtn == NULL) ? OK : ((pFuncs)->flushRtn) (DATA_CACHE, (adrs), (bytes)))
#define MIPS32 _VX_MIPS32
#define EPIC_TM_A1_DES_REG (EPIC_CCSROFF + 0x01170)
#define FLASH1_BASE_ADRS 0xf8000000
#define EPIC_IN_INT32_DES_REG (EPIC_CCSROFF + 0x10610)
#define MMU_ATTR_CACHE_MSK 0x00000f80
#define MIN_RESERVE_ID 20000
#define _PPC_SPEFSCR_FINXE 0x00000040
#define MMU_STATE_CACHEABLE_COPYBACK 0x00000000
#define MMU_STATE_SUP_RW_USR_WX (MMU_STATE_SUP_RW | _MMU_UW | _MMU_UX)
#define _WRS_ARCH_HAS_CPU_PWR_MGMT 
#define _PPC_SPEFSCR_FINXS 0x00200000
#define O_APPEND _FAPPEND
#define _WRS_CONFIG_FULL_EDR_STUBS 1
#define _MMU_TLB_TS_1 0x00001000
#define I960JX _VX_I960JX
#define VXB_VER_MINOR(x) (((x)>>8)&0x0ff)
#define MII_CRC_LEN 0x4
#define _IFORM_B_1 1
#define _ARCH_SCHAR_MIN (-127-1)
#define I960KA _VX_I960KA
#define I960KB _VX_I960KB
#define _ARCH_HUGH_VAL _ARCH_DBL_MAX
#define _POSIX_LINK_MAX 8
#define INTERRUPT_STACK_UNDERFLOW_SIZE 4096
#define WV_CLASS_1 0x00000001
#define WV_CLASS_2 0x00000003
#define _PPC_L1CFG_SIZE_MASK 0x00000FFF
#define DEC_CLOCK_FREQ OSCILLATOR_FREQ
#define WV_ON 0x10000000
#define WV_EVT_INT_ENT(intNum) EVT_CTX_1(EVENT_INT_ENTER, intNum);
#define STREAM_MAX FOPEN_MAX
#define VXDBG_ALL_TASKS 0
#define PCI_XINT3_LVL 0x4
#define PCI_ATTR_WS_256K 0x00000011
#define EVENT_PAUSE CLASS3_EVENT(26)
#define MIPS64 _VX_MIPS64
#define MMU_ATTR_USR_RWX (MMU_ATTR_USR_RW | MMU_ATTR_PROT_USR_EXE)
#define SEM_RW_OPTIONS_MASK (SEM_MUT_OPTIONS_MASK)
#define M_eventLib (134 << 16)
#define _DBCR2_DAC2ER 0x03000000
#define __sclearerr(p) ((void)((HANDLE_VERIFY(p, handleTypeFile) != OK) ? (0) : (((p)->_flags &= ~(__SERR|__SEOF)))))
#define OBJ_SET_DEALLOC_MEM(objId) ( ((OBJ_CORE *)(objId))->handle.attributes |= WIND_OBJ_DEALLOC_MEM )
#define FIOUNLINK 59
#define QUEUE_INTERRUPTIBLE 1
#define MII_PHY_DEF_ADDR 0x0
#define G100 _VX_G100
#define _IFIELD_LI(x) ((0x02000000 & x) ? ((0xf6000000 | x) & ~3) : ((0x03fffffc & x) & ~3))
#define M85XX_LBCDLLSR(base) (CAST(VUINT32 *)((base) + 0xE0E20))
#define PADDING_SHIFT_COUNT (29)
#define DEVMETHOD_DEF(METHOD,STRING) char METHOD ##_desc[]=STRING;
#define MAP1000 _VX_MAP1000
#define _POSIX_CHILD_MAX 6
#define _WRS_CONFIG_WLAN_ATH 1
#define __INCintLibh 
#define VM_STATE_MASK_GUARDED MMU_ATTR_CACHE_MSK
#define EVT_STORE_UINT16(pBuf,event_id) *pBuf++ = (event_id)
#define BOOT_COLD BOOT_CLEAR
#define VXB_HANDLE_IO 8
#define IVOR10 410
#define IVOR11 411
#define IVOR13 413
#define IVOR15 415
#define _WRS_CONFIG_EDR_POLICY_HOOKS_D 1
#define CDROM_COM_BUF_SIZE 3
#define _DEFINED_cpuset_t 
#define TASK_USER_EXEC_STACK_UNDERFLOW_SIZE 4096
#define VXDBG_CTX_STOP(pClnt,pCtx) _func_vxdbgFuncs[VXDBG_STOP] (pClnt, pCtx)
#define IPCOM_STDIO_BUFSIZE 3000
#define SIO_ERROR_FRAMING 0
#define ENODATA 78
#define _MMU_TLB_SZ_64K 0x00000300
#define _ARCH_ALIGN_MEMORY 4
#define INCLUDE_MUXTK_OVER_END 
#define IPCOM_USE_AUTH 
#define __INCtaskLibCommonh 
#define MMU_ATTR_NO_BLOCK (MMU_ATTR_SPL_7)
#define EPIC_EIDR_CRIT0_INT EPIC_BIT(30)
#define SYM_IS_LOCAL(symType) ((symType) & SYM_LOCAL)
#define __INCbootLibh 
#define __END_DECLS 
#define STACK_RESIDENT RAM_DST_ADRS
#define EVENTS_OPTIONS_NONE 0x00
#define EVT_STORE_UINT32(pBuf,value) do { *((short *) pBuf) = (value) >> 16; *(((short *) pBuf) + 1) = (value); pBuf++; } while ((0))
#define M85XXRIO_IPWQBAR(base) (CAST(VUINT32 *)(((char*)base) + 0x134EC ))
#define INST_LWZ_SP 0x80010000
#define M85XXRIO_BDIDCSR_OFFSET 0x60
#define IVOR32 528
#define IVOR33 529
#define IVOR34 530
#define IVOR35 531
#define M85XXRIO_OSR(base) (CAST(VUINT32 *)(((char*)base) + 0x11004))
#define EPIC_IIDR_P0_INT EPIC_BIT(0)
#define EPIC_IN_INT10_VEC_REG (EPIC_CCSROFF + 0x10340)
#define __STDC_HOSTED__ 1
#define EVENT_WINDPENDQTERMINATE CLASS2_EVENT(17)
#define FIODATASYNC 57
#define VM_CONTEXT_DELETE(context) ((vmLibInfo.pVmCtxDeleteRtn == NULL) ? (ERROR) : ((*vmLibInfo.pVmCtxDeleteRtn) (context)))
#define CACHE_DRV_IS_WRITE_COHERENT(pFuncs) ((pFuncs)->flushRtn == NULL)
#define EPIC_MER_EN(n) (EPIC_BIT(n) & EPIC_MER_EN_MSK)
#define _IFORM_X_1 11
#define _IFORM_X_2 12
#define _IFORM_X_4 14
#define _IFORM_X_5 15
#define _IFORM_X_6 16
#define _IFORM_X_7 17
#define _IFORM_X_8 18
#define _IFORM_X_9 19
#define NO_L2_EXT_WRITE_REGIONS 4
#define VXDBG_ERROR_TO_ERRNO(error) (M_vxdbgLib | error)
#define SIMSPARCSUNOS _VX_SIMSPARCSUNOS
#define atomic32And_inline atomic32And
#define _EXC_PROG_SRR1_ILL 0x00080000
#define M_loadLib (14 << 16)
#define CACHE_TEXT_UPDATE(adrs,bytes) ((cacheLib.textUpdateRtn == NULL) ? OK : (cacheLib.textUpdateRtn) ((adrs), (bytes)))
#define _POSIX_DATAKEYS_MAX 16
#define __INCvxArchh 
#define M85XX_L2CEWAREAn(x,n) (CAST(VUINT32 *)((x + 0x20014) + (n * 0x10)))
#define M85XX_BR0(base) (CAST(VUINT32 *)((base) + 0x5000))
#define M85XX_BR1(base) (CAST(VUINT32 *)((base) + 0x5008))
#define M85XX_BR2(base) (CAST(VUINT32 *)((base) + 0x5010))
#define M85XX_BR3(base) (CAST(VUINT32 *)((base) + 0x5018))
#define M85XX_BR4(base) (CAST(VUINT32 *)((base) + 0x5020))
#define M85XX_BR5(base) (CAST(VUINT32 *)((base) + 0x5028))
#define M85XX_BR6(base) (CAST(VUINT32 *)((base) + 0x5030))
#define M85XX_BR7(base) (CAST(VUINT32 *)((base) + 0x5038))
#define _PARM_RAND_MAX 32767
#define EPIC_IPI_3_VEC_REG (EPIC_CCSROFF + 0x010d0)
#define EPIC_MSG_VEC_REG_INTERVAL 0x20
#define IPCOM_SYSLOG_IPCOM_PRIORITY IPCOM_SYSLOG_PRIO_DEFAULT
#define SH7700 _VX_SH7700
#define EPIC_IN_INT10_DES_REG (EPIC_CCSROFF + 0x10350)
#define _WRS_VXWORKS_MAINT 0
#define RIO_WPCSR_FAILED 0x10000000
#define __DBL_DIG__ 15
#define PCI_ATTR_WS_4M 0x00000015
#define VXB_HANDLE_OP(x) ((x) & 0xF0)
#define INCLUDE_VXBUS_INIT 
#define _IFORM_D_8 10
#define EINTR 4
#define SM_MAX_PKTS 200
#define S_objLib_OBJ_NAME_TRUNCATED (M_objLib _WRS_BIT_OR 7)
#define EPIC_EX_INT5_VEC_REG (EPIC_CCSROFF + 0x100a0)
#define PATH_MAX _PARM_PATH_MAX
#define _PPC_ESF_XER (_PPC_ESF_CR + 4)
#define INST_STW_SP_MASK 0xfc1f0000
#define EPIC_EIDR_EX_PIN EPIC_BIT(31)
#define _IFLAG_MAC (_IFLAG_405_SPEC | _IFLAG_440_SPEC)
#define _WRS_CONFIG_OBJECT_OWNERSHIP 1
#define _PPC_L1CSR_FLR 0x00000100
#define SH7729 _VX_SH7729
#define VXB_VER_MAJOR(x) ((x)>>16)
#define _DYNAMIC_BUS_SIZING FALSE
#define M85XX_L2CEWARn(x,n) (CAST(VUINT32 *)((x + 0x20010) + (n * 0x10)))
#define EXC_MSG_ADRS ((char *) (LOCAL_MEM_LOCAL_ADRS+EXC_MSG_OFFSET))
#define EVT_CTX_IDLE(evtId) EVT_CTX_0(evtId)
#define INCLUDE_CTORS_DTORS 
#define VXEV30 0x20000000
#define _PPC_TSR_DIS (_PPC_TSR_DIS_U << 16)
#define M_resolvLib (107 << 16)
#define TMP_MAX _PARM_TMP_MAX
#define __scanflike(fmtarg,firstvararg) __attribute__((__format__ (__scanf__, fmtarg, firstvararg)))
#define MMU_STATE_ENDIAN_BIG 0x00000000
#define EPIC_IRQ_SUMM_REG0 (EPIC_CCSROFF + 0x01310)
#define atomic32Inc_inline atomic32Inc
#define CPU_PWR_HIGH_THRESHOLD (100)
#define WV_CLASS_TASKNAMES_PRESERVE_ON 0x10001000
#define EPIC_IRQ_SUMM_REG1 (EPIC_CCSROFF + 0x01320)
#define EPIC_EX_INTERRUPT 21
#define _CALL_SYSV 1
#define ENOTCONN 57
#define IPCOM_STACK_ADJUST(x) ((x * 3) / 2)
#define EPIC_OPT_EXPIN_ON (0x80000000 >> 16)
#define SIO_KYBD_MODE_GET 0x1012
#define VME_AM_EXT_USR_ASCENDING 0x0b
#define _WRS_CONFIG_LOADER 1
#define _VX_MC68000 1
#define __LDBL_MIN__ 2.2250738585072014e-308L
#define M85XX_PORPLLSR_E500_RATIO_MASK 0x003f0000
#define EPIC_EOI1_REG (EPIC_CCSROFF + 0x210b0)
#define OBJ_IS_RECLAIM_DISABLE(objId) ( (((OBJ_CORE *)(objId))->handle.attributes & WIND_OBJ_NO_RECLAIM) != 0 )
#define EPIC_MAX_IN_IRQS 48
#define EPIC_EX_INT5_DES_REG (EPIC_CCSROFF + 0x100b0)
#define SPIN_LOCK_TASK_TAKE(x) (spinLockTaskTake (x) )
#define EVENT_SALRUN_SOCKIGNORE CLASS3_EVENT(104)
#define M_semLib (22 << 16)
#define OM_DELETE_ON_LAST_CLOSE 0x40000000
#define SH7750 _VX_SH7750
#define EVENT_SALDELETE CLASS3_EVENT(100)
#define M85XX_LTEATR(base) (CAST(VUINT32 *)((base) + 0x50BC))
#define IPCOM_USE_SYSVAR_EXT 
#define IPCOM_VR_MAX 8
#define _VX_MC68010 2
#define BOOT_FILE_LEN 160
#define _ESOP(opcd,xo) ((opcd << 26) + (xo << 3))
#define IPCOM_SOCK_IPNET 2
#define EPIC_RES44_INT_VEC (EPIC_RES44_INT_NUM + EPIC_VEC_IN_IRQ0)
#define M_usbHostLib (131 << 16)
#define _WRS_INITTEXT __attribute__ ((__section__ (".text.init")))
#define _PPC_MSR_MCE _PPC_MSR_ME
#define VXB_BUSID_RAPIDIO 7
#define INCLUDE_ETSEC_VXB_END 
#define EPIC_MSG_DEST_REG_VECREGOFF 0x10
#define M85XX_LCRR(base) (CAST(VUINT32 *)((base) + 0x50D4))
#define _VX_MC68020 3
#define FTRUNC _FTRUNC
#define __INCvmeh 
#define M_cmsLib (161 << 16)
#define _WCHAR_T_ 
#define S_vxdbgLib_INVALID_MEM_ACCESS VXDBG_ERROR_TO_ERRNO(VXDBG_ERR_INVALID_MEM_ACCESS)
#define EPIC_VEC_CTRL_EXT (EPIC_MAX_ALL_IRQS)
#define vxbintrCtlr_H 
#define _PPC_EXC_VEC_BASE_HIGH 0xfff00000
#define MSG_Q_FIFO 0x00
#define _DBCR0_IDM 0x40000000
#define _VX_FD_SETSIZE 2048
#define _VX_MC68030 4
#define _STDDEF_H 
#define INCLUDE_SEM_BINARY_CREATE 
#define FLASH_ADRS FLASH1_BASE_ADRS
#define VX_PRIVATE_ENV 0x0080
#define _FTRUNC 0x0400
#define PCIEX_XINT4_LVL 0x3
#define TASK_CPU_UNLOCK() ( taskCpuUnlock () )
#define BUS_TYPE_PCI 3
#define MMU_ATTR_PROT_USR_TO_SUP(attr) (((attr) & MMU_ATTR_PROT_USR_MSK) >> 3)
#define S_excLib_INTERRUPT_STACK_OVERFLOW (M_excLib | 2)
#define _VX_MC68040 5
#define M85XX_L2CTL_L2SIZ_MSK 0x30000000
#define EVENT_MSGQRECEIVE CLASS3_EVENT(22)
#define _IONBF 2
#define M85XXRIO_ROWAR_WRTYPE_NWRITE_R 0x5
#define MAX_AIO_SYS_TASKS 0
#define __INCb_ssize_th 
#define CPU PPC32
#define VXB_ACCESS_INT_DISCONN 0x0000000d
#define MII_SR_T4 0x8000
#define INCLUDE_MUX2_OVER_END 
#define EVENT_WINDTICKANNOUNCETMRWD CLASS2_EVENT(8)
#define VXB_REG_INTERVAL "regInterval"
#define PCI_XINT2_LVL 0x3
#define STACK_VERSION_PATCH_MINOR 0
#define EPIC_SR_OUT_MU1_INT_VEC (EPIC_SR_OUT_MU1_INT_NUM + EPIC_VEC_IN_IRQ0)
#define EPIC_SR_IN_MU1_INT_VEC (EPIC_SR_IN_MU1_INT_NUM + EPIC_VEC_IN_IRQ0)
#define EPIC_TM_A2_DES_REG (EPIC_CCSROFF + 0x011b0)
#define _VX_MC68060 7
#define _DBCR1_IAC1US 0xc0000000
#define EVENT_OBJ_MSGCDELETE CLASS2_EVENT(37)
#define M85XX_L2ERRDET(x) (CAST(VUINT32 *)((x + 0x20E40)))
#define CPU_PWR_LOW_THRESHOLD (0)
#define INCLUDE_FS_EVENT_UTIL 
#define OPT_ABORT 0x20
#define _IFIELD_ME(x) ((0x0000003e & x) >> 1)
#define _ARCH_UINT_MAX 4294967295u
#define M85XXRIO_CR(base) (CAST(VUINT32 *)(((char*)base) + 0x10000 ))
#define WDB_BP_MAX 25
#define EPIC_RES25_INT_VEC (EPIC_RES25_INT_NUM + EPIC_VEC_IN_IRQ0)
#define _DEFINED_gid_t 
#define VX_UNBREAKABLE 0x0002
#define _FMARK 0x0010
#define EVENT_WIND_EXIT_IDLE CLASS1_EVENT(6)
#define INCLUDE_EXC_TASK 
#define _IFIELD_CRFS(x) ((0x001c0000 & x) >> 18)
#define CORE_DUMP_MEM_POOL_PAGE_SIZE 0x8000
#define MIPSI2 _VX_MIPSI2
#define MIPSI3 _VX_MIPSI3
#define __INCsemLibPh 
#define O_WRONLY 1
#define WDB_COMM_END 6
#define CS5 0x0
#define CS6 0x4
#define CS8 0xc
#define _ARCH_FLT_MAX_10_EXP 38
#define _IFIELD_VUIMM(x) ((0x001f0000 & x)>> 16)
#define O_EXCL _FEXCL
#define INCLUDE_MUX 
#define _ARCH_DBL_MANT_DIG 53
#define vxCas_inline vxCas
#define _PPC_ESF_STK_SIZE ((_PPC_ESF_SIZE + _STACK_ALIGN_SIZE - 1) & ~(_STACK_ALIGN_SIZE - 1))
#define ENOTSOCK 50
#define EVENT_TASKRESUME CLASS3_EVENT(5)
#define WDB_TTY_BAUD 9600
#define SYSFLG_AUTOCONFIG 0x40
#define S_ioLib_DEVICE_TIMEOUT EIO
#define _MMU_SW 0x00000400
#define _MMU_SX 0x00001000
#define CS0_BNDS 0x000
#define INCLUDE_FLASH 
#define _WRS_CONFIG_FEATURE_IP_GPP_BUILD 1
#define TRG_CLASS_3_ON 0x10000100
#define SIO_CALLBACK_ERROR 3
#define NO_WAIT 0
#define __vsbConfig_INCLUDED 
#define MII_ANAR_PAUSE_MASK 0x0c00
#define EPIC_EX_INT11_VEC_REG (EPIC_CCSROFF + 0x10160)
#define EPIC_REG_NO_OFFSET_READ(regAdrs) *(volatile UINT32 *)(regAdrs)
#define ENOSR 74
#define VXB_DRIVER_METHOD_DECL(NAME) IMPORT char NAME ##_desc[];
#define _PPC_TSR_DIS_U 0x0800
#define _VX_ARM7TDMI 122
#define FIOWFLUSH 27
#define VXB_ACCESS_CFG_READ 0x00000012
#define EPIC_IN_INT42_VEC_REG (EPIC_CCSROFF + 0x10740)
#define M_igmpRouterLib (128 << 16)
#define SIZ_UINT16 2
#define _MMU_UR 0x00000200
#define _MMU_UX 0x00002000
#define MMU_REGION_INDEX_BITS 10
#define EPIC_TSEC4ERR_INT_NUM 23
#define S_eventLib_TASK_NOT_REGISTERED (M_eventLib | 0x0006)
#define NUM_TTY 1
#define _MMU_TLB_PERM_W 0x00000040
#define _MMU_TLB_PERM_X 0x00000020
#define IPCOM_PROC_STACK_DEFAULT IPCOM_STACK_ADJUST(4096)
#define MAX_ISR_JOBS 16
#define HRFS_DEFAULT_MAX_BUFFERS 16
#define EVENT_TASK_STATECHANGE CLASS1_EVENT(11)
#define M85XX_L2CTL_L2IO_BIT 21
#define EPIC_DUART2_INT_NUM 12
#define MMU_ATTACH_INIT (*(mmuLibFuncs.mmuTransTblUnionInit))
#define LBC_CS3_LOCAL_ADRS 0xf0100000
#define _VX_I80486 82
#define SIZ_UINT32 4
#define LSW(x) ((x) & 0xffff)
#define CACHE_DMA_PHYS_TO_VIRT(adrs) CACHE_DRV_PHYS_TO_VIRT (&cacheDmaFuncs, (adrs))
#define _T_PTRDIFF 
#define ARCH_HDR(dir,file) TOOL_HDR_STRINGIFY(arch/dir/file)
#define __INCvxbAccessh 
#define M_snmpdLib (104 << 16)
#define _PPC_SPEFSCR_FG 0x00002000
#define MMU_PAGE_SIZE 0x1000
#define OM_CREATE 0x10000000
#define EPIC_IPIVPR_VECTOR_MSK (0xffff)
#define _PPC_HID0_NAP_U 0x0040
#define CORE_DUMP_SKIP_USER_RESERVED_MEM FALSE
#define _PPC_SPEFSCR_FX 0x00001000
#define EVT_STR_N(evtId,NPARAMS,ARG1,ARG2,ARG3,ARG4,ARG5,ARG6,LENGTH,DATA) do { if (ACTION_IS_SET) { EVT_STR_N_T evt_str_n; evt_str_n.args [0] = ARG1; evt_str_n.args [1] = ARG2; evt_str_n.args [2] = ARG3; evt_str_n.args [3] = ARG4; evt_str_n.args [4] = ARG5; evt_str_n.args [5] = ARG6; evt_str_n.nParams = NPARAMS; evt_str_n.data = DATA; evt_str_n.length = LENGTH; eventPointSwHandle (evtId, &evt_str_n, sizeof evt_str_n); } } while ((0))
#define VX_STDIO 0x0010
#define EPIC_IN_INT4_VEC_REG (EPIC_CCSROFF + 0x10280)
#define EVENT_SIGSUSPEND CLASS3_EVENT(25)
#define INC_VXBPLBLIB_H 
#define _VX_ATOMIC_INIT(i) {(i)}
#define INCLUDE_END_ETHER_HDR 
#define L_ctermid _PARM_L_ctermid
#define FSTAT_BLK 0060000
#define EPIC_SMSG_INT5_VEC_REG (EPIC_CCSROFF + 0x11ca0)
#define _IFORM_X_10 20
#define OBJ_ENTRY_INDEX_GET(objHdl) ((objHdl) & OBJ_HANDLE_ENTRY_MASK)
#define _IFORM_X_12 22
#define _IFORM_X_14 24
#define _IFORM_X_16 26
#define _IFORM_X_17 27
#define _IFORM_X_18 28
#define _IFORM_X_19 29
#define atomic32Sub_inline atomic32Sub
#define MII_CR_100 0x2000
#define _WRS_KERNEL_LOCK_OFFSET_svc_ctr (0x04 + _WRS_KERNEL_LOCK_ALIGN_tkt_ctr)
#define IP_PORT_VXWORKS 68
#define SM_CPU_ATTACHED 1
#define FD_SET(n,p) _VX_FD_SET (n, p)
#define __FLT_HAS_DENORM__ 1
#define vxAtomicGet_inline(target) ((atomicVal_t)(*(volatile atomic_t *)(target)))
#define PCI_OUTBOUND_ATTR_REG0(base) CVPUINT32(base, 0x8c10)
#define PCI_OUTBOUND_ATTR_REG1(base) CVPUINT32(base, 0x8c30)
#define PCI_OUTBOUND_ATTR_REG2(base) CVPUINT32(base, 0x8c50)
#define PCI_OUTBOUND_ATTR_REG4(base) CVPUINT32(base, 0x8c90)
#define _IFORM_X_20 30
#define _IFORM_X_21 31
#define _IFORM_X_22 32
#define _IFORM_X_23 33
#define _IFORM_X_24 34
#define _IFORM_X_25 35
#define _IFORM_X_26 36
#define _IFORM_X_27 37
#define _IFORM_X_28 70
#define _IFORM_X_29 71
#define SH7000 _VX_SH7000
#define IPCOM_SHELL_MINI 2
#define EPIC_IN_INT23_VEC_REG (EPIC_CCSROFF + 0x104e0)
#define IPCOM_SHELL_NONE 1
#define _IFORM_X_30 72
#define _IFORM_X_31 73
#define _IFORM_X_32 74
#define _IFORM_X_33 75
#define _IFORM_X_34 79
#define _IFORM_X_36 81
#define _IFORM_X_37 82
#define _IFORM_X_38 83
#define EPIC_OPT_POLAR_EDG_POS 0x00800000
#define INCLUDE_AUX_CLK 
#define MII_PHY_GMII_TYPE 0x100000
#define CACHE_WRITEALLOCATE 0x04
#define SEEK_CUR 1
#define VXB_ASSERT_NONNULL(pVar,errVal) 
#define EPIC_IPI_INTERRUPT 25
#define CLOCAL 0x1
#define CUST_ENET3_2 0xA2
#define WIND_CLASS_INSTRUMENTED 0x04
#define SM_ALIGN_BOUNDARY 16
#define M85XX_MBMR(base) (CAST(VUINT32 *)((base) + 0x5074))
#define DDR_ERR_INT_EN 0xe48
#define BOOT_OTHER_FIELD_DELIMITER ';'
#define S_cacheLib_INVALID_CACHE (M_cacheLib | 1)
#define ROM_BASE_ADRS 0xFFF00000
#define INCLUDE_VXBUS_ACTIVATE 
#define INCLUDE_WDB_TTY_TEST 
#define OBJ_UNLOCK(classId,lockLevel) INT_CPU_MICRO_UNLOCK (lockLevel)
#define VXDBG_CTX_CONT(pClnt,pCtx) _func_vxdbgFuncs[VXDBG_CONT] (pClnt, pCtx)
#define VM_CONTIG_BLOCK_EACH(context,startAddr,numPages,stateMask,eachRtn,eachArg) ((vmLibInfo.pVmContigBlockEachRtn == NULL) ? (ERROR) : ((*vmLibInfo.pVmContigBlockEachRtn) (context, startAddr, numPages, stateMask, eachRtn, eachArg)))
#define SLL_GET(list,node) { if (((node) = (void *)((SL_LIST *)(list))->head) != NULL) ((SL_LIST *)(list))->head = ((SL_NODE *)(node))->next; }
#define vxAtomicAdd_inline vxAtomicAdd
#define _WRS_ARCH_HAS_IDLE_TASK 
#define FSHLOCK _FSHLOCK
#define EPIC_IN_INT42_DES_REG (EPIC_CCSROFF + 0x10750)
#define MEDR_FREE_QUEUE_LEN 64
#define _TIME_T 
#define IPCOM_PROC_STACK_SMALL IPCOM_STACK_ADJUST(2048)
#define AUX_CLK_RATE_MIN ((CCB_FREQ / 16) / (1 << FIT_DIVIDER_TAP_21))
#define __FLT_RADIX__ 2
#define EPIC_IN_INT23_DES_REG (EPIC_CCSROFF + 0x104f0)
#define DLL_PREVIOUS(pNode) ( (((DL_NODE *)(pNode))->previous) )
#define DLL_ADD(list,node) { DL_NODE *listTail = (list)->tail; DLL_INSERT ((list), listTail, (node)); }
#define _VX_MCORE 150
#define WV_EVT_PROTO_REV_2_2_FCS 5
#define S_taskLib_TASK_HOOK_TABLE_FULL (M_taskLib | 102)
#define VM_CONTEXT_SWITCH(context) ((vmLibInfo.pVmCtxSwitchRtn == NULL) ? (OK) : ((*vmLibInfo.pVmCtxSwitchRtn) (context)))
#define EVENT_WINDSTOP CLASS2_EVENT(29)
#define SYS_CLK_FREQ 400000000
#define SH7040 _VX_SH7040
#define _PPC_MMUCSR0_DL1MMU_FI 0x00000008
#define CACHE_INDEX_TO_STATE(index) ((UINT)index << MMU_ATTR_CACHE_INDEX_SHIFT)
#define EPIC_IN_INTERRUPT 20
#define MII_CR_COLL_TEST 0x0080
#define TYLIB_WRT_THRESHLD 20
#define DELTA(a,b) (abs((int)a - (int)b))
#define __DBL_MAX__ 1.7976931348623157e+308
#define IPCOM_NETIF_NATIVE 2
#define _IFIELD_VSIMM(x) ((0x00100000 & x) ? (0xffffffe0 | (x>>16)) : (0x0000001f & (x>>16)))
#define L1CSR0 1010
#define M85XXRIO_RIWAR_LOCAL 0xf
#define RIO_SWITCH_PORT_COUNT(x) ((x) & RIO_SWITCH_PORT_MASK) >> 16)
#define MRTPR_PTP_WRITE(x) ( (x << 24) & MRTPR_PTP_MASK)
#define RIO_MAX_INBOUND_CHANNELS 5
#define RIO_WPCSR_FULL 0x02000000
#define INCLUDE_BASE_KERNEL 
#define S_vxdbgLib_INVALID_HW_BP VXDBG_ERROR_TO_ERRNO(VXDBG_ERR_INVALID_HW_BP)
#define VM_STATE_MASK_WBACK VM_STATE_MASK_MEM_COHERENCY
#define _WRS_FRAMEP_FROM_JMP_BUF(env) ((char *) (env)[0].reg.spReg)
#define __DBL_HAS_INFINITY__ 1
#define EPIC_IIDR_CRIT1_INT EPIC_BIT(29)
#define EVT_CTX_TASKINFO(evtId,STATE,PRIORITY,LOCKCNT,TID,ENTRYPT,RTP,AFFINITY,NAME) do { if ( ACTION_IS_SET ) { EVENT_TASKNAME_T evt_ctx_taskinfo; evt_ctx_taskinfo.state = STATE; evt_ctx_taskinfo.priority = PRIORITY; evt_ctx_taskinfo.lockCnt = LOCKCNT; evt_ctx_taskinfo.tid = TID; evt_ctx_taskinfo.entryPt = ENTRYPT; evt_ctx_taskinfo.rtp = RTP; evt_ctx_taskinfo.affinity = AFFINITY; evt_ctx_taskinfo.name = NAME; eventPointSwHandle (evtId, &evt_ctx_taskinfo, sizeof evt_ctx_taskinfo); } } while ((0))
#define _WRS_CONFIG_COMPONENT_VXCOMPAT 1
#define FS_COMMIT_POLICY_MANUAL 2
#define _PC_SYMLINK_MAX 18
#define PCIEX_XINT3_LVL 0x2
#define _DBCR0_DAC2W_U 0x0001
#define MII_NP_MSG 0x2000
#define MMU_ATTR_PROT_SUP_WRITE 0x00000002
#define _POSIX_NGROUPS_MAX 0
#define BOOT_WARM_QUICK_AUTOBOOT BOOT_QUICK_AUTOBOOT
#define M85XXRIO_PESCSR_OFFSET 0x0158
#define PCIEX_CFG_ADR_REG (CCSBAR + 0xA000)
#define __INCvxANSIh 
#define EVT_CTX_0(evtId) do { if (ACTION_IS_SET) eventPointSwHandle (evtId, NULL, 0); } while ((0))
#define EVT_CTX_1(evtId,ARG1) do { if ( ACTION_IS_SET ) { EVT_CTX_1_T evt_ctx_1; evt_ctx_1.args [0] = ARG1; eventPointSwHandle (evtId, &evt_ctx_1, sizeof evt_ctx_1); } } while ((0))
#define BOOT_USB_ATTEMPT_DELAY 60
#define PCI_MEMIO2LOCAL(x) (((UINT32)x - PCI_MEMIO_ADRS) + CPU_PCI_MEMIO_ADRS)
#define LOW32(x) _VX_LOW32(x)
#define SYS_V 2
#define SM_READY ((UINT) 0x87654321)
#define stdin (*__stdin())
#define _PPC_SPEFSCR_OV 0x00004000
#define _PC_2_SYMLINKS 1
#define EVENT_SALCALL_REPLY CLASS3_EVENT(98)
#define MII_SR_T2_HALF_DPX 0x0200
#define S_symLib_SYMBOL_STILL_IN_TABLE (M_symLib | 4)
#define VXB_LOCK_WRITER FALSE
#define __FLT_MANT_DIG__ 24
#define M_loadAoutHppaLib (93 << 16)
#define EPIC_SENSE_EDG 0
#define _EXC_PROG_SRR1_NIA 0x00010000
#define MPC85XX_I2C_CONTROL_REG (0x00008)
#define EPIC_RES36_INT_VEC (EPIC_RES36_INT_NUM + EPIC_VEC_IN_IRQ0)
#define PCI_XINT1_LVL 0x2
#define M85XX_L2CTL_L2E_BIT 31
#define MPC85XX_I2C_FREQ_DIV_REG_MASK 0x3F
#define DEVMETHOD(NAME,FUNC) { (UINT32)&NAME ##_desc, (FUNCPTR) FUNC }
#define EVENT_IOCREAT CLASS3_EVENT(53)
#define _POSIX_PATH_MAX 256
#define PCI_ATTR_WS_32K 0x0000000E
#define PCI_ATTR_WS_32M 0x00000018
#define __INCspePpcLibh 
#define RUNTIME_SMP_VERSION RUNTIME_VERSION " " RUNTIME_SMP_NAME
#define _DBSR_IRPT_U 0x0200
#define _WRS_CPU_FAMILY_PREPENDS_UNDERSCORE FALSE
#define FIONCONTIG64 50
#define SYM_TBL_HASH_SIZE_LOG2 8
#define MII_CR_ISOLATE 0x0400
#define ACC_SIZE 2
#define _PPC_ESF_REG_BASE (_PPC_ESF_FPCSR + SIZ_UINT32)
#define WDB_COMM_CUSTOM 5
#define be32toh(x) ((UINT32)(x))
#define RTP_HEAP_INIT_SIZE 0x10000
#define WV_REV_ID_VXWORKS_6_6 0xb1b30000
#define WV_REV_ID_VXWORKS_6_7 0xb1b50000
#define TYLIB_XOFF_PCNT 85
#define EVENT_WINDPENDQPUT CLASS2_EVENT(15)
#define _ARCH_DBL_MIN_10_EXP (-307)
#define RLIM_INFINITY (((UINT64)1 << 63) - 1)
#define RIO_OP_SUPPORTED_WRITE 0x00020000
#define SM_OBJ_MAX_NAME 100
#define _WRS_CONFIG_NETSOURCE 1
#define EPIC_IPIVPR_PRIORITY_MSK (EPIC_BIT(19) | EPIC_BIT(18) | EPIC_BIT(17) | EPIC_BIT(16))
#define _PPC_ESF_R(n) (_PPC_ESF_REG_BASE + (n) * _PPC_REG_SIZE)
#define _SIZE_T_DEFINED 
#define M85XX_L2CTL(x) (CAST(VUINT32 *)((x + 0x20000)))
#define OBJ_IS_NAMED(objId) ( (((OBJ_CORE *)(objId))->handle.attributes & WIND_OBJ_NAMED) != 0 )
#define INT_CPU_MICRO_UNLOCK(key) intCpuMicroUnlock(key)
#define _PPC_BUCSR_E 0x1
#define _WCHAR_T_DEFINED_ 
#define EPIC_MSIIR_REG (EPIC_CCSROFF + 0x01740)
#define _POSIX_NO_TRUNC 0
#define ECHILD 10
#define EVENT_OBJ_SIGPAUSE CLASS2_EVENT(26)
#define _IFORM_X_11 21
#define VME_AM_STD_USR_DATA 0x39
#define EPIC_EIDR_P1_INT EPIC_BIT(1)
#define MAX_CLASS2_ID 9999
#define VX_MSG_NODE_SIZE 12
#define DLL_LAST(pList) ( (((DL_LIST *)(pList))->tail) )
#define _WRS_INLINE_QorIQdcbi 
#define INCLUDE_NET_BOOT 
#define MSR_SPE_BIT_SHIFT 25
#define OTHER_DEFAULT ""
#define _WRS_INLINE_QorIQdcbt 
#define LAWAR_TGTIF_LBC 0x00400000
#define m85xxTimerNum NELEMENTS(m85xxTimerResources)
#define _IFORM_X_15 25
#define INCLUDE_IPPROXYARP 
#define M85XXRIO_ROWAR_RDTYPE_MAINT_READ 0x7
#define EPIC_INV_PRIO_ERROR ((ULONG)(-1))
#define EVENT_IOIOCTL CLASS3_EVENT(51)
#define EVENT_SD_CREATE CLASS3_EVENT(200)
#define WRS_PACK_ALIGN(x) _WRS_PACK_ALIGN(x)
#define PPC601 _VX_PPC601
#define PPC602 _VX_PPC602
#define PPC603 _VX_PPC603
#define PPC604 _VX_PPC604
#define EPIC_IN_INT14_VEC_REG (EPIC_CCSROFF + 0x103c0)
#define SIO_AVAIL_MODES_GET 0x1009
#define WORDSWAP(x) (MSW(x) | (LSW(x) << 16))
#define EPIC_IN_INT9_DES_REG (EPIC_CCSROFF + 0x10330)
#define QUEUE_ATTRIBUTE_MASK 0x1
#define MMU_ATTR_PROT_USR_GET(attr) ((attr) & MMU_ATTR_PROT_USR_MSK)
#define _WRS_RET_PC_FROM_JMP_BUF(env) ((INSTR *) (env)[0].reg.lr)
#define _MMU_TLB_SZ_256K 0x00000400
#define EPIC_OPT_EN_MSK EPIC_EIVPR_INTR_MSK
#define BOOT_OTHER_LEN 80
#define DDR_CAPTURE_DATA_HI 0xe20
#define EPIC_IN_INT8_VEC_REG (EPIC_CCSROFF + 0x10300)
#define M85XXRIO_RxWAR_SIZE_4MB 23
#define _PARM_L_cuserid 64
#define BUS_MASTER_ENABLE_BIT 0x4
#define _VX_PPC970 2005
#define _STACK_DIR _STACK_GROWS_DOWN
#define EVENT_WINDTICKANNOUNCETMRSLC CLASS2_EVENT(7)
#define MII_MASSLA_STAT_REG 0xa
#define PLAT_RATIO_533_MHZ 8
#define VM_CTX_MASK_IN 0x1
#define WV_REV_ID_VXWORKS_6_7_SMP 0xb1b40000
#define PCI_OUT_ATTR_RTT_MEM 0x00040000
#define __VXWORKS__ 1
#define S_vxdbgLib_HOOK_TBL_FULL VXDBG_ERROR_TO_ERRNO(VXDBG_ERR_HOOK_TBL_FULL)
#define S_vxdbgLib_INVALID_CTX VXDBG_ERROR_TO_ERRNO(VXDBG_ERR_INVALID_CTX)
#define INCLUDE_WDB_USER_EVENT 
#define FD_0_TYPE 0
#define __SOFF 0x1000
#define VXDBG_BP_BY_ADDR_AND_CTX_REMOVE(pClient,retVal,address,pContext) { VXDBG_BP_DEL_INFO bpInfo; bpInfo.type = BP_BY_ADDR_AND_CTX_DELETE; bpInfo.pClnt = pClient; bpInfo.info.addrCtx.addr = address; bpInfo.info.addrCtx.pCtx = pContext; VXDBG_BP_DELETE(bpInfo, retVal); }
#define __INCdbgPpcLibh 
#define _VX_PPC403 95
#define FR500 _VX_FR500
#define _EXC_OFF_RESET 0x00100
#define FAST register
#define WIND_TCB_MSR (WIND_TCB_REGS + REG_SET_MSR)
#define EPIC_IRQSR0_EX_INT(n) (EPIC_BIT(11-(n)) & EPIC_IRQSR0_EX_INT_MSK)
#define EPIC_CRIT_SUMM_REG1 (EPIC_CCSROFF + 0x01340)
#define _PPC_ESR_ILK_U 0x0010
#define M_wdLib (34 << 16)
#define EIEIO_SYNC _WRS_ASM (" eieio; sync")
#define WR_ENET0 0x00
#define KERNEL_HEAP_SIZE ((unsigned int)(sysMemTop() - FREE_RAM_ADRS) / 3 * 2)
#define S29GL_SECTOR_SIZE 0x00020000
#define _IFIELD_VRC(x) ((0x00000400 & x) >> 10)
#define M85XXRIO_CTCSR(base) (CAST(VUINT32 *)(((char*)base) + 0x0006C ))
#define EVENT_OBJ_EVENTSEND CLASS2_EVENT(35)
#define EPIC_IPIVPR_PRIORITY_GET(p) (((p) & EPIC_IPIVPR_PRIORITY_MSK) >> 16)
#define SM_INT_BUS 4
#define INCLUDE_IO_MISC 
#define CS2_BNDS 0x010
#define RIO_OP_SUPPORTED_READ 0x00010000
#define MMU_REGION_ENTRY_BITS 2
#define M85XX_L2CTL_L2SLC_MSK 0x00001000
#define MEM_BLOCK_CHECK 0x10
#define WV_CLASS_3 0x00000007
#define M85XX_LSDMR(base) (CAST(VUINT32 *)((base) + 0x5094))
#define EPIC_MSG_REG0 (EPIC_CCSROFF + 0x01400)
#define EPIC_MSG_REG1 (EPIC_CCSROFF + 0x01410)
#define BOOT_CLEAR 0x02
#define DDR_CAPTURE_DATA_LO 0xe24
#define M85XXRIO_RIWBARn(base,n) (CAST(VUINT32 *)(((char*)base) + 0x10D68 + (0x80 - (n*0x20))))
#define SEMC_IS_FREE(semId) (semId->semCount > 0)
#define TASK_USER_EXEC_STACK_OVERFLOW_SIZE 4096
#define DLL_GET(list,node) { (node) = (void *)((DL_LIST *)(list))->head; if ((node) != NULL) { ((DL_LIST *)(list))->head = ((DL_NODE *)(node))->next; if (((DL_NODE *)(node))->next == NULL) ((DL_LIST *)(list))->tail = NULL; else ((DL_NODE *)(node))->next->previous = NULL; } }
#define CACHE_DRV_VIRT_TO_PHYS(pFuncs,adrs) (((pFuncs)->virtToPhysRtn == NULL) ? (void *) (adrs) : (void *) (((pFuncs)->virtToPhysRtn) (adrs)))
#define MMU_ATTR_USR_IO_RO (MMU_ATTR_USR_RO | MMU_ATTR_SUP_IO_RO)
#define LAWAR_SIZE_512MB 0x0000001C
#define IPCOM_FORWARDER_TRUE_CACHE_WAYS_SHIFT (0)
#define EPIC_SMSG_VEC_REG(irq) (EPIC_SMSG_INT0_VEC_REG + ((irq) * EPIC_SMSG_VEC_REG_INTERVAL))
#define PCI_INBOUND_BASE_ADRS_REG3(base) CVPUINT32(base, 0x8DA8)
#define INIT_NBIO_MSGS 32
#define _WRS_VXLIB_SUPPORT 
#define _WRS_INLINE_QorIQlwsync 
#define S_taskLib_NAME_NOT_FOUND (M_taskLib | 101)
#define _DEFINED_key_t 
#define EPIC_MSG_DEST_REG(irq) (EPIC_MSG_VEC_REG(irq) + EPIC_MSG_DEST_REG_VECREGOFF)
#define DIV_FACT_16 1
#define MII_ALL_BUS_SCAN 0x2000
#define PCI_ERROR_DATA_LOW_CAPTURE_REG 0x8e18
#define EPIC_MSIVPR_INTR_ACTIVE EPIC_BIT(30)
#define MPC85XX_I2C_CONTROL_REG_MIEN 0x40
#define DEFFILEMODE 0666
#define DDR_DATA_ERR_INJECT_HI 0xe00
#define BOOT_LINE_OFFSET 0x4200
#define VXB_INTR_TRIG_POS 0x02
#define S_taskLib_TASK_SWAP_HOOK_CLEAR (M_taskLib | 106)
#define LSDMR_OP_MASK 0x38000000
#define Q_ADVANCEN(pQHead,n) if (((Q_HEAD *)pQHead)->pQClass->valid == qPriDeltaClassId && ((Q_HEAD *)pQHead)->pFirstNode != NULL) { if (n > ((Q_PRI_NODE *)((Q_HEAD *)pQHead)->pFirstNode)->key) ((Q_PRI_NODE *)((Q_HEAD *)pQHead)->pFirstNode)->key = 0; else ((Q_PRI_NODE *)((Q_HEAD *)pQHead)->pFirstNode)->key -= n; }
#define _WRS_GET_PC_FOR_BRANCH_DELAY(pc,pReg) (pc = (INSTR *) (pReg)->reg_pc)
#define RIO_FEATURES_EXTCAP 0x1000
#define MMU_PAGE_ENTRY_BITS 4
#define EVENT_OBJ_VERIFY_FAIL CLASS3_EVENT(77)
#define _ARCH_ALIGN_STACK 4
#define _DBCR0_BRT 0x04000000
#define WV_ACTION_UNSET { vxAtomicAnd ((atomic_t*)&evtAction, ~(0x0100)); }
#define __INCvxWindh 
#define TOTAL_FLASH_SIZE 0x4000000
#define _PARM_STACK_GROWS_DOWN (-1)
#define O_NONBLOCK _FNONBLOCK
#define _PPC_SPEFSCR_FUNFE 0x00000008
#define _PPC_SPEFSCR_FUNFH 0x02000000
#define _VX_NBBY 8
#define _PPC_SPEFSCR_FUNFS 0x00040000
#define WV_REV_ID_T3 0xcdcd0000
#define _WRS_FASTTEXT __attribute__ ((__section__ (".text.fast")))
#define EPIC_EX_VEC_REG(irq) (EPIC_EX_INT0_VEC_REG + ((irq) * EPIC_EX_VEC_REG_INTERVAL))
#define MII_PHY_TX_FLOW_CTRL 0x40000
#define WDB_RESTART_TIME 10
#define MMU_ATTR_USR_EXE (MMU_ATTR_PROT_USR_READ | MMU_ATTR_PROT_USR_EXE)
#define EPIC_IIVPR_PRIORITY_MSK (EPIC_BIT(19) | EPIC_BIT(18) | EPIC_BIT(17) | EPIC_BIT(16))
#define _DEFINED_struct__Timespec 
#define __INC_m85xxVxBusRioH 
#define EPIC_IN_INT36_VEC_REG (EPIC_CCSROFF + 0x10680)
#define SPE_NUM_REGS 32
#define EPIC_IIDR_CRIT0_INT EPIC_BIT(30)
#define EPIC_IN_VEC_REG(irq) (EPIC_IN_INT0_VEC_REG + ((irq) * EPIC_IN_VEC_REG_INTERVAL))
#define PCIEX_XINT2_LVL 0x1
#define M85XXRIO_PLTOCCSR(base) (CAST(VUINT32 *)(((char*)base) + 0x00120 ))
#define EADDRNOTAVAIL 49
#define _PC_MAX_INPUT 8
#define OBJ_IS_REFERENCED(objId) ( DLL_FIRST (&((OBJ_CORE *)(objId))->objHandleList) != NULL )
#define EVENT_RTPSIGWRAPPER_DONE CLASS3_EVENT(93)
#define MII_MF_REG_LEN 0x5
#define EPIC_IN_INT5_DES_REG (EPIC_CCSROFF + 0x102b0)
#define S_mmuLib_ISR_CALL_BLOCKED (M_mmuLib | 12)
#define PCI_OUTBOUND_ATTR_REG3(base) CVPUINT32(base, 0x8c70)
#define _EXTENSION_POSIX_REENTRANT 1
#define _DEFINED_pthread_attr_t 
#define _VX_MC680X0 9
#define TRG_CLASS3_INDEX 2
#define M_fioLib (9 << 16)
#define CLASS_LIST_SEM_INLINE_OPTIONS (CLASS_LIST_SEM_INIT_OPTIONS | SEM_NO_ID_VALIDATE | SEM_NO_ERROR_CHECK | SEM_NO_EVENT_SEND)
#define OBJ_IS_OWNER(objId) ( DLL_FIRST (&((OBJ_CORE *)(objId))->ownerList) != NULL )
#define EPIC_MSG_STATE_REG (EPIC_CCSROFF + 0x01510)
#define _WRS_STRICT_ALIGNMENT 1
#define EPIC_RES30_INT_VEC (EPIC_RES30_INT_NUM + EPIC_VEC_IN_IRQ0)
#define _GCC_WCHAR_T 
#define FREQ_400_MHZ 400000000
#define VM_STATE_MASK_VALID MMU_ATTR_VALID_MSK
#define MMU_STATE_SET (*(mmuLibFuncs.mmuStateSet))
#define __SOPT 0x0400
#define DDR_CAPTURE_ATTRIBUTES 0xe4c
#define ENUM_TO_EVEC(excNum) ((VOIDFUNCPTR *) (excNum))
#define M_mtpLib (168 << 16)
#define EPIC_IN_INT36_DES_REG (EPIC_CCSROFF + 0x10690)
#define WV_REV_ID_T2 0xb0b00000
#define OBJ_SET_PUBLIC(objId) ( ((OBJ_CORE *)(objId))->handle.attributes |= WIND_OBJ_PUBLIC )
#define FIOWBUFSET 25
#define BLOB_LENGTH_WORD(dataLength,alignment) (dataLength | (BLOB_PADDING(dataLength,alignment) << PADDING_SHIFT_COUNT))
#define _PC_NO_TRUNC 10
#define getchar() __sgetc(stdin)
#define _WRS_CONFIG_SPACE "kernel"
#define MII_SR_ABIL_MASK 0xff80
#define __GXX_ABI_VERSION 1002
#define SIO_KYBD_LED_NUM 1
#define OBJ_SET_NAMED(objId) ( ((OBJ_CORE *)(objId))->handle.attributes |= WIND_OBJ_NAMED )
#define M85XXRIO_ROWAR_WRTYPE_MAINT_WRITE 0x7
#define I2C_FRMTOP 2
#define MPC85XX_I2C_ADDRESS_REG_MASK 0xFE
#define S_mmuLib_TLB_PAGE_NOT_LOCKED (M_mmuLib | 8)
#define EPIC_DUART2_INT_VEC (EPIC_DUART2_INT_NUM + EPIC_VEC_IN_IRQ0)
#define MAX_FILENAME_LENGTH PATH_MAX
#define M85XX_L2ERRCAPTECC(x) (CAST(VUINT32 *)((x + 0x20E28)))
#define F_UNLCK 3
#define vxAtomicNand_inline vxAtomicNand
#define M_muxLib (109 << 16)
#define INCLUDE_WDB_BANNER 
#define INCLUDE_AIM_MMU_CONFIG 
#define FS_NAMES_ATA_PRIMARY_MASTER "/ata0a"
#define S_memLib_BLOCK_ERROR (M_memLib | 3)
#define ENET_DEFAULT0 WR_ENET0
#define ENET_DEFAULT1 WR_ENET1
#define _PPC_SPEFSCR_FRMC_RND_PINF 0x00000002
#define WB_MAX_IRQS 256
#define EPIC_TM_B3_VEC_REG (EPIC_CCSROFF + 0x021e0)
#define MC68LC040 _VX_MC68LC040
#define VXB_HANDLE_MEM 0
#define VME_AM_STD_USR_PGM 0x3a
#define _MMU_TLB_IPROT 0x00000080
#define SM_PKTS_SIZE 0
#define VX_WDOG_SIZE 92
#define SIO_KYBD_MODE_ASCII 2
#define M_loadBoutLib (81 << 16)
#define MII_MONITOR_DELAY 0x2
#define EPIC_TM_B3_DES_REG (EPIC_CCSROFF + 0x021f0)
#define _WRS_PACK_ALIGN(x) __attribute__((packed, aligned(x)))
#define DDR_DATA_ERR_INJECT_LO 0xe04
#define _DBCR0_BRT_U 0x0400
#define _ARCH_LDBL_MIN_EXP (-1021)
#define EPIC_RES36_INT_NUM 36
#define S_taskLib_ILLEGAL_OPTIONS (M_taskLib | 110)
#define M_cplusLib (90 << 16)
#define EPIC_RES11_INT_VEC (EPIC_RES11_INT_NUM + EPIC_VEC_IN_IRQ0)
#define MII_MF_ST 0x1
#define __PTRDIFF_T 
#define _WRS_INLINE_ffsLsb 
#define EVENT_OBJ_MSGCREPLYSEND CLASS2_EVENT(41)
#define F_RSETLK 11
#define VXB_BUSID_VME 2
#define M85XXRIO_RIWARn(base,n) (CAST(VUINT32 *)(((char*)base) + 0x10D70 + (0x80 - (n*0x20))))
#define F_GETFD 1
#define EPIC_IN_INT17_DES_REG (EPIC_CCSROFF + 0x10430)
#define _POSIX_CLOCKRES_MIN 20
#define BRK_HARDMASK 0
#define F_GETFL 3
#define _PPC_MSR_POW_U _PPC_MSR_WE_U
#define _STATUS_DEFINED 
#define EVENT_EXCEPTION CLASS1_EVENT(10)
#define ROUND_DOWN(x,align) ((int)(x) & ~(align - 1))
#define SPIN_LOCK_ISR_GIVE(x) (spinLockIsrGive (x) )
#define fileno(p) __sfileno(p)
#define atomic32Clear_inline atomic32Clear
#define FIOCANCEL 14
#define ferror(p) __sferror(p)
#define SEMB_FULL_STATE NULL
#define INCLUDE_LOGGING 
#define __DBL_MIN__ 2.2250738585072014e-308
#define DLL_NEXT(pNode) ( (((DL_NODE *)(pNode))->next) )
#define WV_REV_ID_VXWORKS_6_6_SMP 0xb1b20000
#define _VA_LIST 
#define WIND_TCB_P0 WIND_TCB_R3
#define _WRS_NO_TGT_SHELL_FP 1
#define _DBCR2_DAC1US 0xc0000000
#define EPIC_VEC_MSG_IRQ0 (EPIC_VEC_GT_B_IRQ0 + EPIC_MAX_GT_B_IRQS)
#define _FDEFER 0x0020
#define WDB_INIT WDB_POST_KERNEL_INIT
#define M85XXRIO_DOCAR(base) (CAST(VUINT32 *)(((char*)base) + 0x0001C))
#define VX_MAX_SMP_CPUS 8
#define MMU_STATE_SUP_RX_USR_RWX (MMU_STATE_SUP_RX | _MMU_URWX)
#define TRG_CLASS_6_ON 0x11111111
#define INST_MFLR_R0 INST_MFLR
#define _PPC_SPEFSCR_FOVFH 0x01000000
#define CLASS_WIDTH 0x1
#define VXDBG_MEM_SCAN(pBuffer,pPattern,size,status) status = vxdbgMemScan (pBuffer, pPattern, size);
#define _PPC_SPEFSCR_FOVFS 0x00020000
#define _PPC_REG_SIZE 4
#define __GNUC_VA_LIST 
#define EPIC_PERFMON_1_MSK_REG0 (EPIC_CCSROFF + 0x01370)
#define EPIC_PERFMON_1_MSK_REG1 (EPIC_CCSROFF + 0x01380)
#define S_ioLib_NO_FILENAME ENOENT
#define _IFORM_A_2 51
#define M_pgPoolLib (181 << 16)
#define DBG_INST_ALIGN 4
#define SCRIPT_DEFAULT ""
#define PCI3_DEV_ID 0x826210E3
#define EVENT_WINDUNDELAY CLASS2_EVENT(10)
#define VM_MAX_PHYS_BITS_GET() ((vmLibInfo.pVmMaxPhysBitsGetRtn == NULL) ? (ERROR) : ((*vmLibInfo.pVmMaxPhysBitsGetRtn) ()))
#define S_ioLib_UNKNOWN_REQUEST ENOTSUP
#define INCLUDE_IPNET_USE_LOOPBACK 
#define EVENT_TASKROTATE CLASS3_EVENT(108)
#define S_selectLib_WIDTH_OUT_OF_RANGE (M_selectLib | 3)
#define _ARCH_CHAR_MAX 127
#define CACHE_BURST_ENABLE 0x40
#define VM_STATE_WRITABLE_NOT (MMU_ATTR_PROT_SUP_READ | MMU_ATTR_PROT_SUP_EXE)
#define DDR_ERR_DISABLE 0xe44
#define _PPC_HID0_SLEEP_U 0x0020
#define CACHE_DISABLED 0x00
#define _WRS_VXWORKS_MINOR 8
#define TASK_CPU_LOCK() TASK_CPU_LOCK_TASK(taskIdCurrent)
#define INCLUDE_TFFS 
#define F_GETLK 7
#define VX_NO_STACK_PROTECT 0x4000
#define BOOT_LINE_ADRS ((char *) (LOCAL_MEM_LOCAL_ADRS+BOOT_LINE_OFFSET))
#define EISDIR 21
#define EPIC_IPIDR_P1 EPIC_BIT(1)
#define VXB_REG_MEM 0x00000002
#define REG_TYPE_MASK 0xff000000
#define HID1_ABE 0x00001000
#define REG_SET_PC (REG_SET_CTR + _PPC_REG_SIZE)
#define PCIEX_CFG_DATA_REG (CCSBAR + 0xA004)
#define _PPC_MAS0_ESEL_BIT 16
#define _PPC_HID1_ABE 0x00001000
#define _PPC_TCR_FP_U 0x0300
#define M_spinLockLib (201 << 16)
#define CONSOLE_TTY 0
#define VM_STATE_BUFFERABLE (MMU_ATTR_SPL_0)
#define VX_TASK_NOACTIVATE 0x2000
#define M_nfs3Stat (142 << 16)
#define RIO_FEATURES_MEMORY 0x0002
#define PCI_ERROR_EXT_ADRS_CAPTURE_REG 0x8e14
#define EPIC_IN_INT38_DES_REG (EPIC_CCSROFF + 0x106d0)
#define _IFORM_X_13 23
#define MPC85XX_I2C_STATUS_REG_MAL 0x10
#define _IFIELD_TBR(x) ((0x001ff800 & x) >> 11)
#define MII_PHY_FLAGS_GET(setBits) (pPhyInfo->phyFlags)
#define EVENTS_WAIT_ALL 0x00
#define VME_AM_EXT_SUP_DATA 0x0d
#define HIGH32(x) _VX_HIGH32(x)
#define I2C_ERROR_CYCLE_READ 3
#define reg_pc pc
#define FASYNC _FASYNC
#define EPIC_I2C_INT_VEC (EPIC_I2C_INT_NUM + EPIC_VEC_IN_IRQ0)
#define _IFIELD_SIMM_S(x) ((0x00008000 & x) ? (0xffff0000 | x) : (0x0000ffff & x))
#define RIO_EXTENDED_FEATURES_BASE 0x0100
#define MIPSI64R2 _VX_MIPSI64R2
#define VXB_REG_BASE_1 "regBase1"
#define VXB_REG_BASE_2 "regBase2"
#define VXB_REG_BASE_3 "regBase3"
#define VXB_REG_BASE_4 "regBase4"
#define VXB_REG_BASE_5 "regBase5"
#define VXB_REG_BASE_6 "regBase6"
#define VXB_REG_BASE_8 "regBase8"
#define VXB_REG_BASE_9 "regBase9"
#define ULONG_MAX (LONG_MAX * 2UL + 1)
#define TASK_USER_EXC_STACK_OVERFLOW_SIZE 4096
#define EPIC_IPI_DPATCH0_REG0 (EPIC_CCSROFF + 0x20040)
#define EPIC_IPI_DPATCH0_REG1 (EPIC_CCSROFF + 0x20050)
#define EPIC_IPI_DPATCH0_REG3 (EPIC_CCSROFF + 0x20070)
#define MMU_STATE_CACHEABLE_WRITETHROUGH 0x00000010
#define MII_AN_EXP_REG 0x6
#define EVENTS_WAIT_ANY 0x01
#define EPIC_DMA3_INT_VEC (EPIC_DMA3_INT_NUM + EPIC_VEC_IN_IRQ0)
#define _DBCR0_TRAP 0x01000000
#define EVENTS_WAIT_MASK 0x01
#define PCI_SNOOP_ENABLE 0x40000000
#define EPIC_IPI_2_VEC_REG (EPIC_CCSROFF + 0x010c0)
#define __DBL_HAS_DENORM__ 1
#define VXB_REG_BASE_7 "regBase7"
#define VXB_ITERATE_INSTANCES 1
#define BOOT_WARM_NO_AUTOBOOT BOOT_NO_AUTOBOOT
#define ERF_MAX_USR_CATEGORIES 16
#define SEM_PENDED_TASK 0x1
#define EPIC_RES42_INT_VEC (EPIC_RES42_INT_NUM + EPIC_VEC_IN_IRQ0)
#define _WRS_KERNEL_LOCK_OFFSET_tkt_ctr (0x00)
#define INCLUDE_IPNET_PACKET_POOL_5 
#define LAWAR_SIZE_256KB 0x00000011
#define EVT_TASK_0(evtId) do { if ( ACTION_IS_SET ) eventPointSwHandle(evtId, NULL, 0); } while ((0))
#define _PARM_FILENAME_MAX 20
#define reg_sp spReg
#define STACK_SAVE 0x1000
#define CHAR_BIT 8
#define FIOPROTOARG 23
#define MAX_SYSCALL_ID 21999
#define RIO_CHANNEL_SM 2
#define MAX_SEM_TYPE SEM_TYPE_MAX
#define VXB_ACCESS_PROBE 0x00000001
#define M85XX_PORPLLSR_E500_RATIO(base) ((*M85XX_PORPLLSR(base) & M85XX_PORPLLSR_E500_RATIO_MASK)>>16)
#define DIV_FACT_1 0
#define VXB_BUSID_USB_HUB 14
#define SYM_GLOBAL 0x1
#define VX_SEMAPHORE(name) _WRS_DATA_ALIGN_BYTES(VX_OBJ_ALIGN_SIZE) char name [VX_SEMAPHORE_SIZE]
#define PCIEX_OUTBOUND_TRANS_EXT_ADRS_REG2(base) CVPUINT32(base, 0xac44)
#define _VX_STRONGARM 129
#define VME_AM_EXT_USR_DATA 0x09
#define Q_PRI_BMAP qPriBMapClassId
#define M_usbPeriphLib (132 << 16)
#define TFFS_DRIVE_NUMBER 0
#define VALID_INDEX_TO_STATE(index) ((UINT)index << MMU_ATTR_VALID_INDEX_SHIFT)
#define _DBCR0_ICMP 0x08000000
#define PCIEX_OUTBOUND_TRANS_EXT_ADRS_REG3(base) CVPUINT32(base, 0xac64)
#define LAWAR_SIZE_256MB 0x0000001B
#define __NO_INLINE__ 1
#define S_intLib_VEC_TABLE_WP_UNAVAILABLE (M_intLib | 2)
#define S_memLib_NOT_ENOUGH_MEMORY (M_memLib | 1)
#define EPIC_EIVPR_INTR_ACTIVE EPIC_BIT(30)
#define MCSR 572
#define PCI_AUTO_CONFIG_ADRS 0x4c00
#define _WRS_MMU_CLASS_PID_REG 1
#define M85XX_LTEDR(base) (CAST(VUINT32 *)((base) + 0x50B4))
#define NV_RAM_ADRS (FLASH1_BASE_ADRS)
#define VXB_ACCESS_VMEMREGION_ALLOC 0x00000014
#define M85XXRIO_SPICAR(base) (CAST(VUINT32 *)(((char*)base) + 0x0014))
#define _DBCR1_IAC12M 0x00c00000
#define EPIC_EIVPR_VECTOR(vec) ((vec) & EPIC_EIVPR_VECTOR_MSK)
#define WDB_RTP_PRIORITY 200
#define EPIC_RES43_INT_NUM 43
#define _SIZE_T 
#define EPIC_IN_INT0_VEC_REG (EPIC_CCSROFF + 0x10200)
#define MAX_CANON _POSIX_MAX_CANON
#define MMU_TRANS_TBL_DELETE (*(mmuLibFuncs.mmuTransTblDelete))
#define M85XX_L2SRBAR_ADDR_BIT 14
#define WIND_TCB_R17 (WIND_TCB_REGS + REG_SET_GR(17))
#define EPIC_EX_INT4_DES_REG (EPIC_CCSROFF + 0x10090)
#define PIC_OFFSET 0x40000
#define CPU_FAMILY _VX_CPU_FAMILY
#define errno (*__errno())
#define RIO_MAX_CHANNELS 15
#define PCIEX_OUTBOUND_TRANS_ADRS_REG3(base) CVPUINT32(base, 0xac60)
#define __INCesfh 
#define INCLUDE_PIPES 
#define CORE_DUMP_CKSUM_ENABLE FALSE
#define M85XXRIO_RIWAR_LOCAL_R_SNOOP_CORE 5
#define PCIEX_OUTBOUND_TRANS_ADRS_REG4(base) CVPUINT32(base, 0xac80)
#define FD_ZERO(p) _VX_FD_ZERO (p)
#define _PPC_ESF_R10 _PPC_ESF_R(10)
#define _PTRDIFF_T_ 
#define STATE_TO_PROT_INDEX(state) ((MMU_ATTR_PROT_GET(state)) >> MMU_ATTR_PROT_INDEX_SHIFT)
#define _PPC_ESF_R15 _PPC_ESF_R(15)
#define _PPC_ESF_R16 _PPC_ESF_R(16)
#define _WRS_VXWORKS_MAJOR 6
#define _PPC_ESF_R18 _PPC_ESF_R(18)
#define _PPC_ESF_R19 _PPC_ESF_R(19)
#define EPIC_IN_INT45_DES_REG (EPIC_CCSROFF + 0x107b0)
#define VXWORKS_SMP_VERSION RUNTIME_NAME " " RUNTIME_VERSION " " RUNTIME_SMP_NAME
#define VM_TEXT_PROTECT(addr,protect) ((vmLibInfo.pVmTextProtectRtn == NULL) ? (ERROR) : ((*vmLibInfo.pVmTextProtectRtn) (addr, protect)))
#define _IFORM_X_35 80
#define _WRS_CONFIG_FEATURE_IPNET_GEN_DEPEND 1
#define BOOT_QUICK_AUTOBOOT 0x04
#define _PARM_UTS_VERSION_MAX 64
#define STACK_NAME_V4_V6 2
#define MII_BP_FAULT 0x2000
#define _PPC_ESF_R21 _PPC_ESF_R(21)
#define _PPC_ESF_R23 _PPC_ESF_R(23)
#define _PPC_ESF_R24 _PPC_ESF_R(24)
#define _PPC_ESF_R25 _PPC_ESF_R(25)
#define _PPC_ESF_R26 _PPC_ESF_R(26)
#define _PPC_ESF_R27 _PPC_ESF_R(27)
#define _PPC_ESF_R28 _PPC_ESF_R(28)
#define _PPC_ESF_R29 _PPC_ESF_R(29)
#define MMU_ATTR_CACHE_INDEX_SHIFT 7
#define _WRS_CONFIG_TASK_SWITCH_HOOKS_D 1
#define FIODIRENTRY 9
#define _ARCH_MOVE_SIZE 4
#define O_TEXT _FTEXT
#define _PPC_ESF_R30 _PPC_ESF_R(30)
#define _PPC_ESF_R31 _PPC_ESF_R(31)
#define EVENT_SPINLOCK_ERROR CLASS3_EVENT(238)
#define DEVMETHOD_END { 0, NULL }
#define CACHE_DMA_IS_READ_COHERENT() CACHE_DRV_IS_READ_COHERENT (&cacheDmaFuncs)
#define _PPC_REG_SET_SIZE (_PPC_REG_SIZE * (GREG_NUM + 9))
#define FIONFREE 30
#define CLASS1_EVENT(id) (MIN_CLASS1_ID + id)
#define _MMU_TLB_TS_0 0x00000000
#define Q_PRI_DELTA qPriDeltaClassId
#define UIO_MAXIOV 1024
#define M_pgMgrLib (185 << 16)
#define FIOTRUNC 42
#define S_eventLib_NULL_TASKID_AT_INT_LEVEL (M_eventLib | 0x0007)
#define S_eventLib_NOT_ALL_EVENTS (M_eventLib | 0x0002)
#define PCI_CFG_DATA_REG (CCSBAR + 0x8004)
#define BUS_TYPE_MULTIBUS 2
#define SM_OBJ_MAX_TASK 40
#define INCLUDE_WATCHDOGS_CREATE_DELETE 
#define EVENT_OBJ_MSGCACKSEND CLASS2_EVENT(40)
#define OSCILLATOR_FREQ FREQ_66_MHZ
#define MII_SR_REMOTE_FAULT 0x0010
#define SEMBM_IS_FREE(semId) (semId->semOwner == NULL)
#define S_taskLib_ILLEGAL_OPERATION (M_taskLib | 112)
#define CACHE_CMD_DISABLE 0x04000000
#define _CACHE_ALIGN_SIZE _ppcCacheLineSize
#define ERROR (-1)
#define _PPC_L1CFG_PA_V(x) (x >> 16)
#define _DBCR0_FT 0x00000001
#define _VX_UPDATE 2
#define __STRING(x) #x
#define NGROUPS_MAX _POSIX_NGROUPS_MAX
#define EHOSTUNREACH 65
#define M85XXRIO_AICAR(base) (CAST(VUINT32 *)(((char*)base) + 0x000C))
#define EPIC_SR_OUT_DB1_INT_NUM 33
#define __INCvxParamsh 
#define __INCioLibh 
#define PCI2_OUTBOUND_ATTR_REG3(base) CVPUINT32(base, 0x9c70)
#define _WRS_CONFIG_SUPPORTS_SMP 1
#define M85XXRIO_MSR(base) (CAST(VUINT32 *)(((char*)base) + 0x0040 ))
#define PCI2_OUTBOUND_TRANS_ADRS_REG2(base) CVPUINT32(base, 0x9c40)
#define _MMU_TLB_PERM_UW 0x00020000
#define I2C_IOCTL_RMW_AND 3
#define S29GL_FLASH_NUM 1
#define PCI2_OUTBOUND_TRANS_ADRS_REG3(base) CVPUINT32(base, 0x9c60)
#define atomic32Cas_inline atomic32Cas
#define M_smNameLib (89 << 16)
#define EPIC_IN_DEST_REG(irq) (EPIC_IN_VEC_REG(irq) + EPIC_IN_DEST_REG_VECREGOFF)
#define EVENT_OBJ_EVENTRECEIVE CLASS2_EVENT(36)
#define REG_SET_MSR (REG_SET_GR(GREG_NUM))
#define RLIMIT_CPU 0
#define EPIC_EX_DFT_SENSE EPIC_SENSE_LVL
#define MMU_ASID_GLOBAL MMU_ASID_MIN
#define _FD_SET_DEFINED 
#define INCLUDE_EDR_SYSDBG_FLAG 
#define MII_MASSLA_CTRL_REG 0x9
#define VXB_ACCESS_REG_WRITE8 0x00000006
#define MMU_STATE_SUP_RW (_MMU_SR|_MMU_SW)
#define MMU_STATE_SUP_RX (_MMU_SR| _MMU_SX)
#define EVENT_ISR_DISPATCHER_INVOKE CLASS3_EVENT(60)
#define _IFORM_XFL_1 46
#define M_selectLib (57 << 16)
#define SM_CPU_NOT_ATTACHED 0
#define VXB_LOCK_IMPORT(x) IMPORT struct vxbLock x
#define MMU_ATTR_NOT_GLOBAL 0xffffffff
#define IPCOM_USE_NATIVE_SOCK_API 
#define LOCAL_MEM_LOCAL_ADRS2 0xf0000000
#define IPCOM_RELEASE 60704
#define I2C_ERROR_CYCLE_ACKIN 5
#define _VX_AM29200 52
#define RIO_BUS_CONFIG_DONE 4
#define INCLUDE_MEM_MGR_INFO 
#define TASK_USER_EXC_STACK_SIZE 8192
#define EVENT_RTPSIGPENDING CLASS3_EVENT(95)
#define FIOCONTIG 36
#define _PPC_EXC_VEC_BASE_LOW 0x00000000
#define _ARCH_SUPPORTS_GCC 
#define IMPORT extern
#define _PPC_TCR_WP_U 0xc000
#define _OFF_T 
#define INCLUDE_NET_DAEMON 
#define IPCOM_SPINLOCK_BUSY_PERSIST (1024)
#define INCLUDE_SEM_MUTEX_CREATE 
#define IPCOM_USE_KEY_DB_CMD 
#define VXB_BUSID_VIRTUAL 9
#define DOSFS_DEFAULT_FAT_CACHE_SIZE 0x100000
#define _PPC_ESF_CTR _PPC_ESF_R(GREG_NUM + 2)
#define EVENT_WINDPRIORITYSETRAISE CLASS2_EVENT(4)
#define PPC_WD_INT_ID 598
#define PCIEX_XINT1_LVL 0x0
#define EVENT_IODELETE CLASS3_EVENT(54)
#define RIO_DIRECTION 2
#define EPIC_EX_INT3_DES_REG (EPIC_CCSROFF + 0x10070)
#define VXEVENTS_OPTIONS EVENTS_NONINTERRUPTIBLE
#define _VX_PPCEC603 98
#define WIND_OBJ_CORE_CLASS_ID 0x30
#define _WRS_CONFIG_COMPONENT_USR_IPNET 1
#define EPIC_IN_INT41_VEC_REG (EPIC_CCSROFF + 0x10720)
#define M_hrfsLib (195 << 16)
#define SIO_KYBD_LED_CAP 2
#define EVENT_WDCANCEL CLASS3_EVENT(19)
#define _VX_ARMARCH3 126
#define _VX_ARMARCH4 127
#define _VX_ARMARCH5 1121
#define _VX_ARMARCH6 1123
#define _VX_ARMARCH7 1125
#define SPIN_LOCK_EMPTY 0
#define MII_CR_RES_MASK 0x003f
#define _EXC_INFO_VEC 0x001
#define MII_PHY_INIT 0x8000
#define _WRS_CONFIG_SUPPORTS_MIPC 1
#define VM_MMUSOFT_ENABLED (vmLibInfo.mmuSoftCfgEnabled)
#define __FBSDID(s) __IDSTRING(__CONCAT(__rcsid_,__LINE__),s)
#define VX_SUPERVISOR_MODE 0x0001
#define OBJ_HANDLE_INDEX_MASK 0xffff
#define EPIC_L2CACHE_INT_NUM 0
#define EPIC_MSG_INT3_DES_REG (EPIC_CCSROFF + 0x11670)
#define FNOCTTY _FNOCTTY
#define PCI_IN_ATTR_RTT_LM_WRITE_ALLOC_LOCK_L2_CACHE_LINE 0x00007000
#define M85XX_LAWBAR4(base) (CAST(VUINT32 *)((base) + 0xc88))
#define EPIC_IN_INT17_VEC_REG (EPIC_CCSROFF + 0x10420)
#define VM_STATE_GET(context,pageAddr,pState) ((vmLibInfo.pVmStateGetRtn == NULL) ? (ERROR) : ((*vmLibInfo.pVmStateGetRtn) (context, (VIRT_ADDR) pageAddr, pState)))
#define _VX_MCF5200 161
#define WV_CLASS_1_ON 0x10000001
#define S_taskLib_ILLEGAL_PRIORITY (M_taskLib | 109)
#define _WRS_CONFIG_FP_hard 1
#define EPIC_MSG_INT3_VEC_REG (EPIC_CCSROFF + 0x11660)
#define FS_NAMES_ATA_PRIMARY_SLAVE ""
#define INCLUDE_IPNET_IFCONFIG_1 
#define M85XX_LAWBAR7(base) (CAST(VUINT32 *)((base) + 0xce8))
#define LAWAR_SIZE_16KB 0x0000000D
#define AM29030 _VX_AM29030
#define _WRS_IOSHORT UINT16
#define M85XX_L2CTL_L2MEXTDIS_MSK 0x00100000
#define OBJ_MASTER_TBL_SIZE (0x10000 / OBJ_HANDLE_TBL_SIZE)
#define M_nfsStat (48 << 16)
#define FIOWHERE64 54
#define FIOMKDIR 31
#define MEM_ALLOC_ERROR_RETURN 0
#define EPIC_IN_INT41_DES_REG (EPIC_CCSROFF + 0x10730)
#define M_kernel (1 << 16)
#define M85XX_L2CEWCR_SIZMASK_BIT 0
#define IPCOM_PROC_STACK_MAX IPCOM_STACK_ADJUST(21845)
#define SM_ANCHOR_OFFSET 0x4100
#define CLOCK_REALTIME 0x0
#define EVENT_SALRUN_CONNECT CLASS3_EVENT(106)
#define INCLUDE_SEM_MUTEX 
#define FSTAT_CHR 0020000
#define SIO_MODEM_CTS 0x04
#define STD_BUS_ACCESS_METHOD_END 0x00000015
#define LAWAR_SIZE_16MB 0x00000017
#define MII_CTRL_REG 0x0
#define EPIC_PCI2_INT_NUM 9
#define M85XXRIO_PEFCAR_OFFSET 0x10
#define INT_CPU_LOCK() intCpuLock()
#define _WRS_CONFIG_COMPONENT_IPTCP 1
#define VX_ADA_DEBUG 0x0020
#define RIO_CHANNEL_TAS_CLEAR 4
#define M_pcmciaLib (105 << 16)
#define __INCrngLibh 
#define VXB_LOCK_READER TRUE
#define _DEFINED_struct__Sched_param 
#define MMU_INST 0x01
#define _VX_SH7410 135
#define Q_NEXT(pQHead,pQNode) ((Q_NODE *)((*(((Q_HEAD *)(pQHead))->pQClass->nextRtn)) (((Q_HEAD *)(pQHead)), ((Q_NODE *)(pQNode)))))
#define EPIC_IN_INT22_VEC_REG (EPIC_CCSROFF + 0x104c0)
#define S_semLib_INVALID_OPTION (M_semLib | 102)
#define _POSIX_OPEN_MAX 16
#define MII_PHY_PWR_DOWN 0x0800
#define _MMU_URWX (_MMU_UR | _MMU_UW | _MMU_UX)
#define WIND_TCB_R20 (WIND_TCB_REGS + REG_SET_GR(20))
#define EVENT_CPC_ENTER CLASS3_EVENT(232)
#define __va_copy(d,s) __builtin_va_copy(d,s)
#define EVENT_MSGQDELETE CLASS3_EVENT(21)
#define WIND_TCB_R22 (WIND_TCB_REGS + REG_SET_GR(22))
#define VXB_ASSERT(cond,errVal) 
#define BOOT_WARM_AUTOBOOT BOOT_NORMAL
#define _WRS_ARCH_USER_STACK_FRAME_EXTENSION(sp) do { (sp) = (char *) STACK_ROUND_DOWN ((sp) - 2*sizeof(int *)); *((int *)(sp)) = (int)0; *((int *)((sp)+4)) = (int)0; } while ((0))
#define _VX_NFDBITS (sizeof(_Vx_fd_mask) * _VX_NBBY)
#define MSG_PRI_URGENT 1
#define MPC85XX_I2C_DIG_FILTER_REG (0x00014)
#define ENET_DEFAULT2 WR_ENET2
#define EVENT_MSGQSEND CLASS3_EVENT(23)
#define _STACK_GROWS_UP 1
#define RIO_CAR_DEVVEND_ID 0x00
#define _IFIELD_SIMM(x) ((0x0000ffff & x))
#define VM_CONTEXT_CREATE() ((vmLibInfo.pVmCtxCreateRtn == NULL) ? (ERROR) : ((*vmLibInfo.pVmCtxCreateRtn) ()))
#define _DBCR1_IAC1ER 0x30000000
#define F_OK 0
#define WDB_END_DEVICE_ADDRESS NULL
#define MEMORY_SPACE_ACCESS_ENABLE_BIT 0x2
#define _PC_PATH_MAX 11
#define _FNONBLOCK 0x4000
#define IPCOM_SYSLOG_PRIO_DEFAULT 3
#define MII_MF_DATA_LEN 0x10
#define EPIC_IN_INT22_DES_REG (EPIC_CCSROFF + 0x104d0)
#define __SAPP 0x0100
#define IPCOM_HOST_FROM_LOCALTBL 
#define USHRT_MAX 65535
#define BOOT_USR_LEN 20
#define VM_STATE_CACHEABLE_MINICACHE 0x30
#define VXBAF_BYTE_ORDER_BE_16 0x00010000
#define _POSIX_MAX_INPUT 255
#define EPIC_IN_INT15_VEC_REG (EPIC_CCSROFF + 0x103e0)
#define IPCOM_USE_MUX_DRV 
#define _IFIELD_D_S(x) ((0x00008000 & x) ? (0xffff0000 | x) : (0x0000ffff & x))
#define _PC_LINK_MAX 6
#define EPIC_MSIVPR_VECTOR_MSK (0xffff)
#define FIT_DIVIDER_TAP_10 10
#define FIT_DIVIDER_TAP_11 11
#define FIT_DIVIDER_TAP_12 12
#define FIT_DIVIDER_TAP_13 13
#define FIT_DIVIDER_TAP_15 15
#define ESHUTDOWN 58
#define FIT_DIVIDER_TAP_17 17
#define FIT_DIVIDER_TAP_19 19
#define BRIDGE_BAR0_WIDTH 0x4
#define RLIM_NLIMITS 9
#define M85XXRIO_RIWAR_TGINT(val) (val << 20)
#define EPIC_MIDR_CRIT_INT EPIC_BIT(30)
#define S_semLib_COUNT_OVERFLOW (M_semLib | 106)
#define I2C_ERROR_CYCLE_START 1
#define _VX_howmany(x,y) ((unsigned int)(((x)+((y)-1)))/(unsigned int)(y))
#define ERRNO_PX_FLAG (1<<15)
#define WV_ACTION_SET { vxAtomicOr ((atomic_t*)&evtAction, 0x0100); }
#define MII_TECH_PAUSE 0x0400
#define VXB_HANDLE_OP_WRITE 0x10
#define FIT_DIVIDER_TAP_20 20
#define FIT_DIVIDER_TAP_21 21
#define DLL_REMOVE(list,node) { if (((DL_NODE *)(node))->previous == NULL) ((DL_LIST *)(list))->head = ((DL_NODE *)(node))->next; else ((DL_NODE *)(node))->previous->next = ((DL_NODE *)(node))->next; if (((DL_NODE *)(node))->next == NULL) ((DL_LIST *)(list))->tail = ((DL_NODE *)(node))->previous; else ((DL_NODE *)(node))->next->previous = ((DL_NODE *)(node))->previous; }
#define CLASSID_INVALIDATE(classId) ((CLASS_ID) ((int)classId | 1))
#define SEM_INVERSION_SAFE 0x08
#define MII_EXT_STAT_1000X_FD 0x8000
#define _SIZE_T_DECLARED 
#define WDB_PROXY_INIT_STRING NULL
#define _ARCH_LDBL_MAX_10_EXP 308
#define MMU_GLOBAL_PAGE_MAP (*(mmuLibFuncs.mmuGlobalPageMap))
#define VXBAF_BYTE_ORDER_BE_32 0x001a0000
#define _BYTE_ORDER _BIG_ENDIAN
#define S_mmuLib_VIRT_ADDR_OUT_OF_BOUNDS (M_mmuLib | 6)
#define CORE_DUMP_STACK_SIZE 8192
#define F_SETOWN 6
#define EPIC_IN_INT14_DES_REG (EPIC_CCSROFF + 0x103d0)
#define M85XX_MCMR(base) (CAST(VUINT32 *)((base) + 0x5078))
#define MSG_PRI_NORMAL 0
#define SIO_BAUD_SET 0x1003
#define IPCOM_PROC_STACK_MIN IPCOM_STACK_ADJUST(1024)
#define ARMARCH4_T _VX_ARMARCH4_T
#define PCI_WINDOW_ENABLE_BIT 0x80000000
#define DRV_TIMER_M85XX 
#define EPIC_TSEC4TX_INT_NUM 21
#define PCIEX_INBOUND_ATTR_REG2(base) CVPUINT32(base, 0xaDD0)
#define _IFIELD_D(x) ((0x0000ffff & x))
#define _IFIELD_L(x) ((0x00200000 & x) >> 21)
#define M85XX_L2CTL_L2LFRID_MSK 0x00000300
#define CORE_DUMP_RTP_FS_PATH "/tgtsvr"
#define _WRS_INLINE static __inline__
#define FIONREAD 1
#define PCIEX_INBOUND_ATTR_REG3(base) CVPUINT32(base, 0xaDB0)
#define EPIC_IN_INT8_DES_REG (EPIC_CCSROFF + 0x10310)
#define EPIC_IN_INT2_VEC_REG (EPIC_CCSROFF + 0x10240)
#define _VX_PPC8260 2012
#define _PPC_L1CSR_SLC_V(x) (x >> 11)
#define INCLUDE_IPAIP_GLOBAL_CONFIGS 
#define MII_EXT_STAT_1000X_HD 0x4000
#define EPIC_MIDR_CRIT0_INT EPIC_BIT(30)
#define WIND_TCB_R4 (WIND_TCB_REGS + REG_SET_GR(4))
#define __ELF__ 1
#define TBU_W 285
#define _ARCH_FLT_MAX 3.40282347e+38F
#define _VX_CPU_FAMILY _VX_PPC
#define RIO_IMPLEMENTATION_SPACE_BASE 0x010000
#define DELETE_ERROR ERROR
#define INCLUDE_REMLIB 
#define _DBSR_IAC1 0x00800000
#define _DBSR_IAC2 0x00400000
#define WIND_TCB_R7 (WIND_TCB_REGS + REG_SET_GR(7))
#define VXBAF_BYTE_ORDER_BE_64 0x1a1a0000
#define __INCvxAtomicArchLibh 
#define PPC7400 _VX_PPC7400
#define _WRS_CONFIG_EDR_POLICY_HOOKS 1
#define IPCOM_USE_KEY_DB 
#define MMU_STATE_GUARDED_NOT 0x00000000
#define _VX_PPC7400 2011
#define SEMM_PENDED_TASK SEM_PENDED_TASK
#define CSIZE 0xc
#define EPIC_PCI_EXPRESS_INT_VEC (EPIC_PCI_EXPRESS_INT_NUM + EPIC_VEC_IN_IRQ0)
#define SPARClite _VX_SPARClite
#define EVENT_SALCREATE CLASS3_EVENT(99)
#define RIO_OP_SUPPORTED_AINC 0x01000000
#define MII_NP_TOGGLE 0x0800
#define _DBCR0_DAC1R_U 0x0008
#define SM_OBJ_MAX_SEM 60
#define _PARM_PATH_MAX 1024
#define IS_CONTROL_EVENT(event) ((event >= MIN_CONTROL_ID) && (event <= MAX_CONTROL_ID))
#define PPCACR_PRKM_MASK 0XF0
#define S_taskLib_TASK_UNDELAYED (M_taskLib | 108)
#define FIOSEEK 7
#define WV_CLASS_TASKNAMES_PRESERVE 0x00001000
#define M85XXRIO_PLMRESPCSR(base) (CAST(VUINT32 *)(((char*)base) + 0x00144 ))
#define ZERO 0
#define __INCvxTypesOldh 
#define _IFORM_M_1 54
#define S_ioLib_UNFORMATED EIO
#define IPCOM_USE_SYSLOG 
#define FNBIO _FNBIO
#define _IFORM_M_3 78
#define IPCOM_USE_SA_LEN 1
#define SEMRW_MAX_READERS(semId) ( ((SEM_RW_EXT *) ((UINT) semId + sizeof (SEMAPHORE)))->maxReaders )
#define FIOLABELSET 34
#define _VX_SPARC 10
#define EPIC_IPIVPR_PRIORITY(p) (((p) << 16) & EPIC_IPIVPR_PRIORITY_MSK)
#define M_memLogLib (140 << 16)
#define FIOSEEK64 53
#define SYS_MODEL "Wind River SBC"
#define SRIO_STATUS_CHECK 0x2
#define IPCOM_USE_HW_CAPS 
#define _DBCR0_IRPT 0x02000000
#define _VX_PPC405F 2002
#define __INCselectLibP 
#define _POSIX_ARG_MAX 4096
#define M_ipsLib (165 << 16)
#define INCLUDE_SEM_BINARY 
#define IVOR12 412
#define M85XXRIO_RxWAR_TYPE_READ(val) (val << 16)
#define M_pppSecretLib (101 << 16)
#define OBJ_RESOLVE(pObj) ((OBJ_CORE *)(pObj))
#define LAWAR_TGTIF_RAPIDIO 0x00C00000
#define NUM_PCI2_SLOTS 0x0
#define MIN_CONTROL_ID 0
#define EVENT_SEMMCREATE CLASS3_EVENT(13)
#define IVOR14 414
#define SEM_M_PRI_RESORT 0x4
#define M_mmsLib (162 << 16)
#define __INCmmuE500Libh 
#define INST_BCCTR _OP(19, 528)
#define SEM_RW_EXT_SIZE 0x18
#define MEM_BLOCK_ERROR_LOG_MSG 0x04
#define M85XXRIO_ROWS3R18_OFFSET(n) (0x10C1C + ((n)*0x20))
#define IPCOM_USE_HW_CHECKSUM_RX 
#define CCB_FREQ 396000000
#define OPT_MON_TRAP 0x10
#define IPCOM_FILE_ROOT IPCOM_FILE_NATIVE_ROOT
#define M_arpLib (71 << 16)
#define _PARM_MB_CUR_MAX 1
#define EVENT_MEMALLOC CLASS3_EVENT(30)
#define _WRS_CONFIG_COMPONENT_VXMUX 1
#define _WRS_PHYS_ADDR_IS_64_BITS 
#define CACHE_WRITETHROUGH 0x01
#define M85XXRIO_ROWAR_RDTYPE_ATOMIC_INC 0xc
#define SEM_RW_MAX_CONCURRENT_READERS 32
#define NV_BOOT_OFFSET 0
#define EPIC_IN_INT5_VEC_REG (EPIC_CCSROFF + 0x102a0)
#define FOREVER for (;;)
#define WDB_POOL_SIZE ((unsigned int) (sysMemTop() - FREE_RAM_ADRS)/16)
#define O_CREAT _FCREAT
#define EOVERFLOW 85
#define _WRS_CONFIG_OBJECT_CLASS_LIST 1
#define PCIEX_INBOUND_TRANS_ADRS_REG1(base) CVPUINT32(base, 0xaDE0)
#define _ARCH_FLT_MIN 1.17549435e-38F
#define __sgetc(p) ((HANDLE_VERIFY(p, handleTypeFile) != OK) ? (EOF) : ((--(p)->_r < 0) ? (__srget(p)) : ((int)(*(p)->_p++))))
#define FILESIZEBITS 63
#define UCHAR_MAX 255
#define IPCOM_USE_HW_CHECKSUM_TX 
#define INCLUDE_WDB_MEM 
#define SEEK_SET 0
#define RLIMIT_CORE 4
#define INCLUDE_IPTCP 
#define Q_CLASS_VERIFY(pQClass) ( (((Q_CLASS *)(pQClass))->valid == (Q_CLASS *) pQClass) ? OK : ERROR )
#define VM_STATE_MASK_WRITABLE MMU_ATTR_PROT_MSK
#define CUST_ENET3_0 0xA0
#define CUST_ENET3_1 0xA1
#define CUST_ENET3_3 0xA3
#define VM_DEFAULT_CACHE_COHERENCY_ATTR 0x0
#define SHELL_TASK_NAME_BASE "tShell"
#define PCI2_DEV_ID 0x826110E3
#define _IFIELD_RB(x) ((0x0000f800 & x) >> 11)
#define MMU_STATE_SUP_RW_USR_R (MMU_STATE_SUP_RW | _MMU_UR)
#define EPIC_RES42_INT_NUM 42
#define MII_ANAR_10TX_FD 0x0040
#define MMU_STATE_SUP_RW_USR_W (MMU_STATE_SUP_RW | _MMU_UW)
#define MMU_STATE_SUP_RW_USR_X (MMU_STATE_SUP_RW | _MMU_UX)
#define M85XX_LSRT(base) (CAST(VUINT32 *)((base) + 0x50A4))
#define __INCb_uid_th 
#define I2C_DEVICE_TYPE_TEMP_SENSOR_AD7417 1
#define MII_AN_PRTN_REG 0x5
#define _WRS_CONFIG_SUPPORTS_PROFILE_SMALL_FOOTPRINT 1
#define VXDBG_MEM_READ(pSrc,pDest,size) VXDBG_MEM_WIDTH_READ(pSrc, pDest, size, 0)
#define M85XX_L2CTL_L2LO_MSK 0x00002000
#define OBJ_HANDLE_ENTRY_MASK (OBJ_HANDLE_TBL_SIZE - 1)
#define IVOR0 400
#define WDB_STACK_SIZE 0x2000
#define _PPC_MSR_WE_U 0x0004
#define I2C_IOCTL_RD 1
#define MMU_REGION_TBL_ENTRIES (0x1 << MMU_REGION_INDEX_BITS)
#define EPIC_IN_INT6_DES_REG (EPIC_CCSROFF + 0x102d0)
#define vxAtomicSet_inline vxAtomicSet
#define S_msgQLib_INVALID_QUEUE_TYPE (M_msgQLib | 3)
#define PCI_IN_ATTR_TGI_RIO 0x00c00000
#define SHELL_TASK_PRIORITY 1
#define _VX_READ 0
#define MII_ANAR_10TX_HD 0x0020
#define _WRS_VX_NO_GLOBAL_ERRNO 
#define S_vxCpuLib_INVALID_ARGUMENT (M_vxCpuLib | 1)
#define _GCC_LIMITS_H_ 
#define PHY_10BASE_T_FDX 0x01
#define _IFLAG_4XTLB (_IFLAG_405_SPEC | _IFLAG_440_SPEC)
#define MMU_STATE_MASK_CACHEABLE 0x00000018
#define M85XX_L2CEWAR_ADDR_MSK 0xFFFFFF00
#define WDB_TASK_OPTIONS VX_UNBREAKABLE | VX_FP_TASK
#define WDB_COMM_ULIP 3
#define W_OK 2
#define INCLUDE_APPL_LOG_UTIL 
#define SIMSPARCSOLARIS _VX_SIMSPARCSOLARIS
#define _SIZE_T_ 
#define FREQ_33_MHZ 33000000
#define __size_t 
#define RLIMIT_RSS 5
#define BP_ACTIONS_ALL -1
#define VXB_BYTE_ORDER_CONVERT_64(flags,data,mask) { if ((flags & VXBAF_ENDIAN_MASK) != mask) { VXBAF_BYTE_SWAP_64(data); flags &= ~(VXBAF_ENDIAN_MASK); flags |= mask; flags ^= (VXBAF_CONVERT_BYTE_ORDER | VXBAF_CONVERT_SHORT_ORDER | VXBAF_CONVERT_LONG_ORDER); } }
#define JAVA_C_SYM_PREFIX ""
#define EPIC_SMSG_INT1_DES_REG (EPIC_CCSROFF + 0x11c30)
#define IPCOM_USE_ETHERNET 
#define EPIC_GT_B_VEC_REG(irq) (EPIC_TM_B0_VEC_REG + ((irq) * EPIC_GT_VEC_REG_INTERVAL))
#define PCI_OUTBOUND_BASE_ADRS_REG2(base) CVPUINT32(base, 0x8c48)
#define M85XXRIO_RIWAR_IO_TYPE_R 4
#define _WCHAR_T_H 
#define M85XXRIO_RIWAR_IO_TYPE_W 4
#define EPROTO 76
#define EPIC_MIVPR_INTR_MSK EPIC_BIT(31)
#define EPIC_IPI_DPATCH1_REG0 (EPIC_CCSROFF + 0x21040)
#define ENODEV 19
#define _WRS_INLINE_vxCas 
#define IPCOM_NETIF_IPCOM 1
#define EPIC_VEC_IPI_IRQ0 (255 - EPIC_MAX_IPI_IRQS)
#define _IFIELD_SPR(x) (((0x001f0000 & x) >> 16) | ((0x0000f800 & x) >> 6))
#define __INCvxdbgPpcLibPh 
#define M_msgQLib (65 << 16)
#define TASK_ID_VERIFY(tid) ( (objVerify (&((WIND_TCB *)(tid))->objCore, taskClassId)) )
#define _ARCH_LDBL_MIN_10_EXP (-307)
#define _IFIELD_RS(x) ((0x03e00000 & x) >> 21)
#define USER_RESERVED_MEM 0x000000
#define INT_MAX __INT_MAX__
#define PPC750 _VX_PPC750
#define IPCOM_PROC_PRIO_1 254
#define IPCOM_PROC_PRIO_3 80
#define IPCOM_PROC_PRIO_6 30
#define IPCOM_PROC_PRIO_7 20
#define VM_TEXT_PAGE_PROTECT(addr,protect) VM_TEXT_PROTECT(addr, protect)
#define FSTAT_REG 0100000
#define _WRS_ALIGN_CHECK(ptr,type) (((int)(ptr) & ( _WRS_ALIGNOF(type) - 1)) == 0 ? TRUE : FALSE)
#define CPU32 _VX_CPU32
#define _PPC_MAS0_ESEL_MASK 0x03ff0000
#define __INCmsgQLibCommonh 
#define PHY_10BASE_T 0x00
#define OBJ_IS_DELETE_ON_LAST_CLOSE(objId) ( (((OBJ_CORE *)(objId))->handle.attributes & WIND_OBJ_DELETE_ON_LAST_CLOSE) != 0 )
#define INT_RESTRICT() ( intContext() ? errno = S_intLib_NOT_ISR_CALLABLE, ERROR : OK )
#define _WRS_OSM_INIT 
#define CACHE_CMD_ENABLE 0x02000000
#define INCLUDE_TIMER_STUB 
#define EPIC_MAX_EXT_IRQS 12
#define TRG_CLASS_1_ON 0x10000001
#define I2C_IOCTL_WR 0
#define _SYS_CDEFS_H_ 
#define TLB0CFG 688
#define DLL_FIRST(pList) ( (((DL_LIST *)(pList))->head) )
#define SIO_MCTRL_BITS_CLR 0x100E
#define M85XXRIO_DICAR(base) (CAST(VUINT32 *)(((char*)base) + 0x0004 ))
#define MII_SR_AUTO_SEL 0x0008
#define FRAMEBASESZ 16
#define M_qLib (59 << 16)
#define VXDBG_EVT_MAX_NUM 4
#define _VX_FUNCPTR_DEFINED 
#define __FLT_HAS_QUIET_NAN__ 1
#define S_mmuLib_MARKED_ISR_CALLABLE (M_mmuLib | 13)
#define __INCobsolete_typesh 
#define EVT_CTX_0_BH(evtId) eventPointSwHandle (evtId, NULL, 0)
#define WV_EVT_PROTO_REV_6_3_FCS 2
#define Q_ADVANCE(pQHead) (*(((Q_HEAD *)(pQHead))->pQClass->advanceRtn)) (((Q_HEAD *)(pQHead)))
#define EPIC_TSEC1ERR_INT_NUM 18
#define M_sdLib (190 << 16)
#define SYM_IS_DATA(symType) ((symType) & SYM_DATA)
#define _VX_ARMARCH5_T 1122
#define BREAK_ESF ESFPPC
#define EPIC_VEC_HAS_NO_IDR 26
#define _PC_SYNC_IO 19
#define SIO_MODEM_RTS 0x02
#define MMU_STATE_SUP_R (_MMU_SR)
#define M85XXRIO_ROWAR_RDTYPE_NREAD 0x4
#define __FLT_HAS_INFINITY__ 1
#define M85XXRIO_IDSR(base) (CAST(VUINT32 *)(((char*)base) + 0x13464 ))
#define FRSYNC _FRSYNC
#define S_miiLib_PHY_AN_FAIL (M_miiLib | 4)
#define PCIEX_OUTBOUND_ATTR_REG0(base) CVPUINT32(base, 0xac10)
#define PCIEX_OUTBOUND_ATTR_REG1(base) CVPUINT32(base, 0xac30)
#define PCIEX_OUTBOUND_ATTR_REG3(base) CVPUINT32(base, 0xac70)
#define PCIEX_OUTBOUND_ATTR_REG4(base) CVPUINT32(base, 0xac90)
#define TASK_UNLOCK() TASK_CPU_UNLOCK()
#define VXBUS_VERSION_1 1
#define VXBUS_VERSION_2 2
#define VXBUS_VERSION_3 3
#define VXBUS_VERSION_4 VXB_VER_4_0_0
#define _BSD_PTRDIFF_T_ 
#define EVENT_CPU_ID CONTROL_EVENT(10)
#define _PPC_TCR_WRC_U 0x3000
#define MMU_ATTR_VALID_MSK 0x00000040
#define _MMU_TLB_SZ_64M 0x00000800
#define M_nfsDrv (45 << 16)
#define EXT_VEC_IRQ0 56
#define INCsysMpc85xxI2ch 
#define DDR_DATA_INIT 0x128
#define XTSEC_NAME "motetsec"
#define _WRS_ABSOLUTE(name,value) _WRS_ABSOLUTE_(name,value)
#define EPIC_IN_INT16_VEC_REG (EPIC_CCSROFF + 0x10400)
#define IS_CLASS3_EVENT(event) ((event >= MIN_CLASS3_ID) && (event <= MAX_CLASS3_ID))
#define NULL ((void *)0)
#define VM_MMU_TRANS_TBL_GET(vmCtxId) (vmCtxId->mmuTransTbl)
#define DEAR 61
#define SPRG4_R 260
#define MEM_ALLOC_ERROR_LOG_FLAG 0x20
#define EVENT_TASKSAFE CLASS3_EVENT(6)
#define E2BIG 7
#define EVENT_SYSCALL_BASE CLASS3_EVENT(65)
#define HID1_RUN_NORM 
#define FIOCONTIG64 49
#define VM_TRANSLATE(context,virtualAddr,pPhysicalAddr) ((vmLibInfo.pVmTranslateRtn == NULL) ? (ERROR) : ((*vmLibInfo.pVmTranslateRtn) (context, (VIRT_ADDR) virtualAddr, pPhysicalAddr)))
#define SYS_MODEL_E500 "Freescale E500 : Unknown system version"
#define _DBSR_UDE_U 0x4000
#define _VX_ARMARCH4_T 128
#define _VX_FD_FUNC_DEFINED 
#define Q_RESTORE(pQHead,pQNode,key) (*(((Q_HEAD *)(pQHead))->pQClass->restoreRtn)) (((Q_HEAD *)(pQHead)), ((Q_NODE *)(pQNode)), (key))
#define I2C_KNOWN_STATE(x) i2cCycleMpc85xxKnownState(x)
#define FIOTIMESET 44
#define IPCOM_DRV_PPP_BAUDRATE 38400
#define TBU_R 269
#define _PPC_TCR_DIE (_PPC_TCR_DIE_U << 16)
#define VX_COUNTING_SEMAPHORE VX_SEMAPHORE
#define VX_MAX_TASK_DELETE_RTNS 20
#define OBJ_EACH(list,pNode,routine,arg,objId) { DL_NODE * pNextNode; pNode = DLL_FIRST (&list); while (pNode != NULL) { objId = (OBJ_ID)((int)pNode - OFFSET (OBJ_CORE, classNode)); pNextNode = DLL_NEXT (pNode); if ((* routine) (objId, arg) == FALSE) break; pNode = pNextNode; } }
#define Q_PRI_LIST_FROM_TAIL qPriListFromTailClassId
#define M_iosLib (13 << 16)
#define VX_MAX_TASK_CREATE_RTNS 20
#define FIOFSTATFSGET 46
#define EPIC_WHO_AM_I0_REG (EPIC_CCSROFF + 0x20090)
#define _PC_REC_XFER_ALIGN 17
#define STATE_TO_CACHE_INDEX(state) ((MMU_ATTR_CACHE_GET(state)) >> MMU_ATTR_CACHE_INDEX_SHIFT)
#define EPIC_IN_INT16_DES_REG (EPIC_CCSROFF + 0x10410)
#define EPIC_IRQSR0_MSG_INT_MSK 0xf000
#define M85XX_L2CEWCR_LOCK_MSK 0x40000000
#define IPCOM_SOCK_IPLITE 1
#define MPC85XX_I2C_CONTROLLER 0
#define _WRS_CONFIG_SHELL 1
#define EVT_OBJ_EVENT_2(evtId,ARG1,ARG2) do { if ( ACTION_IS_SET ) { EVT_OBJ_EVENT_2_T evt_obj_event_2; evt_obj_event_2.args [0] = (int)ARG1; evt_obj_event_2.args [1] = (int)ARG2; eventPointSwHandle(evtId, &evt_obj_event_2, sizeof evt_obj_event_2); } } while ((0))
#define EVT_OBJ_EVENT_3(evtId,ARG1,ARG2,ARG3) do { if ( ACTION_IS_SET ) { EVT_OBJ_EVENT_3_T evt_obj_event_3; evt_obj_event_3.args [0] = (int)ARG1; evt_obj_event_3.args [1] = (int)ARG2; evt_obj_event_3.args [2] = (int)ARG3; eventPointSwHandle(evtId, &evt_obj_event_3, sizeof evt_obj_event_3); } } while ((0))
#define PROT_INDEX_TO_STATE(index) (((UINT)(index) << MMU_ATTR_PROT_INDEX_SHIFT) | MMU_ATTR_PROT_SUP_READ)
#define _VX_ARM 120
#define M_ospfLib (111 << 16)
#define EVENTS_SYSFLAGS_UNUSED 0xfc
#define MEM_BLOCK_ERROR_SUSPEND_FLAG 0x100
#define VX_TASK_INSTANTIATE(name,prio,options,stackSz,entryPt,arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10) (((VX_TASK_INITIALIZE(name,prio,options,stackSz,entryPt,arg1,arg2,arg3, arg4,arg5,arg6,arg7,arg8,arg9,arg10) == (int) NULL) || (taskActivate ((int)&name ##Tcb) != OK)) ? (ERROR) : ((int) &name ##Tcb))
#define EVENT_INT_ENT(k) ((k) + MIN_INT_ID)
#define _IFIELD_FRB(x) ((0x0000f800 & x) >> 11)
#define _IFIELD_FRC(x) ((0x000007c0 & x) >> 6)
#define _IFIELD_FRD(x) ((0x03e00000 & x) >> 21)
#define __XSTRING(x) __STRING(x)
#define _IFIELD_FRS(x) ((0x03e00000 & x) >> 21)
#define TRG_CONTROL_INDEX 6
#define RIO_CAR_SWITCH_PORT 0x14
#define NOT_PAGE_ALIGNED(addr) (((UINT)(addr)) & ((UINT)vmPageSize - 1))
#define ENOTDIR 20
#define LBC_SDRAM_LOCAL_ADRS LOCAL_MEM_LOCAL_ADRS2
#define DEBUG_KWRITE_USR_RTN NULL
#define TIMER_ABSTIME 0x1
#define M_mbufLib (98 << 16)
#define MMU_STATE_SUP_RW_USR_RWX (MMU_STATE_SUP_RW | _MMU_URWX)
#define EPIC_REG_NO_OFFSET_WRITE(regAdrs,value) *(volatile UINT32 *)(regAdrs) = value
#define WIND_TCB_XER (WIND_TCB_REGS + REG_SET_XER)
#define FIOCHMOD 63
#define __INCnetVersionh 
#define INST_SC_MASK 0xfc000002
#define USER_I_MMU_ENABLE 
#define DDR_IO_OVCR 0x90000000
#define ECONNRESET 54
#define _MMU_TLB_SZ_1G 0x00000a00
#define _MMU_TLB_SZ_1M 0x00000500
#define VXB_BUSID_USB_HOST_OHCI 12
#define VXB_VER_PATCH(x) ((x)&0x0ff)
#define VX_WRITE 1
#define INCLUDE_NETWORK 
#define _WRS_INLINE_ffsMsb 
#define PENTIUM _VX_PENTIUM
#define END_OF_TABLE 0
#define EVENT_SEMBCREATE CLASS3_EVENT(8)
#define M_cdromFsLib (116 << 16)
#define ENXIO 6
#define __INCb_dev_th 
#define PPC85XX_ERRATA_CPU29 1
#define M_errnoLib (49 << 16)
#define CLOCK_MONOTONIC 0x1
#define _WRS_SDA_BSS __attribute__ ((__section__ (".sbss")))
#define __INCobjLibh 
#define SYS_CLK_RATE 60
#define L2SIZ_0KB 0
#define IPCOM_VXWORKS_DRV_NULLPOOL 
#define _VX_PENTIUM2 84
#define EVT_OBJ_SIG_0(evtId) EVT_OBJ_SIG_N(evtId, 0, 0, 0, 0, 0, 0)
#define EVT_OBJ_SIG_1(evtId,ARG1) do { if (ACTION_IS_SET) { EVT_OBJ_SIG_1_T evt_obj_sig_1; evt_obj_sig_1.args [0] = (int)ARG1; eventPointSwHandle (evtId, &evt_obj_sig_1, sizeof evt_obj_sig_1); } } while ((0))
#define EVT_OBJ_SIG_2(evtId,ARG1,ARG2) do { if (ACTION_IS_SET) { EVT_OBJ_SIG_2_T evt_obj_sig_2; evt_obj_sig_2.args [0] = (int)ARG1; evt_obj_sig_2.args [1] = (int)ARG2; eventPointSwHandle (evtId, &evt_obj_sig_2, sizeof evt_obj_sig_2); } } while ((0))
#define EVT_OBJ_SIG_3(evtId,ARG1,ARG2,ARG3) do { if (ACTION_IS_SET) { EVT_OBJ_SIG_3_T evt_obj_sig_3; evt_obj_sig_3.args [0] = (int)ARG1; evt_obj_sig_3.args [1] = (int)ARG2; evt_obj_sig_3.args [2] = (int)ARG3; eventPointSwHandle (evtId, &evt_obj_sig_3, sizeof evt_obj_sig_3); } } while ((0))
#define EVT_OBJ_SIG_4(evtId,ARG1,ARG2,ARG3,ARG4) do { if (ACTION_IS_SET) { EVT_OBJ_SIG_4_T evt_obj_sig_4; evt_obj_sig_4.args [0] = (int)ARG1; evt_obj_sig_4.args [1] = (int)ARG2; evt_obj_sig_4.args [2] = (int)ARG3; evt_obj_sig_4.args [3] = (int)ARG4; eventPointSwHandle (evtId, &evt_obj_sig_4, sizeof evt_obj_sig_4); } } while ((0))
#define MAX_CLASS3_ID 19999
#define SIO_ERROR_CONNECT 4
#define TOOL_HDR_STRINGIFY(x) #x
#define VXBAF_CONVERT_OTHER 0x00000400
#define MII_STAT_FAIL 0x20
#define _VX_PENTIUM4 86
#define MII_PHY_NO_ABLE 0x40
#define EPIC_PRIORITY_DEFAULT 3
#define S_spinLockLib_LOCK_TIMEOUT (M_spinLockLib | 5)
#define _WRS_CONFIG_COMPONENT_IPFREESCALE_FLAG 1
#define FSYNC _FSYNC
#define EPIC_TSEC4TX_INT_VEC (EPIC_TSEC4TX_INT_NUM + EPIC_VEC_IN_IRQ0)
#define _WRS_KERNEL_LOCK_OFFSET_cpuIndex (0x00 + _WRS_KERNEL_LOCK_ALIGN_tkt_ctr)
#define _PPC_USE_SDA 
#define _MMU_TLB_SZ_4M 0x00000600
#define _PPC_TEXT_SEG_ALIGN 4
#define EPIC_MSIVPR_VECTOR(vec) ((vec) & EPIC_MSIVPR_VECTOR_MSK)
#define L_XTND SEEK_END
#define EVENT_RTPTASKKILL CLASS3_EVENT(87)
#define WDB_GOPHER_TAPE_LEN 1400
#define WV_ACTION_IS_SET ( (evtAction&0xff00) == 0x0100)
#define L1CFG0 515
#define L1CFG1 516
#define INCLUDE_NET_DRV 
#define __INClogLibh 
#define __INCkernelLockLibPh 
#define VM_STATE_MASK_BUFFERABLE (MMU_ATTR_CACHE_MSK | MMU_ATTR_SPL_MSK)
#define LOCAL_MEM_SIZE 0x10000000
#define _FUNCPTR_DEFINED 
#define FAPPEND _FAPPEND
#define IPCOM_PROC_PRIO_2 90
#define __INCvxCpuLibh 
#define ARCH_HEADER(file) ARCH_HDR(_VX_ARCH_DIR,file)
#define IS_INT_ENT_EVENT(event) ((event >= MIN_INT_ID) && (event <= MAX_INT_ID))
#define MMU_ATTR_SUP_IO_RO (MMU_ATTR_SUP_RO | MMU_ATTR_CACHE_IO)
#define _DEFINED_mode_t 
#define MII_HDX_STR "half duplex"
#define _WRS_E500_FIXED_POINT_SUPPORT 1
#define DEFAULT_SYSCLKFREQ FREQ_400_MHZ
#define EPIC_MSIVPR_PRIORITY(p) (((p) << 16) & EPIC_MSIVPR_PRIORITY_MSK)
#define PHY_AN_ENABLE 0x05
#define MII_MASSLA_CTRL_CONFIG_VAL 0x800
#define _DBCR0_RET 0x00008000
#define IPCOM_PROC_PRIO_4 50
#define PCI_OUTBOUND_TRANS_EXT_ADRS_REG2(base) CVPUINT32(base, 0x8c44)
#define _IFIELD_SR(x) ((0x000f0000 & x) >> 16)
#define __INCb_off_th 
#define EPIC_SR_OUT_MU1_INT_NUM 37
#define __BEGIN_DECLS 
#define VM_STATE_CACHEABLE_NOT MMU_ATTR_CACHE_OFF
#define IPCOM_PROC_PRIO_5 40
#define __LDBL_MANT_DIG__ 53
#define IPCOM_CONFIG_H 
#define PORDEVSR_PCIX_MODE 0
#define CACHE_USER_IS_WRITE_COHERENT() CACHE_DRV_IS_WRITE_COHERENT (&cacheUserFuncs)
#define Q_FIFO qFifoClassId
#define _INC_VXBUS_H 
#define M_tapeFsLib (103 << 16)
#define ECM_OFFSET 0x1000
#define EPIC_SR_OUT_MU2_INT_VEC (EPIC_SR_OUT_MU2_INT_NUM + EPIC_VEC_IN_IRQ0)
#define __SRD 0x0004
#define EVENT_OBJ_WINDROTATE CLASS2_EVENT(46)
#define M85XXRIO_ODDATR(base) (CAST(VUINT32 *)(((char*)base) + 0x1341C))
#define _FPOS_T 
#define EPIC_TM_A0_VEC_REG (EPIC_CCSROFF + 0x01120)
#define _TOOL_HEADER(file) _TOOL_HDR(TOOL_FAMILY,file)
#define EPIC_IN_DEST_REG_VECREGOFF 0x10
#define MII_SR_EXT_CAP 0x0001
#define EVENT_KILL CLASS3_EVENT(27)
#define __INCcachePpcLibh 
#define _WRS_CONFIG_COMPONENT_IPDHCPR 1
#define _WRS_CONFIG_COMPONENT_IPDHCPS 1
#define RLIMIT_NOFILE 8
#define _PPC_ESF_DAR (_PPC_ESF_ERRNO + SIZ_UINT32)
#define MII_SR_SPEED_SEL_MASK 0xf800
#define EPIC_DMA3_INT_NUM 7
#define OBJ_UNRESOLVE(pObj) ((OBJ_ID)(pObj))
#define _IFORM_D_2 4
#define _IFORM_D_3 5
#define _IFORM_D_4 6
#define _IFORM_D_5 7
#define _IFORM_D_6 8
#define _IFORM_D_7 9
#define _IFORM_D_9 56
#define EVENT_ISR_CREATE CLASS3_EVENT(62)
#define EPIC_MAX_ALL_IRQS 255
#define PGCCSR_HOST 0x80000000
#define _PPC_HID0_SLEEP 0x00200000
#define RIO_WORKING 5
#define PCI2_CFG_ADR_REG (CCSBAR + 0x9000)
#define SEM_Q_MASK 0x03
#define FILENAME_MAX _PARM_FILENAME_MAX
#define VME_AM_IS_STD(addr) ((addr & 0xf0) == 0x30)
#define WIND_TCB_T3 WIND_TCB_R17
#define FS_COMMIT_POLICY_PERIODIC 3
#define LSB(x) ((x) & 0xff)
#define WIND_TCB_T4 WIND_TCB_R18
#define EPIC_SMSG_INT3_DES_REG (EPIC_CCSROFF + 0x11c70)
#define INCLUDE_MBUF_UTIL1 
#define EPIC_EX_INT3_VEC_REG (EPIC_CCSROFF + 0x10060)
#define ERF_MAX_USR_TYPES 16
#define WIND_TCB_T6 WIND_TCB_R20
#define _WRS_FUNC_ALIAS(func,aliasToFunc,retType) retType aliasToFunc () __attribute__ ((alias (#func)));
#define MII_HDX_LEN sizeof (MII_HDX_STR)
#define _PPC_ESF_VEC_OFF_H (_PPC_ESF_VEC_OFF + SIZ_UINT16)
#define M_setLib (125 << 16)
#define FALSE (0)
#define EVT_OBJ_SAL_STR_2(EVTID,NAME,FD) do { if (ACTION_IS_SET) { EVT_OBJ_SAL_STR_2_T evt_obj_sal_str_2; evt_obj_sal_str_2.args [0] = (int)FD; evt_obj_sal_str_2.length = strlen (name); evt_obj_sal_str_2.pData = name; eventPointSwHandle (EVTID, &evt_obj_sal_str_2, sizeof(evt_obj_sal_str_2)); } } while ((0))
#define PCI_CFG_FORCE 0
#define _IFORM_VXR_1 76
#define M_edrLib (138 << 16)
#define SEMM_NO_OWNER NULL
#define M85XX_L2SRBAREA0(x) (CAST(VUINT32 *)((x + 0x20104)))
#define EPIC_INV_INTER_SOURCE 22
#define _PPC_L1CSR_LO 0x00000200
#define EPIC_IIVPR_INTR_POLARITY EPIC_BIT(23)
#define VXB_BUSID_PCI 3
#define __INCdsmLibh 
#define EPIC_CISR0_MSG_INT(n) (EPIC_BIT(15-(n)) & EPIC_CISR0_MSG_INT_MSK)
#define VME_AM_STD_SUP_ASCENDING 0x3f
#define EVENT_OBJ_MSGSSEND CLASS2_EVENT(45)
#define PCI2_OUTBOUND_TRANS_EXT_ADRS_REG3(base) CVPUINT32(base, 0x9c64)
#define ROUND_UP(x,align) (((int) (x) + (align - 1)) & ~(align - 1))
#define _PPC_L1CSR_UL_V(x) (x >> 10)
#define __volatile volatile
#define IS_KERNEL_TASK(tid) ( (((tid) == 0 ? (WIND_TCB *)taskIdCurrent:(WIND_TCB *)(tid))->rtpId == kernelId) )
#define SLL_PUT_AT_HEAD(list,node) { if ((((SL_NODE *)(node))->next = ((SL_LIST *)(list))->head) == NULL) { ((SL_LIST *)(list))->head = ((SL_NODE *)(node)); ((SL_LIST *)(list))->tail = ((SL_NODE *)(node)); } else ((SL_LIST *)(list))->head = (node); }
#define S_mmuLib_LOCK_NO_MORE_TLB_RESOURCES (M_mmuLib | 9)
#define INCLUDE_NET_HOST_SETUP 
#define WRITE _VX_WRITE
#define _CLOCK_T 
#define EVENTS_RETURN_ALL 0x02
#define PCI2_OUTBOUND_TRANS_EXT_ADRS_REG4(base) CVPUINT32(base, 0x9c84)
#define MCSRR0 570
#define vxAtomicXor_inline vxAtomicXor
#define __CONCAT(x,y) __CONCAT1(x,y)
#define WRS_ASM(x) _WRS_ASM(x)
#define _PPC_MSR_MMU_RI_FP_EXTRACT(src,dst) lis dst, _PPC_MSR_SPE_U ; ori dst, dst, _PPC_MSR_IS | _PPC_MSR_DS ; and dst, dst, src
#define _EXTENSION_WRS 1
#define ETIME 79
#define MC68020 _VX_MC68020
#define VM_STATE_MASK_CACHEABLE MMU_ATTR_CACHE_MSK
#define MII_PHY_ISO 0x0400
#define __FLT_DIG__ 6
#define EPIC_GCR_MODE_EPF (EPIC_BIT(29) | EPIC_BIT(30))
#define _DBSR_MRR 0x30000000
#define VXB_BUSID_I2C 20
#define S_msgQLib_INVALID_MSG_LENGTH (M_msgQLib | 1)
#define VM_CONTEXT_MASK(context,startAddr,endAddr,options) ((vmLibInfo.pVmCtxMaskRtn == NULL) ? (ERROR) : ((*vmLibInfo.pVmCtxMaskRtn) (context, startAddr, endAddr, options)))
#define atomic32Get_inline atomic32Get
#define S_spinLockLib_NOT_SPIN_LOCK_CALLABLE (M_spinLockLib | 1)
#define TASK_SAFE() do { VX_CODE_BARRIER(); EVT_OBJ_2 (taskIdCurrent, taskClassId, EVENT_TASKSAFE, taskIdCurrent, taskIdCurrent->safeCnt); taskIdCurrent->safeCnt++; VX_CODE_BARRIER(); } while ((0))
#define SYM_IS_COMMON(symType) ((symType) & SYM_COMM)
#define EVENT_SEMRWCREATE CLASS3_EVENT(204)
#define M_dsmLib (7 << 16)
#define LOCAL static
#define VX_CLASS_LIST_UNLOCK(lock) semMGiveScalable (lock, CLASS_LIST_SEM_INLINE_OPTIONS)
#define __INT_MAX__ 2147483647
#define M85XXRIO_DIDCAR(base) (CAST(VUINT32 *)(((char*)base) + 0x0000 ))
#define _PPC_MMUCSR0_DL1MMU_FI_V(x) (x >> 3)
#define HWMEM_POOL_SIZE 50000
#define DDR_SDRAM_LOCAL_SIZE LOCAL_MEM_SIZE
#define MII_BP_NP 0x8000
#define VM_PAGE_LOCK(context,virtAddr,len,option) ((vmLibInfo.pVmPageLockRtn == NULL) ? (ERROR) : ((*vmLibInfo.pVmPageLockRtn) (context, virtAddr, len, option)))
#define EPIC_IN_INT29_VEC_REG (EPIC_CCSROFF + 0x105a0)
#define MII_MASSLA_CTRL_PORT_TYPE 0x400
#define VX_OBJ_ALIGN_SIZE 8
#define _FWRITE 0x0002
#define EPIC_EIVPR_PRIORITY_MSK (EPIC_BIT(19) | EPIC_BIT(18) | EPIC_BIT(17) | EPIC_BIT(16))
#define EPIC_IRQSR1_IN_INT(n) EPIC_BIT(31-(n))
#define F_RSETLKW 13
#define _PARM_UTS_NODENAME_MAX 64
#define FIOACCESS 60
#define atomic32Add_inline atomic32Add
#define DBCR0 308
#define DBCR1 309
#define EPIC_TM_A0_DES_REG (EPIC_CCSROFF + 0x01130)
#define EVENT_MSGSDELETE CLASS3_EVENT(42)
#define WV_CLASS_2_ON 0x10000003
#define __INCvxTypesh 
#define EPIC_IIDR_P1_INT EPIC_BIT(1)
#define EPIC_IN_INT6_VEC_REG (EPIC_CCSROFF + 0x102c0)
#define VXB_ACCESS_INT_ACKNOWLEDGE 0x00000011
#define M8260_DPPC_MASK 0x0C000000
#define WDB_TIPC_PORT_TYPE 70
#define SEM_OWNER(semId) (semId->semOwner)
#define INST_BCLRL 0x4c000021
#define S_vmLib_KERNEL_TEXT_NOT_ALIGNED (M_vmLib | 6)
#define VXB_HANDLE_ORDERED 24
#define EIO 5
#define WIND_OBJ_DEALLOC_MEM 0x02
#define _PPC_ESR_ST_U 0x0080
#define CLOCK_PROCESS_CPUTIME_ID 0x2
#define MMU_STATE_SUP_R_USR_RWX (MMU_STATE_SUP_R | _MMU_URWX)
#define PCI_OUTBOUND_TRANS_ADRS_REG0(base) CVPUINT32(base, 0x8c00)
#define SYSFLG_QUICK_AUTOBOOT 0x08
#define ENETUNREACH 51
#define EXDEV 18
#define FOPEN _FOPEN
#define EPIC_IN_INT29_DES_REG (EPIC_CCSROFF + 0x105b0)
#define VXB_BUSID_PLB 1
#define EVT_CTX_BUF(evtId,ADDR,BUFFSIZE,BUFFADDR) do { if (ACTION_IS_SET) { EVT_CTX_BUF_T evt_ctx_buf; evt_ctx_buf.pData = BUFFADDR; evt_ctx_buf.length = BUFFSIZE; evt_ctx_buf.pc = (void *)ADDR; eventPointSwHandle (evtId, &evt_ctx_buf, sizeof evt_ctx_buf); } } while ((0))
#define __INCblkIoh 
#define RESERVED 0x4400
#define PCI_OUTBOUND_TRANS_ADRS_REG2(base) CVPUINT32(base, 0x8c40)
#define __strong_reference(sym,aliassym) extern __typeof (sym) aliassym __attribute__ ((__alias__ (#sym)));
#define HID1_RXFE 0x00020000
#define _WRS_CONFIG_DEFAULT_IPV4 1
#define STRONGARM _VX_STRONGARM
#define MPC85XX_I2C_CONTROL_REG_MASK 0xFD
#define _TYPE_VIRT_ADDR typedef _Vx_VIRT_ADDR VIRT_ADDR
#define _WRS_LIKELY(x) __builtin_expect(!!(x), 1)
#define _EXC_INFO_DEFAULT (_EXC_INFO_VEC|_EXC_INFO_CIA|_EXC_INFO_MSR| _EXC_INFO_CR)
#define VM_PAGE_SIZE_GET() ((vmLibInfo.pVmPageSizeGetRtn == NULL) ? (ERROR) : ((*vmLibInfo.pVmPageSizeGetRtn) ()))
#define MCORE200 _VX_MCORE200
#define M85XX_DDRDLLCR(base) (CAST(VUINT32 *)((base) + 0xE0E10))
#define BLOB_PADDED_LENGTH(dataLength,alignment) ((dataLength + (1<<alignment) - 1) & ~((1<<alignment)-1))
#define _TYPE_sig_atomic_t typedef unsigned int sig_atomic_t
#define WV_REV_ID_CURRENT WV_REV_ID_VXWORKS_6_7
#define M_strmLib (100 << 16)
#define VXB_ASSERT_NONNULL_V(pVar) 
#define M_fastUdpLib (137 << 16)
#define ROM_TEXT_ADRS 0xFFF00100
#define EPIC_GT_A_VEC_REG(irq) (EPIC_TM_A0_VEC_REG + ((irq) * EPIC_GT_VEC_REG_INTERVAL))
#define _ARCH_FLT_ROUNDS 1
#define M85XX_DEVDISR(base) (CAST(VUINT32 *)((base) + 0xE0070))
#define IPCOM_IPC_MAX_NAME 64
#define __WINT_TYPE__ short unsigned int
#define EDQUOT 83
#define _CPU_CACHE_ALIGN_SIZE 32
#define MII_SR_TX_FULL_DPX 0x4000
#define MMU_STATE_MASK_ENDIAN 0x00000001
#define EXC_VEC_HIGH 0x02fff
#define EPIC_IN_INT40_VEC_REG (EPIC_CCSROFF + 0x10700)
#define _WRS_CONFIG_COMPONENT_VXTESTV2_D 1
#define MC68000 _VX_MC68000
#define PCI_IN_ATTR_RTT_LM_WRITE_ALLOC_L2_CACHE_LINE 0x00006000
#define VXB_INTR_TRIG_ACTIVE_LOW (VXB_INTR_TRIG_NEG | VXB_INTR_TRIG_LEVEL)
#define M85XXRIO_ODMR(base) (CAST(VUINT32 *)(((char*)base) + 0x13400))
#define _ARCH_DBL_DIG 15
#define VXB_ACCESS_REG_READ16 0x00000003
#define SH32 _VX_SH32
#define EVENT_OBJ_MSGSDELETE CLASS2_EVENT(42)
#define MII_MF_ADDR_LEN 0x5
#define _TYPE_VX_VIRT_ADDR typedef _Vx_UINT32 _Vx_VIRT_ADDR
#define _VX_CHAR_FROM_CONST(x) (char *)(x)
#define FIOSQUEEZE 15
#define FIORFLUSH 26
#define HID0 1008
#define _WRS_ARCH_HAS_NEW_KERNEL_LOCK 
#define EVENT_RTPPAUSE CLASS3_EVENT(86)
#define EVT_CTX_RTPINFO(evtId,OPTIONS,OWNERID,RTPID,NAME) do { if (ACTION_IS_SET) { EVENT_RTPNAME_T evt_ctx_rtpinfo; evt_ctx_rtpinfo.options = OPTIONS; evt_ctx_rtpinfo.ownerId = OWNERID; evt_ctx_rtpinfo.rtpId = RTPID; evt_ctx_rtpinfo.pRtpName = NAME; eventPointSwHandle (evtId, &evt_ctx_rtpinfo, sizeof evt_ctx_rtpinfo); } } while ((0))
#define SEM_NO_SYSTEM_VIEWER 0x200
#define VXB_PARAM_END_OF_LIST 0x0000
#define ENOEXEC 8
#define __INCttyLibh 
#define DLL_INIT(list) { ((DL_LIST *)(list))->head = NULL; ((DL_LIST *)(list))->tail = NULL; }
#define VM_PAGE_BLOCK_SIZE_GET() ((vmLibInfo.pVmBlockSizeGetRtn == NULL) ? (ERROR) : ((*vmLibInfo.pVmBlockSizeGetRtn) ()))
#define L1CSR1 1011
#define EOF (-1)
#define DELAYTIMER_MAX _POSIX_DELAYTIMER_MAX
#define RIO_CHANNEL_UNRESERVED 0
#define EPIC_RES45_INT_VEC (EPIC_RES45_INT_NUM + EPIC_VEC_IN_IRQ0)
#define M85XX_L2CTL_L2DO_BIT 22
#define _DEFINED_BOOL 
#define _PPC_TCR_ARE_U 0x0040
#define SEM_M_Q_GET 0x1
#define EPIC_IN_INT40_DES_REG (EPIC_CCSROFF + 0x10710)
#define M85XXRIO_RIWTARn(base,n) (CAST(VUINT32 *)(((char*)base) + 0x10D60 + (0x80 - (n*0x20))))
#define VX_COPROC4_TASK 0x08000000
#define MC68030 _VX_MC68030
#define INST_HIGH_MASK 0xffff0000
#define VXBAF_NON_OPTIMIZED_FLAGS (VXBAF_PREVENT_OPTIMIZATION | VXBAF_BYTE_ORDER_KNOWN | VXBAF_NOT_FIRST_BUS)
#define EVT_CTX_DISP_NOTEST(ARG1,PRI,NORMAL_PRI) do { EVENT_WIND_EXIT_DISPATCH_T evt_ctx_disp; evt_ctx_disp.taskIdNew = ARG1; evt_ctx_disp.priority = PRI; eventPointSwHandle ( (NORMAL_PRI > PRI ? EVENT_WIND_EXIT_DISPATCH_PI : EVENT_WIND_EXIT_DISPATCH), &evt_ctx_disp, sizeof evt_ctx_disp); } while ((0))
#define S_msgQLib_ILLEGAL_OPTIONS (M_msgQLib | 4)
#define VXB_MODE "mode"
#define M85XX_L2CTL_L2SLC_BIT 12
#define EPIC_SMSG_INT3_VEC_REG (EPIC_CCSROFF + 0x11c60)
#define WDB_REGS_SIZE 512
#define CACHE_CMD_LOAD_LOCK 0x06000000
#define __INCvxAtomicLibh 
#define MC68040 _VX_MC68040
#define TASK_QNODE_TO_PSCHEDINFO(node) ( taskSchedInfoGet(node) )
#define __LDBL_MAX_10_EXP__ 308
#define S_vxdbgLib_HOOK_ALREADY_EXISTS VXDBG_ERROR_TO_ERRNO(VXDBG_ERR_HOOK_ALREADY_EXISTS)
#define FIOFCNTL 62
#define VX_SEMAPHORE_SIZE 104
#define PCI1_DEV_ID 0x826010E3
#define __DBL_EPSILON__ 2.2204460492503131e-16
#define EVENT_BEGIN CONTROL_EVENT(0)
#define EPIC_DMA2_INT_NUM 6
#define EPIC_MSG_INT2_DES_REG (EPIC_CCSROFF + 0x11650)
#define SYM_LOCAL 0x40
#define _PPC_ESR_ST 0x00800000
#define NUM_RAWFS_FILES 5
#define EPIC_IN_INT21_VEC_REG (EPIC_CCSROFF + 0x104a0)
#define le16toh(x) bswap16((x))
#define _BSD_CLOCK_T_DEFINED_ 
#define M85XX_L2ERRADDR(x) (CAST(VUINT32 *)((x + 0x20E50)))
#define TRG_ACTION_SET { vxAtomicOr ((atomic_t*)&evtAction, 0x0001); }
#define _MMU_TLB_ATTR_E 0x00000001
#define _MMU_TLB_ATTR_G 0x00000002
#define _MMU_TLB_ATTR_I 0x00000008
#define _MMU_TLB_ATTR_M 0x00000004
#define MEDR_EXTENDED_ENABLE FALSE
#define _MMU_TLB_ATTR_W 0x00000010
#define VM_PAGE_UNLOCK(context,virtAddr) ((vmLibInfo.pVmPageUnlockRtn == NULL) ? (ERROR) : ((*vmLibInfo.pVmPageUnlockRtn) (context, virtAddr)))
#define ESR 62
#define SLL_FIRST(pList) ( (((SL_LIST *)pList)->head) )
#define M_dhcpsLib (112 << 16)
#define TOOL_FAMILY gnu
#define FIOCOMMITPOLICYSETFS 67
#define FREAD _FREAD
#define BSP_SERIAL_CHAN_GET bspSerialChanGet
#define ESRCH 3
#define EVENT_OBJ_MSGCSEND CLASS2_EVENT(38)
#define CACHE_USER_INVALIDATE(adrs,bytes) CACHE_DRV_INVALIDATE (&cacheUserFuncs, (adrs), (bytes))
#define EPIC_IRQSR0_MSG_INT(n) (EPIC_BIT(15-(n)) & EPIC_IRQSR0_MSG_INT_MSK)
#define _WRS_CONFIG_COMPONENT_WRLOAD 1
#define MII_CR_POWER_DOWN 0x0800
#define __wchar_t__ 
#define BOOT_NO_AUTOBOOT 0x01
#define SIO_MODEM_DSR 0x20
#define IPCOM_ENV_NATIVE 3
#define SHELL_MAX_SESSIONS -1
#define ERANGE 38
#define SEEK_END 2
#define M_nfsLib (46 << 16)
#define EPIC_SPUR_VEC_REG (EPIC_CCSROFF + 0x010e0)
#define TASK_KERNEL_EXEC_STACK_OVERFLOW_SIZE 4096
#define TRG_ACTION_IS_SET ( (evtAction&0x00ff) == 0x0001)
#define EVEC_TO_ENUM(excVec) ((int)(excVec))
#define EPIC_IN_INT21_DES_REG (EPIC_CCSROFF + 0x104b0)
#define _IFORM_XO_1 47
#define _PPC_ESF_PG_TBL_PTR (_PPC_ESF_XER + 4)
#define EPIC_MIVPR_VECTOR(vec) ((vec) & EPIC_MIVPR_VECTOR_MSK)
#define S_vmLib_NOALIAS_SUPPORT_NOT_INCLUDED (M_vmLib | 9)
#define SIO_MODEM_DTR 0x01
#define __INCtimerDevh 
#define ENOLCK 34
#define vxAtomicInc_inline vxAtomicInc
#define ENFILE 23
#define PPC_MAX_ARG_REGS 8
#define BOOT_USB_OPEN_ATTEMPTS 10
#define INCLUDE_SEM_LIB 
#define EPIC_OPT_CRIT_OFF (0x00000000 >> 16)
#define taskExit(exitCode) exit((exitCode))
#define EPIC_SMSG_INT5_DES_REG (EPIC_CCSROFF + 0x11cb0)
#define FSTAT_DIR 0040000
#define EPIC_RES11_INT_NUM 11
#define M85XXRIO_RIWAR_LOCAL_R_NO_SNOOP 4
#define SPIN_LOCK_ISR_DECL(x,flag) spinlockIsr_t x = { {-1, 0, 0, NULL, {{0}}}, flag}
#define _STDDEF_H_ 
#define EPIC_EX_INT2_VEC_REG (EPIC_CCSROFF + 0x10040)
#define Q_ATTRIBUTE_GET(qHead) (((Q_HEAD *)(qHead))->qPriv2)
#define WDB_ULIP_DEV "/dev/ulip14"
#define _VX_MIPSI64R2 48
#define VXB_EPICINTCTLR_DISABLE_INTS _VXB_EPICINTCTLR_DISABLE_INTS
#define be64toh(x) ((UINT64)(x))
#define PCI_OUTBOUND_TRANS_ADRS_REG3(base) CVPUINT32(base, 0x8c60)
#define ENOSYS 71
#define _WRS_CONFIG_OBJECT_MANAGEMENT 1
#define IVOR1 401
#define IVOR2 402
#define IVOR3 403
#define IVOR4 404
#define IVOR5 405
#define IVOR6 406
#define IVOR7 407
#define IVOR8 408
#define IVOR9 409
#define _PPC_MSR_BIT_CE 14
#define M85XX_L2CTL_L2IO_MSK 0x00200000
#define M85XXRIO_ROWAR_RDTYPE_ATOMIC_SET 0xe
#define M_rarpLib (127 << 16)
#define MMU_I_ADDR_TRANS 0
#define PCI_REQUEST_LEVEL 0x3
#define _PARM_UTS_RELEASE_MAX 64
#define _PPC_L1CFG_CARCH_V(x) (x >> 30)
#define _MMU_TLB_SZ_16K 0x00000200
#define _MMU_TLB_SZ_16M 0x00000700
#define SYM_ABS 0x2
#define MII_AN_FAIL 0x10
#define _WRS_CPU_INDEX_GET() 0
#define VXB_DEVID_DEVICE 0
#define _PARM_STACK_GROWS_UP 1
#define DDR_SDRAM_INTERVAL 0x124
#define MMU_STATE_WRITABLE_NOT 0x00000000
#define EPIC_MAX_SMSG_SHARED_IRQS 32
#define _PPC_MSR_BIT_DE 22
#define VXB_BUSID_USB_HOST_UHCI 13
#define _DBCR1_IAC2ER 0x03000000
#define _PPC_MSR_BIT_DS 27
#define M85XXRIO_ROWAR_RDTYPE_ATOMIC_DEC 0xd
#define M_alarmLib (153 << 16)
#define EVT_OBJ_STR_2(OBJ,CLASS,evtId,ARG1,ARG2,LENGTH,STRING) do { if (ACTION_IS_SET) { EVT_OBJ_STR_ARGS_2_T evt_obj_str_args_2; evt_obj_str_args_2.evt_obj_str.objId = OBJ; evt_obj_str_args_2.evt_obj_str.classId = CLASS; evt_obj_str_args_2.evt_obj_str.pData = STRING; evt_obj_str_args_2.evt_obj_str.length = LENGTH; evt_obj_str_args_2.args [0] = (int)ARG1; evt_obj_str_args_2.args [1] = (int)ARG2; eventPointSwHandle (evtId, &evt_obj_str_args_2, sizeof evt_obj_str_args_2); } } while ((0))
#define EVENT_SALCALL_SENDREQ CLASS3_EVENT(97)
#define DEFAULT_BEATS_TO_WAIT 5
#define CACHE_FLUSH_LOAD_INIT (CACHE_FLUSH_LOAD_ADRS + _CPU_CACHE_ALIGN_SIZE)
#define M85XXRIO_RxWAR_SIZE_16MB 25
#define _INCmot85xxPcih 
#define SHELL_STACK_SIZE (0x10000)
#define va_arg(v,l) __builtin_va_arg(v,l)
#define STORE_ABS_SYMBOLS FALSE
#define INCLUDE_JOB_TASK 
#define MMU_ATTR_SUP_IO (MMU_ATTR_SUP_RW | MMU_ATTR_CACHE_IO)
#define EPIC_CISR1_IN_INT(n) EPIC_BIT(31-(n))
#define SEM_MUT_OPTIONS_MASK (SEM_BIN_OPTIONS_MASK | SEM_DELETE_SAFE | SEM_INVERSION_SAFE)
#define WIND_TCB_PG_TBL_PTR (WIND_TCB_REGS + REG_SET_PG_TBL_PTR)
#define MIPSI32R2 _VX_MIPSI32R2
#define HUPCL 0x10
#define CACHE_DRV_INVALIDATE(pFuncs,adrs,bytes) (((pFuncs)->invalidateRtn == NULL) ? OK : ((pFuncs)->invalidateRtn) (DATA_CACHE, (adrs), (bytes)))
#define USER_I_CACHE_ENABLE 
#define _ARCH_va_list typedef char *va_list
#define SIO_ERROR_DISCONNECT 5
#define INCLUDE_L2_CACHE 
#define Q_PRI_HEAP qPriHeapClassId
#define SYS_MODEL_UNKNOWN "Freescale Unknown processor"
#define MMU_STATE_MASK_MEM_COHERENCY 0x00000004
#define VX_FP_TASK VX_COPROC1_TASK
#define PPC32 _VX_PPC32
#define INCLUDE_IPNET 
#define MMU_RPN_SHIFT 12
#define VXB_INTR_PRIO_FORCE 0x8000
#define ENOTSUP 35
#define S_mmulib_LOCK_REQUIRED (M_mmuLib | 16)
#define _IFORM_X_3 13
#define PCI_MEM2LOCAL(x) (((UINT32)x - PCI_MEM_ADRS) + CPU_PCI_MEM_ADRS)
#define R_OK 4
#define BOOT_TARGET_ADDR_LEN 50
#define _EXC_INFO_CR 0x020
#define OK 0
#define RLIMIT_FSIZE 1
#define PPC555 _VX_PPC555
#define STACK_ADRS _romInit
#define _DBCR0_IAC1_U 0x0080
#define WIND_OBJ_INSTRUMENTED 0x04
#define CLOCKS_PER_SEC sysClkRateGet()
#define I80386 _VX_I80386
#define MIN_SYSCALL_ID 21000
#define EVT_OBJ_TASKSPAWN(evtId,TID,PRI,STACKSIZE,ENTRYPT,OPT) do { if ( ACTION_IS_SET ) { EVENT_TASKSPAWN_T evt_obj_taskspawn; evt_obj_taskspawn.taskId = (TASK_ID)TID; evt_obj_taskspawn.priority = PRI; evt_obj_taskspawn.stackSize = STACKSIZE; evt_obj_taskspawn.entryPoint = ENTRYPT; evt_obj_taskspawn.options = OPT; eventPointSwHandle (evtId, &evt_obj_taskspawn, sizeof evt_obj_taskspawn); } } while ((0))
#define _PPC_L1CFG_PA_MASK 0x00100000
#define _FNBIO 0x1000
#define VXB_ACCESS_INT_CONNECT 0x0000000c
#define _VX_AM29030 51
#define PCI2_OUTBOUND_TRANS_ADRS_REG0(base) CVPUINT32(base, 0x9c00)
#define _EXC_OFF_INTR 0x00500
#define PCI2_OUTBOUND_TRANS_ADRS_REG4(base) CVPUINT32(base, 0x9c80)
#define MII_MASSLA_CTRL_1000T_FD 0x200
#define M85XX_RAPIDIO_ROWS3R18n(base,n) (CAST(VUINT32 *)(((char*)base) + 0x10C1C + ((n)*0x20)))
#define CACHE_BURST_DISABLE 0x80
#define M_umsLib (160 << 16)
#define TCR 340
#define SPRG5_R 261
#define EPIC_TSEC3TX_INT_NUM 15
#define SPRG5_W 277
#define _PPC_MSR_BIT_IS 26
#define FOPEN_MAX _PARM_FOPEN_MAX
#define MII_TECH_100BASE_TX_FD 0x0100
#define MAS0 624
#define MAS1 625
#define MAS2 626
#define MAS3 627
#define MAS4 628
#define MAS6 630
#define VME_AM_USR_SHORT_IO 0x29
#define AM29035 _VX_AM29035
#define INCLUDE_TYLIB 
#define MEM_PART_DEFAULT_OPTIONS (MEM_ALLOC_ERROR_LOG_FLAG | MEM_ALLOC_ERROR_EDR_WARN_FLAG | MEM_BLOCK_ERROR_LOG_FLAG | MEM_BLOCK_ERROR_EDR_WARN_FLAG | MEM_BLOCK_ERROR_SUSPEND_FLAG | MEM_BLOCK_CHECK)
#define MII_MASSLA_CTRL_1000T_HD 0x100
#define MPC85XX_I2C_CONTROL_REG_BCST 0x01
#define M85XXRIO_RxWAR_EN 0x80000000
#define MMU_PAGE_UNLOCK (*(mmuLibFuncs.mmuPageUnlock))
#define MMU_STATE_VALID_NOT 0x00000000
#define M85XXRIO_IFQDPAR(base) (CAST(VUINT32 *)(((char*)base) + 0x0106C))
#define PCI_ERROR_DATA_HIGH_CAPTURE_REG 0x8e1c
#define S_memLib_NO_PARTITION_DESTROY (M_memLib | 4)
#define MMU_ASID_MAX 255
#define EPIC_INT_ACT_HIGH 1
#define WDB_MAX_RESTARTS 5
#define _IFORM_VX_6 69
#define EPIC_RES31_INT_NUM 31
#define INCLUDE_SIO_UTILS 
#define INCLUDE_AIM_MMU_MEM_POOL_CONFIG 
#define EPIC_GTVPR_PRIORITY(p) (((p) << 16) & EPIC_GTVPR_PRIORITY_MSK)
#define SH _VX_SH
#define SHELL_FIRST_CONFIG NULL
#define _GCC_SIZE_T 
#define _IFLAG_604_SPEC 0x0040
#define _FDSYNC 0x10000
#define EVENTS_SEND_ONCE 0x01
#define EVENT_WIND_EXIT_DISPATCH_PI CLASS1_EVENT(4)
#define __INCb_struct__Timespech 
#define DBG_HARDWARE_BP 0
#define MAC_ADRS_LEN 6
#define L_SET SEEK_SET
#define MMU_STATE_SUP_R_USR_RW (MMU_STATE_SUP_R | _MMU_UR | _MMU_UW)
#define MMU_STATE_SUP_R_USR_RX (MMU_STATE_SUP_R | _MMU_UR | _MMU_UX)
#define _DEFINED_ssize_t 
#define EPIC_IN_INT44_VEC_REG (EPIC_CCSROFF + 0x10780)
#define DATAKEYS_MAX _PARM_DATAKEYS_MAX
#define VXB_ACCESS_REG_READ32 0x00000004
#define RIO_DIRECTION_OUTBOUND 0
#define L2SIZ_256KB 1
#define __INTMAX_MAX__ 9223372036854775807LL
#define M_hostLib (50 << 16)
#define VXDBG_BP_FUNCS_ARE_INSTALLED() (_func_vxdbgFuncs[VXDBG_BP_DELETE] != NULL)
#define EVENT_SALRUN_READREQ CLASS3_EVENT(102)
#define __size_t__ 
#define MPC85XX_I2C_STATUS_REG_MAAS 0x40
#define _WRS_UNLIKELY(x) __builtin_expect(!!(x), 0)
#define PCIEX_OUTBOUND_BASE_ADRS_REG1(base) CVPUINT32(base, 0xac28)
#define PCIEX_OUTBOUND_BASE_ADRS_REG3(base) CVPUINT32(base, 0xac68)
#define PCIEX_OUTBOUND_BASE_ADRS_REG4(base) CVPUINT32(base, 0xac88)
#define INCLUDE_VXMEMPROBE_INIT 
#define __FLT_DENORM_MIN__ 1.40129846e-45F
#define _WRS_CONFIG_TTY_DEV 1
#define MMU_ATTR_SUP_RO (MMU_ATTR_PROT_SUP_READ)
#define VXB_HANDLE_SWAP(x) ((x) + 48)
#define MMU_ATTR_SUP_RW (MMU_ATTR_PROT_SUP_READ | MMU_ATTR_PROT_SUP_WRITE)
#define _PPC_TSR_WRS_U 0x3000
#define EPIC_RES41_INT_NUM 41
#define _PC_CHOWN_RESTRICTED 4
#define IPCOM_SHELL_MAX_PATH 256
#define EPIC_GTVPR_VECTOR(vec) ((vec) & EPIC_GTVPR_VECTOR_MSK)
#define M_classLib (66 << 16)
#define _PPC_SPEFSCR_FRMC_RND_NR 0x00000000
#define EPIC_IN_INT4_DES_REG (EPIC_CCSROFF + 0x10290)
#define _PPC_TSR_WIS_U 0x4000
#define EVT_STR_CLASS_0(CLASS,evtId,LENGTH,STRING) do { if (ACTION_IS_SET) { EVT_STR_CLASS_0_T evt_str_class_0; evt_str_class_0.length = LENGTH; evt_str_class_0.string = STRING; evt_str_class_0.classId = CLASS; eventPointSwHandle (evtId, &evt_str_class_0, sizeof evt_str_class_0); } } while ((0))
#define _DBSR_UDE 0x40000000
#define HRFS_DEFAULT_COMMIT_PERIOD 5000
#define vxAtomicDec_inline vxAtomicDec
#define EPIC_VEC_OPTION_INV 28
#define FS_COMMIT_POLICY_AUTO 1
#define OPT_REG_READ8 0x01
#define EVENT_WINDTICKUNDELAY CLASS2_EVENT(18)
#define S_selectLib_NO_SELECT_CONTEXT (M_selectLib | 2)
#define MMU_STATE_MASK_PROTECTION 0x00003f00
#define EVT_OBJ_SIG(evtId,nParam,arg1,arg2) EVT_OBJ_SIG_N(evtId, nParam, arg1, arg2, 0, 0, 0)
#define M85XXRIO_ROWS2R18_OFFSET(n) (0x10C18 + ((n)*0x20))
#define VX_ALTIVEC_TASK VX_COPROC2_TASK
#define EPIC_MIVPR_PRIORITY(p) (((p) << 16) & EPIC_MIVPR_PRIORITY_MSK)
#define INT_WE_MASK(src,des) rlwinm des, src, 0, _PPC_MSR_BIT_WE+1, _PPC_MSR_BIT_WE-1
#define _IFORM_XFX_2 43
#define EPFNOSUPPORT 46
#define __INCarchPpch 
#define ENOPROTOOPT 42
#define INCLUDE_BOOT_FILESYSTEMS 
#define MII_TECH_ASM_PAUSE 0x0800
#define FIORMDIR 32
#define MMU_STATE_SUP_R_USR_WX (MMU_STATE_SUP_R | _MMU_UW | _MMU_UX)
#define EPIC_EIVPR_POLARITY(p) ((p) << 23)
#define __INCvxCpuh 
#define __INCtoolMacrosh 
#define EPIC_EIVPR_INTR_MSK EPIC_BIT(31)
#define _WRS_SPE_SUPPORT 1
#define SPINLOCK_TAKE_RECOVERY -2
#define PCIEX_OUTBOUND_BASE_ADRS_REG0(base) CVPUINT32(base, 0xac08)
#define _PPC_L1CFG_LA_MASK 0x00200000
#define HID1_RUN_UNDEF 
#define SIMNT _VX_SIMNT
#define VXBAF_BYTE_ORDER_KNOWN 0x00000200
#define MII_SR_AUTO_NEG 0x0020
#define MEDR_POOL_SIZE 0x100000
#define _DBCR2_DAC1ER 0x30000000
#define MMU_TRANS_TBL_CREATE (*(mmuLibFuncs.mmuTransTblCreate))
#define VXB_ACCESS_VOLREG_READ 0x0000000b
#define SHM_DEV_NAME "/shm"
#define PHYS_64BIT_ADDR(h,l) (((PHYS_ADDR)(h) << 32) + (l))
#define MMU_STATE_SUP_RWX_USR_RWX (MMU_STATE_SUP_RWX | _MMU_URWX)
#define PCICMD_VAL 0x00000006
#define _IFLAG_601_SPEC 0x0010
#define VXBAF_BYTE_SWAP_16(data) ((data) = ((((data) & 0xFF) << 8) | (((data) >> 8) & 0xFF)))
#define MPC85XX_I2C_DATA_REG (0x00010)
#define __INCtaskDefsh 
#define EPIC_IN_INT12_VEC_REG (EPIC_CCSROFF + 0x10380)
#define INCLUDE_WDB_EVENTPOINTS 
#define EPIC_CTASK_PRI0_REG (EPIC_CCSROFF + 0x20080)
#define RIO_OP_SUPPORTED_SWRITE 0x00040000
#define INST_BCLR _OP(19, 16)
#define _DBCR0_IDM_U 0x4000
#define FIOREADDIR 37
#define CACHE_USER_IS_READ_COHERENT() CACHE_DRV_IS_READ_COHERENT (&cacheUserFuncs)
#define INCLUDE_IPNET_USE_SOCK_COMPAT 
#define AUX_CLK_RATE ((CCB_FREQ / 16) / (1 << FIT_DIVIDER_TAP_18))
#define EPIC_IN_INT34_VEC_REG (EPIC_CCSROFF + 0x10640)
#define _DBCR1_IAC2US 0x0c000000
#define M85XX_L2CTL_L2BLKSIZ_BIT 26
#define EPIC_EX_INT9_DES_REG (EPIC_CCSROFF + 0x10130)
#define M85XXRIO_RIWBAR_BADDR(adrs) (adrs >> 12)
#define INCLUDE_WATCHDOGS 
#define _WRS_KERNEL_LOCK_OFFSET_flags (0x08 + _WRS_KERNEL_LOCK_ALIGN_tkt_ctr)
#define INCLUDE_MUX_COMMON 
#define _PPC_SPEFSCR_FRMC_RND_ZERO 0x00000001
#define _PARM_EXIT_FAILURE 1
#define ENOBUFS 55
#define TRG_CLASS2_INDEX 1
#define INCLUDE_FORMATTED_OUT_BASIC 
#define M_sigLib (51 << 16)
#define __FLT_MIN_10_EXP__ (-37)
#define PCI_ATTR_WS_512K 0x00000012
#define VXDBG_MEM_WRITE(pSrc,pDest,size) VXDBG_MEM_WIDTH_WRITE(pSrc, pDest, size, 0)
#define S_symLib_INVALID_SYMTAB_ID (M_symLib | 12)
#define _DBSR_DAC1W_U 0x0004
#define _WRS_KERNEL 1
#define _IFORM_EVX_1 91
#define _IFORM_EVX_2 92
#define _IFORM_EVX_4 94
#define _IFORM_EVX_5 95
#define _IFORM_EVX_7 97
#define _IFORM_EVX_8 98
#define _IFORM_EVX_9 99
#define _T_SIZE_ 
#define __INTMAX_TYPE__ long long int
#define SEM_EVENTSEND_ERR_NOTIFY 0x10
#define VME_AM_IS_EXT(addr) ((addr & 0xf0) == 0x00)
#define _WRS_CONFIG_RTP 1
#define EFAULT 14
#define EVENT_RTPKILL CLASS3_EVENT(83)
#define EVENT_MSGQCREATE CLASS3_EVENT(20)
#define _DEFINED_ino_t 
#define INCLUDE_ENV_VARS 
#define BOOT_DISABLE_MMU_BEFORE_ENTRY TRUE
#define _ARCH_LDBL_MAX_EXP 1024
#define EVENT_TASKNAME CONTROL_EVENT(3)
#define M85XXRIO_PLASCSR(base) (CAST(VUINT32 *)(((char*)base) + 0x00148 ))
#define M85XXRIO_HBDIDLCSR(base) (CAST(VUINT32 *)(((char*)base) + 0x00068 ))
#define _PPC_MSR_BIT_WE 13
#define _WRS_CONFIG_COMPONENT_IPNET 1
#define EPIC_IN_INT34_DES_REG (EPIC_CCSROFF + 0x10650)
#define MMU_TRANS_TBL_UNION (*(mmuLibFuncs.mmuTransTblUnion))
#define M85XX_L2CEWCR_E_MSK 0x80000000
#define S_mmuLib_TLB_LOCKED_PAGE (M_mmuLib | 7)
#define EPIC_CRIT_SUMM_REG0 (EPIC_CCSROFF + 0x01330)
#define S_mmuLib_NOT_CONTIGUOUS_ADDR (M_mmuLib | 10)
#define MMU_ATTR_PROT_SUP_READ 0x00000001
#define EWOULDBLOCK 70
#define _IFIELD_VA(x) ((0x001f0000 & x) >> 16)
#define __INCvmLibh 
#define ENOMEM 12
#define RIO_WPCSR_BUSY 0x08000000
#define SPE_OFFSET(x) (4*x)
#define MMU_ATTR_PROT_SUP_TO_USR(attr) (((attr) & MMU_ATTR_PROT_SUP_MSK) << 3)
#define _IFIELD_VB(x) ((0x0000f800 & x) >> 11)
#define IPCOM_USE_HW_CHECKSUM 
#define IPCOM_USE_JOB_QUEUE 
#define LAWAR_SIZE_4MB 0x00000015
#define EPIC_SMSG_INT7_DES_REG (EPIC_CCSROFF + 0x11cf0)
#define WDB_SPAWN_STACK_SIZE 0x5000
#define WIND_OBJ_NAME_DYNAMIC 0x01
#define INCLUDE_IO_REMOVABLE 
#define MII_PHY_FLAGS_ARE_SET(setBits) (pPhyInfo->phyFlags & (setBits))
#define RIO_OP_SUPPORTED_PWRITE 0x20000000
#define MEMBER_SIZE(structure,member) (sizeof (((structure *) 0) -> member))
#define __GNUC_MINOR__ 1
#define PPC860 _VX_PPC860
#define SPIN_LOCK_RESTRICT() spinLockRestrict()
#define INT_CONTEXT() ( intContext() )
#define EPIC_EX_INT4_VEC_REG (EPIC_CCSROFF + 0x10080)
#define TSR 336
#define SIO_KYBD_LED_SCR 4
#define MMU_ATTR_VALID_NOT 0x00000000
#define SIO_KYBD_MODE_UNICODE 3
#define __INCmsgQLibPh 
#define INCLUDE_AIM_MMU_PT_PROTECTION 
#define INCLUDE_ANSI_STDIO 
#define WV_INSTRUMENTATION _WRS_CONFIG_SV_INSTRUMENTATION
#define vxAtomicOr_inline vxAtomicOr
#define EPIC_MIVPR_INTR_ACTIVE EPIC_BIT(30)
#define M85XXRIO_PEFCAR(base) (CAST(VUINT32 *)(((char*)base) + 0x0010))
#define RIO_CHANNEL_RESERVED (UINT32)-1
#define PCI2_OUTBOUND_ATTR_REG1(base) CVPUINT32(base, 0x9c30)
#define M85XX_RAPIDIO_ROWS2R18n(base,n) (CAST(VUINT32 *)(((char*)base) + 0x10C18 + ((n)*0x20)))
#define _IFORM_A_3 52
#define _IFLAG_VRC 0x0200
#define EVENT_ISR_INFO CONTROL_EVENT(9)
#define tsecVxbEnd1Num NELEMENTS(tsecVxbEnd1Resources)
#define EPIC_PCI1_INT_VEC (EPIC_PCI1_INT_NUM + EPIC_VEC_IN_IRQ0)
#define MAP _VX_MAP
#define FLASH_WIDTH 2
#define SIO_KYBD_LED_SET 0x1013
#define SPIN_LOCK_TASK_GIVE(x) (spinLockTaskGive (x) )
#define OBJ_TABLE_INDEX_GET(objHdl) (((objHdl) & OBJ_HANDLE_TABLE_MASK) >> 8)
#define MMU_ATTR_USR_TEXT_W (MMU_ATTR_USR_RWX | MMU_ATTR_SUP_TEXT_W)
#define __INCsemLibCommonh 
#define EPIC_IN_INT43_VEC_REG (EPIC_CCSROFF + 0x10760)
#define INCLUDE_WDB 
#define _WRS_CONSTRUCTOR(rtn,lvl) __attribute__((constructor(lvl))) void _STI__ ##lvl ##__ ##rtn (void)
#define INCLUDE_ANSI_TIME 
#define MEM_ROUND_UP(x) ROUND_UP(x, _ALLOC_ALIGN_SIZE)
#define MII_1000MBS 1000000000
#define EPIC_IN_INT15_DES_REG (EPIC_CCSROFF + 0x103f0)
#define MEM_BLOCK_ERROR_LOG_AND_SUSPEND 0x08
#define WDB_TASK_PRIORITY 3
#define M85XXRIO_RIWAR_LOCAL_W_ALLOC_L2 6
#define INET 1
#define PCIEX_OUTBOUND_BASE_ADRS_REG2(base) CVPUINT32(base, 0xac48)
#define VX_TASK_PRIORITY_MAX 255
#define PCI2_OUTBOUND_ATTR_REG4(base) CVPUINT32(base, 0x9c90)
#define PCI_CFG_AUTO 1
#define LNLSB(x) (((x) >> 8) & 0xff)
#define _TIMESPEC_DEFINED 
#define PCI_PREFETCHABLE 0x20000000
#define VME_AM_STD_USR_ASCENDING 0x3b
#define M85XX_L2CTL_L2I_MSK 0x40000000
#define _VX_STACK_DIR _ARCH_STACK_DIR
#define INCLUDE_DDR_SDRAM 
#define CORE_DUMP_RTP_ZLIB_COMPRESSION_LEVEL 9
#define EPIC_SMSG_INT0_VEC_REG (EPIC_CCSROFF + 0x11c00)
#define M85XX_L2CTL_L2INTDIS_BIT 19
#define DBCR2 310
#define S_vxdbgLib_NO_HW_REGS VXDBG_ERROR_TO_ERRNO(VXDBG_ERR_NO_HW_REGS)
#define CACHE_NO_WRITEALLOCATE 0x08
#define MII_CR_RESTART 0x0200
#define _PPC_ESR_PTR 0x02000000
#define V7 1
#define _WRS_CONFIG_ENABLE_TOOL2 1
#define INST_B _OP(18, 0)
#define _EXC_PROG_SRR1_TRAP 0x00020000
#define RIO_FEATURES_EXTADDR_MASK 0xe000
#define SYSFLG_SYS_MODE_DEBUG 0x400
#define AIM_MMU_INIT_PT_NUM 0x40
#define RIO_OP_SUPPORTED_ACLEAR 0x08000000
#define I2C_ERROR_CYCLE_ACKOUT 6
#define MPC85XX_I2C_STATUS_REG_MASK 0xFF
#define _DBCR0_DAC2R_U 0x0002
#define _PPC_L1CSR_PIE 0x00008000
#define PPCEC603 _VX_PPCEC603
#define _PPC_ESR_DLK_U 0x0020
#define LNMSB(x) (((x) >> 16) & 0xff)
#define ENOENT 2
#define SPY_TASKS_MAX 200
#define M_pspLib (163 << 16)
#define MC680X0 _VX_MC680X0
#define _IFLAG_AV_SPEC 0x0400
#define __INCexcPcLibh 
#define M85XX_LTEAR(base) (CAST(VUINT32 *)((base) + 0x50C0))
#define M85XXRIO_ROWBARn(base,n) (CAST(VUINT32 *)(((char*)base) + 0x10C08 + ((n)*0x20)))
#define reg_fp fpReg
#define VXBAF_OPERATION_MASK 0x0000FFFF
#define EXC_VEC_LOW 0x00000
#define FLASH1_ADRS_MASK 0xfc000000
#define EPIC_EIDR_CRIT_INT EPIC_BIT(30)
#define BOOT_NORMAL 0x00
#define M85XXRIO_LCSBA1CSR(base) (CAST(VUINT32 *)(((char*)base) + 0x0005C ))
#define N_SIO_CHANNELS 2
#define FIORBUFSET 24
#define _PPC_SPEFSCR_FOVFE 0x00000004
#define IPCOM_WV_INSTRUMENTATION 
#define EVENT_WIND_EXIT_DISPATCH CLASS1_EVENT(2)
#define SHELL_REMOTE_CONFIG NULL
#define ETIMEDOUT 60
#define INCLUDE_STDIO 
#define _VX_PPC405 2001
#define RTP_ID_TO_PID(rtpId) (((RTP_ID)rtpId)->rtpHandleId)
#define M_shlLib (191 << 16)
#define EPIC_IPI_VEC_REG_INTERVAL 0x10
#define MAX_TASK_ARGS 10
#define FREQ_533_MHZ 533333333
#define M85XX_L2ERRCTL(x) (CAST(VUINT32 *)((x + 0x20E58)))
#define _WRS_CONFIG_TASK_SWITCH_HOOKS 1
#define RIO_CHANNEL_DOORBELL 5
#define _FSYNC 0x2000
#define M_tlsLib (192 << 16)
#define M85XXRIO_ROWAR_RDTYPE_ATOMIC_CLR 0xf
#define MPC85XX_I2C_STATUS_REG_RXAK 0x01
#define DRV_SIO_NS16550 
#define Q_REMOVE(pQHead,pQNode) (*(((Q_HEAD *)(pQHead))->pQClass->removeRtn)) (((Q_HEAD *)(pQHead)), ((Q_NODE *)(pQNode)))
#define MSG_Q_PRIORITY 0x01
#define EPIC_GT_VEC_REG_INTERVAL 0x40
#define S_memLib_INVALID_ADDRESS (M_memLib | 7)
#define WIND_TCB_R10 (WIND_TCB_REGS + REG_SET_GR(10))
#define WIND_TCB_R12 (WIND_TCB_REGS + REG_SET_GR(12))
#define WIND_TCB_R13 (WIND_TCB_REGS + REG_SET_GR(13))
#define MPC85XX_I2C_CONTROL_REG_RSTA 0x04
#define WIND_TCB_R16 (WIND_TCB_REGS + REG_SET_GR(16))
#define MMU_ATTR_VALID_GET(attr) ((attr) & MMU_ATTR_VALID_MSK)
#define WIND_TCB_R19 (WIND_TCB_REGS + REG_SET_GR(19))
#define SYMLINK_MAX 0
#define _VX_TRON 30
#define _EXC_OFF_RES2 0x00b00
#define WV_EVT_PROTO_REV_1_0_FCS 1
#define _WRS_IOCHAR UCHAR
#define EVENT_RTPSUSPEND CLASS3_EVENT(85)
#define _MMU_TLB_SZ_4K 0x00000100
#define EVENTS_INTERRUPTIBLE 0x01
#define SIO_OPEN 0x100A
#define WIND_TCB_R21 (WIND_TCB_REGS + REG_SET_GR(21))
#define WIND_TCB_R23 (WIND_TCB_REGS + REG_SET_GR(23))
#define WIND_TCB_R24 (WIND_TCB_REGS + REG_SET_GR(24))
#define WIND_TCB_R25 (WIND_TCB_REGS + REG_SET_GR(25))
#define WIND_TCB_R26 (WIND_TCB_REGS + REG_SET_GR(26))
#define WIND_TCB_R27 (WIND_TCB_REGS + REG_SET_GR(27))
#define WIND_TCB_R28 (WIND_TCB_REGS + REG_SET_GR(28))
#define WIND_TCB_R29 (WIND_TCB_REGS + REG_SET_GR(29))
#define _GCC_PTRDIFF_T 
#define PCI2_XINT1_LVL 0xb
#define TIP_CONFIG_STRING ""
#define _EXC_INFO_DSISR 0x080
#define _PARM_UTS_MACHINE_MAX 64
#define SHELL_SECURE FALSE
#define M85XXRIO_PWDCSR(base) (CAST(VUINT32 *)(((char*)base) + 0x00044 ))
#define SERIAL_RAPIDIO 
#define FIOUNMOUNT 39
#define _VX__FLTFUNCPTR_DEFINED 
#define S_mmuLib_NOT_GLOBAL_PAGE (M_mmuLib | 15)
#define MPC85XX_I2C_CONTROL_REG_TXAK 0x08
#define M_vxCpuLib (202 << 16)
#define WIND_TCB_R30 (WIND_TCB_REGS + REG_SET_GR(30))
#define WIND_TCB_R31 (WIND_TCB_REGS + REG_SET_GR(31))
#define MMU_D_ADDR_TRANS 1
#define SIO_ERROR_UNKNWN 7
#define OPT_REG_WRITE_READ_BACK_8 0x09
#define _VX_PPC440 2003
#define BOOT_PASSWORD_LEN 20
#define _WRS_CONFIG_USR_INET4_ONLY 1
#define MII_ANAR_100T_4 0x0200
#define IPCOM_ENV_IPCOM 2
#define EVENT_MEMFREE CLASS3_EVENT(31)
#define S_vxdbgLib_ERR_INIT VXDBG_ERROR_TO_ERRNO(VXDBG_ERR_INIT)
#define S_eventLib_ALREADY_REGISTERED (M_eventLib | 0x0003)
#define ___int_ptrdiff_t_h 
#define EVENT_RTP_NORMAL_STATE VXEV25
#define RFI_OPCODE 0x4c000064
#define FIOISATTY 20
#define PCI_ERROR_ENABLE_REG 0x8e08
#define EPIC_IPI_0_VEC_REG (EPIC_CCSROFF + 0x010a0)
#define EPIC_SR_OUT_DB1_INT_VEC (EPIC_SR_OUT_DB1_INT_NUM + EPIC_VEC_IN_IRQ0)
#define __INCmmuLibh 
#define _WRS_VXWORKS_5_X 
#define EPIC_TSEC4RX_INT_VEC (EPIC_TSEC4RX_INT_NUM + EPIC_VEC_IN_IRQ0)
#define VX_USER_MODE 0x0000
#define S_objLib_OBJ_OPERATION_UNSUPPORTED (M_objLib _WRS_BIT_OR 11)
#define SPIN_LOCK_BUSY 1
#define VXB_ACCESS_VOLREG_WRITE 0x0000000a
#define STATEMASK_TO_INDEX(statemask) ((MMU_ATTR_MSK_ID_GET(statemask)) >> MMU_ATTR_MSK_INDEX_SHIFT)
#define M85XX_L2CTL_L2SRAM_BIT 16
#define EVT_TASK_1(evtId,ARG) do { if ( ACTION_IS_SET ) { EVT_TASK_1_T evt_task_1; evt_task_1.args [0] = (int)ARG; eventPointSwHandle(evtId, &evt_task_1, sizeof evt_task_1); } } while ((0))
#define EVT_TASK_2(evtId,ARG1,ARG2) do { if ( ACTION_IS_SET ) { EVT_TASK_2_T evt_task_2; evt_task_2.args [0] = (int)ARG1; evt_task_2.args [1] = (int)ARG2; eventPointSwHandle(evtId, &evt_task_2, sizeof evt_task_2); } } while ((0))
#define EVT_TASK_3(evtId,ARG1,ARG2,ARG3) do { if ( ACTION_IS_SET ) { EVT_TASK_3_T evt_task_3; evt_task_3.args [0] = (int)ARG1; evt_task_3.args [1] = (int)ARG2; evt_task_3.args [2] = (int)ARG3; eventPointSwHandle(evtId, &evt_task_3, sizeof evt_task_3); } } while ((0))
#define EPIC_TSEC3TX_INT_VEC (EPIC_TSEC3TX_INT_NUM + EPIC_VEC_IN_IRQ0)
#define WDB_COMM_MIPC 10
#define _PPC_SPEFSCR_FUNF 0x00000200
#define M85XX_LTEIR(base) (CAST(VUINT32 *)((base) + 0x50B8))
#define INCLUDE_SECONDARY_TSEC_END 
#define I2C_ERROR_CYCLE_STOP 2
#define VM_STATE_MEM_COHERENCY MMU_ATTR_CACHE_COHERENCY
#define _ARCH_STACK_DIR _PARM_STACK_GROWS_DOWN
#define _PPC_MSR_CE 0x00020000
#define EPIC_IN_INT35_VEC_REG (EPIC_CCSROFF + 0x10660)
#define __INCobjLibCommonh 
#define VXDBG_BP_DELETE(bpInfo,retVal) retVal = _func_vxdbgFuncs[VXDBG_BP_DELETE] (bpInfo)
#define __WCHAR_T 
#define _WRS_ADJUST_PC_AFTER_SW_BP(pRegs) 
#define O_DSYNC _FDSYNC
#define MII_MF_PREAMBLE 0xffffffff
#define MPC85XX_I2C_STATUS_REG (0x0000c)
#define I80X86 _VX_I80X86
#define X_OK 1
#define EVENT_ANY_EVENT CONTROL_EVENT(48)
#define _VX_SIMLINUX 190
#define _WRS_CONFIG_SM_OBJ 1
rm D:/WindRiver6.8/sbc8548-t9/SBC8548M-S9_vxWorks/ipcom_ipdomain
In file included from sysLib.c:477:
hwconf.c:142:2: error: #error our tsec network driver must use TSEC_MDIO
D:\WindRiver6.8\utilities-1.0\x86-win32\bin\make.exe: *** [headerMacros] Error 1
"make headerMacros BSP2PRJ=TRUE TOOL_OPTIONS_FILES_DIR=D:/WindRiver6.8/sbc8548-t9/SBC8548M-S9_vxWorks TOOL=e500v2gnu VSB_DIR=D:/WindRiver6.8/vxworks-6.8/target/lib" failed

!STACK 0
com.windriver.osconfig.tcl.JTclException: Can not create project file D:\WindRiver6.8\sbc8548-t9\SBC8548M-S9_vxWorks\SBC8548M-S9_vxWorks.wpj
	at com.windriver.ide.osconfig.core.model.tcl.TclProjectManagement.createNewProject(TclProjectManagement.java:236)
	at com.windriver.ide.osconfig.ui.screen.BIPWizard$1CreateProjectRunnable.run(BIPWizard.java:446)
	at org.eclipse.jface.operation.ModalContext$ModalContextThread.run(ModalContext.java:121)

!ENTRY org.eclipse.help 4 0 2016-07-26 08:52:38.153
!MESSAGE Error reading context-sensitive help file /"com.windriver.ide.doc.wr_vx_simulator/contexts_wrs.xml" (skipping file)
!STACK 0
java.io.FileNotFoundException
	at org.eclipse.help.internal.context.ContextFileProvider.loadContexts(ContextFileProvider.java:235)
	at org.eclipse.help.internal.context.ContextFileProvider.getContexts(ContextFileProvider.java:181)
	at org.eclipse.help.internal.context.ContextFileProvider.getPluginContexts(ContextFileProvider.java:158)
	at org.eclipse.help.internal.context.ContextFileProvider.getContext(ContextFileProvider.java:83)
	at org.eclipse.help.internal.context.ContextManager.getContext(ContextManager.java:85)
	at org.eclipse.help.HelpSystem.getContext(HelpSystem.java:49)
	at com.windriver.ide.internal.apidoc.WRAPIHelpProvider.getFunctionInfo(WRAPIHelpProvider.java:110)
	at org.eclipse.cdt.internal.ui.text.CHelpSettings.getFunctionInfo(CHelpSettings.java:121)
	at org.eclipse.cdt.internal.ui.CHelpProviderManager.getFunctionInfo(CHelpProviderManager.java:163)
	at org.eclipse.cdt.internal.ui.text.c.hover.CDocHover.getHoverInfo(CDocHover.java:84)
	at org.eclipse.cdt.internal.ui.text.c.hover.AbstractCEditorTextHover.getHoverInfo2(AbstractCEditorTextHover.java:83)
	at org.eclipse.cdt.internal.ui.text.c.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:131)
	at org.eclipse.cdt.internal.ui.text.c.hover.CEditorTextHoverProxy.getHoverInfo2(CEditorTextHoverProxy.java:86)
	at org.eclipse.jface.text.TextViewerHoverManager$4.run(TextViewerHoverManager.java:166)

!ENTRY org.eclipse.help 4 0 2016-07-26 08:52:38.203
!MESSAGE Error reading context-sensitive help file /"com.windriver.ide.doc.wr_tipc/contexts_wrs.xml" (skipping file)
!STACK 0
java.io.FileNotFoundException
	at org.eclipse.help.internal.context.ContextFileProvider.loadContexts(ContextFileProvider.java:235)
	at org.eclipse.help.internal.context.ContextFileProvider.getContexts(ContextFileProvider.java:181)
	at org.eclipse.help.internal.context.ContextFileProvider.getPluginContexts(ContextFileProvider.java:158)
	at org.eclipse.help.internal.context.ContextFileProvider.getContext(ContextFileProvider.java:83)
	at org.eclipse.help.internal.context.ContextManager.getContext(ContextManager.java:85)
	at org.eclipse.help.HelpSystem.getContext(HelpSystem.java:49)
	at com.windriver.ide.internal.apidoc.WRAPIHelpProvider.getFunctionInfo(WRAPIHelpProvider.java:110)
	at org.eclipse.cdt.internal.ui.text.CHelpSettings.getFunctionInfo(CHelpSettings.java:121)
	at org.eclipse.cdt.internal.ui.CHelpProviderManager.getFunctionInfo(CHelpProviderManager.java:163)
	at org.eclipse.cdt.internal.ui.text.c.hover.CDocHover.getHoverInfo(CDocHover.java:84)
	at org.eclipse.cdt.internal.ui.text.c.hover.AbstractCEditorTextHover.getHoverInfo2(AbstractCEditorTextHover.java:83)
	at org.eclipse.cdt.internal.ui.text.c.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:131)
	at org.eclipse.cdt.internal.ui.text.c.hover.CEditorTextHoverProxy.getHoverInfo2(CEditorTextHoverProxy.java:86)
	at org.eclipse.jface.text.TextViewerHoverManager$4.run(TextViewerHoverManager.java:166)

!ENTRY org.eclipse.help 4 0 2016-07-26 08:52:38.212
!MESSAGE Error reading context-sensitive help file /"com.windriver.ide.doc.wr_snmp/contexts_wrs.xml" (skipping file)
!STACK 0
org.xml.sax.SAXParseException: Invalid byte 1 of 1-byte UTF-8 sequence.
	at com.sun.org.apache.xerces.internal.parsers.DOMParser.parse(DOMParser.java:264)
	at com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderImpl.parse(DocumentBuilderImpl.java:292)
	at org.eclipse.help.internal.dynamic.DocumentReader.read(DocumentReader.java:56)
	at org.eclipse.help.internal.dynamic.DocumentReader.read(DocumentReader.java:44)
	at org.eclipse.help.internal.context.ContextFileProvider.loadContexts(ContextFileProvider.java:202)
	at org.eclipse.help.internal.context.ContextFileProvider.getContexts(ContextFileProvider.java:181)
	at org.eclipse.help.internal.context.ContextFileProvider.getPluginContexts(ContextFileProvider.java:158)
	at org.eclipse.help.internal.context.ContextFileProvider.getContext(ContextFileProvider.java:83)
	at org.eclipse.help.internal.context.ContextManager.getContext(ContextManager.java:85)
	at org.eclipse.help.HelpSystem.getContext(HelpSystem.java:49)
	at com.windriver.ide.internal.apidoc.WRAPIHelpProvider.getFunctionInfo(WRAPIHelpProvider.java:110)
	at org.eclipse.cdt.internal.ui.text.CHelpSettings.getFunctionInfo(CHelpSettings.java:121)
	at org.eclipse.cdt.internal.ui.CHelpProviderManager.getFunctionInfo(CHelpProviderManager.java:163)
	at org.eclipse.cdt.internal.ui.text.c.hover.CDocHover.getHoverInfo(CDocHover.java:84)
	at org.eclipse.cdt.internal.ui.text.c.hover.AbstractCEditorTextHover.getHoverInfo2(AbstractCEditorTextHover.java:83)
	at org.eclipse.cdt.internal.ui.text.c.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:131)
	at org.eclipse.cdt.internal.ui.text.c.hover.CEditorTextHoverProxy.getHoverInfo2(CEditorTextHoverProxy.java:86)
	at org.eclipse.jface.text.TextViewerHoverManager$4.run(TextViewerHoverManager.java:166)

!ENTRY org.eclipse.help 4 0 2016-07-26 08:52:38.223
!MESSAGE Error reading context-sensitive help file /"com.windriver.ide.doc.wr_ppp/contexts_wrs.xml" (skipping file)
!STACK 0
java.io.FileNotFoundException
	at org.eclipse.help.internal.context.ContextFileProvider.loadContexts(ContextFileProvider.java:235)
	at org.eclipse.help.internal.context.ContextFileProvider.getContexts(ContextFileProvider.java:181)
	at org.eclipse.help.internal.context.ContextFileProvider.getPluginContexts(ContextFileProvider.java:158)
	at org.eclipse.help.internal.context.ContextFileProvider.getContext(ContextFileProvider.java:83)
	at org.eclipse.help.internal.context.ContextManager.getContext(ContextManager.java:85)
	at org.eclipse.help.HelpSystem.getContext(HelpSystem.java:49)
	at com.windriver.ide.internal.apidoc.WRAPIHelpProvider.getFunctionInfo(WRAPIHelpProvider.java:110)
	at org.eclipse.cdt.internal.ui.text.CHelpSettings.getFunctionInfo(CHelpSettings.java:121)
	at org.eclipse.cdt.internal.ui.CHelpProviderManager.getFunctionInfo(CHelpProviderManager.java:163)
	at org.eclipse.cdt.internal.ui.text.c.hover.CDocHover.getHoverInfo(CDocHover.java:84)
	at org.eclipse.cdt.internal.ui.text.c.hover.AbstractCEditorTextHover.getHoverInfo2(AbstractCEditorTextHover.java:83)
	at org.eclipse.cdt.internal.ui.text.c.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:131)
	at org.eclipse.cdt.internal.ui.text.c.hover.CEditorTextHoverProxy.getHoverInfo2(CEditorTextHoverProxy.java:86)
	at org.eclipse.jface.text.TextViewerHoverManager$4.run(TextViewerHoverManager.java:166)

!ENTRY org.eclipse.help 4 0 2016-07-26 08:52:38.289
!MESSAGE Error reading context-sensitive help file /"com.windriver.ide.doc.wr_mipc/contexts_wrs.xml" (skipping file)
!STACK 0
java.io.FileNotFoundException
	at org.eclipse.help.internal.context.ContextFileProvider.loadContexts(ContextFileProvider.java:235)
	at org.eclipse.help.internal.context.ContextFileProvider.getContexts(ContextFileProvider.java:181)
	at org.eclipse.help.internal.context.ContextFileProvider.getPluginContexts(ContextFileProvider.java:158)
	at org.eclipse.help.internal.context.ContextFileProvider.getContext(ContextFileProvider.java:83)
	at org.eclipse.help.internal.context.ContextManager.getContext(ContextManager.java:85)
	at org.eclipse.help.HelpSystem.getContext(HelpSystem.java:49)
	at com.windriver.ide.internal.apidoc.WRAPIHelpProvider.getFunctionInfo(WRAPIHelpProvider.java:110)
	at org.eclipse.cdt.internal.ui.text.CHelpSettings.getFunctionInfo(CHelpSettings.java:121)
	at org.eclipse.cdt.internal.ui.CHelpProviderManager.getFunctionInfo(CHelpProviderManager.java:163)
	at org.eclipse.cdt.internal.ui.text.c.hover.CDocHover.getHoverInfo(CDocHover.java:84)
	at org.eclipse.cdt.internal.ui.text.c.hover.AbstractCEditorTextHover.getHoverInfo2(AbstractCEditorTextHover.java:83)
	at org.eclipse.cdt.internal.ui.text.c.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:131)
	at org.eclipse.cdt.internal.ui.text.c.hover.CEditorTextHoverProxy.getHoverInfo2(CEditorTextHoverProxy.java:86)
	at org.eclipse.jface.text.TextViewerHoverManager$4.run(TextViewerHoverManager.java:166)

!ENTRY org.eclipse.cdt.core 1 0 2016-07-26 08:53:35.654
!MESSAGE Indexed 'SBC8548M-S9_vxworks' (0 sources, 13 headers) in 0.09 sec: 125 declarations; 290 references; 0 unresolved inclusions; 0 syntax errors; 0 unresolved names (0.00%)

!ENTRY org.eclipse.cdt.core 1 0 2016-07-26 09:26:34.918
!MESSAGE Indexed 'sbc8548M-S9_vxPrj' (0 sources, 13 headers) in 0.08 sec: 125 declarations; 290 references; 0 unresolved inclusions; 0 syntax errors; 0 unresolved names (0.00%)

!ENTRY org.eclipse.ltk.ui.refactoring 4 10000 2016-07-26 09:28:10.967
!MESSAGE Internal Error
!STACK 1
org.eclipse.core.internal.resources.ResourceException: Problems encountered while deleting resources.
	at org.eclipse.core.internal.resources.Resource.delete(Resource.java:737)
	at org.eclipse.core.internal.resources.Project.delete(Project.java:309)
	at org.eclipse.ltk.core.refactoring.resource.DeleteResourceChange.perform(DeleteResourceChange.java:130)
	at org.eclipse.ltk.core.refactoring.CompositeChange.perform(CompositeChange.java:278)
	at org.eclipse.ltk.core.refactoring.CompositeChange.perform(CompositeChange.java:278)
	at org.eclipse.ltk.core.refactoring.PerformChangeOperation$1.run(PerformChangeOperation.java:260)
	at org.eclipse.core.internal.resources.Workspace.run(Workspace.java:1800)
	at org.eclipse.ltk.core.refactoring.PerformChangeOperation.executeChange(PerformChangeOperation.java:308)
	at org.eclipse.ltk.internal.ui.refactoring.UIPerformChangeOperation.executeChange(UIPerformChangeOperation.java:92)
	at org.eclipse.ltk.core.refactoring.PerformChangeOperation.run(PerformChangeOperation.java:220)
	at org.eclipse.core.internal.resources.Workspace.run(Workspace.java:1800)
	at org.eclipse.ltk.internal.ui.refactoring.WorkbenchRunnableAdapter.run(WorkbenchRunnableAdapter.java:87)
	at org.eclipse.jface.operation.ModalContext$ModalContextThread.run(ModalContext.java:121)
Contains: Could not delete '/sbc8548M-S9_vxPrj/default'.
org.eclipse.core.internal.resources.ResourceException: Problems encountered while deleting resources.
	at org.eclipse.core.internal.localstore.FileSystemResourceManager.delete(FileSystemResourceManager.java:257)
	at org.eclipse.core.internal.resources.ResourceTree.internalDeleteFolder(ResourceTree.java:351)
	at org.eclipse.core.internal.resources.ResourceTree.internalDeleteProject(ResourceTree.java:386)
	at org.eclipse.core.internal.resources.ResourceTree.standardDeleteProject(ResourceTree.java:832)
	at org.eclipse.core.internal.resources.Resource.unprotectedDelete(Resource.java:1772)
	at org.eclipse.core.internal.resources.Resource.delete(Resource.java:724)
	at org.eclipse.core.internal.resources.Project.delete(Project.java:309)
	at org.eclipse.ltk.core.refactoring.resource.DeleteResourceChange.perform(DeleteResourceChange.java:130)
	at org.eclipse.ltk.core.refactoring.CompositeChange.perform(CompositeChange.java:278)
	at org.eclipse.ltk.core.refactoring.CompositeChange.perform(CompositeChange.java:278)
	at org.eclipse.ltk.core.refactoring.PerformChangeOperation$1.run(PerformChangeOperation.java:260)
	at org.eclipse.core.internal.resources.Workspace.run(Workspace.java:1800)
	at org.eclipse.ltk.core.refactoring.PerformChangeOperation.executeChange(PerformChangeOperation.java:308)
	at org.eclipse.ltk.internal.ui.refactoring.UIPerformChangeOperation.executeChange(UIPerformChangeOperation.java:92)
	at org.eclipse.ltk.core.refactoring.PerformChangeOperation.run(PerformChangeOperation.java:220)
	at org.eclipse.core.internal.resources.Workspace.run(Workspace.java:1800)
	at org.eclipse.ltk.internal.ui.refactoring.WorkbenchRunnableAdapter.run(WorkbenchRunnableAdapter.java:87)
	at org.eclipse.jface.operation.ModalContext$ModalContextThread.run(ModalContext.java:121)
Contains: Problems encountered while deleting files.
Contains: Could not delete: D:\WindRiver6.8\sbc8548-t9\sbc8548M-S9_vxPrj\default.
Contains: Could not delete 'D:\WindRiver6.8\sbc8548-t9\sbc8548M-S9_vxPrj'.
!SUBENTRY 1 org.eclipse.core.resources 4 273 2016-07-26 09:28:10.968
!MESSAGE Problems encountered while deleting resources.
!SUBENTRY 2 org.eclipse.core.resources 4 273 2016-07-26 09:28:10.968
!MESSAGE Could not delete '/sbc8548M-S9_vxPrj/default'.
!STACK 1
org.eclipse.core.internal.resources.ResourceException: Problems encountered while deleting resources.
	at org.eclipse.core.internal.localstore.FileSystemResourceManager.delete(FileSystemResourceManager.java:257)
	at org.eclipse.core.internal.resources.ResourceTree.internalDeleteFolder(ResourceTree.java:351)
	at org.eclipse.core.internal.resources.ResourceTree.internalDeleteProject(ResourceTree.java:386)
	at org.eclipse.core.internal.resources.ResourceTree.standardDeleteProject(ResourceTree.java:832)
	at org.eclipse.core.internal.resources.Resource.unprotectedDelete(Resource.java:1772)
	at org.eclipse.core.internal.resources.Resource.delete(Resource.java:724)
	at org.eclipse.core.internal.resources.Project.delete(Project.java:309)
	at org.eclipse.ltk.core.refactoring.resource.DeleteResourceChange.perform(DeleteResourceChange.java:130)
	at org.eclipse.ltk.core.refactoring.CompositeChange.perform(CompositeChange.java:278)
	at org.eclipse.ltk.core.refactoring.CompositeChange.perform(CompositeChange.java:278)
	at org.eclipse.ltk.core.refactoring.PerformChangeOperation$1.run(PerformChangeOperation.java:260)
	at org.eclipse.core.internal.resources.Workspace.run(Workspace.java:1800)
	at org.eclipse.ltk.core.refactoring.PerformChangeOperation.executeChange(PerformChangeOperation.java:308)
	at org.eclipse.ltk.internal.ui.refactoring.UIPerformChangeOperation.executeChange(UIPerformChangeOperation.java:92)
	at org.eclipse.ltk.core.refactoring.PerformChangeOperation.run(PerformChangeOperation.java:220)
	at org.eclipse.core.internal.resources.Workspace.run(Workspace.java:1800)
	at org.eclipse.ltk.internal.ui.refactoring.WorkbenchRunnableAdapter.run(WorkbenchRunnableAdapter.java:87)
	at org.eclipse.jface.operation.ModalContext$ModalContextThread.run(ModalContext.java:121)
Contains: Problems encountered while deleting files.
Contains: Could not delete: D:\WindRiver6.8\sbc8548-t9\sbc8548M-S9_vxPrj\default.
!SUBENTRY 3 org.eclipse.core.resources 4 273 2016-07-26 09:28:10.968
!MESSAGE Problems encountered while deleting resources.
!SUBENTRY 4 org.eclipse.core.filesystem 4 273 2016-07-26 09:28:10.968
!MESSAGE Problems encountered while deleting files.
!SUBENTRY 5 org.eclipse.core.filesystem 4 273 2016-07-26 09:28:10.968
!MESSAGE Could not delete: D:\WindRiver6.8\sbc8548-t9\sbc8548M-S9_vxPrj\default.
!SUBENTRY 2 org.eclipse.core.resources 4 273 2016-07-26 09:28:10.968
!MESSAGE Could not delete 'D:\WindRiver6.8\sbc8548-t9\sbc8548M-S9_vxPrj'.

!ENTRY org.eclipse.core.resources 4 273 2016-07-26 09:28:10.968
!MESSAGE Problems encountered while deleting resources.
!SUBENTRY 1 org.eclipse.core.resources 4 273 2016-07-26 09:28:10.968
!MESSAGE Could not delete '/sbc8548M-S9_vxPrj/default'.
!STACK 1
org.eclipse.core.internal.resources.ResourceException: Problems encountered while deleting resources.
	at org.eclipse.core.internal.localstore.FileSystemResourceManager.delete(FileSystemResourceManager.java:257)
	at org.eclipse.core.internal.resources.ResourceTree.internalDeleteFolder(ResourceTree.java:351)
	at org.eclipse.core.internal.resources.ResourceTree.internalDeleteProject(ResourceTree.java:386)
	at org.eclipse.core.internal.resources.ResourceTree.standardDeleteProject(ResourceTree.java:832)
	at org.eclipse.core.internal.resources.Resource.unprotectedDelete(Resource.java:1772)
	at org.eclipse.core.internal.resources.Resource.delete(Resource.java:724)
	at org.eclipse.core.internal.resources.Project.delete(Project.java:309)
	at org.eclipse.ltk.core.refactoring.resource.DeleteResourceChange.perform(DeleteResourceChange.java:130)
	at org.eclipse.ltk.core.refactoring.CompositeChange.perform(CompositeChange.java:278)
	at org.eclipse.ltk.core.refactoring.CompositeChange.perform(CompositeChange.java:278)
	at org.eclipse.ltk.core.refactoring.PerformChangeOperation$1.run(PerformChangeOperation.java:260)
	at org.eclipse.core.internal.resources.Workspace.run(Workspace.java:1800)
	at org.eclipse.ltk.core.refactoring.PerformChangeOperation.executeChange(PerformChangeOperation.java:308)
	at org.eclipse.ltk.internal.ui.refactoring.UIPerformChangeOperation.executeChange(UIPerformChangeOperation.java:92)
	at org.eclipse.ltk.core.refactoring.PerformChangeOperation.run(PerformChangeOperation.java:220)
	at org.eclipse.core.internal.resources.Workspace.run(Workspace.java:1800)
	at org.eclipse.ltk.internal.ui.refactoring.WorkbenchRunnableAdapter.run(WorkbenchRunnableAdapter.java:87)
	at org.eclipse.jface.operation.ModalContext$ModalContextThread.run(ModalContext.java:121)
Contains: Problems encountered while deleting files.
Contains: Could not delete: D:\WindRiver6.8\sbc8548-t9\sbc8548M-S9_vxPrj\default.
!SUBENTRY 2 org.eclipse.core.resources 4 273 2016-07-26 09:28:10.969
!MESSAGE Problems encountered while deleting resources.
!SUBENTRY 3 org.eclipse.core.filesystem 4 273 2016-07-26 09:28:10.969
!MESSAGE Problems encountered while deleting files.
!SUBENTRY 4 org.eclipse.core.filesystem 4 273 2016-07-26 09:28:10.969
!MESSAGE Could not delete: D:\WindRiver6.8\sbc8548-t9\sbc8548M-S9_vxPrj\default.
!SUBENTRY 1 org.eclipse.core.resources 4 273 2016-07-26 09:28:10.969
!MESSAGE Could not delete 'D:\WindRiver6.8\sbc8548-t9\sbc8548M-S9_vxPrj'.

!ENTRY org.eclipse.ltk.ui.refactoring 4 10000 2016-07-26 09:28:21.127
!MESSAGE Internal Error
!STACK 1
org.eclipse.core.internal.resources.ResourceException: Problems encountered while deleting resources.
	at org.eclipse.core.internal.resources.Resource.delete(Resource.java:737)
	at org.eclipse.core.internal.resources.Project.delete(Project.java:309)
	at org.eclipse.ltk.core.refactoring.resource.DeleteResourceChange.perform(DeleteResourceChange.java:130)
	at org.eclipse.ltk.core.refactoring.CompositeChange.perform(CompositeChange.java:278)
	at org.eclipse.ltk.core.refactoring.CompositeChange.perform(CompositeChange.java:278)
	at org.eclipse.ltk.core.refactoring.PerformChangeOperation$1.run(PerformChangeOperation.java:260)
	at org.eclipse.core.internal.resources.Workspace.run(Workspace.java:1800)
	at org.eclipse.ltk.core.refactoring.PerformChangeOperation.executeChange(PerformChangeOperation.java:308)
	at org.eclipse.ltk.internal.ui.refactoring.UIPerformChangeOperation.executeChange(UIPerformChangeOperation.java:92)
	at org.eclipse.ltk.core.refactoring.PerformChangeOperation.run(PerformChangeOperation.java:220)
	at org.eclipse.core.internal.resources.Workspace.run(Workspace.java:1800)
	at org.eclipse.ltk.internal.ui.refactoring.WorkbenchRunnableAdapter.run(WorkbenchRunnableAdapter.java:87)
	at org.eclipse.jface.operation.ModalContext$ModalContextThread.run(ModalContext.java:121)
Contains: Could not delete '/sbc8548M-S9_vxPrj/default'.
org.eclipse.core.internal.resources.ResourceException: Problems encountered while deleting resources.
	at org.eclipse.core.internal.localstore.FileSystemResourceManager.delete(FileSystemResourceManager.java:257)
	at org.eclipse.core.internal.resources.ResourceTree.internalDeleteFolder(ResourceTree.java:351)
	at org.eclipse.core.internal.resources.ResourceTree.internalDeleteProject(ResourceTree.java:386)
	at org.eclipse.core.internal.resources.ResourceTree.standardDeleteProject(ResourceTree.java:832)
	at org.eclipse.core.internal.resources.Resource.unprotectedDelete(Resource.java:1772)
	at org.eclipse.core.internal.resources.Resource.delete(Resource.java:724)
	at org.eclipse.core.internal.resources.Project.delete(Project.java:309)
	at org.eclipse.ltk.core.refactoring.resource.DeleteResourceChange.perform(DeleteResourceChange.java:130)
	at org.eclipse.ltk.core.refactoring.CompositeChange.perform(CompositeChange.java:278)
	at org.eclipse.ltk.core.refactoring.CompositeChange.perform(CompositeChange.java:278)
	at org.eclipse.ltk.core.refactoring.PerformChangeOperation$1.run(PerformChangeOperation.java:260)
	at org.eclipse.core.internal.resources.Workspace.run(Workspace.java:1800)
	at org.eclipse.ltk.core.refactoring.PerformChangeOperation.executeChange(PerformChangeOperation.java:308)
	at org.eclipse.ltk.internal.ui.refactoring.UIPerformChangeOperation.executeChange(UIPerformChangeOperation.java:92)
	at org.eclipse.ltk.core.refactoring.PerformChangeOperation.run(PerformChangeOperation.java:220)
	at org.eclipse.core.internal.resources.Workspace.run(Workspace.java:1800)
	at org.eclipse.ltk.internal.ui.refactoring.WorkbenchRunnableAdapter.run(WorkbenchRunnableAdapter.java:87)
	at org.eclipse.jface.operation.ModalContext$ModalContextThread.run(ModalContext.java:121)
Contains: Problems encountered while deleting files.
Contains: Could not delete: D:\WindRiver6.8\sbc8548-t9\sbc8548M-S9_vxPrj\default.
Contains: Could not delete 'D:\WindRiver6.8\sbc8548-t9\sbc8548M-S9_vxPrj'.
!SUBENTRY 1 org.eclipse.core.resources 4 273 2016-07-26 09:28:21.127
!MESSAGE Problems encountered while deleting resources.
!SUBENTRY 2 org.eclipse.core.resources 4 273 2016-07-26 09:28:21.127
!MESSAGE Could not delete '/sbc8548M-S9_vxPrj/default'.
!STACK 1
org.eclipse.core.internal.resources.ResourceException: Problems encountered while deleting resources.
	at org.eclipse.core.internal.localstore.FileSystemResourceManager.delete(FileSystemResourceManager.java:257)
	at org.eclipse.core.internal.resources.ResourceTree.internalDeleteFolder(ResourceTree.java:351)
	at org.eclipse.core.internal.resources.ResourceTree.internalDeleteProject(ResourceTree.java:386)
	at org.eclipse.core.internal.resources.ResourceTree.standardDeleteProject(ResourceTree.java:832)
	at org.eclipse.core.internal.resources.Resource.unprotectedDelete(Resource.java:1772)
	at org.eclipse.core.internal.resources.Resource.delete(Resource.java:724)
	at org.eclipse.core.internal.resources.Project.delete(Project.java:309)
	at org.eclipse.ltk.core.refactoring.resource.DeleteResourceChange.perform(DeleteResourceChange.java:130)
	at org.eclipse.ltk.core.refactoring.CompositeChange.perform(CompositeChange.java:278)
	at org.eclipse.ltk.core.refactoring.CompositeChange.perform(CompositeChange.java:278)
	at org.eclipse.ltk.core.refactoring.PerformChangeOperation$1.run(PerformChangeOperation.java:260)
	at org.eclipse.core.internal.resources.Workspace.run(Workspace.java:1800)
	at org.eclipse.ltk.core.refactoring.PerformChangeOperation.executeChange(PerformChangeOperation.java:308)
	at org.eclipse.ltk.internal.ui.refactoring.UIPerformChangeOperation.executeChange(UIPerformChangeOperation.java:92)
	at org.eclipse.ltk.core.refactoring.PerformChangeOperation.run(PerformChangeOperation.java:220)
	at org.eclipse.core.internal.resources.Workspace.run(Workspace.java:1800)
	at org.eclipse.ltk.internal.ui.refactoring.WorkbenchRunnableAdapter.run(WorkbenchRunnableAdapter.java:87)
	at org.eclipse.jface.operation.ModalContext$ModalContextThread.run(ModalContext.java:121)
Contains: Problems encountered while deleting files.
Contains: Could not delete: D:\WindRiver6.8\sbc8548-t9\sbc8548M-S9_vxPrj\default.
!SUBENTRY 3 org.eclipse.core.resources 4 273 2016-07-26 09:28:21.127
!MESSAGE Problems encountered while deleting resources.
!SUBENTRY 4 org.eclipse.core.filesystem 4 273 2016-07-26 09:28:21.127
!MESSAGE Problems encountered while deleting files.
!SUBENTRY 5 org.eclipse.core.filesystem 4 273 2016-07-26 09:28:21.127
!MESSAGE Could not delete: D:\WindRiver6.8\sbc8548-t9\sbc8548M-S9_vxPrj\default.
!SUBENTRY 2 org.eclipse.core.resources 4 273 2016-07-26 09:28:21.127
!MESSAGE Could not delete 'D:\WindRiver6.8\sbc8548-t9\sbc8548M-S9_vxPrj'.

!ENTRY org.eclipse.core.resources 4 273 2016-07-26 09:28:21.127
!MESSAGE Problems encountered while deleting resources.
!SUBENTRY 1 org.eclipse.core.resources 4 273 2016-07-26 09:28:21.127
!MESSAGE Could not delete '/sbc8548M-S9_vxPrj/default'.
!STACK 1
org.eclipse.core.internal.resources.ResourceException: Problems encountered while deleting resources.
	at org.eclipse.core.internal.localstore.FileSystemResourceManager.delete(FileSystemResourceManager.java:257)
	at org.eclipse.core.internal.resources.ResourceTree.internalDeleteFolder(ResourceTree.java:351)
	at org.eclipse.core.internal.resources.ResourceTree.internalDeleteProject(ResourceTree.java:386)
	at org.eclipse.core.internal.resources.ResourceTree.standardDeleteProject(ResourceTree.java:832)
	at org.eclipse.core.internal.resources.Resource.unprotectedDelete(Resource.java:1772)
	at org.eclipse.core.internal.resources.Resource.delete(Resource.java:724)
	at org.eclipse.core.internal.resources.Project.delete(Project.java:309)
	at org.eclipse.ltk.core.refactoring.resource.DeleteResourceChange.perform(DeleteResourceChange.java:130)
	at org.eclipse.ltk.core.refactoring.CompositeChange.perform(CompositeChange.java:278)
	at org.eclipse.ltk.core.refactoring.CompositeChange.perform(CompositeChange.java:278)
	at org.eclipse.ltk.core.refactoring.PerformChangeOperation$1.run(PerformChangeOperation.java:260)
	at org.eclipse.core.internal.resources.Workspace.run(Workspace.java:1800)
	at org.eclipse.ltk.core.refactoring.PerformChangeOperation.executeChange(PerformChangeOperation.java:308)
	at org.eclipse.ltk.internal.ui.refactoring.UIPerformChangeOperation.executeChange(UIPerformChangeOperation.java:92)
	at org.eclipse.ltk.core.refactoring.PerformChangeOperation.run(PerformChangeOperation.java:220)
	at org.eclipse.core.internal.resources.Workspace.run(Workspace.java:1800)
	at org.eclipse.ltk.internal.ui.refactoring.WorkbenchRunnableAdapter.run(WorkbenchRunnableAdapter.java:87)
	at org.eclipse.jface.operation.ModalContext$ModalContextThread.run(ModalContext.java:121)
Contains: Problems encountered while deleting files.
Contains: Could not delete: D:\WindRiver6.8\sbc8548-t9\sbc8548M-S9_vxPrj\default.
!SUBENTRY 2 org.eclipse.core.resources 4 273 2016-07-26 09:28:21.128
!MESSAGE Problems encountered while deleting resources.
!SUBENTRY 3 org.eclipse.core.filesystem 4 273 2016-07-26 09:28:21.128
!MESSAGE Problems encountered while deleting files.
!SUBENTRY 4 org.eclipse.core.filesystem 4 273 2016-07-26 09:28:21.128
!MESSAGE Could not delete: D:\WindRiver6.8\sbc8548-t9\sbc8548M-S9_vxPrj\default.
!SUBENTRY 1 org.eclipse.core.resources 4 273 2016-07-26 09:28:21.128
!MESSAGE Could not delete 'D:\WindRiver6.8\sbc8548-t9\sbc8548M-S9_vxPrj'.

!ENTRY org.eclipse.ltk.ui.refactoring 4 10000 2016-07-26 09:28:34.807
!MESSAGE Internal Error
!STACK 1
org.eclipse.core.internal.resources.ResourceException: Problems encountered while deleting resources.
	at org.eclipse.core.internal.resources.Resource.delete(Resource.java:737)
	at org.eclipse.core.internal.resources.Project.delete(Project.java:309)
	at org.eclipse.ltk.core.refactoring.resource.DeleteResourceChange.perform(DeleteResourceChange.java:130)
	at org.eclipse.ltk.core.refactoring.CompositeChange.perform(CompositeChange.java:278)
	at org.eclipse.ltk.core.refactoring.CompositeChange.perform(CompositeChange.java:278)
	at org.eclipse.ltk.core.refactoring.PerformChangeOperation$1.run(PerformChangeOperation.java:260)
	at org.eclipse.core.internal.resources.Workspace.run(Workspace.java:1800)
	at org.eclipse.ltk.core.refactoring.PerformChangeOperation.executeChange(PerformChangeOperation.java:308)
	at org.eclipse.ltk.internal.ui.refactoring.UIPerformChangeOperation.executeChange(UIPerformChangeOperation.java:92)
	at org.eclipse.ltk.core.refactoring.PerformChangeOperation.run(PerformChangeOperation.java:220)
	at org.eclipse.core.internal.resources.Workspace.run(Workspace.java:1800)
	at org.eclipse.ltk.internal.ui.refactoring.WorkbenchRunnableAdapter.run(WorkbenchRunnableAdapter.java:87)
	at org.eclipse.jface.operation.ModalContext$ModalContextThread.run(ModalContext.java:121)
Contains: Could not delete '/sbc8548M-S9_vxPrj/default'.
org.eclipse.core.internal.resources.ResourceException: Problems encountered while deleting resources.
	at org.eclipse.core.internal.localstore.FileSystemResourceManager.delete(FileSystemResourceManager.java:257)
	at org.eclipse.core.internal.resources.ResourceTree.internalDeleteFolder(ResourceTree.java:351)
	at org.eclipse.core.internal.resources.ResourceTree.internalDeleteProject(ResourceTree.java:386)
	at org.eclipse.core.internal.resources.ResourceTree.standardDeleteProject(ResourceTree.java:832)
	at org.eclipse.core.internal.resources.Resource.unprotectedDelete(Resource.java:1772)
	at org.eclipse.core.internal.resources.Resource.delete(Resource.java:724)
	at org.eclipse.core.internal.resources.Project.delete(Project.java:309)
	at org.eclipse.ltk.core.refactoring.resource.DeleteResourceChange.perform(DeleteResourceChange.java:130)
	at org.eclipse.ltk.core.refactoring.CompositeChange.perform(CompositeChange.java:278)
	at org.eclipse.ltk.core.refactoring.CompositeChange.perform(CompositeChange.java:278)
	at org.eclipse.ltk.core.refactoring.PerformChangeOperation$1.run(PerformChangeOperation.java:260)
	at org.eclipse.core.internal.resources.Workspace.run(Workspace.java:1800)
	at org.eclipse.ltk.core.refactoring.PerformChangeOperation.executeChange(PerformChangeOperation.java:308)
	at org.eclipse.ltk.internal.ui.refactoring.UIPerformChangeOperation.executeChange(UIPerformChangeOperation.java:92)
	at org.eclipse.ltk.core.refactoring.PerformChangeOperation.run(PerformChangeOperation.java:220)
	at org.eclipse.core.internal.resources.Workspace.run(Workspace.java:1800)
	at org.eclipse.ltk.internal.ui.refactoring.WorkbenchRunnableAdapter.run(WorkbenchRunnableAdapter.java:87)
	at org.eclipse.jface.operation.ModalContext$ModalContextThread.run(ModalContext.java:121)
Contains: Problems encountered while deleting files.
Contains: Could not delete: D:\WindRiver6.8\sbc8548-t9\sbc8548M-S9_vxPrj\default.
Contains: Could not delete 'D:\WindRiver6.8\sbc8548-t9\sbc8548M-S9_vxPrj'.
!SUBENTRY 1 org.eclipse.core.resources 4 273 2016-07-26 09:28:34.807
!MESSAGE Problems encountered while deleting resources.
!SUBENTRY 2 org.eclipse.core.resources 4 273 2016-07-26 09:28:34.807
!MESSAGE Could not delete '/sbc8548M-S9_vxPrj/default'.
!STACK 1
org.eclipse.core.internal.resources.ResourceException: Problems encountered while deleting resources.
	at org.eclipse.core.internal.localstore.FileSystemResourceManager.delete(FileSystemResourceManager.java:257)
	at org.eclipse.core.internal.resources.ResourceTree.internalDeleteFolder(ResourceTree.java:351)
	at org.eclipse.core.internal.resources.ResourceTree.internalDeleteProject(ResourceTree.java:386)
	at org.eclipse.core.internal.resources.ResourceTree.standardDeleteProject(ResourceTree.java:832)
	at org.eclipse.core.internal.resources.Resource.unprotectedDelete(Resource.java:1772)
	at org.eclipse.core.internal.resources.Resource.delete(Resource.java:724)
	at org.eclipse.core.internal.resources.Project.delete(Project.java:309)
	at org.eclipse.ltk.core.refactoring.resource.DeleteResourceChange.perform(DeleteResourceChange.java:130)
	at org.eclipse.ltk.core.refactoring.CompositeChange.perform(CompositeChange.java:278)
	at org.eclipse.ltk.core.refactoring.CompositeChange.perform(CompositeChange.java:278)
	at org.eclipse.ltk.core.refactoring.PerformChangeOperation$1.run(PerformChangeOperation.java:260)
	at org.eclipse.core.internal.resources.Workspace.run(Workspace.java:1800)
	at org.eclipse.ltk.core.refactoring.PerformChangeOperation.executeChange(PerformChangeOperation.java:308)
	at org.eclipse.ltk.internal.ui.refactoring.UIPerformChangeOperation.executeChange(UIPerformChangeOperation.java:92)
	at org.eclipse.ltk.core.refactoring.PerformChangeOperation.run(PerformChangeOperation.java:220)
	at org.eclipse.core.internal.resources.Workspace.run(Workspace.java:1800)
	at org.eclipse.ltk.internal.ui.refactoring.WorkbenchRunnableAdapter.run(WorkbenchRunnableAdapter.java:87)
	at org.eclipse.jface.operation.ModalContext$ModalContextThread.run(ModalContext.java:121)
Contains: Problems encountered while deleting files.
Contains: Could not delete: D:\WindRiver6.8\sbc8548-t9\sbc8548M-S9_vxPrj\default.
!SUBENTRY 3 org.eclipse.core.resources 4 273 2016-07-26 09:28:34.807
!MESSAGE Problems encountered while deleting resources.
!SUBENTRY 4 org.eclipse.core.filesystem 4 273 2016-07-26 09:28:34.807
!MESSAGE Problems encountered while deleting files.
!SUBENTRY 5 org.eclipse.core.filesystem 4 273 2016-07-26 09:28:34.807
!MESSAGE Could not delete: D:\WindRiver6.8\sbc8548-t9\sbc8548M-S9_vxPrj\default.
!SUBENTRY 2 org.eclipse.core.resources 4 273 2016-07-26 09:28:34.807
!MESSAGE Could not delete 'D:\WindRiver6.8\sbc8548-t9\sbc8548M-S9_vxPrj'.

!ENTRY org.eclipse.core.resources 4 273 2016-07-26 09:28:34.807
!MESSAGE Problems encountered while deleting resources.
!SUBENTRY 1 org.eclipse.core.resources 4 273 2016-07-26 09:28:34.807
!MESSAGE Could not delete '/sbc8548M-S9_vxPrj/default'.
!STACK 1
org.eclipse.core.internal.resources.ResourceException: Problems encountered while deleting resources.
	at org.eclipse.core.internal.localstore.FileSystemResourceManager.delete(FileSystemResourceManager.java:257)
	at org.eclipse.core.internal.resources.ResourceTree.internalDeleteFolder(ResourceTree.java:351)
	at org.eclipse.core.internal.resources.ResourceTree.internalDeleteProject(ResourceTree.java:386)
	at org.eclipse.core.internal.resources.ResourceTree.standardDeleteProject(ResourceTree.java:832)
	at org.eclipse.core.internal.resources.Resource.unprotectedDelete(Resource.java:1772)
	at org.eclipse.core.internal.resources.Resource.delete(Resource.java:724)
	at org.eclipse.core.internal.resources.Project.delete(Project.java:309)
	at org.eclipse.ltk.core.refactoring.resource.DeleteResourceChange.perform(DeleteResourceChange.java:130)
	at org.eclipse.ltk.core.refactoring.CompositeChange.perform(CompositeChange.java:278)
	at org.eclipse.ltk.core.refactoring.CompositeChange.perform(CompositeChange.java:278)
	at org.eclipse.ltk.core.refactoring.PerformChangeOperation$1.run(PerformChangeOperation.java:260)
	at org.eclipse.core.internal.resources.Workspace.run(Workspace.java:1800)
	at org.eclipse.ltk.core.refactoring.PerformChangeOperation.executeChange(PerformChangeOperation.java:308)
	at org.eclipse.ltk.internal.ui.refactoring.UIPerformChangeOperation.executeChange(UIPerformChangeOperation.java:92)
	at org.eclipse.ltk.core.refactoring.PerformChangeOperation.run(PerformChangeOperation.java:220)
	at org.eclipse.core.internal.resources.Workspace.run(Workspace.java:1800)
	at org.eclipse.ltk.internal.ui.refactoring.WorkbenchRunnableAdapter.run(WorkbenchRunnableAdapter.java:87)
	at org.eclipse.jface.operation.ModalContext$ModalContextThread.run(ModalContext.java:121)
Contains: Problems encountered while deleting files.
Contains: Could not delete: D:\WindRiver6.8\sbc8548-t9\sbc8548M-S9_vxPrj\default.
!SUBENTRY 2 org.eclipse.core.resources 4 273 2016-07-26 09:28:34.807
!MESSAGE Problems encountered while deleting resources.
!SUBENTRY 3 org.eclipse.core.filesystem 4 273 2016-07-26 09:28:34.807
!MESSAGE Problems encountered while deleting files.
!SUBENTRY 4 org.eclipse.core.filesystem 4 273 2016-07-26 09:28:34.807
!MESSAGE Could not delete: D:\WindRiver6.8\sbc8548-t9\sbc8548M-S9_vxPrj\default.
!SUBENTRY 1 org.eclipse.core.resources 4 273 2016-07-26 09:28:34.807
!MESSAGE Could not delete 'D:\WindRiver6.8\sbc8548-t9\sbc8548M-S9_vxPrj'.

!ENTRY org.eclipse.cdt.core 1 0 2016-07-26 09:30:20.785
!MESSAGE Indexed 'sbc8548m-s9_vx' (17 sources, 36 headers) in 0.57 sec: 1,780 declarations; 7,502 references; 11 unresolved inclusions; 3 syntax errors; 47 unresolved names (0.50%)

!ENTRY org.eclipse.core.jobs 4 2 2016-07-26 13:15:45.838
!MESSAGE An internal error occurred during: "Open Declaration".
!STACK 0
java.lang.NullPointerException
	at org.eclipse.cdt.internal.ui.search.actions.OpenDeclarationsJob.isSameName(OpenDeclarationsJob.java:385)
	at org.eclipse.cdt.internal.ui.search.actions.OpenDeclarationsJob.runOnAST(OpenDeclarationsJob.java:205)
	at org.eclipse.cdt.internal.core.model.ASTCache.runOnAST(ASTCache.java:221)
	at org.eclipse.cdt.internal.ui.editor.ASTProvider.runOnAST(ASTProvider.java:344)
	at org.eclipse.cdt.internal.ui.search.actions.OpenDeclarationsJob.performNavigation(OpenDeclarationsJob.java:139)
	at org.eclipse.cdt.internal.ui.search.actions.OpenDeclarationsJob.run(OpenDeclarationsJob.java:115)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:55)

!ENTRY org.eclipse.help.webapp 4 0 2016-07-26 14:20:07.801
!MESSAGE Error processing help request com.windriver.ide.doc.wr_net_stack/wr_net_stack_programmers_guide_vol3_6.8/html/catalog.css
!STACK 0
org.mortbay.jetty.EofException
	at org.mortbay.jetty.HttpGenerator.flush(HttpGenerator.java:787)
	at org.mortbay.jetty.HttpConnection.flushResponse(HttpConnection.java:635)
	at org.mortbay.jetty.HttpConnection$Output.close(HttpConnection.java:934)
	at org.eclipse.help.internal.webapp.servlet.EclipseConnector.transfer(EclipseConnector.java:170)
	at org.eclipse.help.internal.webapp.servlet.ContentServlet.doGet(ContentServlet.java:42)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:707)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:820)
	at org.eclipse.equinox.http.registry.internal.ServletManager$ServletWrapper.service(ServletManager.java:180)
	at org.eclipse.equinox.http.servlet.internal.ServletRegistration.handleRequest(ServletRegistration.java:90)
	at org.eclipse.equinox.http.servlet.internal.ProxyServlet.processAlias(ProxyServlet.java:111)
	at org.eclipse.equinox.http.servlet.internal.ProxyServlet.service(ProxyServlet.java:67)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:820)
	at org.eclipse.equinox.http.jetty.internal.HttpServerManager$InternalHttpServiceServlet.service(HttpServerManager.java:318)
	at org.mortbay.jetty.servlet.ServletHolder.handle(ServletHolder.java:502)
	at org.mortbay.jetty.servlet.ServletHandler.handle(ServletHandler.java:380)
	at org.mortbay.jetty.servlet.SessionHandler.handle(SessionHandler.java:181)
	at org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:765)
	at org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:152)
	at org.mortbay.jetty.Server.handle(Server.java:324)
	at org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:535)
	at org.mortbay.jetty.HttpConnection$RequestHandler.headerComplete(HttpConnection.java:865)
	at org.mortbay.jetty.HttpParser.parseNext(HttpParser.java:540)
	at org.mortbay.jetty.HttpParser.parseAvailable(HttpParser.java:213)
	at org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:404)
	at org.mortbay.io.nio.SelectChannelEndPoint.run(SelectChannelEndPoint.java:409)
	at org.mortbay.thread.QueuedThreadPool$PoolThread.run(QueuedThreadPool.java:520)
Caused by: java.io.IOException: 远程主机强迫关闭了一个现有的连接。
	at sun.nio.ch.SocketDispatcher.writev0(Native Method)
	at sun.nio.ch.SocketDispatcher.writev(SocketDispatcher.java:37)
	at sun.nio.ch.IOUtil.write(IOUtil.java:164)
	at sun.nio.ch.SocketChannelImpl.write0(SocketChannelImpl.java:331)
	at sun.nio.ch.SocketChannelImpl.write(SocketChannelImpl.java:354)
	at java.nio.channels.SocketChannel.write(SocketChannel.java:360)
	at org.mortbay.io.nio.ChannelEndPoint.flush(ChannelEndPoint.java:232)
	at org.mortbay.io.nio.SelectChannelEndPoint.flush(SelectChannelEndPoint.java:211)
	at org.mortbay.jetty.HttpGenerator.flush(HttpGenerator.java:710)
	... 25 more

!ENTRY org.eclipse.help.webapp 4 0 2016-07-26 14:20:07.808
!MESSAGE Error processing help request com.windriver.ide.doc.wr_net_stack/wr_net_stack_programmers_guide_vol3_6.8/html/wr.css
!STACK 0
org.mortbay.jetty.EofException
	at org.mortbay.jetty.HttpGenerator.flush(HttpGenerator.java:787)
	at org.mortbay.jetty.HttpGenerator.complete(HttpGenerator.java:674)
	at org.mortbay.jetty.HttpConnection.commitResponse(HttpConnection.java:614)
	at org.mortbay.jetty.HttpConnection$Output.close(HttpConnection.java:932)
	at org.eclipse.help.internal.webapp.servlet.EclipseConnector.transfer(EclipseConnector.java:170)
	at org.eclipse.help.internal.webapp.servlet.ContentServlet.doGet(ContentServlet.java:42)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:707)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:820)
	at org.eclipse.equinox.http.registry.internal.ServletManager$ServletWrapper.service(ServletManager.java:180)
	at org.eclipse.equinox.http.servlet.internal.ServletRegistration.handleRequest(ServletRegistration.java:90)
	at org.eclipse.equinox.http.servlet.internal.ProxyServlet.processAlias(ProxyServlet.java:111)
	at org.eclipse.equinox.http.servlet.internal.ProxyServlet.service(ProxyServlet.java:67)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:820)
	at org.eclipse.equinox.http.jetty.internal.HttpServerManager$InternalHttpServiceServlet.service(HttpServerManager.java:318)
	at org.mortbay.jetty.servlet.ServletHolder.handle(ServletHolder.java:502)
	at org.mortbay.jetty.servlet.ServletHandler.handle(ServletHandler.java:380)
	at org.mortbay.jetty.servlet.SessionHandler.handle(SessionHandler.java:181)
	at org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:765)
	at org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:152)
	at org.mortbay.jetty.Server.handle(Server.java:324)
	at org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:535)
	at org.mortbay.jetty.HttpConnection$RequestHandler.headerComplete(HttpConnection.java:865)
	at org.mortbay.jetty.HttpParser.parseNext(HttpParser.java:540)
	at org.mortbay.jetty.HttpParser.parseAvailable(HttpParser.java:213)
	at org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:404)
	at org.mortbay.io.nio.SelectChannelEndPoint.run(SelectChannelEndPoint.java:409)
	at org.mortbay.thread.QueuedThreadPool$PoolThread.run(QueuedThreadPool.java:520)
Caused by: java.io.IOException: 远程主机强迫关闭了一个现有的连接。
	at sun.nio.ch.SocketDispatcher.writev0(Native Method)
	at sun.nio.ch.SocketDispatcher.writev(SocketDispatcher.java:37)
	at sun.nio.ch.IOUtil.write(IOUtil.java:164)
	at sun.nio.ch.SocketChannelImpl.write0(SocketChannelImpl.java:331)
	at sun.nio.ch.SocketChannelImpl.write(SocketChannelImpl.java:354)
	at java.nio.channels.SocketChannel.write(SocketChannel.java:360)
	at org.mortbay.io.nio.ChannelEndPoint.flush(ChannelEndPoint.java:232)
	at org.mortbay.io.nio.SelectChannelEndPoint.flush(SelectChannelEndPoint.java:211)
	at org.mortbay.jetty.HttpGenerator.flush(HttpGenerator.java:710)
	... 26 more

!ENTRY org.eclipse.help.webapp 4 0 2016-07-26 14:44:58.943
!MESSAGE Error processing help request com.windriver.ide.doc.wr_vxworks_platforms/vxworks_and_middleware_component_reference_6.8/html/wrx.css
!STACK 0
org.mortbay.jetty.EofException
	at org.mortbay.jetty.HttpGenerator.flush(HttpGenerator.java:787)
	at org.mortbay.jetty.HttpGenerator.complete(HttpGenerator.java:674)
	at org.mortbay.jetty.HttpConnection.commitResponse(HttpConnection.java:614)
	at org.mortbay.jetty.HttpConnection$Output.close(HttpConnection.java:932)
	at org.eclipse.help.internal.webapp.servlet.EclipseConnector.transfer(EclipseConnector.java:170)
	at org.eclipse.help.internal.webapp.servlet.ContentServlet.doGet(ContentServlet.java:42)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:707)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:820)
	at org.eclipse.equinox.http.registry.internal.ServletManager$ServletWrapper.service(ServletManager.java:180)
	at org.eclipse.equinox.http.servlet.internal.ServletRegistration.handleRequest(ServletRegistration.java:90)
	at org.eclipse.equinox.http.servlet.internal.ProxyServlet.processAlias(ProxyServlet.java:111)
	at org.eclipse.equinox.http.servlet.internal.ProxyServlet.service(ProxyServlet.java:67)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:820)
	at org.eclipse.equinox.http.jetty.internal.HttpServerManager$InternalHttpServiceServlet.service(HttpServerManager.java:318)
	at org.mortbay.jetty.servlet.ServletHolder.handle(ServletHolder.java:502)
	at org.mortbay.jetty.servlet.ServletHandler.handle(ServletHandler.java:380)
	at org.mortbay.jetty.servlet.SessionHandler.handle(SessionHandler.java:181)
	at org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:765)
	at org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:152)
	at org.mortbay.jetty.Server.handle(Server.java:324)
	at org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:535)
	at org.mortbay.jetty.HttpConnection$RequestHandler.headerComplete(HttpConnection.java:865)
	at org.mortbay.jetty.HttpParser.parseNext(HttpParser.java:540)
	at org.mortbay.jetty.HttpParser.parseAvailable(HttpParser.java:213)
	at org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:404)
	at org.mortbay.io.nio.SelectChannelEndPoint.run(SelectChannelEndPoint.java:409)
	at org.mortbay.thread.QueuedThreadPool$PoolThread.run(QueuedThreadPool.java:520)
Caused by: java.io.IOException: 远程主机强迫关闭了一个现有的连接。
	at sun.nio.ch.SocketDispatcher.writev0(Native Method)
	at sun.nio.ch.SocketDispatcher.writev(SocketDispatcher.java:37)
	at sun.nio.ch.IOUtil.write(IOUtil.java:164)
	at sun.nio.ch.SocketChannelImpl.write0(SocketChannelImpl.java:331)
	at sun.nio.ch.SocketChannelImpl.write(SocketChannelImpl.java:354)
	at java.nio.channels.SocketChannel.write(SocketChannel.java:360)
	at org.mortbay.io.nio.ChannelEndPoint.flush(ChannelEndPoint.java:232)
	at org.mortbay.io.nio.SelectChannelEndPoint.flush(SelectChannelEndPoint.java:211)
	at org.mortbay.jetty.HttpGenerator.flush(HttpGenerator.java:710)
	... 26 more
